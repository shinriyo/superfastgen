
=== Complete AST for source ===
Node: program = 'import 'package:freezed_annotation/freezed_annotation.dart';

part 'user.freezed.dart';
part 'user.g.dart';

@freezed
class AppUser with _$AppUser {
  const factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUser;

  factory AppUser.fromJson(Map<String, dynamic> json) =>
      _$AppUserFromJson(json);
}

@freezed
class UserProfile with _$UserProfile {
  const factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfile;

  factory UserProfile.fromJson(Map<String, dynamic> json) =>
      _$UserProfileFromJson(json);
}

@freezed
class AuthState with _$AuthState {
  const factory AuthState.initial() = _Initial;
  const factory AuthState.loading() = _Loading;
  const factory AuthState.authenticated(AppUser user) = _Authenticated;
  const factory AuthState.unauthenticated() = _Unauthenticated;
  const factory AuthState.error(String message) = _Error;
}
'
  Node: import_or_export = 'import 'package:freezed_annotation/freezed_annotation.dart';'
    Node: library_import = 'import 'package:freezed_annotation/freezed_annotation.dart';'
      Node: import_specification = 'import 'package:freezed_annotation/freezed_annotation.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:freezed_annotation/freezed_annotation.dart''
          Node: uri = ''package:freezed_annotation/freezed_annotation.dart''
            Node: string_literal = ''package:freezed_annotation/freezed_annotation.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: part_directive = 'part 'user.freezed.dart';'
    Node: part = 'part'
    Node: uri = ''user.freezed.dart''
      
=== Complete AST for source ===
Node: Node: string_literalprogram = ' = ''user.freezed.dart'import 'package:freezed_annotation/freezed_annotation.dart';

part 'user.freezed.dart';
part 'user.g.dart';

@freezed
class AppUser with _$AppUser {
  const factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUser;

  factory AppUser.fromJson(Map<String, dynamic> json) =>
      _$AppUserFromJson(json);
}

@freezed
class UserProfile with _$UserProfile {
  const factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfile;

  factory UserProfile.fromJson(Map<String, dynamic> json) =>
      _$UserProfileFromJson(json);
}

@freezed
class AuthState with _$AuthState {
  const factory AuthState.initial() = _Initial;
  const factory AuthState.loading() = _Loading;
  const factory AuthState.authenticated(AppUser user) = _Authenticated;
  const factory AuthState.unauthenticated() = _Unauthenticated;
  const factory AuthState.error(String message) = _Error;
}
'
'
          Node: Node: 'import_or_export = ' = ''import 'package:freezed_annotation/freezed_annotation.dart';'
'
            Node: Node: 'library_import = ' = ''import 'package:freezed_annotation/freezed_annotation.dart';'
'
          Node: Node: ;import_specification = ' = ';import 'package:freezed_annotation/freezed_annotation.dart';'
'
          Node: Node: part_directiveimport = ' = 'part 'user.g.dart';import'
'
            Node: Node: partconfigurable_uri = ' = 'part'package:freezed_annotation/freezed_annotation.dart''
'
              Node: Node: uriuri = ' = ''user.g.dart''package:freezed_annotation/freezed_annotation.dart''
'
                  Node: Node: string_literalstring_literal = ' = ''user.g.dart''package:freezed_annotation/freezed_annotation.dart''
'
              Node:         'Node:  = ''' = ''
'              '
Node:         'Node:  = ''' = ''
'        '
Node:     ;Node:  = ';; = ''
;'
    Node: Node: part_directiveclass_definition = ' = 'part 'user.freezed.dart';@freezed
class AppUser with _$AppUser {
  const factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUser;

  factory AppUser.fromJson(Map<String, dynamic> json) =>
      _$AppUserFromJson(json);
}'
'
    Node:     partNode:  = 'annotationpart = ''
@freezed'
          Node: Node: uri@ = ' = ''user.freezed.dart'@'
'
            Node: Node: string_literalidentifier = ' = ''user.freezed.dart'freezed'
'
            Node: Node: 'class = ' = ''class'
'
            Node: Node: identifier' = ' = 'AppUser''
'
        Node: Node: superclass; = ' = 'with _$AppUser;'
'
        Node: Node: mixinspart_directive = ' = 'with _$AppUserpart 'user.g.dart';'
'
            Node: Node: withpart = ' = 'withpart'
'
            Node: Node: type_identifieruri = ' = '_$AppUser'user.g.dart''
'
          Node: Node: class_bodystring_literal = ' = '{
  const factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUser;

  factory AppUser.fromJson(Map<String, dynamic> json) =>
      _$AppUserFromJson(json);
}'user.g.dart''
'
              Node: Node: {' = ' = '{''
'
              Node: Node: declaration' = ' = 'const factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUser''
'
            Node: Node: redirecting_factory_constructor_signature; = ' = 'const factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUser;'
'
            Node: Node: const_builtinclass_definition = ' = 'const@freezed
class AppUser with _$AppUser {
  const factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUser;

  factory AppUser.fromJson(Map<String, dynamic> json) =>
      _$AppUserFromJson(json);
}'
'
              Node: Node: factoryannotation = ' = 'factory@freezed'

=== Complete AST for source ===
          '
Node: Node:       identifierprogram = 'Node: AppUser = ''
@import 'package:freezed_annotation/freezed_annotation.dart';

part 'payment.freezed.dart';
part 'payment.g.dart';

@freezed
class Payment with _$Payment {
  const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Payment;

  factory Payment.fromJson(Map<String, dynamic> json) =>
      _$PaymentFromJson(json);
}

@freezed
class PaymentCreateRequest with _$PaymentCreateRequest {
  const factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequest;

  factory PaymentCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$PaymentCreateRequestFromJson(json);
}

@freezed
class PaymentResult with _$PaymentResult {
  const factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _Success;

  const factory PaymentResult.failed({
    required String errorMessage,
  }) = _Failed;

  const factory PaymentResult.cancelled() = _Cancelled;
}

@freezed
class PaymentState with _$PaymentState {
  const factory PaymentState.initial() = _StateInitial;
  const factory PaymentState.loading() = _StateLoading;
  const factory PaymentState.success(Payment payment) = _StateSuccess;
  const factory PaymentState.failed(String errorMessage) = _StateFailed;
}
           = 'Node: '
formal_parameter_list@ = '  ({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  })'
'
      Node:             import_or_exportNode: Node: ( = ' = 'identifier(import 'package:freezed_annotation/freezed_annotation.dart';'
 = ''
freezed            '
Node:     optional_formal_parameters     = 'Node: {
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }Node: '
library_importclass               = 'Node: import 'package:freezed_annotation/freezed_annotation.dart'; = '{'
 = 'class{      '
'
Node:                   Node: import_specificationrequiredNode:  = ' = 'requiredidentifier'
import 'package:freezed_annotation/freezed_annotation.dart'; = '              '
Node: AppUserformal_parameter         = ''
Node: String id    '
importNode:  = '                superclassNode: importtype_identifier = ' = ''
Stringwith _$AppUser'
        '
                Node: Node:       identifierconfigurable_uri = 'Node: id = ''
mixins'package:freezed_annotation/freezed_annotation.dart'              '
Node:           , = ' = 'Node: ,with _$AppUser'
uri'
               = 'Node:         'package:freezed_annotation/freezed_annotation.dart'required'
 = '            requiredNode: '
Node: with              string_literalNode:  = 'formal_parameterwith = ' = 'String displayName'
'
'package:freezed_annotation/freezed_annotation.dart'                        '
Node: Node: type_identifiertype_identifier = ' = 'String_$AppUser'
'
                              Node:     identifierNode:  = 'class_bodydisplayName = ''
{
  const factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUser;

  factory AppUser.fromJson(Map<String, dynamic> json) =>
      _$AppUserFromJson(json);
}              Node: Node: ', = ' = '','
'
                            Node: Node: 'formal_parameter = ' = ''String? email'
'
                        Node: Node: ;type_identifier = ' = ';String'
'
                  Node: Node: part_directivenullable_type = ' = 'part 'payment.freezed.dart';?'
'
                      Node: Node: part? = ' = 'part?'
    Node: '
uri'
 = '                'payment.freezed.dart'Node:       identifierNode: '
 = '      {email = ''
Node: {string_literal               = ''
Node: 'payment.freezed.dart'      ,Node: '
 = 'declaration        , = ''
const factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUserNode: '
'               = 'Node: '        formal_parameterNode:  = ''
redirecting_factory_constructor_signatureString? photoURL = '        '
Node: const factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUser                '
Node: '          type_identifier = 'Node:  = 'const_builtinString' = ''
'
const                    '
Node: Node:           nullable_typeNode:  = ';factory? = ' = ';'
factory'
'
                              Node: Node: Node: identifier? = ' = 'part_directiveAppUser? = ''
'
part 'payment.g.dart';                          Node: Node: '
formal_parameter_listidentifier = ' = '    ({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  })Node: photoURL'
'
part                          Node: Node: (, = '('
             = 'Node:  = ',optional_formal_parameters'
part = '              {
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }'
'
Node:                   formal_parameterNode:  = 'Node: {String? statusMessage = 'uri'
{ = ''
                'payment.g.dart'Node:               type_identifierNode:  = ''
requiredString = ''
required                      '
Node: Node:               nullable_typestring_literalNode:  = ' = '?'payment.g.dart''
'
                          Node: Node: ?' = ' = '?''
'
formal_parameter                        Node: Node: identifier = ''String id = ''
 = ''statusMessage                '
Node: '
    type_identifierNode:  = '              String;'
 = '                ;Node: Node: identifier'
 = ',  id = ''
Node: ,class_definition              '
Node:  = ',               = '@freezed
class Payment with _$Payment {
  const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Payment;

  factory Payment.fromJson(Map<String, dynamic> json) =>
      _$PaymentFromJson(json);
},Node: '
'
annotation                   = 'Node: Node: required@Default('line') = 'annotationrequired'
'
 = '                              @freezedNode: Node: '
formal_parameter@       = ' = 'String displayNameNode: @'
'
@                                Node: Node: type_identifier = ' = 'identifier@String'
'
 = '      Default                Node: Node: '
identifieridentifier = '                 = 'displayNameNode: '
freezedarguments               = ''
Node: ('line'),     = ''
,Node: '
class                                Node: Node:  = '(formal_parameter = 'class = ''
(String? email    '
'
Node:                 identifierNode:                   type_identifier = ' = 'Node: StringPaymentargument'
'
 = '                    Node: Node: 'line'nullable_typesuperclass'
 = ' = '?                    with _$Payment'
'
Node:                         Node: string_literalNode: ? = ' = ''line'?
=== Complete AST for source ===
'
'
Node:                                       Node: programidentifierNode:  = ' = ''import 'package:freezed_annotation/freezed_annotation.dart';

part 'event.freezed.dart';
part 'event.g.dart';

@freezed
class Event with _$Event {
  const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event;

  factory Event.fromJson(Map<String, dynamic> json) => _$EventFromJson(json);
}

@freezed
class EventCreateRequest with _$EventCreateRequest {
  const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest;

  factory EventCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventCreateRequestFromJson(json);
}

@freezed
class EventUpdateRequest with _$EventUpdateRequest {
  const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest;

  factory EventUpdateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventUpdateRequestFromJson(json);
}

@freezed
class EventListState with _$EventListState {
  const factory EventListState.initial() = _Initial;
  const factory EventListState.loading() = _Loading;
  const factory EventListState.loaded(List<Event> events) = _Loaded;
  const factory EventListState.error(String message) = _Error;
}

@freezed
class EventDetailState with _$EventDetailState {
  const factory EventDetailState.initial() = _DetailInitial;
  const factory EventDetailState.loading() = _DetailLoading;
  const factory EventDetailState.loaded(Event event) = _DetailLoaded;
  const factory EventDetailState.error(String message) = _DetailError;
}
email = ''
'
'                Node: '
,Node:  = 'import_or_export,                      '
 = 'Node: import 'package:freezed_annotation/freezed_annotation.dart';              ''
Node:  = 'formal_parameter     = ''String? photoURLNode: '
'
library_import                 = 'Node: import 'package:freezed_annotation/freezed_annotation.dart';                  type_identifierNode:  = ''
String)'
       = '                )Node: '
nullable_typeNode:  = 'import_specification?               = ''
Node: import 'package:freezed_annotation/freezed_annotation.dart';                  formal_parameterNode: '
? = ' = '        String provider?'
Node: '
import                                 = 'Node: Node: importidentifier'
 = 'type_identifierphotoURL = ''
        String              Node: Node: '
,configurable_uri = '                 = ',Node: 'package:freezed_annotation/freezed_annotation.dart'mixinsidentifier'
 = ' = 'with _$Payment          '
providerNode:         '
Node: '
withuri = '              with = 'Node: '
formal_parameter'package:freezed_annotation/freezed_annotation.dart' = '        '
String? statusMessageNode:             type_identifierNode:               '
 = 'string_literalNode: _$Payment = ''
                'package:freezed_annotation/freezed_annotation.dart'Node:     '
Node:               type_identifierclass_bodyNode:  = ' = 'String'{
  const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Payment;

  factory Payment.fromJson(Map<String, dynamic> json) =>
      _$PaymentFromJson(json);
}'
'
 = '                '      Node: '
Node: nullable_type{ = ' = '?{'
,'
                                       = 'Node: Node: ,declaration'
?
=== Complete AST for source ===
 = '               = '?Node: '
annotationNode:  = 'const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Payment@Default(false)                '
Node: '
identifierNode:                         Node:  = 'program'statusMessage = ''
redirecting_factory_constructor_signature = 'Node: import 'package:freezed_annotation/freezed_annotation.dart';

part 'payment.freezed.dart';
part 'payment.g.dart';

@freezed
class Payment with _$Payment {
  const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Payment;

  factory Payment.fromJson(Map<String, dynamic> json) =>
      _$PaymentFromJson(json);
}

@freezed
class PaymentCreateRequest with _$PaymentCreateRequest {
  const factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequest;

  factory PaymentCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$PaymentCreateRequestFromJson(json);
}

@freezed
class PaymentResult with _$PaymentResult {
  const factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _Success;

  const factory PaymentResult.failed({
    required String errorMessage,
  }) = _Failed;

  const factory PaymentResult.cancelled() = _Cancelled;
}

@freezed
class PaymentState with _$PaymentState {
  const factory PaymentState.initial() = _StateInitial;
  const factory PaymentState.loading() = _StateLoading;
  const factory PaymentState.success(Payment payment) = _StateSuccess;
  const factory PaymentState.failed(String errorMessage) = _StateFailed;
}
' = ''
              '
        const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _PaymentNode:   ;'
Node:  = '          ;import_or_exportNode: '
Node:  = '@import 'package:freezed_annotation/freezed_annotation.dart';const_builtin'
 = ',@     = ' = 'Node: '
constlibrary_import                 = 'Node: '
,identifier          '
 = 'Node:               Defaultimport 'package:freezed_annotation/freezed_annotation.dart';Node: '
factoryannotation                 = 'Node: factoryarguments'
   = 'Node:  = '(false)part_directive@Default('line') = ''
'
part 'event.freezed.dart';                                  Node: '
@Node:  = '(@          '
'
                          Node: Node: partidentifierNode:  = 'identifier = 'part = 'Node: '
 = 'import_specification     = 'Node: import 'package:freezed_annotation/freezed_annotation.dart';('
Payment'
                  uriNode:  = 'Default'event.freezed.dart''
'
argument                      '
        Node:  = 'string_literalNode: false          '
Node: Node: formal_parameter_list                     = 'Node: ({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  })importfalse'
 = ' = '            falseargumentsNode:  = 'import'
'event.freezed.dart''
'
                                      Node: Node: Node: 'false = '(' = ' = ''
(        false'
Node: '
'configurable_uri = ' = '''package:freezed_annotation/freezed_annotation.dart''
    Node:  = ';('line') = ''
'
;                  '
Node:                                         (  Node:  = 'optional_formal_parameters(Node:  = ''
Node: {
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }                  part_directiveNode: '
argument = ' = 'uri'line' = 'part 'event.g.dart';'package:freezed_annotation/freezed_annotation.dart''
'
'
Node:                 Node: )string_literal                     = 'Node:  = 'string_literal = ''line'Node: 'package:freezed_annotation/freezed_annotation.dart''
part)                                    '
Node: Node: {               = ''
 = ''Node: part{formal_parameter'
'
 = '                   = '              'Node: '
requiredbool isEmailVerified                       = 'Node: required'Node: '
 = 'Node: 'uri                '
 = ''
                  Node: Node: 'event.g.dart')               = ''Node: type_identifier'
 = ')      '
Node: boolstring_literal'
               = 'Node: 'event.g.dart'                formal_parameterNode:  = 'identifierString provider = ''
isEmailVerified = '                '
'Node:         type_identifier'
Node:  = '              'Node:  = 'String''
''
                 = '        Node: 'Node: '
formal_parameter' = ' = ''
''
String id            Node: identifierNode: ;; = ' = '; = ''
;provider  '
'
Node:               class_definition                 = 'Node:               @freezed
class Event with _$Event {
  const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event;

  factory Event.fromJson(Map<String, dynamic> json) => _$EventFromJson(json);
}Node: '
'
type_identifier    Node: Node:    = ',StringNode:  = 'part_directive, = ''
part 'payment.freezed.dart';,'
               = 'Node: annotation,formal_parameter = '@freezed = ''
'
'
          Node:               @                 = 'Node: @annotationNode: Node:  = 'partidentifier@Default(false) = ''
 = 'part                '
idNode:     @Node: '
uri = ' = '@'payment.freezed.dart''
'
                              Node:       Node: Node: identifierstring_literal = ' = 'Default'payment.freezed.dart''
'
                ,Node:         argumentsNode:  = '' = '(false), = ''
''
                  '
Node:               (         = 'Node: (Node: '
'required                   = ' = 'Node: 'requiredargument'
 = ''
    false              Node: Node: '
;formal_parameter = '                     = 'Node: String eventIdfalse;'
'
 = '                false  '
Node: Node:                       part_directiveNode: type_identifier = ' = 'part 'payment.g.dart';falseString'
'
 = '    falseNode: '
part                                   = 'Node: Node: part)identifier'
 = ' = '    )Node: '
urieventId               = ''
Node: 'payment.g.dart'              formal_parameter'
 = 'Node:       bool isEmailVerifiedNode: '
,string_literal                 = ' = ''payment.g.dart','
Node: '
type_identifier                       = 'Node: boolNode: ''
 = 'required                'Node: '
 = 'identifierrequired = '        isEmailVerifiedNode: '
'
'               = 'Node:               ,Node: ' = ''
,formal_parameter    '
Node:  = '              ;Node:  = 'formal_parameterString userId; = ''
DateTime? createdAt'
  '
Node:                                 class_definitionNode:  = 'type_identifierDateTime? createdAt = 'Node: DateTimetype_identifier'
 = '@freezed
class Payment with _$Payment {
  const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Payment;

  factory Payment.fromJson(Map<String, dynamic> json) =>
      _$PaymentFromJson(json);
}                StringNode: '
'
nullable_type                     = 'Node: ?identifierNode: '
 = 'annotation                  userIdNode: '
? = '               = 'Node: @freezed,'
? = '      '
,Node:                 '
Node: @              identifierNode:  = ' = 'requiredcreatedAt@ = ''
required'
              '
Node:                     ,Node:  = 'Node: formal_parameter, = ''
int amountidentifier              '
Node:  = '                formal_parameterNode:  = 'freezed'
DateTime? updatedAt'
'
      type_identifierNode:                  = 'identifierNode: int = 'type_identifierfreezed'
'
 = '                DateTime    Node: Node: identifierclass'
 = ' = '                classamount'
'
Node:                   Node: nullable_typeNode: identifier, = ' = '?Event'
'
                      Node: Node: ?superclass = ' = 'with _$Event'
       = ','
              Node: Node: mixinsrequired = ' = 'required'
              Node: formal_parameter = 'String currency    '
Node: class                Node: type_identifier = 'String = ''
class?'
                    Node: Node: identifieridentifier = ' = ''
Payment'
'
                                    Node: Node: identifierNode: superclasstype_identifier = ' = 'createdAtwith _$Payment = ''
'
DateTime                    Node: Node: '
mixins, = '                with _$Payment = ''
Node: ,        '
nullable_typeNode:               withNode:  = 'formal_parameterwith = ''
DateTime? updatedAt'
 = '                ?Node: '
type_identifier                   = 'Node: DateTime?'
 = '                ?Node: '
nullable_type                 = 'Node: ?identifier'
 = '                  updatedAtNode: '
?               = 'Node: ?,'
 = '                ,Node: '
identifier               = 'Node: updatedAt}'
 = '              }Node: '
,             = 'Node: ,)'
 = '              )Node: '
}           = 'Node: }='
 = '            =Node: '
)           = 'Node: )type_identifier'
 = '          _AppUserNode: '
=       = 'Node: =;'
 = '                  with _$EventNode: ;'
type_identifierNode:          = 'Node: type_identifier_AppUserwith'
 = ' = '      withNode: '
_$Payment;        '
Node:  = 'type_identifier;     = ''
Node: _$Event      '
class_bodyNode:     method_signature = 'Node:  = 'class_body{
  const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Payment;

  factory Payment.fromJson(Map<String, dynamic> json) =>
      _$PaymentFromJson(json);
}factory AppUser.fromJson(Map<String, dynamic> json)'
 = ''
{
  const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event;

  factory Event.fromJson(Map<String, dynamic> json) => _$EventFromJson(json);
}      '
        Node:       Node: Node: {factory_constructor_signature{ = ' = ' = 'factory AppUser.fromJson(Map<String, dynamic> json){{'
'
'
                Node:       factoryNode:  = 'Node: declarationfactorydeclaration'
 = ' = '          const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _EventNode: const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Payment'
identifier'
         = 'Node:         redirecting_factory_constructor_signatureAppUser = 'Node: '
const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Eventredirecting_factory_constructor_signature          '
Node:  = '          .Node:  = 'const_builtin. = ''
constcurrency          const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Payment'
Node: '
identifier               = '          fromJsonNode: '
Node: ,          const_builtinNode:  = ' = 'formal_parameter_listconst = ',(Map<String, dynamic> json)'
'
'
                        Node:             factoryNode:  = 'Node: factory('
required = ' = '          (Node: required'
identifier'
 = '            PaymentNode: '
formal_parameter                         = 'Node: Map<String, dynamic> jsonformal_parameter_list'
'
 = '                        ({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  })Node: Node: '
type_identifierfactory = '            MapNode: '
( = '               = 'factory(Node: '
'
type_arguments             = 'Node: <String, dynamic>          '
optional_formal_parametersNode:                 identifierNode: Node:  = '<formal_parameter = ' = 'EventString status<'
'
                 = 'Node:       '
Node: '
method_signature           = 'Node: factory AppUser.fromJson(Map<String, dynamic> json)formal_parameter_list'
 = '        ({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  })Node: '
factory_constructor_signature                 = '            Node: Node: type_identifier( = ' = 'String('
'
                            Node: Node: ,optional_formal_parameters = ' = ',{
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }'
'
{
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }                              Node: Node: type_identifier{ = ' = 'dynamic{'
'
              '
                type_identifier               = 'Node: Node: > = '{> = ''
{factory AppUser.fromJson(Map<String, dynamic> json)              '
StringNode:               Node: '
'
Node:                           identifierNode: Node: identifier = 'statusfactory = 'required = 'json = 'factoryrequired'
'
'
                        Node: Node: formal_parameteridentifier = ' = 'String id'
AppUser            '
'
          Node:               )Node:  = 'Node: )required'
 = '      requiredNode: ,function_body'
 = '              . = ' = ',                '
.Node: =>
      _$AppUserFromJson(json);Node: '
formal_parametertype_identifier         = 'Node: '
=>               = 'String idNode:  = 'comment=>'
'
                          Node:  = 'StringNode: // pending, succeeded, failed, cancelled'
'
identifier                 = 'Node:                         Node: Node: fromJsonidentifier'
// = ' = 'identifier//type_identifier'
 = ' = '              StringNode: '
required                 = 'Node:           identifierNode: id = 'formal_parameter_list'
id = '              '
_$AppUserFromJsonNode: ,(Map<String, dynamic> json)'
required'
                      Node:             Node: Node: ( = ' = ','
,selector              '
Node:  = 'formal_parameter(json)              '
Node:  = ' = 'String paymentMethod('
required'
                 = 'required'
,Node: '
type_identifier                           = 'Node: Stringrequired'
 = '              required                          Node: Node: Node: formal_parameterformal_parameter = ' = 'String title'
Map<String, dynamic> json'
argument_partNode:               '
Node: identifiertype_identifier = ' = '                paymentMethodNode:  = ''
(json)type_identifier              '
 = 'Node:             formal_parameterString = ''
              Map                Node: '
Node: Node: ,              identifierString eventIdarguments = 'Node:  = ',title'
 = 'type_arguments'
              (json)              Node: '
Node: '
,               = ' = ',<String, dynamic>formal_parameter'
Node:                 (Node:               type_identifierNode:  = 'requiredString = ' = ' = ''
required('
'
'
                              String? stripeSessionIdNode:               '
Node:                 formal_parameterNode:                  = 'Node: String description<'
 = '<identifierNode: type_identifier'
argument = ' = ' = 'Stringjson'
eventId                                Node: Node: nullable_typetype_identifier = ' = '                '
String?'
'
Node: '
type_identifier                 = '                Node: String,'
Node: identifier                 = ' = 'Node: jsonidentifier               = ''
Node: description,'
 = '                            Node: ,,,                  '
Node: '
)                 = 'Node:               )type_identifier'
Node:  = '        Node: dynamicNode: '
;                required = ' = ' = 'Node: ,? = '?'
;>              '
Node:  = 'required       = 'Node: '
>required'
required                '
'
                            }Node: Node:  = 'Node: formal_parameter               = 'identifierDateTime startDate = 'Node: jsonidentifier'
 = 'formal_parameterstripeSessionId = '                String userIdNode: '
type_identifier'
                 = ''
DateTime              '
Node: }                type_identifierNode:  = ''
StringNode: '
            identifier                Node: identifier = '  userId,'
Node:  = '              ,Node: '
class_definition,Node:  = '              , = ''
Node:               Node: formal_parameter = 'required = 'startDateString? stripePaymentIntentId = ''
required)'
                @freezed
class UserProfile with _$UserProfile {
  const factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfile;

  factory UserProfile.fromJson(Map<String, dynamic> json) =>
      _$UserProfileFromJson(json);
}               = ''
)Node: Node: formal_parametertype_identifier = ' = 'int amountString'
'
'
                                Node: Node: type_identifier              nullable_type'
 = ' = 'int?'
      Node:                 Node: Node: ,identifier = ' = ''
amount    '
,function_body'
               = 'Node:               ,Node:  = 'requiredNode: =>
      _$AppUserFromJson(json);, = ''
required'
                                '
Node: Node:         requiredNode:  = 'annotationrequired               = ''
@freezed              '
Node: Node: formal_parameterformal_parameter = '      String currency = '=>'
? = '                DateTime endDateNode:  = 'type_identifier'
? = '                '
Node: =>Node:                 @Node: '
identifier = 'type_identifier         = 'Node: stripePaymentIntentIdidentifier'
 = '              _$AppUserFromJsonNode: @String = ',DateTime'
'
'
'
 = '                      Node: ,Node: '
identifieridentifier               = 'Node: currency = '                        formal_parameter = ''
Node: String? errorMessagefreezedidentifier'
               = '                Node: endDateNode: '
'
Node:                   Node: Node: class, = 'type_identifierclass = ''
selector,,'
 = '                  Node: (json)'
 = ' = 'Node: String,'
identifier'
required                              Node: Node:  = 'requiredrequired           = ''
nullable_typeNode: UserProfile = ''
?argument_part     = '(json)'
Node: '
               = 'superclassrequired = 'Node: '
with _$UserProfile'
                    formal_parameterNode:             Node: mixins = ' = '                  with _$UserProfileString location'
'
Node:         ?Node:  = 'with? = ''
formal_parameter                Node: Node: witharguments = ' = ''
(json)        '
String statusNode: type_identifier'
type_identifier                 = '              _$UserProfileNode:                 identifierNode:  = '( = ''
 = 'errorMessage    ('
Node: '
Stringclass_body               = ''
              {
  const factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfile;

  factory UserProfile.fromJson(Map<String, dynamic> json) =>
      _$UserProfileFromJson(json);
}                Node: '
Node: argumentidentifier = 'Node: jsontype_identifier'
Node:  = '                ,      Node: location = 'identifier, = ''
json              Node: '
'
{ = '               = 'Node: {)'
 = 'Node: )      Node: String              ,declarationNode:  = 'formal_parameter'
const factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfile = ' = ''
DateTime? createdAt,        '
Node: '
'
        ;Node:                 redirecting_factory_constructor_signature = ' = 'Node: ;const factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfileidentifier'
               = '                status'
          '
Node: Node:               requiredNode:  = ',type_identifier = 'required,'
'
 = '              Node:               DateTimeNode: Node: '
commentformal_parameter = ' = '// pending, succeeded, failed, cancelledint capacity'
      '
                const_builtin                Node: Node: // = ' = 'const//Node: nullable_type'
'
} = '                        ? = 'Node: '
required} = ''
required                  Node: Node: factorytype_identifierNode:  = ' = 'intfactory'
                                  '
Node: '
identifierclass_definition = '          Node: capacity              Node:  = 'Node: formal_parameter@freezed
class UserProfile with _$UserProfile {
  const factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfile;

  factory UserProfile.fromJson(Map<String, dynamic> json) =>
      _$UserProfileFromJson(json);
}identifier'
 = ' = '    UserProfile'
'
? = 'String paymentMethod          ?Node: '
formal_parameter_list'
                 = 'Node: ({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  })type_identifier'
 = 'String                              Node: Node: annotation             = ',@freezedNode:  = '('
 = 'Node: (,'
      '
            '
Node: Node: @optional_formal_parameters = ' = '@              {
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }'
'
identifier                    Node: Node: identifier{ = ' = '                {createdAt = 'Node: Node: '
'
identifier                             = 'Node: paymentMethodrequired'
requiredNode:  = 'freezed,required = ''
,'
              Node: formal_parameter     = '              String userIdNode:  = ','
requiredNode: '
 = '              ,Node: '
                '
Node:               formal_parametertype_identifierclass = 'DateTime? updatedAt              Node: '
Node:  = 'formal_parameter = 'class                '
 = '    formal_parameterNode:  = 'identifierString? stripeSessionId = ''
UserProfileNode:                 type_identifierint price = ''
'
String                    Node: Node: Node: '
superclasstype_identifier                Node: type_identifieridentifier = ' = 'StringuserId'
'
                              Node: Node: nullable_type, = ' = '?,'
'
                                Node: Node: required? = ' = 'required?'
'
                              Node: Node: formal_parameteridentifier = ' = 'String displayNamestripeSessionId'
'
                              Node: Node: type_identifier, = ' = 'String,'
'
                              Node: Node: identifierformal_parameter = ' = 'displayNameString? stripePaymentIntentId'
'
                              Node: Node: ,type_identifier = ' = ',String'
'
              Node: formal_parameter = 'String? pictureUrl'
 = '                with _$UserProfileNode: '
type_identifier       = 'Node: Stringmixins'
 = '                                 = 'Node: with _$UserProfileNode: '
nullable_type         = 'Node: ?with'
 = '                  withNode: '
?         = 'Node: ?type_identifier'
 = '_$UserProfile                '
Node:     identifierNode:  = 'class_bodystripePaymentIntentId = ''
{
  const factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfile;

  factory UserProfile.fromJson(Map<String, dynamic> json) =>
      _$UserProfileFromJson(json);
}int'
'
              Node: ,                 = 'Node: ,identifier'
 = 'price              '
Node: formal_parameter               = 'Node: String? errorMessage,'
                Node: type_identifier = 'String'
                Node: nullable_type = '?'
                  Node: ? = '?'
                Node: identifier = 'errorMessage'
              Node: , = ','
              Node: formal_parameter = 'DateTime? createdAt'
                Node: type_identifier = 'DateTime'
                Node: nullable_type = '?'
                  Node: ? = '?DateTime'
'
nullable_type                 = 'Node: ?identifier'
 = '                                  Node: createdAtnullable_type'
 = '              ?Node: Node: '
? = '      ,Node:  = '{                   = ',{Node: '
'
?       = '              Node: ?declarationNode:  = ''
const factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfileformal_parameter'
                 = '        DateTime? updatedAtNode: Node: redirecting_factory_constructor_signatureidentifier = ''
const factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfile = ''
                updatedAt          Node: '
Node: type_identifierconst_builtin = ' = '              constDateTime'
Node: '
          ,Node:  = 'factory, = '                factoryNode: '
'
nullable_type           = 'Node:               identifierNode:  = '?UserProfile}'
'
 = '          }Node: '
formal_parameter_list                   = '            ({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  })Node: '
Node: ?            )Node:  = '( = ' = '?('
'
)                            '
Node: Node: optional_formal_parameters           = 'Node: {
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }='
 = '              identifierNode:  = '{updatedAt = ''
{'
                            Node: Node: ,required = ' = ',required'
'
                            Node: Node: }formal_parameter = ' = '}String userId'
'
            Node: ) = ')'
          Node: = = '                =Node: '
type_identifier           = 'Node: Stringtype_identifier'
 = '                ,Node: '
identifier               = 'Node: userIdrequired'
 = '              requiredNode: '
,               = 'Node: ,formal_parameter'
 = '              String createdByNode: '
required = '                requiredNode: '
type_identifier?               = ' = '_PaymentNode: '
Stringformal_parameter      '
Node: '
= = ''
String displayName          '
Node: type_identifier = '                _PaymentNode: '
type_identifier;      Node: ; = ' = ' = 'String;'
'
                ;                      Node: Node:                 identifierNode:  = 'identifieridentifiercreatedBy = ''
'
pictureUrl                    '
Node: Node: method_signature = 'Node:               method_signature = 'displayName,'
 = ' = 'Node: factory Payment.fromJson(Map<String, dynamic> json),'
 = ','
              ,              Node: '
,                      factory Payment.fromJson(Map<String, dynamic> json)'
Node:  = '        formal_parameter, = ''
String? statusMessageNode:               '
Node:                 Node: factory_constructor_signatureNode: formal_parameterfactory_constructor_signature = ' = 'String? pictureUrlfactory Payment.fromJson(Map<String, dynamic> json)Node: '
'
type_identifierannotation = 'factory Payment.fromJson(Map<String, dynamic> json) = ' = '@Default('draft')'
'
          Node: factoryString           = ''
factoryNode: '
factory                 = '          factoryNode: '
nullable_type                           = 'Node: Node: identifier                 = '@Node: Payment = ''
@type_identifier           = 'Node: '
.String = '                '
Node: Node: identifieridentifier = '                Payment = ''
?Node: Defaultnullable_type'
.                            '
Node:  = '          ??Node: '
'
identifierNode:                  = 'Node: fromJsonarguments'
 = '          ('draft')Node: '
formal_parameter_list. = ' = '                  ?(Map<String, dynamic> json)Node: '
( = ' = '                  (.'
'
                            '
Node: Node:                   identifierNode: Node: argument           = '(statusMessageNode:  = ''
(identifier'
 = '            fromJson              Node:  = 'formal_parameter'
 = '?Map<String, dynamic> json          Node: '
formal_parameter_listNode:  = '              (Map<String, dynamic> json)Node: '
,'draft'type_identifier = ' = '?Map = ''
'
,                          '
Node:                 type_arguments               = 'Node: '
Node: identifierannotation                    Node:  = '(@Default('line')Node: '
string_literal = ' = '                 = 'pictureUrlNode: '
@<String, dynamic>              ('draft'Node:  = '@'
'
'
                            Node: Node: <formal_parameter                 = ' = 'Node: <,Map<String, dynamic> json'
 = ''
                      ,identifier'
 = 'Node:               '
Node: '               = 'Node: 'formal_parameter                 = ''
DefaultNode: type_identifier                      type_identifier = 'Node: '
Map'                '
 = 'Node:               'Node: '
String? statusMessagetype_arguments                   = ' = 'Node: '
<String, dynamic>)'
 = 'arguments                ) = 'Node: '
<('line')                               = 'Node: <formal_parameter'
'
String = '                String statusNode:                   '
type_identifier'
Node: Node:  = '                (Node: type_identifier = ',( = ' = ''
,StringString'
'
                                  Node: Node: argumenttype_identifier                 = ' = ''line'                Node: '
Node: '
                    nullable_typeNode: dynamic = ''
string_literal?                '
 = 'Node: 'line'>type_identifier = ''
> = ''
                      String              Node: Node: '
'identifier = ' = '                  json''
'
            Node:                       Node: Node: )' = '?) = ''
 = ''                                '
Node: ?Node:                   identifier'
Node: , = ')status = ''
 = ')              '
Node:       ,               = 'Node: ,function_body'
Node:                               formal_parameterNode:  = ' = ',commentString provider = '=>
      _$PaymentFromJson(json);Node: '
'
// draft, published, cancelled, completed                '

=== Complete AST for source ===
Node:         Node: '
                identifierprogram = ' = 'statusMessagetype_identifierimport 'package:freezed_annotation/freezed_annotation.dart';

part 'event.freezed.dart';
part 'event.g.dart';

@freezed
class Event with _$Event {
  const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event;

  factory Event.fromJson(Map<String, dynamic> json) => _$EventFromJson(json);
}

@freezed
class EventCreateRequest with _$EventCreateRequest {
  const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest;

  factory EventCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventCreateRequestFromJson(json);
}

@freezed
class EventUpdateRequest with _$EventUpdateRequest {
  const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest;

  factory EventUpdateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventUpdateRequestFromJson(json);
}

@freezed
class EventListState with _$EventListState {
  const factory EventListState.initial() = _Initial;
  const factory EventListState.loading() = _Loading;
  const factory EventListState.loaded(List<Event> events) = _Loaded;
  const factory EventListState.error(String message) = _Error;
}

@freezed
class EventDetailState with _$EventDetailState {
  const factory EventDetailState.initial() = _DetailInitial;
  const factory EventDetailState.loading() = _DetailLoading;
  const factory EventDetailState.loaded(Event event) = _DetailLoaded;
  const factory EventDetailState.error(String message) = _DetailError;
}
'
'
Node: Node:                 Node: Node: ,=> = ',import_or_export = ' = ''
import 'package:freezed_annotation/freezed_annotation.dart';=>'
                 = '    Node: //type_identifierdynamic = ' = 'String'
//'
              Node: '
'
                Node: library_importannotation                Node:          = ' = 'import 'package:freezed_annotation/freezed_annotation.dart';              identifierNode: @Default('line')'
'
identifierNode:                        = 'Node: providerNode: '
@>               = ' = 'Node: Node: @ = 'formal_parameter>,'
 = 'import_specification_$PaymentFromJson = ''
                String? imageUrlNode:         identifierNode: '
selector = ' = ''
, = '                              import 'package:freezed_annotation/freezed_annotation.dart';'
(json)'
'
                                Node: Node: Node: Node: Defaultargument_partimportidentifier}Node: '
 = 'type_identifier = ' = ' = 'json}'
(json) = 'import                            Node: '
)Node:  = '        '
)Node: String'
'
arguments                             = 'Node: Node: ('line')nullable_typearguments             = ''
configurable_uri'
 = '                        Node: 'package:freezed_annotation/freezed_annotation.dart'function_body'
Node:  = 'Node: =>
      _$PaymentFromJson(json); = '('
(json)?'
                      '
Node: )Node: (          => = '                   = '(=>Node: '
uri'
 = '                           = ' = '(Node: 'package:freezed_annotation/freezed_annotation.dart''
'
?             = 'Node: ?'
)Node: '
              string_literal          Node: Node: argument = ' = 'identifier=json = 'Node: 'package:freezed_annotation/freezed_annotation.dart''
argument_$PaymentFromJson = '                'line''
'
        '
Node:                     Node:  = 'Node:               string_literal= = 'Node: '
'line'selector          '
'Node:                       type_identifierNode:  = ''identifier = '_UserProfile                '
 = ' = '       = 'Node: (json)imageUrlNode: '
;' = ''              ;Node: '
'
,       = '              Node: ,identifier'
 = ''
                      json          Node: Node: 'argument_part = 'Node: method_signature = ''
 = ''
factory UserProfile.fromJson(Map<String, dynamic> json)'''
(json)'
              '
            Node:                       )Node: Node:  = ';         = 'Node: )argumentsformal_parameter'
 = ' = 'List<String>? tags        ;''
Node:  = 'factory_constructor_signature(json) = 'Node:                 '
;Node:  = '  ;Node: '
part_directivetype_identifier       = 'Node: factory UserProfile.fromJson(Map<String, dynamic> json)}'
 = ' = '          Node: part 'event.freezed.dart';factory}'
'
'
'
                      Node:   )Node:  = ' = ')factoryclass_definition              ListNode:  = '(@freezed
class PaymentCreateRequest with _$PaymentCreateRequest {
  const factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequest;

  factory PaymentCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$PaymentCreateRequestFromJson(json);
} = ''
(    '
'
Node:                               partNode:  = 'type_argumentspart = ''
<String>Node: '
annotationNode:                    = 'Node: @freezed<'
'
 = ''
    <Node: '
formal_parameteruri                   = '              String providerNode: '
      type_identifier                Node:           Node:  = 'Node:  = 'type_identifier'event.freezed.dart'String'
'
@                        argumentNode:  = '>Node:  = 'Node: > = ''
identifier@                 = 'Node: UserProfilenullable_type'
'
 = '                Node: jsonstring_literal = 'Node: '
Stringidentifier'
                 = '? = '.freezed'
Node:                  = '.Node: 'event.freezed.dart'identifier'
identifier'
     = 'Node:           class'
Node: provideridentifier = ' = 'class                  '
json    '
Node:  = 'identifier               = 'Node: PaymentCreateRequestNode: fromJson'
        '
Node:               'Node:           , = ' = ''
,Node:     ''
'
              Node: Node: }superclass = '?)formal_parameter_list         = 'Node: (Map<String, dynamic> json) = '')'
 = '            '
Node: ' = '        ( = ' = '}(with _$PaymentCreateRequest'
'
'
                  Node:             mixinsNode: '
?Node: Node: '
;formal_parameter                 = 'Node:  = ') = ';Map<String, dynamic> jsonwith _$PaymentCreateRequest = '    '
)'
        Node: Node: ;with               = ' = 'identifier'
'
 = '      Node:           Node: Node: ;tagswith='
'
 = '                      =Node: }'
type_identifier = '}type_identifierNode:  = ''
Map  ,'
   = 'Node:  = ''
              class_definition          ,_$PaymentCreateRequest'
Node: '
type_identifier                   = 'Node: Node: part_directiveNode:  = 'class_bodyNode: type_arguments = ' = '{
  const factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequest;

  factory PaymentCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$PaymentCreateRequestFromJson(json);
} = ''
part 'event.g.dart';_UserProfile      '
Node: @freezed
class PaymentCreateRequest with _$PaymentCreateRequest {
  const factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequest;

  factory PaymentCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$PaymentCreateRequestFromJson(json);
}<String, dynamic>'
annotation{    '
 = 'Node:     partNode:  = '{annotationpart = ' = ''
@freezed@Default([])                      '
Node: '
      <                 = ''
'
Node: Node:     @@       = 'Node: @Node: '
;declaration      Node: Node: <identifier = ''
 = ';                freezed = ''
uri'
     = '      @Node: const factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequestNode: Node:  = 'method_signature'event.g.dart''
 = ''
                factory UserProfile.fromJson(Map<String, dynamic> json)Node: '
identifiertype_identifier'
                      Node: Node: string_literalredirecting_factory_constructor_signatureNode:  = ' = ' = 'class'event.g.dart'factory_constructor_signature'
 = ' = '        factory UserProfile.fromJson(Map<String, dynamic> json)class'
 = 'String          '
Node: const factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequest    '
Node: '          identifier = ' = ''Node: PaymentCreateRequestDefault'
'
'
Node:             Node: factorysuperclass = ' = 'factory                Node: '
const_builtinwith _$PaymentCreateRequestNode:  = ''
const'
'
'                                Node:  = 'Node: 'arguments, = 'Node: ([]) = ''
          ,                  '
mixinsNode: ('
                factoryNode:  = 'identifierfactory = ''
UserProfile = ''
                        Node: Node: identifierwith _$PaymentCreateRequestNode:  = 'Node: .type_identifier = ' = ' = 'PaymentCreateRequestdynamic'
.;          '
( = ''
;'
                  Node: Node: '
with                  '
Node: Node: argumentformal_parameter_list = 'identifier = ' = '                []  Node: '
 = 'Node: with>fromJson'
 = ''
                    >                  '
Node: Node:               type_identifierformal_parameter_list = ' = 'Node: ({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  })identifier_$PaymentCreateRequest = '(Map<String, dynamic> json)class_definitionNode: '
 = 'list_literal = '@freezed
class Event with _$Event {
  const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event;

  factory Event.fromJson(Map<String, dynamic> json) => _$EventFromJson(json);
}[]'
'
'
            json'
                Node: Node: class_body) = ' = '{
  const factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequest;

  factory PaymentCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$PaymentCreateRequestFromJson(json);
})'
                      Node:                   '
Node: Node: (     = 'Node: ({'
'
annotation = '            Node: (Node: [formal_parameter = ' = ' = 'Map<String, dynamic> json['
('
       = '{                      Node: '
@freezedfunction_body       = 'Node: =>
      _$UserProfileFromJson(json);'
              '
declarationNode:       ]'
Node: Node:             @Node:  = 'type_identifieroptional_formal_parameters@ = ''
 = 'Map = ' = '        const factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequest'
Node: '
=>               = 'Node: =>]{
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }        '
type_arguments'
      '
         = 'Node: <String, dynamic>                  Node: '
                redirecting_factory_constructor_signatureNode: Node: identifier = ' = ')const factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequest = 'identifier              _$UserProfileFromJson = 'freezed'
'
        Node: Node: Node: selector< = ' = ''
    <{'
)Node:                 (json)Node: '
 = 'type_identifierclass           = '{String'
          '
 = ''
Node:               argument_partNode:  = 'required(json) = ''
                Node:             Node:               ,Node: requiredclass'
formal_parameter'
               = 'Node:     Node: formal_parameterNode: const_builtinidentifierList<String> attendees = ' = ''
Event = '                 = 'Node: argumentstype_identifier'
 = ' = '(json)const,String eventIdList'
    '
'
'
'
              Node: Node:                           Node: superclassNode: factorytype_arguments = ' = ' = 'factory<String>'
with _$Event'
                '
                  Node: (Node: type_identifier<                 = ' = '<dynamic'
'
                        Node:                 Node: Node:           >Node:  = 'Node: > = ''
identifier(type_identifier              mixinsNode: type_identifieridentifier = ' = ''
 = 'jsonPaymentCreateRequest'
String                          Node: Node: '
) = ' = '           = 'Node: )'
formal_parameter_listwith _$Event = 'String'
({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  })'
      '
                '
Node: Node: identifier         = 'Node: eventIdfunction_body                  '
Node:  = '              >Node: =>
      _$UserProfileFromJson(json);with,argument = '             = 'Node: json = ''
'
,>                 = 'Node: (identifier'
 = 'withjson = ''
                '
('
'
                              Node: Node: required               = 'Node:             identifierNode: =>Node: Node: required = ')optional_formal_parameterstype_identifier = ' = ' = '{
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }=>'
'
_$Event                      '
Node: '
{ = ' = 'attendees{              '
Node: )formal_parameter              Node:  = 'requiredNode:     '
identifierNode: '
 = 'class_body        int amount = '               = '_$UserProfileFromJsonNode: requiredNode: ;'
, = '               = 'Node: ;formal_parameter'
'
{
  const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event;

  factory Event.fromJson(Map<String, dynamic> json) => _$EventFromJson(json);
},                '
'
Node:                     Node: Node: formal_parametertype_identifier = '        { = ' = ''
{String eventId      '
Node:  = ''
}DateTime? createdAtint      Node: '
Node: selector                 = 'Node: (json)declaration'
identifier = ''
 = 'const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event}'
                 = ''
                        Node:           redirecting_factory_constructor_signatureNode: Node:  = 'argument_parttype_identifieramountconst factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _EventNode:   Node:  = ' = ''
DateTime(json)'
'
                      type_identifierclass_definition                Node:  = 'Node: arguments@freezed
class AuthState with _$AuthState {
  const factory AuthState.initial() = _Initial;
  const factory AuthState.loading() = _Loading;
  const factory AuthState.authenticated(AppUser user) = _Authenticated;
  const factory AuthState.unauthenticated() = _Unauthenticated;
  const factory AuthState.error(String message) = _Error;
}nullable_type'
 = ' = '    ?Node: '
(json)annotation'
                   = 'Node: @freezed?'
              Node:  = ' = 'const_builtin?String = ''
'
                      Node: Node: '
@identifier                 = '              Node:  = 'Node: identifier,Node:  = 'createdAt,'
'
(                             = ' = 'Node: (eventIdNode: '
const'
annotation'
                                      Node: Node: @Node: ,factory = 'argument,, = ''
 = '              ,Node: '
json'
required       = '               = 'Node: requiredformal_parameter'
 = 'factory               = 'Node: '
DateTime? updatedAtformal_parameter'
Node:  = '                '
Node: int amountidentifier'
                           = '                @Default('jpy')identifierNode: Node: type_identifiertype_identifier = ' = 'jsonint = 'freezed'
'
Node:                 identifier    Node:  = ''
Event                '
'
DateTimeNode: identifier              '
Node:  = 'Node: )                @          Node:  = 'amountNode: class = ' = 'formal_parameter_listnullable_typeclass) = ''
'
({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  })            '
'
Node:  = 'identifier              @ = '            AuthState'
Node: Node:                 '
Node: Node: (, = '? = 'identifier,'
    '
 = '              Default                  Node: '
Node: ;                Node: Node: superclassarguments = '( = '('jpy')annotation?; = ' = ''
? = ''
'
      '
@Default('jpy')Node: with _$AuthState}'
 = '                                  }            Node:                 '
'
Node: Node: Node: optional_formal_parameters(   = 'Node: identifier(@       = 'class_definitionNode: '
 = 'mixins@freezed
class AuthState with _$AuthState {
  const factory AuthState.initial() = _Initial;
  const factory AuthState.loading() = _Loading;
  const factory AuthState.authenticated(AppUser user) = _Authenticated;
  const factory AuthState.unauthenticated() = _Unauthenticated;
  const factory AuthState.error(String message) = _Error;
} = ''
                   = '     = '@Node: Node: annotationwith _$AuthState = 'argument{
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }@freezed'
'
updatedAt = '        '
'jpy'                              '
Node: Node: identifier'
Node: ,                          Node: Node:  = ' = ''
,@               = 'Node: @{string_literal = 'Default'
with'
 = ''
with      '
               = '{Node:                         Node: Node: argumentsNode: type_identifier = '} = ''jpy''
('jpy')identifier = ''
} = ''
freezed            '
_$AuthStateNode:                       )Node:  = '              Node: '
'
(                      classNode: 
=== Complete AST for source ===
' = ' = '(class = ''
)Node:                   programNode:  = ''
argumentimport 'package:freezed_annotation/freezed_annotation.dart';

part 'event.freezed.dart';
part 'event.g.dart';

@freezed
class Event with _$Event {
  const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event;

  factory Event.fromJson(Map<String, dynamic> json) => _$EventFromJson(json);
}

@freezed
class EventCreateRequest with _$EventCreateRequest {
  const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest;

  factory EventCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventCreateRequestFromJson(json);
}

@freezed
class EventUpdateRequest with _$EventUpdateRequest {
  const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest;

  factory EventUpdateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventUpdateRequestFromJson(json);
}

@freezed
class EventListState with _$EventListState {
  const factory EventListState.initial() = _Initial;
  const factory EventListState.loading() = _Loading;
  const factory EventListState.loaded(List<Event> events) = _Loaded;
  const factory EventListState.error(String message) = _Error;
}

@freezed
class EventDetailState with _$EventDetailState {
  const factory EventDetailState.initial() = _DetailInitial;
  const factory EventDetailState.loading() = _DetailLoading;
  const factory EventDetailState.loaded(Event event) = _DetailLoaded;
  const factory EventDetailState.error(String message) = _DetailError;
}
'
Node:         requiredNode:           class_bodyNode: Node:  = ''
=identifier = ' = ' = ' = 'AuthStaterequired'
={
  const factory AuthState.initial() = _Initial;
  const factory AuthState.loading() = _Loading;
  const factory AuthState.authenticated(AppUser user) = _Authenticated;
  const factory AuthState.unauthenticated() = _Unauthenticated;
  const factory AuthState.error(String message) = _Error;
}'
''
          '
                    'jpy'Node: '
                        Node: Node: {'
Node:     type_identifierimport_or_exportNode:  = 'superclass = ' = 'formal_parameterNode: _Event                    '
 = 'Node: import 'package:freezed_annotation/freezed_annotation.dart';with _$AuthStatestring_literal{ = '      ''jpy''
'
'
 = '                                Node: Node: Node: '
library_importNode: String id''
; = '                '      mixins = ' = 'Node: 'with _$AuthStatetype_identifier'
'
'
                          Node:  = '                      Node: Node: Node: 'import 'package:freezed_annotation/freezed_annotation.dart'; = ' = 'with' = ' = 'with;'
'
                  )StringNode:  = ''
'
)'
         = '                      Node: )declarationmethod_signatureNode:  = ' = 'identifierconst factory AuthState.initial() = _Initialfactory Event.fromJson(Map<String, dynamic> json) = ''
id)Node: '
'
      type_identifier                       = 'Node: Node: Node: import_specificationformal_parameter'
 = '_$AuthStateString currency         = ''
'
Node:                 import 'package:freezed_annotation/freezed_annotation.dart';factory_constructor_signatureNode:  = '              type_identifierfactory Event.fromJson(Map<String, dynamic> json)Node:  = ''
'
,redirecting_factory_constructor_signature    '
 = 'Node:               class_body = ' = 'const factory AuthState.initial() = _Initial{
  const factory AuthState.initial() = _Initial;
  const factory AuthState.loading() = _Loading;
  const factory AuthState.authenticated(AppUser user) = _Authenticated;
  const factory AuthState.unauthenticated() = _Unauthenticated;
  const factory AuthState.error(String message) = _Error;
}'
'
                        Node: Node: Node: ,String'
formal_parameterconst_builtin{ = '          '
Node: Node:                 importNode:  = 'identifierfactory               = 'importcurrency = ''
'
 = '                      Node: {,'
factoryconst'
 = 'Node:           String currencyNode: '
identifier'
                 = '          Node: configurable_uri       = 'requiredEvent = 'Node: 'package:freezed_annotation/freezed_annotation.dart','
Node: '
                        Node: Node: '
uriannotationfactory = 'Node: declarationrequiredtype_identifier = ' = ' = 'const factory AuthState.initial() = _InitialStringfactory          '
 = ''
Node: '
              . = ''
'package:freezed_annotation/freezed_annotation.dart'Node: '
          formal_parameter@Default('stripe')             = 'Node: Node: String titlestring_literal'
 = ''
'package:freezed_annotation/freezed_annotation.dart'        identifier                '
 = 'Node:               .Node: redirecting_factory_constructor_signature = 'Node: '
'                          identifierNode:  = ' = 'identifier' = ' = '                AuthStatefromJsonNode: currencytype_identifier'
'
'
                            Node:           ,const factory AuthState.initial() = _Initial = 'Node: '
Node:           '@ = ' = 'Node: ', = ''
'
'
          @Node: '
formal_parameter_list         = '                              Node: StringNode: Node: annotation'
; = ' = '@Default('stripe');                (Map<String, dynamic> json)'
'
Node: const_builtin.   = ' = 'constNode: Node: .'
'
identifier                          part_directive'
Node: identifier            identifier = 'Node:  = ' = ' = 'initialpart 'event.freezed.dart';'
                    Node: Node: (factory'
Node:  = 'Defaultformal_parameter_listfactorytitle'
'
'
 = '                        Node:     Node: ,                 = ' = 'identifier(@'
 = ' = '            @Node: Node: '
()formal_parameter,AuthState'
'
'
 = '            Map<String, dynamic> json          Node: Node:               Node: .'
 = 'Node:               .Node:                 argumentstype_identifier = 'Node: '
(required('stripe') = ' = 'part('
'
                   = '                      Map = 'identifierpart = ''
DefaultNode: '
    Node: '
                Node: Node:               requiredargumentsidentifier = ')Node: ('stripe')type_arguments('
 = ' = '                  <String, dynamic>Node: '
(Node: '
 = '(initial = ''
                   = 'uri                )'
 = 'Node:               'event.freezed.dart'Node: (formal_parameter'
'
                  '
Node:  = 'argumentargument = ' = ''stripe'          '
String descriptionNode:                     Node: '
=                 = 'Node: ='stripe'Node: <                '
 = 'Node: Node: string_literalformal_parameter_listtype_identifier<string_literal = '           = 'String'stripe''
'
Node:  = ''
 = '                ()type_identifier                       = ''event.freezed.dart'Node: '
'
identifier                            _InitialNode: Node:  = ''
Node: string_literaldescription            ''
 = ' = 'Node: '('
'
                              '                      Node: Node:  = ''type_identifier = 'Node:  = ' = ',' = ''
String'('
,'stripe''
'
                  '
                      Node: Node:               ;Node: Node:  = ''; = ')'
'                   = ''
              '
)Node: '
                      Node: Node:           requiredNode: ''Node:                 =Node:  = ' = ',= = ''
,'           = ' = ')requiredNode: 'declarationtype_identifier = ''
'
 = ''
              )Node:                 formal_parameter    Node: '
'
Node:                   _Initial = 'Node: type_identifier               = ' = ';Node: dynamic = ''
formal_parameter)DateTime startDate = ';'
 = ''
const factory AuthState.loading() = _Loading)                  Node: Node: >'
part_directive = ''
>              '
              Node:               redirecting_factory_constructor_signatureNode: Node:  = 'Node: '
part 'event.g.dart';formal_parameter = ' = '                String paymentMethodNode: '
type_identifieridentifier                 = 'const factory AuthState.loading() = _LoadingDateTime;'
'
String paymentMethod                    Node: '
identifierNode:  = ' = 'partstartDate;'
 = ''
               = 'Node:       ,jsonNode: Node: declarationtype_identifier'
'
 = ' = '            Stringconst factory AuthState.loading() = _Loading'
Node: '
)                 = 'Node: )identifier'
part = '        paymentMethod = '                Node:           redirecting_factory_constructor_signatureNode:  = 'const_builtin       = 'Node: '
consttype_identifier'
 = ','
Node:           const factory AuthState.loading() = _LoadingString'
Node: '
          factoryNode:               const_builtinfunction_body = '                   = 'Node: factory,'
Node: Node: uriconst = ' = ''event.g.dart''
'
=> _$EventFromJson(json);      '
'
          Node:         string_literalNode:  = '=>                'event.g.dart'Node:  = ''
factoryrequired         = 'Node:  = '' = ' = 'requiredfactoryNode:           '
identifierNode:  = 'identifier              paymentMethod''
'
,               = 'Node: Node: AuthState          =>,'
'
'
          formal_parameter'
 = 'Node:  = '        Node: Node:               .DateTime endDateNode: '
},identifier                '
        identifier               = ' = 'Node: } = ''
_$EventFromJson.            }'
Node:  = ')        Node: selector = ' = ''
} = 'Node: '
          '             = 'Node: 'identifierAuthState'
'
Node: Node:               Node: Node: ;type_identifier = ' = 'DateTime).)'
(json) = '          )Node: '
'
'
           = ';. = ''
loading                    '
                =          Node: Node: Node: argument_partidentifier = ' = ''
(json)formal_parameter_listloadingNode:  = 'Node: identifier= = ' = '= = ''
'
='
  endDate()Node: '
class_definition           = '            @freezed
class Event with _$Event {
  const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event;

  factory Event.fromJson(Map<String, dynamic> json) => _$EventFromJson(json);
}Node: Node: ('
formal_parameter_list'
'
 = '              Node:           Node: annotationtype_identifier = 'Node:  = '@freezed_PaymentCreateRequest'
'
type_identifier = '(                  '
Node:  = 'Node:       @_PaymentCreateRequestarguments = '            @              '
Node: ()      Node:  = ';, = 'Node: ;'
Node: '
 = '(json),'
identifier'
)              '
                                      Node: Node: ;Node:  = 'method_signature;(Node: '
Node:  = ' = '( = ' = 'freezed(factory PaymentCreateRequest.fromJson(Map<String, dynamic> json)required'
'
)'
'
 = '        (Node: '
 = 'factory_constructor_signature              requiredNode:  = '            argument       = 'Node: jsonmethod_signature'
factory PaymentCreateRequest.fromJson(Map<String, dynamic> json)Node:                 )'
     = ' = 'Node: )factory PaymentCreateRequest.fromJson(Map<String, dynamic> json)'
'
identifier          '
 = '          json                      Node: Node: Node: factory_constructor_signature=formal_parameter = ' = ' = 'String locationfactory PaymentCreateRequest.fromJson(Map<String, dynamic> json)'
'
'
Node: Node: =                                        Node: Node: factoryNode: )class = ' = ' = ' = 'class          '
)='
    type_identifier        '
=factory          Node: '
Node:  = 'factory           = 'Node: Node: factoryNode: type_identifier'
;          '
String = '          Node: Node: '
identifier = ';identifiertype_identifieridentifier'
 = ' = 'PaymentCreateRequestPaymentCreateRequest = ' = ''
_Loading                '
          Node:       Node: Node:       ;Node: ._Loading'
 = ''
Event = '      ;Node: '
;     = '}identifier'
 = 'Node:        = 'Node: locationdeclarationsuperclass.'
 = '          ;              '
Node:  = ', = '}Node: ,      '
'
Node:                         Node: Node: declarationidentifierrequiredconst factory AuthState.authenticated(AppUser user) = _Authenticated = ' = 'requiredwith _$Eventconst factory AuthState.authenticated(AppUser user) = _Authenticated'
'
'
'
        '
Node:               .  redirecting_factory_constructor_signatureNode:  = '         = ' = '      formal_parameterNode: .mixins = ''
int capacityNode: '
           = '                redirecting_factory_constructor_signatureNode: Node: type_identifierfromJson = ' = 'Node: intidentifier'
const factory AuthState.authenticated(AppUser user) = _Authenticatedclass_definition                '
 = 'Node:           identifier@freezed
class EventCreateRequest with _$EventCreateRequest {
  const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest;

  factory EventCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventCreateRequestFromJson(json);
}Node:  = ''
capacity = '    fromJson'
const_builtinNode: const factory AuthState.authenticated(AppUser user) = _Authenticated'
with _$Event = 'annotation'
'
const                  Node: Node: formal_parameter_list'
 = ''
with(Map<String, dynamic> json) = ' = ''
with                          '
                    Node: formal_parameter_list                   = 'Node: Node: ,Node: const_builtin = ' = ',(Node: '
 = 'const@freezed'
Node: (Map<String, dynamic> json)          type_identifierNode: '
('
'
 = 'factoryfactory_$Event             = ''
Node: factory              '
 = 'formal_parameter                       = 'Node: Node: identifier(     = 'factory( = 'Node:       Node: Node: required@class_body = ' = '@Map<String, dynamic> json'
AuthState'
'
 = '                    Node: Node: identifiertype_identifier'
'
 = '                      Node: requiredNode: .{
  const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event;

  factory Event.fromJson(Map<String, dynamic> json) => _$EventFromJson(json);
}           = ''
. = 'formal_parameter'
freezed'
'
      Node: Mapidentifier = ''
 = '              AuthStateMap<String, dynamic> jsonNode: Node: {type_arguments = '          {              '
Node:  = 'Node:       '
formal_parameterNode:            = 'Node: declaration.     = '<String, dynamic>.int priceNode: identifierclass'
 = 'authenticated'
 = ''
               = '          '
const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _EventNode: Node: type_identifier'
 = 'formal_parameter_list         = 'classMapNode: '
'
                                Node: Node: type_identifier              < = 'redirecting_factory_constructor_signatureNode:  = 'int'
    '
Node:           identifierNode:                  = 'identifierNode:  = 'type_arguments = 'authenticatedconst factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event'
 = '(AppUser user)          identifier'
 = 'EventCreateRequestprice          '
<'
              Node:     Node: '
Node: <String, dynamic>superclass'
const_builtin,'
                             = ' = '                constNode: '
type_identifierNode:            = 'Node: Node: < = 'factoryNode:  = 'formal_parameter_listfactory,with _$EventCreateRequest'
'
(String       = 'Node: '
<                '
 = 'mixins               = ' = 'with _$EventCreateRequest'
(AppUser user)'
'
                Node: Node:         ,(Node: Node:                       Node:  = 'requiredidentifier,'
with            type_identifierNode:  = ' = '(String = ''
'
('
withNode:                 '
Node:  = ',required = '                 = ''
            EventNode: formal_parameter                      Node: ,type_identifierNode: formal_parameter = 'formal_parameter = 'Node: _$EventCreateRequest'
'
'
                          Node:  = 'type_identifier    AppUser userNode: Node: type_identifier = ' = 'dynamicformal_parameter_list'
dynamic                 = 'Node:  = '>String createdByAppUser user = ''
>class_body'
'
                 = '              {
  const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest;

  factory EventCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventCreateRequestFromJson(json);
}Node: '
              identifier({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  })Node: type_identifier      '
 = ' = 'AppUserjson              '
Node: Node:             type_identifier'
Node: '
type_identifier'
Node:  = ' = 'StringAppUser{'
                            )              Node: '
                Node:               Node: (Node:  = ' = '({'
'
>                  Node: Node: optional_formal_parametersdeclaration = ' = 'identifierconst factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest = ' = 'identifierNode: > = ''
 = 'createdBy              '
Node: )              useridentifierNode:  = ','
'
user = 'identifier,'
'
{
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }                          Node: '
        '
            Node: Node: redirecting_factory_constructor_signature) = '              Node:       Node:  = 'annotation) = ''
{const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequestNode: )'
 = '                     = '@Default('draft') = '{)function_body'
'
'
                                        Node: Node: =Node: Node:  = '@= = ''
@Node:  = ''
const_builtin=>
      _$PaymentCreateRequestFromJson(json);                '
Node:  = 'identifier         = 'Node: Default=const = 'json=>='
 = '            =>requiredNode: '
          '
'
Node: '
          type_identifierNode:  = '        )          factory = 'Node: _Authenticated = '                '
requiredNode: identifier       = 'argumentsfactory = ')'
_$PaymentCreateRequestFromJson'
'
'
Node:  = 'Node: ('draft')type_identifier'
;                   = 'Node:  = ';        _Authenticated              (Node:       selector = '(json)           = 'Node: Node: '
function_bodyidentifier       = '=>
      _$PaymentCreateRequestFromJson(json);Node: '
(Node:  = ''
formal_parameterEventCreateRequest                   = ''
'
'
declaration                    String id      '
        Node:                 Node: argumentNode:  = '=>type_identifierNode:  = 'Node: 'draft'formal_parameter_list;'
const factory AuthState.unauthenticated() = _Unauthenticated = '                    ({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  })Node: '
'
string_literal             = ' = 'Node: =>Node: ('
argument_part                 = 'Node:  = ' = '; = '(String'
'
'
identifier                (json)             = ''
Node: _$PaymentCreateRequestFromJson'draft'redirecting_factory_constructor_signature'
 = ''
      const factory AuthState.unauthenticated() = _Unauthenticated                      Node: '
Node:         Node:             Node: identifierselectorNode:            = 'optional_formal_parameters'Node: declaration = 'arguments(json) = ' = ''
(json)          '
Node: Node: idconst factory AuthState.unauthenticated() = _Unauthenticated               = 'Node: '
argument_part'const_builtin = ''
(json) = ''
const = '            '
Node: {
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }'
arguments(                                '
Node: Node:               factory,Node:  = '{factory = ''
{          '
 = ' = '                      ,(json)'
Node: Node:               'Node:  = ' = 'identifier               = ''Node: Node: required'
AuthStateredirecting_factory_constructor_signature'
               = 'Node:           requiredNode: required(( = ' = 'const factory AuthState.unauthenticated() = _Unauthenticatedrequired'
'
'
 = '              '
          Node: '
formal_parameter                                 = 'Node: String title)Node: '
.               = '()Node:  = 'argument                '
 = 'formal_parameterNode: json              '
const_builtin = '                 = 'Node: .Node: '
Node: identifier'
type_identifierconstformal_parameter = 'String title = '          String statusjson'
'
 = '              '
'
Node:                                         Node: Node: argumentidentifier = 'Node:                 StringNode: )Node: type_identifierjsonfactory = ''
 = ' = '                unauthenticated)'
'
Node:           type_identifierStringNode: identifierformal_parameter_list'
 = ' = '() = ''
title            factory'
Node: '
              (Node:  = '                '
(,                 = ' = '        String,'
'
Node:                 '
              Node: Node: Node:           requiredidentifier = ' = 'requiredtitleNode: ;identifier'
Node:  = 'identifier               = 'Node: jsonstatus, = ''
identifier'
              ;             = ''
,Node: '
Node: ,       = ' = 'AuthState,'
Node: '
                        Node: '
})Node:                                           .Node:  = ' = ' = '.formal_parameter}Node:  = 'Node: )required'
 = 'comment'
   = ''
Node: String descriptionrequiredclass_definition)           = 'Node: @freezed
class PaymentResult with _$PaymentResult {
  const factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _Success;

  const factory PaymentResult.failed({
    required String errorMessage,
  }) = _Failed;

  const factory PaymentResult.cancelled() = _Cancelled;
}='
// draft, published, cancelled, completed = '=    '
Node:                     Node: annotationNode:  = ''
 = 'type_identifier'
@freezedidentifier'
'
 = '                                    Node: Node: Node: //@ = '                 = ' = 'formal_parameter//unauthenticated = ''
'
)                        Node: '
formal_parameterNode: String description = '        String? imageUrl@Node: '
'
_Unauthenticatedformal_parameter_list                      Node: Node: type_identifieridentifier = ' = ''
freezed = ';'
() = ''
    StringNode: '
class;Node:                   type_identifierNode: '
 = '(Node: String; = '                 = ''
(; = '                '
'
Node:                 '
Node: nullable_type      identifier = 'Node: descriptionclass'
Node:  = '              '
Node: ?,'
                             = '            declarationNode:  = 'identifiertype_identifierconst factory AuthState.error(String message) = _ErrorNode:  = ''
Node: Node:  = ',}'
 = ')               = 'Node:         required = 'requiredPaymentResult}?'
)'
     = ''
Node: ?          superclassNode: '
  StringNode: '
'
class_definitionNode:  = '                @freezed
class PaymentResult with _$PaymentResult {
  const factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _Success;

  const factory PaymentResult.failed({
    required String errorMessage,
  }) = _Failed;

  const factory PaymentResult.cancelled() = _Cancelled;
}Node: '
redirecting_factory_constructor_signature=     = '              Node:  = 'identifier                 = 'with _$PaymentResultNode: Node: description'
formal_parameter = 'identifier = ' = '=imageUrl'
const factory AuthState.error(String message) = _Errorannotation'
'
                        Node: Node: type_identifier          ,DateTime startDate = ' = ''
,_Unauthenticated'
'
'
               = 'Node:                     Node: const_builtin                      @freezed = ''
const      Node: '
Node: ;          Node: Node: Node: factorytype_identifier = 'Node: factory = ''
DateTime,mixins'
formal_parameter = '                ,Node: @ = 'identifierwith _$PaymentResult = ' = ''
;startDate'
                        Node: '
 = 'with               = 'Node: List<String>? tags = 'Node: '
with'
required'
Node:  = '        identifierrequiredNode:  = 'type_identifier'
 = 'AuthState_$PaymentResult              '
'
@declaration              '
 = 'Node:       ,Node:  = 'identifier              , = 'const factory AuthState.error(String message) = _ErrorNode: freezed                '
Node:     Node: .Node: type_identifierclassformal_parameter'
 = ' = ''
Node:  = 'class_body = ' = 'List{
  const factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _Success;

  const factory PaymentResult.failed({
    required String errorMessage,
  }) = _Failed;

  const factory PaymentResult.cancelled() = _Cancelled;
}'
'
class                      '
Node: DateTime startDate.{'
     = '          {Node: '
Node:               identifier'
 = 'error              Node: '
Node: type_argumentsredirecting_factory_constructor_signature           = 'Node:  = 'Node: Node: identifierrequiredconst factory AuthState.error(String message) = _Error = ' = 'PaymentResult                '
'
required<String>declaration    '
Node: formal_parameter_list                            Node: type_identifierNode: const_builtin = '< = ' = 'constNode: (String message) = ''
superclass'
<                       = ''
DateTimeNode:               factoryconst factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _Success = 'Node: '
(Node:  = 'formal_parameter'
('
 = ' = 'factoryDateTime endDate'
'
          '
                Node: Node:                   identifier                with _$PaymentResult = 'identifierNode:             type_identifierNode:  = ' = 'formal_parameterDateTimeAuthState = 'Node: String message'
'
'
                        Node: type_identifierstartDateidentifier'
 = ' = ''
endDate          '
Node:                             Node: ,Node:  = ',String              '
 = ',,Node: '
type_identifier                        Node: .Node: Node: > = ' = 'String>'
'
redirecting_factory_constructor_signature'
                               = ' = 'const factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _Success              '
              Node: Node:           requiredNode: requiredmixinsconst_builtinNode:  = ' = 'identifier = ' = 'Node: constrequired.'
required'
                     = 'Node: nullable_type'
'
 = '              ?with _$PaymentResultNode:               message'
Node: Node:                   '
Node: formal_parameter'
?identifierfactoryformal_parameter = '            ? = ''
DateTime endDate = '                '
Node: String location = 'Node: factory = '                        '
Node: Node: error          withidentifierNode: '
type_identifier'
 = '                          DateTimeNode: identifierformal_parameter_list'
 = ')with                '
Node: Node:         identifierNode: type_identifier = 'type_identifierendDate = ' = ''
 = '              tagsString = ' = '_$PaymentResult)(String message)'
'
 = '                Node: PaymentResultclass_body'
'
 = 'Node: {
  const factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _Success;

  const factory PaymentResult.failed({
    required String errorMessage,
  }) = _Failed;

  const factory PaymentResult.cancelled() = _Cancelled;
}('
 = ''
'
(                '
              Node:             Node: Node: Node: ,identifierformal_parameter = ' = ', = 'String message,'
'
                    locationNode: Node:                     {Node: Node: .= = ' = ' = '=annotation'
 = ' = ''
@Default([])              '
              {Node: .          '
Node: ,                ,'
 = '              ,Node: type_identifier'
Node:           Node: '
requiredtype_identifier       = ' = 'Node: _ErrordeclarationNode:  = ' = 'identifierconst factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _SuccessString = ''
successrequired        '
@'
Node: redirecting_factory_constructor_signature                '
Node: Node:               ;Node: formal_parameter_listidentifier = '               = ''
message = ''
@const factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _Success            '
'
Node:  = ')                 = ';)Node: '
'
                Node:  = '= = '              =Node: Node: '
formal_parameter          }Node:  = 'type_identifier({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = 'Node: identifier           = ' = ''
}Default            '
Node: '
(Node:  = 'const_builtin(String locationrequired                 = 'Node:  = '_Errorrequiredconst'
'
arguments              '
 = 'Node: ([])formal_parameter      '
 = 'Node:                   ;int capacity = 'Node:           '
(Node:  = '                factory;'
 = '(factory            '
Node:           '
'
=== End AST ===
optional_formal_parametersNode:                   '
Node: identifierNode: type_identifier                 = 'Node: String'
 = '      type_identifier = 'Node:  = 'argument}int = ''
} = '                PaymentResult                Node: {
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }Node: '
'
identifieridentifier[] = ''
capacity
=== Processing class: '
'
AppUser = '                             ===
=== End AST ===
          Node: {Node: 
=== Processing class:  = 'locationNode: {'
'
.                                  AppUser              Node: ,Node: Node: list_literal = ', = ' = '[],,'
'
'
                                    Node: Node: required[ = ' = 'required ===
required               = 'Node: 
=== Processing class: .required'
 = '           = ''
Node: requiredrequired[UserProfile'
'
 ===
'
                                    Node:               Node: ]Node:  = 'formal_parameter]formal_parameter'
 = ' = '                  int priceNode: int capacity)'
 = ''
)                '
Node:                               type_identifierNode: Node: formal_parametertype_identifier = '
=== Processing class: List<String> attendees = 'AuthStateint ===
 = ''
'
int                                Node: Node: type_identifier'
 = 'Listidentifier'
identifier                               = 'Node: capacitytype_arguments'
 = '                Node: <String>Node: '
formal_parameter               = 'identifierString paymentId                  '
Node: Node: <                ,Node:  = 'type_identifier = ' = ' = 'String<'
'
                
=== Processing class: success = '                  UserProfile'
priceNode:           '
Node: identifier              formal_parameter_list = 'Node:  = 'Node:  ===
({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  })type_identifier,'
 = ''
            ,              Node: StringNode:  = 'required'
(paymentId = '                  ('
Node: '
               = ',requiredNode: '
'
,               = 'Node: 
=== Processing class: required> = ',required'
AuthState'
               ===
              Node: Node:  = '              formal_parameter            Node:  = '>formal_parameter'
String createdByNode:  = ''
optional_formal_parameters                int price = 'required'
Node:                 {
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }Node:                 type_identifier'
 = 'Node:               String = ''
type_identifieridentifier = '                intNode:  = 'attendeesidentifier'
 = ''
              Node:                 Node: {createdBy = 'required{Node: '
'
identifier              ,Node:  = ' = ',price'
required'
 = ''
              requiredNode: '
              formal_parameterNode:  = 'DateTime? createdAt              '
, = ',                            '
Node: Node:               formal_parameterNode:  = 'formal_parameterString sessionIdformal_parameter'
 = ' = 'String paymentId                                Node: '
type_identifierNode:  = 'Node: type_identifier,String = ' = '                DateTime,'
String? imageUrl'
                Node:                 Node: Node: nullable_typetype_identifier'
 = ''
identifier? = '                '
 = 'Node:                                 Node: sessionIdStringtype_identifier'
'
 = '                String              Node: Node: identifier'
 = ',paymentId                annotationNode: '
nullable_type = '              @Default('draft')Node:  = ' = ','
 = ',,?'
'
'
                                                Node: Node:               ? = '?Node: '
requiredNode:                  = 'Node: requiredidentifier@ = ''
imageUrl?'
Node:  = '?'
                             = 'Node: Node: ,formal_parameter                 = ' = 'Node: ,identifier@'
 = 'String sessionIdformal_parametercreatedAt               = 'Node: String? paymentIntentIdformal_parameter'
 = 'List<String>? tags'
'
                                Node: Node: type_identifiertype_identifier = ''
 = 'StringList'
'
                                              Node: Node: nullable_type'
 = '                ?Node: Node: '
identifier                 = '                  Node: Node: type_identifier,Default = ' = ''
,String                '
Node: ?              argumentsNode:  = ' = '('draft')formal_parameter'
'
                  Node: ?type_arguments('
 = ' = '                (Node: DateTime? updatedAtidentifier'
'
 = 'paymentIntentId = ''
                                              Node: Node: identifier,Node:  = ' = ',sessionIdtype_identifier = 'DateTime'
                  <String>Node: '
'
argument               = '                  '
Node: < = 'Node: <              '
Node: ,                  }Node:  = 'type_identifier = ' = ',String}'
'draft'                                  '
'
Node:                     >Node:               string_literalNode: '
 = ' = '            'draft'Node: '
Node: )                      nullable_type = '>Node: )''
 = ' = '          'formal_parameter'
Node:  = '                      =Node: String? paymentIntentId' = ' = ''
?''
'
=                                  '
Node: Node: ?                nullable_typeNode:  = 'type_identifier = ' = ''
??'
'
String                '
                                                              Node: Node: Node: nullable_typetype_identifier) = ' = ' = '_Success?'
'
)                        Node: Node: ;? = 'Node: ;'
Node: '
 = '              ?       = 'Node: ?'
                ?identifierNode: '
 = 'formal_parameterupdatedAtdeclaration                 = ''
const factory PaymentResult.failed({
    required String errorMessage,
  }) = _FailedNode: '
 = '              String status        identifierNode: Node: '
identifierredirecting_factory_constructor_signature = ' = 'tags                Node: const factory PaymentResult.failed({
    required String errorMessage,
  }) = _Failed,'
Node: type_identifier = ''
paymentIntentId              Node: , = ' = '          Node: const_builtin = ' = 'const'
,'
,'
'
                                          Node: Node: }} = ' = '}}'
'
                        Node: Node: )) = ' = '))'
'
String                    Node: Node: =factory = ' = '='
'
factory                          Node: Node: identifiertype_identifier = ' = ''
status_EventCreateRequest'
'
Node:               ,       = 'Node: Node: ,;'
, = ' = ';,              '
Node: '
      }Node:  = 'method_signature               = '}Node: factory EventCreateRequest.fromJson(Map<String, dynamic> json)comment'
 = ''
// draft, published, cancelled, completed                    Node: Node: '
factory_constructor_signature)                 = 'Node: factory EventCreateRequest.fromJson(Map<String, dynamic> json) = ''
//)           = 'Node: //factory'
 = '          factoryNode:           '
=Node:            = 'Node: =identifier= = ''
EventCreateRequest = ''
=          '
Node:           .Node:  = 'type_identifier. = ''
_Event          '
Node: identifier       = 'Node: fromJson;'
 = '          ;Node: '
formal_parameter_list       = 'Node: (Map<String, dynamic> json)method_signature'
 = '            factory Event.fromJson(Map<String, dynamic> json)Node: '
(         = 'Node: (factory_constructor_signature'
 = '            factory Event.fromJson(Map<String, dynamic> json)Node: '
formal_parameter           = 'Node: Map<String, dynamic> jsonfactory'
 = 'factory              '
Node:           type_identifierNode:  = 'identifierMap = ''
Event              '
Node:           type_argumentsNode:  = '<String, dynamic>          Node: identifier = 'PaymentResult'
          Node: . = '.'
          Node: identifier = 'failed'
          Node: formal_parameter_list = '({
    required String errorMessage,
  })'
            Node: ( = '('
            Node: optional_formal_parameters = '{
    required String errorMessage,
  }'
              Node: { = '{'
              Node: required = 'required'
              Node: formal_parameter = 'String errorMessage'
                Node: type_identifier = 'String'
'
'
                                        Node: Node: Node: type_identifierformal_parameter = '<_Success = ''
 = '      .Node: < = ';'
 = '.;                '
Node: '
          type_identifier       = 'Node: identifier = 'Node:                 Node: identifierString? imageUrl = ''
errorMessage'
                              Node: Node: type_identifier, = ' = 'String,'
'
String                              Node: '
nullable_typeNode:                  = '}Node: ? = ',}fromJson = ''
,            declarationNode: '
 = ')'
'
const factory PaymentResult.failed({
    required String errorMessage,
  }) = _Failed = ''
          )        Node: '
Node: formal_parameter_listredirecting_factory_constructor_signature = ' = '(Map<String, dynamic> json)const factory PaymentResult.failed({
    required String errorMessage,
  }) = _Failed'
'
                      Node: Node: (const_builtin                 = ' = '(const'
'
Node:             type_identifierNode:           formal_parameter = ' = 'Node: Map<String, dynamic> json          '
factoryNode:  = '                                Node: dynamicNode: type_identifier? = ' = 'Map'
'
factory?              '
=Node:                 type_arguments = '                '
Node: Node:           identifierNode: >identifier= = ' = 'PaymentResult'
'
<String, dynamic>                     = ' = 'Node: '
.> = 'imageUrl                '
.'
              '
Node:                         Node: Node: ,identifier = 'Node: ,<'
Node:  = '              type_identifierNode: < = 'formal_parameter'
 = '_Failed                List<String>? tagsNode: '
type_identifier = ' = 'identifierStringfailed = ''
'
json          '
'
Node:             formal_parameter_list                      Node: Node: )Node: ;, = ' = ')({
    required String errorMessage,
  })'
'
 = '                   = 'Node: Node: ;function_body( = ',=>
      _$EventCreateRequestFromJson(json);                '
Node: '
        type_identifierNode:  = '=>'
 = '=>List = '      '
('
        Node: '
Node:                                 Node: type_argumentsdeclarationidentifier             = ' = '_$EventCreateRequestFromJson = 'Node: '
optional_formal_parametersconst factory PaymentResult.cancelled() = _Cancelled = '<String>{
    required String errorMessage,
  }Node: '
type_identifier'
 = '              dynamicNode: '
{                                Node:  = ''
{Node: '
                  redirecting_factory_constructor_signature              Node: Node: < = 'Node: selector = ' = '<(json)'
>'
                  required          Node: Node: type_identifier = 'argument_part = ' = 'Stringrequired(json)'
'
'
const factory PaymentResult.cancelled() = _Cancelled                   = 'Node: '
>>          '
                                        Node: Node: formal_parameterNode:  = 'Node: identifierString errorMessagearguments'
const_builtin = '                 = 'Node: (json) = 'type_identifierconst>'
'
 = ' = '                StringNode: '
nullable_typejson = '                              ?'
'
Node: Node:                   ('
            Node:  = 'identifier(?'
 = ' = '?              '
Node: errorMessage                Node:           Node: identifier'
) = 'argument = 'tags)'
Node: '
 = '                    Node: Node: jsonfunction_body, = ' = '=> _$EventFromJson(json);factory'
,'
                      Node:  = '=>Node:  = ',=>factory = ''
'
                  ,'
Node:                               '
Node: Node:               }Node: identifierannotation = ' = 'identifier@Default([])'
} = '                Node: '
Node: identifier@ = ' = ' = '@            '
jsonPaymentResult                Node: _$EventFromJsonNode: )'
identifier'
 = '              DefaultNode:           '
) = 'Node:                  = 'Node: .'
 = ')arguments.        '
'
 = '          ([])Node: Node: '
selector)                   = 'Node:         ((json)Node:  = ';( = ''
;identifier                  '
Node:       argumentNode:  = '}[] = ''
}'
                     = 'Node: '
list_literalcancelled'
'
 = '            []Node: '
Node: class_definition                      formal_parameter_listNode:           [           = 'Node: [ = 'Node: '
argument_part() = '                      (json)Node: '
=] = ''
] = ''
            @freezed
class EventUpdateRequest with _$EventUpdateRequest {
  const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest;

  factory EventUpdateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventUpdateRequestFromJson(json);
}                  '
Node:             )Node:  = ' = ')(='
 = 'Node: '
    Node: (                        Node: Node: annotationtype_identifierformal_parameter = ' = '_Failedarguments'
List<String> attendees'
'
 = '                  Node:                 ;Node:  = 'Node: ) = '@freezed;type_identifier'
'
 = '      Node: declaration = '      const factory PaymentResult.cancelled() = _Cancelled(json)List'
'
'
 = '              Node:         Node: @(                 = ' = '()Node: '
Node: redirecting_factory_constructor_signature              type_arguments = ' = 'Node: const factory PaymentResult.cancelled() = _Cancelledargument'
<String> = '@          jsonNode: '
const_builtin'
 = '                constNode: '
      '
          identifierNode:  = 'Node: json'
'
identifierfactory                   = 'Node:               factory<'
Node:  = '           = 'Node:           identifier<Node: '
 = '=PaymentResult = 'freezed=)'
'
 = ''
)                      '
          Node: Node: Node:         type_identifierNode: class          ;. = ' = ';String'
 = ''
.                        Node: Node: }>Node:  = ' = '>class'
'
'
                    Node: Node: identifieridentifier = ' = 'EventUpdateRequestattendees          type_identifier'
 = ' = 'Node:               _CancelledidentifierNode: '
,'
 = '      }Node: '
;cancelled = '  ; = ''
'
    Node:       Node: Node: class_definition} = 'superclass@freezed
class EventCreateRequest with _$EventCreateRequest {
  const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest;

  factory EventCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventCreateRequestFromJson(json);
} = ''
           = '    }with _$EventUpdateRequestNode: '
annotation'
 = '  @freezedNode: '
class_definition       = ',@freezed
class PaymentState with _$PaymentState {
  const factory PaymentState.initial() = _StateInitial;
  const factory PaymentState.loading() = _StateLoading;
  const factory PaymentState.success(Payment payment) = _StateSuccess;
  const factory PaymentState.failed(String errorMessage) = _StateFailed;
}Node: '
@'
 = '    @Node: '
Node:               annotation      Node:       Node: formal_parameterNode: identifiermixins = ' = 'freezedwith _$EventUpdateRequest'
    '
Node:  = 'class = ' = 'formal_parameter_listclass = ''
        ()    '
Node: Node: @freezedidentifierwith = ' = ''
with                  '
Node: EventCreateRequestDateTime? createdAt@        '
Node: '
                type_identifierNode:  = ' = '_$EventUpdateRequesttype_identifier@'
    Node: Node: '
superclass     = '      with _$EventCreateRequestNode: '
class_body      Node:  = 'Node: identifier{
  const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest;

  factory EventUpdateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventUpdateRequestFromJson(json);
}mixins'
 = ' = 'with _$EventCreateRequest      (Node: '
{ = ' = '({freezed'
        '
Node:  = '      withNode:  = '            withdeclarationNode: DateTime)'
'
 = '        const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest                Node: '
Node:  = 'type_identifiernullable_type = '        _$EventCreateRequestNode: '
redirecting_factory_constructor_signature    ) = ' = ''
const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequestNode: '
class_body           = '    ?{
  const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest;

  factory EventCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventCreateRequestFromJson(json);
}Node: '
const_builtinNode:        = 'Node: const{'
 = ''
          class{Node:           '
factoryNode:  = '      =Node: factorydeclaration = ''
'
 = '          const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequestNode: '
 = 'identifier         = 'Node: EventUpdateRequestredirecting_factory_constructor_signature'
 = '                  const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequestclass'
=          '
Node:           Node: type_identifierNode:           const_builtin?Node:  = 'formal_parameter_listconst = ''
({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = ''
'
 = '                      Node: ?(Node:  = 'factory( = '    factory'
'
'
_Cancelled          '
Node:                       Node: Node: identifier;             = ' = 'identifierPaymentStateNode: Node: '
 = 'identifier     = 'optional_formal_parameterscreatedAtNode: EventCreateRequest'
'
superclass                        Node:  = ',; = ' = ''
{
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  },'
      '
              Node: Node: Node: formal_parameter_list}{ = ' = '({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = ''
{}            '
Node: '
(                 = 'with _$PaymentStateNode: (formal_parameter'
 = '              String? title            '
Node: Node:                 Node: '
Node: formal_parameter      type_identifier = ' = 'DateTime? updatedAtString'
optional_formal_parameters                class_definitionNode:  = ''
@freezed
class PaymentState with _$PaymentState {
  const factory PaymentState.initial() = _StateInitial;
  const factory PaymentState.loading() = _StateLoading;
  const factory PaymentState.success(Payment payment) = _StateSuccess;
  const factory PaymentState.failed(String errorMessage) = _StateFailed;
}type_identifier                 = ''
 = 'Node:     DateTimenullable_typeNode: '
annotation = ' = '{
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }Node: @freezedmixins'
'
?                     = 'Node: Node: @with _$PaymentState = ''
@{'
'
                       = 'Node: {identifier'
 = '                                freezedNode: Node: '
required             = 'nullable_typeNode: requiredclass'
 = ' = '              classNode: Node: formal_parameter?'
 = ''
    String titleNode: '
identifierNode:                  = 'Node: PaymentStatetype_identifier                  with = ' = ''
Node: ?with?'
 = ' = '?        '
Node: ?                type_identifierNode: '
identifierString = ' = '                _$PaymentStateupdatedAtNode: '
identifier'
 = '                      Node: titleNode: class_body'
superclass = '                 = '{
  const factory PaymentState.initial() = _StateInitial;
  const factory PaymentState.loading() = _StateLoading;
  const factory PaymentState.success(Payment payment) = _StateSuccess;
  const factory PaymentState.failed(String errorMessage) = _StateFailed;
}Node: '
Node: identifier       = 'Node: title,with _$PaymentState{'
 = ''
{              '
'
Node:        = ',Node:                = ',declaration, = ''
const factory PaymentState.initial() = _StateInitial'
'
                    Node:         requiredNode: Node: redirecting_factory_constructor_signature = 'mixinsNode: required              ,'
 = 'Node:               , = ' = ''
const factory PaymentState.initial() = _StateInitialwith _$PaymentState              '
'
Node:         formal_parameter} = 'Node:  = 'String description}'
          with'
                Node:  = '            Node: formal_parametertype_identifier = ' = 'Node: withString? description)String'
Node: '
 = '                        const_builtin)Node:  = 'Node: constidentifiertype_identifier = ''
description          '
Node:  = '              factoryNode:  = ',factory'
'
'
 = '                    ,_$PaymentStateNode: '
'
identifier               = '    PaymentStateNode: Node: required'
class_body          Node:  = 'Node: =required. = ' = ''
= = '                              {
  const factory PaymentState.initial() = _StateInitial;
  const factory PaymentState.loading() = _StateLoading;
  const factory PaymentState.success(Payment payment) = _StateSuccess;
  const factory PaymentState.failed(String errorMessage) = _StateFailed;
}'
.          Node: Node: Node: '
formal_parametertype_identifier = '       = 'DateTime startDateNode: type_identifierString{'
 = ' = '                {Node: '
nullable_type_Event'
'
       = 'Node:                 ?declarationNode: '
 = 'type_identifier                        const factory PaymentState.initial() = _StateInitialNode: Node: ?'
 = ';?'
 = ''
          DateTime                Node: Node:  = 'identifier'
 = '        initial                ;Node: '
'
identifier = '      Node: startDateNode: redirecting_factory_constructor_signature'
 = 'method_signatureconst factory PaymentState.initial() = _StateInitial              '
Node: identifier          ,Node:  = ' = 'description = ','
'
factory Event.fromJson(Map<String, dynamic> json)              '
                  Node: Node: Node: formal_parameter_listfactory_constructor_signature = ' = 'const_builtin()factory Event.fromJson(Map<String, dynamic> json) = ''
const                        '
Node: '
required           = 'Node: required            '
factoryNode:                = 'Node: factoryformal_parameter('
 = '           = 'Node: Node: (factoryidentifier'
 = ' = ',factoryEvent'
            '
          Node:           Node: Node: ).DateTime endDateidentifier = ' = '. = ''
PaymentState,          '
Node: '
identifier          '
Node:  = '              . = ' = ').'
Node: fromJson                '
Node:           type_identifierNode: '
identifier          formal_parameterNode:  = ' = '          DateTimeDateTime? startDate'
'
Node:                 =Node:  = 'identifier                 = 'Node: endDateinitial'
type_identifier = ' = '              formal_parameter_listDateTimeNode: '
, = '                '
 = '=,'
          '
          Node: Node:               type_identifierNode: formal_parameter_list(Map<String, dynamic> json)required = ' = ' = 'Node: _StateInitialrequired'
()'
      nullable_type              Node: Node:  = 'formal_parameter'
 = ''
String location;            '
 = 'Node: ;(            '
                Node: ?(Node:  = '      type_identifierNode:  = '(String'
'
'
                            Node:                   formal_parameterNode: Node:  = 'identifierdeclaration = '?Map<String, dynamic> jsonlocation'
'
 = '              (Node:                = ','
Node:  = 'type_identifier,            '
Node:  = '              ) = 'Node: ?required = 'const factory PaymentState.loading() = _StateLoadingMap = ''
)required        '
'
Node: '
'
redirecting_factory_constructor_signature                         = 'Node: Node: const factory PaymentState.loading() = _StateLoading              '
formal_parameter          Node: Node: = = 'const_builtintype_arguments                 = 'Node:  = 'identifier = ' = '<String, dynamic>conststartDateint capacity'
='
              '
          Node: '
Node:                 ,factory           = ' = 'Node: factory'
'
type_identifierNode:                           <, = '<Node:  = 'Node: _StateInitialtype_identifier'
identifier = ' = '      PaymentStateint'
Node: '
          ;Node:                = '.; = ''
Node: .formal_parameter'
 = ''
      DateTime? endDate                Node: Node: declaration'
                '
Node: type_identifier          type_identifierNode:  = 'identifier = ' = 'DateTimeconst factory PaymentState.loading() = _StateLoading'
loading'
'
                        Node:           redirecting_factory_constructor_signatureNode:  = 'nullable_typeNode: const factory PaymentState.loading() = _StateLoadingformal_parameter_list = ''
 = 'String                '
          ()Node:  = ''
identifier                             = '?capacityNode: Node: (,'
 = ' = 'Node: ('
'
,const_builtin             = ''
Node:               const)'
 = '                )Node:           Node: Node: '
factorytype_identifier = '           = 'Node: dynamicfactory                  '
=Node:  = '          =Node: '
identifier?           = 'Node: ,type_identifier = ''
PaymentState,'
 = '                _StateLoading          '
Node: >      Node:  = ' = '.> = '?.'
'
Node:                 Node: '
'
identifier               = '                        Node: Node: endDaterequired'
 = 'identifier              requiredNode: Node: ,'
 = 'identifier              ,Node: '
 = 'formal_parameter = ' = '              jsonint priceNode: '
'
formal_parameter                 = ';String? locationNode: '
type_identifierloading                            Node:  = 'Node: type_identifier); = ''
 = ')'
'
String      '
Node:  = '                declaration          Node:        = 'nullable_typeconst factory PaymentState.success(Payment payment) = _StateSuccess = ''
?Node: '
int                          '
Node: Node:                 formal_parameter_listNode: Node: identifierredirecting_factory_constructor_signature = ' = 'pricefunction_body'
const factory PaymentState.success(Payment payment) = _StateSuccess = '?'
               = '          Node: ()Node: '
,const_builtin = ' = ',const'
=> _$EventFromJson(json);            '
              '
 = 'Node: Node: ?formal_parameter'
 = '        String? imageUrl                '
Node: Node:                 (identifierNode:  = 'type_identifierlocation = '          String=>'
Node: '
 = '                              Node: Node: =>,nullable_type = ' = ',factory'
( = ''
 = ''
factory        '
Node:             identifier                         = 'Node: _$EventFromJsonNode: ?'
identifierformal_parameter = '        '
PaymentStateNode: '
                   = 'Node:           int? capacityNode: '
)selector.Node:  = '                ? = ' = 'Node: .)'
type_identifier? = '          '
intNode: '
identifier           = '                successNode: '
nullable_type           = 'Node: '
 = 'formal_parameter_list                (json) = 'Node: (Payment payment)'
'
identifierNode:                       Node: Node: (= = ' = ' = '=argument_part?imageUrl = ''
'
'
                                Node:           Node: Node: (json)?'
 = '            type_identifier?Node:  = 'arguments'
 = '((json)                '
'
Node:               identifierNode:  = '(capacity            '
_StateLoadingNode:               '
formal_parameterNode: ,      ,Node:  = '; = ' = ',;'
'
 = ',               = 'Node: (Payment paymentformal_parameter'
'
 = '              int? price'
              '
Node:                                     Node: Node: Node: argumentdeclarationNode:  = 'type_identifierconst factory PaymentState.success(Payment payment) = _StateSuccess'
 = 'formal_parameter        jsonNode: '
redirecting_factory_constructor_signature = ' = '                 = 'const factory PaymentState.success(Payment payment) = _StateSuccessNode: '
identifiertype_identifier           = 'Node: Payment = 'const_builtinjson = ''
'
intconst              List<String>? tags              Node: '
Node: identifier)           = 'payment'
'
Node:              = 'factory'
 = ')factory'
'
                                  Node: Node: Node: ;identifier) = ' = 'PaymentState;'
Node: '
           = '      Node:                 .Node: Node:  = '}. = ''
})          '
Node: '
type_identifier  nullable_type          Node:  = ' = 'class_definition?Node:  = 'List'
@freezed
class EventCreateRequest with _$EventCreateRequest {
  const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest;

  factory EventCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventCreateRequestFromJson(json);
}                  '
'
Node:     ?                 = 'Node: Node: ?annotation= = ''
@freezed = ''
identifiertype_arguments       = 'Node:                 success@'
 = ' = '          @Node: <String>'
formal_parameter_list'
= = '      (Payment payment)Node: Node: '
identifieridentifier'
 = ' = 'freezed                            '
            Node: Node:     (Node: type_identifierclass = 'Node: _StateSuccess'
 = ' = '      price(Node: '
<;            '
Node:  = 'classformal_parameter              ; = ''
Payment paymentNode:       Node: ,declaration'
 = ' = '    const factory PaymentState.failed(String errorMessage) = _StateFailedNode: , = 'identifier'
 = '<EventCreateRequest              '
Node: '
type_identifier     = '                  '
Node: PaymentNode: superclass'
type_identifier = '               = 'Node: with _$EventCreateRequestidentifier'
 = '              Node: String'
mixins'
Node:                                 paymentNode: Node: formal_parameter'
 = '>            String? imageUrlNode: '
 = ')                >redirecting_factory_constructor_signature = 'Node:  = 'type_identifierwith _$EventCreateRequest = ' = ''
String)                '
'
Node: '
nullable_type                           = '        const factory PaymentState.failed(String errorMessage) = _StateFailed?Node: '
'
                  withNode: Node:            = '?with = 'Node: const_builtin = ''
=? = ''
=                        '
Node: Node: constNode: identifier'
 = 'nullable_type           = 'Node: tagsfactory'
 = '?factory              '
Node: type_identifier          ,Node:  = ' = 'identifier, = '_$EventCreateRequestPaymentState'
'
'
                        Node: Node: }          '
.                       = 'Node: Node: ?. = 'class_body?'
'
Node:                           type_identifier = 'Node:  = 'identifier{
  const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest;

  factory EventCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventCreateRequestFromJson(json);
} = ' = ''
_StateSuccessfailed'
      '
                Node: Node: ;formal_parameter_list = '}Node: ;{'
 = ''
 = '{Node: '
identifier             = '      Node: Node: imageUrl)declaration'
 = ' = '              const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequestNode: '
,(String errorMessage) = ''
,        )'
'
                              Node: Node: formal_parameterNode:  = 'Node: List<String>? tagsredirecting_factory_constructor_signature='
 = ' = '            declaration                 = 'Node: const factory PaymentState.failed(String errorMessage) = _StateFailedtype_identifierNode: =const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest'
'
(                  Node:  = 'redirecting_factory_constructor_signature(Node: '
const_builtin'
 = '           = 'const factory PaymentState.failed(String errorMessage) = _StateFailed = 'const            Node: '
Node: '
          formal_parameterNode:  = 'factoryString errorMessage = ''
factorytype_identifier          '
 = 'Node:           const_builtinNode:  = '              const_EventCreateRequest'
identifierList'
 = '          EventCreateRequest      Node: '
factoryNode:  = '          factoryNode: '
;'
           = 'Node: ;identifier'
formal_parameter_list = '      PaymentState = 'Node: ({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  })'
type_identifier'
 = '                            StringNode: '
Node: type_argumentsNode:                = 'Node: <String>method_signatureidentifier = ' = 'factory EventCreateRequest.fromJson(Map<String, dynamic> json)errorMessage'
'
'
(                              Node: Node: < = ' = '<'
()                  '
Node: Node: .             = 'Node: .optional_formal_parameters'
 = '                  {
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  } = ''
)                        '
Node: Node:           identifier{Node:  = '={ = ' = 'factory_constructor_signature= = ''
factory EventCreateRequest.fromJson(Map<String, dynamic> json)'
'
          Node:           failedNode:               '
type_identifierNode:           factoryNode:  = 'Node: formal_parameter_listrequired = ' = 'Stringrequired = '(String errorMessage)factory'
'
'
type_identifier'
                             = 'Node: _StateFailedidentifierNode:             '
> = 'Node:       EventCreateRequestNode: '
;( = '           = '               = 'Node: Node: .formal_parameter( = '.>; = ''
'
String title'
'
                      '
Node: }             = 'Node: Node: }formal_parameter'
nullable_type          === End AST ===
 = '? = '                String errorMessage
=== Processing class: '
PaymentNode:  ===
              Node: Node: '
type_identifiertype_identifier = '                  String = ''
Node: String              ?'
Node:  = '                identifier? = ''
errorMessageNode: '
                identifier             = 'Node: Node: )title = 'identifier) = ''
'
tags'
                        Node: Node:               =,Node:  = '
=== Processing class:  = '=PaymentCreateRequest'
 ===
,          '

=== Processing class: ,PaymentResultidentifier = ' ===
 = ',
=== Processing class: '
PaymentStatefromJson               ===
'
              Node: Node:           type_identifierNode: required = 'formal_parameter_list = ' = '_StateFailed(Map<String, dynamic> json)'
Node: requiredformal_parameter'
'
 = '            String? status              '
Node: Node: formal_parameter                 = '(String descriptionNode: '
type_identifier = ' = '                String(Node: '
'
type_identifier                 = 'Node: String            nullable_type'
 = 'Node:                 formal_parameterNode: ?identifier'
 = ' = 'description                  '
Node: Map<String, dynamic> json              ?Node: '
, = '      ? = ''
,Node:                 ;Node: '
              identifier              Node: Node:  = 'type_identifierstatus = ''
requiredMap = ''
              requiredNode: '
,                             = 'Node: ,Node: '
formal_parametertype_arguments               = ' = 'DateTime startDate<String, dynamic>Node: '
}'
 = '                                Node: }type_identifierNode: '
 = '            DateTimeNode: '
) = '                 = 'Node: )identifier< = ' = ''
startDate<'
          '
Node:               =Node:  = ',=                 = ''
Node: ,type_identifier'
          ;              '
Node:  = 'Node: requiredtype_identifierString = ''
 = '_EventUpdateRequestrequired      '
'
                                    Node: Node: Node: Node: ;formal_parameter = ' = ',DateTime endDate;'
 = '}                '
Node: ,      type_identifierNode: '
method_signature                 = ' = 'DateTimefactory EventUpdateRequest.fromJson(Map<String, dynamic> json)'
Node: '
type_identifier                        Node: Node: identifierfactory_constructor_signature = ' = 'endDatefactory EventUpdateRequest.fromJson(Map<String, dynamic> json)'
'
                        Node:  = 'Node: ,} = 'factory, = ''
'
factory = '              '
Node: dynamic          required'
Node: === End AST ===
identifier = '                requiredNode: '
 = '>EventUpdateRequest              '
Node:           formal_parameter = ' = 'Node: >.String location'
 = ''
.
=== Processing class: '
                          Node: Node: type_identifieridentifier = '               = 'StringfromJsonPayment'
'
 ===
                Node: identifier           = '
=== Processing class: locationNode: '
PaymentCreateRequest              formal_parameter_listNode:  ===
, = ' = '(Map<String, dynamic> json),'
'
Node:                           Node: Node: (requiredidentifier = ' = 'required('
'
 = '                          jsonNode: Node: '
formal_parameter
=== Processing class:  = 'formal_parameterint capacity = ''
PaymentResultMap<String, dynamic> json ===
                '
            Node:               type_identifierNode:  = 'Node: type_identifier)int = ''
Map
=== Processing class:                 '
PaymentState               ===
Node:  = 'Node: type_arguments) = 'identifier<String, dynamic>'
 = ''
capacity                      Node: Node: function_body< = ' = '=>
      _$EventCreateRequestFromJson(json);<'
'
'
                                      Node: Node: type_identifier=> = ' = 'String=>'
'
Node:                         Node: ,,Node:  = 'identifier, = ''
_$EventCreateRequestFromJson = '                '
,Node:         '
type_identifierNode:                = 'selectordynamic = ''
(json)                '
Node:           >Node:  = 'Node: >argument_part'
 = 'required(json)              '
Node:  = '            identifierNode:  = 'requiredargumentsjson = ''
(json)'
'
                                        Node: Node: Node: formal_parameter() = ' = ' = 'int price()'
'
'
                    Node: Node: argumentfunction_body = '                 = 'jsonNode: '
=>
      _$EventUpdateRequestFromJson(json);type_identifier                '
 = 'Node:         identifierintNode: '
=> = '                jsonNode:  = 'identifier'
 = '=>              '
Node: price        )Node: '
 = 'identifier)               = ''
_$EventUpdateRequestFromJsonNode:         '
Node: ,        ;Node:  = ' = 'selector; = ',(json)'
'
'
                Node:               }Node:  = 'Node: argument_partformal_parameter = '}(json)'
'
 = '              Node: String? imageUrlNode: class_definitionarguments'
 = ' = '@freezed
class EventUpdateRequest with _$EventUpdateRequest {
  const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest;

  factory EventUpdateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventUpdateRequestFromJson(json);
}(json)'
'
                                  Node: Node: annotationNode: ( = ' = '@freezedtype_identifier( = ''
'
String                    Node: Node: @argument'
 = ' = '@                json'
'
Node:                       Node: Node: identifieridentifier = ' = 'freezedjson'
nullable_type'
     = '              Node: Node: class) = ' = 'class)?'
'
'
                              Node: Node: ;Node: ? = ' = ';identifier'
 = '?EventUpdateRequest'
      '
Node:                 }    Node:  = 'Node: identifier}superclass'
 = ' = '  with _$EventUpdateRequestimageUrl'
Node: '
      class_definitionNode:  = 'mixins              @freezed
class EventListState with _$EventListState {
  const factory EventListState.initial() = _Initial;
  const factory EventListState.loading() = _Loading;
  const factory EventListState.loaded(List<Event> events) = _Loaded;
  const factory EventListState.error(String message) = _Error;
} = 'Node: '
,with _$EventUpdateRequest     = 'Node: '
,annotation         = 'Node: @freezedwith'
 = '      with'
Node: '
@               = '        @Node: '
type_identifierNode:  = '      _$EventUpdateRequestNode: '
identifierformal_parameter     = 'Node:  = 'freezedclass_body'
List<String>? tags = '    {
  const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest;

  factory EventUpdateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventUpdateRequestFromJson(json);
}'
Node: '
class                 = '      classNode: '
{Node:      = 'Node: {type_identifieridentifier'
 = ' = 'EventListState      '
Node: List    declarationNode: '
superclass = ' = '                with _$EventListStateconst factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequestNode: '
'
type_arguments              Node: Node:  = 'mixinsredirecting_factory_constructor_signature = '<String> = 'with _$EventListStateconst factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest'
'
'
                                    Node: Node: withconst_builtin = ' = 'withconstNode: '
'
<                  Node: Node: type_identifier = ' = '<factory_$EventListState = ''
factory'
    '
Node:                             class_bodyNode: Node:  = 'identifier{
  const factory EventListState.initial() = _Initial;
  const factory EventListState.loading() = _Loading;
  const factory EventListState.loaded(List<Event> events) = _Loaded;
  const factory EventListState.error(String message) = _Error;
} = 'type_identifier'
EventUpdateRequest = ''
      String          Node: '
{Node:  = '                  {formal_parameter_listNode: '
> = '       = 'Node: ({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  })>declaration'
 = ''
            const factory EventListState.initial() = _Initial                '
Node: Node:         (nullable_typeNode:  = 'redirecting_factory_constructor_signature = ' = '(const factory EventListState.initial() = _Initial?'
'
'
                      Node: Node:                   const_builtinNode:  = 'optional_formal_parametersconst = ''
?{
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }          '
Node:  = '              ?factoryNode:  = '{factory'
'
 = '                          {Node: '
Node: identifier               = 'identifierNode: EventListStateformal_parameter = ''
tags = '          String? titleNode: '
'
.                 = 'Node:               .Node: type_identifier'
 = ',          String = 'Node: '
,identifier                 = ''
Node: initialnullable_type'
               = 'Node:           ?Node: '
formal_parameter_list}                   = 'Node:  = '()?'
} = '            ?Node: '
('
 = '                            Node: (Node: '
identifier)             = 'Node: title = ')'
 = ')              )Node: '
'
,                     = 'Node: ,='
 = '              =Node: '
formal_parameterNode:            = 'Node: =String? descriptiontype_identifier'
 = ' = '_Initial='
                '
Node:       type_identifier          Node:  = ';String = ''
Node: ;                '
Node: type_identifier      nullable_type = ' = 'Node: ?_EventCreateRequestdeclaration'
 = ''
const factory EventListState.loading() = _Loading      '
                  Node:         Node: ;Node: ?redirecting_factory_constructor_signature = ' = ' = '?;const factory EventListState.loading() = _Loading'
'
'
                                Node: Node: Node: const_builtinidentifiermethod_signature = ' = ' = 'descriptionconst'
'
factory EventCreateRequest.fromJson(Map<String, dynamic> json)                        Node: '
Node: ,factory         = 'Node:  = ',factory'
'
factory_constructor_signature                        Node: Node:  = 'identifierformal_parameter = 'factory EventCreateRequest.fromJson(Map<String, dynamic> json)EventListState = ''
'
DateTime? startDate          '
          Node:                 .Node: Node:  = 'type_identifierfactory. = ''
 = 'DateTime          '
factoryNode:                 identifier'
 = 'Node: loading          '
Node: nullable_type          identifierNode:  = ' = '?formal_parameter_list'
EventCreateRequest = '                  ()Node: '
'
?                      Node: Node:  = '.(? = ''
 = '.(                '
Node: '
identifier             = 'Node:           )startDate = 'Node: '
)identifier              '
Node:  = '          ,Node:  = 'fromJson=, = ''
='
              '
Node:                     formal_parameterNode: Node: formal_parameter_listtype_identifier = ' = 'DateTime? endDate_Loading'
 = ''
(Map<String, dynamic> json)                      Node: Node: type_identifier'
; = ' = '            DateTime;'
Node: '
                (Node:       nullable_typeNode:  = ' = 'declaration( = '?'
const factory EventListState.loaded(List<Event> events) = _Loaded'
            '
                  Node:         Node: Node: ?redirecting_factory_constructor_signatureformal_parameter = ' = ' = 'const factory EventListState.loaded(List<Event> events) = _Loaded?'
Map<String, dynamic> json'
          '
                Node: Node: const_builtinidentifier               = 'Node: const = ''
endDatetype_identifier          '
Node:  = '              factoryNode:  = 'Map,factory = ''
'
,                        Node: '
identifierNode:                = 'Node: EventListStatetype_arguments'
formal_parameter = '           = 'Node: String? location<String, dynamic>.'
 = ''
                .Node: '
                type_identifierNode:            = 'Node: Stringidentifier<'
 = ' = '                loadedNode: '
<nullable_type           = ''
Node: ?                formal_parameter_list'
 = '                  (List<Event> events)Node: '
Node: type_identifier            ?Node:  = ' = '(? = 'String('
'
'
                                            Node: Node: identifierformal_parameterNode:  = ' = 'location,List<Event> events'
'
 = '                            Node: ,Node: ,type_identifier'
 = ' = '                List,'
'
Node:                             Node: Node: type_identifiertype_argumentsformal_parameter = ' = '<Event> = ''
int? capacitydynamic                '
'
Node:                 <                 = 'Node: <Node: >'
type_identifier = '                 = 'Node: >int'
type_identifier'
               = '                EventNode: '
Node: identifier                nullable_typeNode:  = ' = '>? = 'json>'
'
                  '
              Node:             ?Node:  = 'Node: ?identifier'
) = '                events = 'Node: '
identifier)             = 'Node: capacity'
)'
       = '              )Node: '
Node: function_body          ,Node:  = ' = '=, = ''
=>
      _$EventCreateRequestFromJson(json);=              '
'
Node:                   formal_parameterNode:  = 'type_identifierNode: int? price = ''
=>_Loaded                '
 = 'Node:       type_identifier=>Node:  = ''
;int = '        '
;Node:                 '
Node: identifier      nullable_typeNode:  = 'declaration? = ''
const factory EventListState.error(String message) = _Error = ''
                  _$EventCreateRequestFromJson        Node: '
Node: ?        redirecting_factory_constructor_signature = ' = 'Node: ?const factory EventListState.error(String message) = _Error'
selector'
                 = '          Node: (json)identifierNode: '
 = '          const_builtinpriceNode:  = ''
constargument_part'
               = '          Node: Node: (json),factory = ''
 = ',factory            '
'
Node:                         Node: argumentsNode: formal_parameteridentifier = ' = ' = 'EventListState(json)'
String? imageUrl          '
Node: '
              .Node:  = '                (Node: .type_identifier = ' = ''
String('
          '
Node:                 identifierNode:                = 'nullable_typeerror = 'Node: '
?argument          '
Node:  = '                  formal_parameter_listNode:  = '?(String message) = ''
?json            '
'
Node:                                 (Node:  = 'identifierNode: ( = ''
identifierimageUrl = '            '
Node: json              formal_parameterNode:  = ''
String message,'
               = '              ,Node: Node: '
type_identifier)               = 'Node:  = 'formal_parameterString) = ''
List<String>? tags'
              '
Node:                         identifierNode:  = 'type_identifiermessage = ''
ListNode:             '
;Node:                 ) = 'Node: ; = 'type_arguments) = ''
'
<String>          '
      Node:                   =Node: Node: } = '< = '=} = ''
<'
          '
  Node:                   type_identifierNode:  = 'Node: type_identifier_Error = ''
class_definitionString = '      '
Node:                   @freezed
class EventUpdateRequest with _$EventUpdateRequest {
  const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest;

  factory EventUpdateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventUpdateRequestFromJson(json);
}Node: ;>'
 = ' = '    >;'
'
Node:                       Node: Node: annotation}nullable_type = ' = ' = '}?@freezed'
'
'
                    Node: Node:       class_definition? = 'Node: @freezed
class EventDetailState with _$EventDetailState {
  const factory EventDetailState.initial() = _DetailInitial;
  const factory EventDetailState.loading() = _DetailLoading;
  const factory EventDetailState.loaded(Event event) = _DetailLoaded;
  const factory EventDetailState.error(String message) = _DetailError;
} = ''
@?    '
Node:  = 'annotation                 = '@Node: @freezedidentifier'
'
 = '            tagsNode: '
Node: @               = 'Node: @,'
 = '      ,Node: '
identifieridentifier               = ' = 'freezedNode: freezed'
formal_parameter'
     = '    Node: String? statusNode: classclass'
 = ' = 'class                class'
Node: '
    type_identifierNode:  = '    identifierString = 'Node: '
EventDetailStateidentifier                '
Node:  = '    nullable_typeNode:  = 'EventUpdateRequestsuperclass? = ''
'
with _$EventDetailState                  '
    Node:       Node: ?Node:  = 'superclass? = 'mixins'
 = 'with _$EventUpdateRequestwith _$EventDetailState                '
'
Node:               identifierNode:  = 'Node: statuswith'
 = 'mixinswith              '
 = 'Node:         ,with _$EventUpdateRequestNode:  = 'type_identifier'
 = ',        _$EventDetailState'
'
Node:                   Node: Node: withclass_body} = ' = ' = '{
  const factory EventDetailState.initial() = _DetailInitial;
  const factory EventDetailState.loading() = _DetailLoading;
  const factory EventDetailState.loaded(Event event) = _DetailLoaded;
  const factory EventDetailState.error(String message) = _DetailError;
}with}'
'
'
                  Node: Node:         )Node: { = ' = ')type_identifier'
{ = '          '
Node: _$EventUpdateRequest      =Node:  = ''
=declaration'
 = '              const factory EventDetailState.initial() = _DetailInitialNode: Node: '
type_identifierclass_body         = 'Node: _EventUpdateRequest = 'redirecting_factory_constructor_signature'
 = '{
  const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest;

  factory EventUpdateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventUpdateRequestFromJson(json);
}const factory EventDetailState.initial() = _DetailInitial'
'
                Node: Node: {const_builtin       = ' = 'constNode: '
{;          '
Node:  = '      factoryNode:  = ';factorydeclaration'
'
 = '                Node: const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequestidentifierNode:  = ''
EventDetailStatemethod_signature        '
 = 'Node:           factory EventUpdateRequest.fromJson(Map<String, dynamic> json)Node: '
redirecting_factory_constructor_signature. = ' = '        .const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest'
Node: '
factory_constructor_signature                    Node:  = 'identifierNode:  = 'factory EventUpdateRequest.fromJson(Map<String, dynamic> json)const_builtininitial'
'
 = '                    constNode: Node: '
formal_parameter_listfactory = '           = '()Node: factory'
factory'
             = 'Node:           (factory = 'Node: '
(identifier'
                       = 'Node: Node: )EventUpdateRequestidentifier = ''
) = ''
          EventUpdateRequest          Node: Node: '
=. = '          = = ''
Node: .formal_parameter_list          '
 = 'Node:           ({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  })type_identifierNode:  = ''
_DetailInitialidentifier            '
 = 'Node:       fromJson(Node: '
; = ' = '(          ;'
'
Node:                   formal_parameter_listNode: Node: declarationoptional_formal_parameters = ' = 'const factory EventDetailState.loading() = _DetailLoading = '(Map<String, dynamic> json)'
{
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }        '
Node: '
redirecting_factory_constructor_signature                           = 'Node: const factory EventDetailState.loading() = _DetailLoadingNode: '
({           = 'Node:  = 'const_builtin( = '{const'
'
'
                                    Node: Node: factoryformal_parameter = ' = 'factoryNode: '
String? titleformal_parameter          '
Node:  = 'identifier                 = 'Map<String, dynamic> jsonEventDetailStateNode: '
type_identifier          '
Node:  = '.               = 'StringNode: .'
type_identifier'
                 = 'Node:           Mapnullable_typeNode:  = ''
identifier?               = ''
loadingNode:                   '
Node: type_arguments          ?Node:  = 'formal_parameter_list = ' = '<String, dynamic>()?'
'
'
                            Node:                 (Node:  = 'Node: identifier<( = ' = ''
title<            '
Node: '
              )                Node:  = ',)Node: '
 = 'type_identifier          , = 'Node: '
=String               = 'Node: ='
formal_parameter'
 = '                          String? descriptionNode: Node: '
type_identifier, = '                _DetailLoadingNode:  = ''
,type_identifier       = 'Node: '
String;'
 = '                                ;Node: Node: '
type_identifiernullable_type       = 'Node:  = 'dynamicdeclaration'
? = '                const factory EventDetailState.loaded(Event event) = _DetailLoaded'
'
Node:                           Node: >Node: ?redirecting_factory_constructor_signature = ' = ' = 'const factory EventDetailState.loaded(Event event) = _DetailLoaded>'
?'
'
                                        Node: Node: Node: const_builtinidentifieridentifier = ' = 'const = 'json'
description'
          '
Node:                           factoryNode: Node:  = ')factory,'
 = ' = ')          ,Node: '
'
identifier                     = 'Node: Node: EventDetailStateformal_parameterfunction_body'
 = ' = '          DateTime? startDate=>
      _$EventUpdateRequestFromJson(json);Node: '
'
.                 = 'Node:         .type_identifier'
Node:  = '          =>Node: DateTimeidentifier = ' = ''
=>loaded                '
'
Node:                   nullable_typeNode: Node: formal_parameter_list = ' = '?identifier(Event event)'
'
 = '                              Node: Node: ?(_$EventUpdateRequestFromJson = ' = '('
'
?                    '
Node: Node:                 formal_parameterNode:  = 'selectorEvent eventidentifier'
 = ' = '(json)              startDateNode: '
'
type_identifier               = '          EventNode: '
Node: ,               = 'Node: argument_partidentifier = ' = ',event'
'
(json)              '
            Node: Node:             formal_parameter)Node:  = ' = ')arguments'
 = 'DateTime? endDate          (json)Node: '
'
=                 = '              =Node: '
Node: type_identifier(           = 'Node:  = 'type_identifierDateTime = ''
_DetailLoaded('
                '
      Node: Node:               nullable_type;Node:  = ' = ';?'
argument'
       = 'Node:                   declarationjson = 'Node: const factory EventDetailState.error(String message) = _DetailError'
?'
                         = 'Node: Node: ?identifierredirecting_factory_constructor_signature'
 = ' = 'const factory EventDetailState.error(String message) = _DetailError                '
jsonNode:           '
identifierNode:  = 'const_builtin               = 'endDateconstNode: '
'
)                        Node:  = 'factoryNode:  = ',factory = ''
          ,Node: )identifier'
 = ''
EventDetailState              '
                  Node: Node: Node: formal_parameter.; = ' = ' = '.String? location'
;'
          '
Node:                 identifier       = 'Node: errortype_identifier'
Node:  = '          }Node: Stringformal_parameter_list = ''
 = '}                (String message)'
'
Node:               Node: Node: nullable_type(class_definition = ' = '( = ''
?@freezed
class EventListState with _$EventListState {
  const factory EventListState.initial() = _Initial;
  const factory EventListState.loading() = _Loading;
  const factory EventListState.loaded(List<Event> events) = _Loaded;
  const factory EventListState.error(String message) = _Error;
}            '
'
Node:                   formal_parameter     = 'Node: String messageNode: '
?annotation               = 'Node:  = '?type_identifier@freezed = ''
String'
'
                                    Node: Node: Node: identifier@ = 'identifier = 'message = ''
@location            '
Node: '
)       = '              )Node: '
identifierNode:            = ',Node: freezed= = ''
 = ',=    '
'
Node:                         Node: classNode: type_identifier = ' = 'formal_parameter_DetailErrorclass = ''
'
int? capacity          Node: '
Node: ;                 = 'identifier;Node:  = ''
type_identifierEventListState       = 'Node: '
int}'
     = 'Node:                 }Node: '
superclassnullable_type=== End AST ===
 = ' = '?with _$EventListState'

=== Processing class: '
Event                   ===
      Node: Node: 
=== Processing class: mixinsEventCreateRequest? ===
 = ' = '?with _$EventListState
=== Processing class: '
EventUpdateRequest'
                 ===
        Node: Node: identifierwith = ' = 'capacitywith'
'
                      Node: Node: ,type_identifier = ' = ',_$EventListState'
'
                  Node: Node: formal_parameterclass_body = ' = 'int? price{
  const factory EventListState.initial() = _Initial;
  const factory EventListState.loading() = _Loading;
  const factory EventListState.loaded(List<Event> events) = _Loaded;
  const factory EventListState.error(String message) = _Error;
}'
'
                      Node: Node: type_identifier{ = ' = 'int{'
'
                
=== Processing class:       EventListStateNode: Node:  ===
declarationnullable_type
=== Processing class:  = 'EventDetailState = 'const factory EventListState.initial() = _Initial ===
?'
'
                          Node: Node: redirecting_factory_constructor_signature? = ' = 'const factory EventListState.initial() = _Initial?'
'
                          Node: Node: const_builtinidentifier = ' = 'constprice'
'
                        Node: Node: factory, = ' = 'factory,'
'
                        Node: Node: identifierformal_parameter = 'String? imageUrl'
 = '                EventListState'
          Node: .Node:  = 'type_identifier. = ''
String          '
Node:                 identifierNode:  = 'nullable_typeinitial = ''
?          '
Node:                   formal_parameter_listNode:  = '?() = ''
?            '
Node:                 (Node:  = 'identifier( = ''
imageUrl            '
Node:               )Node:  = ',) = ''
,          '
Node:               =Node:  = 'formal_parameter= = ''
List<String>? tags          '
Node: type_identifier                 = 'Node: _Initialtype_identifier'
 = '      ListNode: '
;                 = 'Node: ;type_arguments'
 = '      <String>Node: '
declaration                   = 'Node: const factory EventListState.loading() = _Loading<'
 = '        <Node: '
redirecting_factory_constructor_signature                   = 'Node: const factory EventListState.loading() = _Loadingtype_identifier'
 = '          StringNode: '
const_builtin                   = 'Node: const>'
 = '          >Node: '
factory                 = 'Node: factorynullable_type'
 = '          ?Node: '
identifier                   = 'Node: EventListState?'
 = '          ?Node: '
.                 = 'Node: .identifier'
 = '          tagsNode: '
identifier               = 'Node: loading,'
 = '          ,Node: '
formal_parameter_list               = 'Node: ()formal_parameter'
 = '            String? statusNode: '
( = '                (Node: '
type_identifier             = 'Node: String)'
 = '                )Node: '
nullable_type           = 'Node: ?='
 = '                  =Node: '
?           = 'Node: ?type_identifier'
 = '                _LoadingNode: '
identifier = 'status'
              Node: , = ','
                    Node: Node: ;} = ' = ';}'
'
                  Node: Node: declaration) = ' = 'const factory EventListState.loaded(List<Event> events) = _Loaded)'
'
                  Node: Node: redirecting_factory_constructor_signature= = ' = 'const factory EventListState.loaded(List<Event> events) = _Loaded='
'
                    Node: Node: const_builtintype_identifier = ' = 'const_EventUpdateRequest'
'
                Node: Node: factory; = ' = 'factory;'
'
                Node: Node: identifiermethod_signature = ' = 'EventListStatefactory EventUpdateRequest.fromJson(Map<String, dynamic> json)'
'
                  Node: Node: .factory_constructor_signature = ' = '.factory EventUpdateRequest.fromJson(Map<String, dynamic> json)'
'
                    Node: Node: identifierfactory = ' = 'loadedfactory'
'
                    Node: Node: formal_parameter_listidentifier = ' = '(List<Event> events)EventUpdateRequest'
'
                      Node: Node: (. = ' = '(.'
'
                      Node: Node: formal_parameteridentifier = ' = 'List<Event> eventsfromJson'
'
                        Node: Node: type_identifierformal_parameter_list = ' = 'List(Map<String, dynamic> json)'
'
                          Node: Node: type_arguments( = ' = '<Event>('
'
                            Node: Node: <formal_parameter = ' = '<Map<String, dynamic> json'
'
                              Node: Node: type_identifiertype_identifier = ' = 'EventMap'
'
                              Node: Node: >type_arguments = ' = '><String, dynamic>'
'
                              Node: Node: identifier< = ' = 'events<'
'
                            Node: Node: )type_identifier = ' = ')String'
'
                          Node: Node: =, = ' = '=,'
'
                          Node: Node: type_identifiertype_identifier = ' = '_Loadeddynamic'
'
                      Node: Node: ;> = ' = ';>'
'
                    Node: Node: declarationidentifier = ' = 'const factory EventListState.error(String message) = _Errorjson'
'
                    Node: Node: redirecting_factory_constructor_signature) = ' = 'const factory EventListState.error(String message) = _Error)'
'
                Node: Node: const_builtinfunction_body = ' = 'const=>
      _$EventUpdateRequestFromJson(json);'
'
                  Node: Node: factory=> = ' = 'factory=>'
'
                  Node: Node: identifieridentifier = ' = 'EventListState_$EventUpdateRequestFromJson'
'
                  Node: Node: .selector = ' = '.(json)'
'
                    Node: Node: identifierargument_part = ' = 'error(json)'
'
                      Node: Node: formal_parameter_listarguments = ' = '(String message)(json)'
'
                          Node: Node: (( = ' = '(('
'
                          Node: Node: formal_parameterargument = ' = 'String messagejson'
'
                              Node: Node: type_identifieridentifier = ' = 'Stringjson'
'
                            Node: Node: identifier) = ' = 'message)'
'
            Node: ) = ')'
          Node: = = '        =Node: '
;           = 'Node: ;type_identifier'
 = '      _ErrorNode: '
}       = 'Node: };'
 = ';  '
Node:       class_definitionNode:  = '}@freezed
class EventListState with _$EventListState {
  const factory EventListState.initial() = _Initial;
  const factory EventListState.loading() = _Loading;
  const factory EventListState.loaded(List<Event> events) = _Loaded;
  const factory EventListState.error(String message) = _Error;
} = ''
}    '
Node:   annotationNode:  = 'class_definition@freezed = ''
@freezed
class EventDetailState with _$EventDetailState {
  const factory EventDetailState.initial() = _DetailInitial;
  const factory EventDetailState.loading() = _DetailLoading;
  const factory EventDetailState.loaded(Event event) = _DetailLoaded;
  const factory EventDetailState.error(String message) = _DetailError;
}      '
Node:     @Node:  = 'annotation@ = ''
@freezed      '
Node:       identifierNode:  = '@freezed = ''
@    '
Node:       classNode:  = 'identifierclass = ''
freezed    '
Node:     identifierNode:  = 'classEventListState = ''
class    '
Node:     superclassNode:  = 'identifierwith _$EventListState = ''
EventDetailState      '
Node:     mixinsNode:  = 'superclasswith _$EventListState = ''
with _$EventDetailState        '
Node:       withNode:  = 'mixinswith = ''
with _$EventDetailState        '
Node:         type_identifierNode:  = 'with_$EventListState = ''
with    '
Node:         class_bodyNode:  = 'type_identifier{
  const factory EventListState.initial() = _Initial;
  const factory EventListState.loading() = _Loading;
  const factory EventListState.loaded(List<Event> events) = _Loaded;
  const factory EventListState.error(String message) = _Error;
} = ''
_$EventDetailState      '
Node:     {Node:  = 'class_body{ = ''
{
  const factory EventDetailState.initial() = _DetailInitial;
  const factory EventDetailState.loading() = _DetailLoading;
  const factory EventDetailState.loaded(Event event) = _DetailLoaded;
  const factory EventDetailState.error(String message) = _DetailError;
}      '
Node:       declarationNode:  = '{const factory EventListState.initial() = _Initial = ''
{        '
Node:       redirecting_factory_constructor_signatureNode:  = 'declarationconst factory EventListState.initial() = _Initial = ''
const factory EventDetailState.initial() = _DetailInitial          '
Node:         const_builtinNode:  = 'redirecting_factory_constructor_signatureconst = ''
const factory EventDetailState.initial() = _DetailInitial          '
Node:           factoryNode:  = 'const_builtinfactory = ''
const          '
Node:           identifierNode:  = 'factoryEventListState = ''
factory          '
Node:           .Node:  = 'identifier. = ''
EventDetailState          '
Node:           identifierNode:  = '.initial = ''
.          '
Node:           formal_parameter_listNode:  = 'identifier() = ''
initial            '
Node:           (Node:  = 'formal_parameter_list( = ''
()            '
Node:             )Node:  = '() = ''
(          '
Node:             =Node:  = ')= = ''
)          '
Node:           type_identifierNode:  = '=_Initial = ''
=      '
Node:           ;Node:  = 'type_identifier; = ''
_DetailInitial      '
Node:       declarationNode:  = ';const factory EventListState.loading() = _Loading = ''
;        '
Node:       redirecting_factory_constructor_signatureNode:  = 'declarationconst factory EventListState.loading() = _Loading = ''
const factory EventDetailState.loading() = _DetailLoading          '
Node:         const_builtinNode:  = 'redirecting_factory_constructor_signatureconst = ''
const factory EventDetailState.loading() = _DetailLoading          '
Node:           factoryNode:  = 'const_builtinfactory = ''
const          '
Node:           identifierNode:  = 'factoryEventListState = ''
factory          '
Node:           .Node:  = 'identifier. = ''
EventDetailState          '
Node:           identifierNode:  = '.loading = ''
.          '
Node:           formal_parameter_listNode:  = 'identifier() = ''
loading            '
Node:           (Node:  = 'formal_parameter_list( = ''
()            '
Node:             )Node:  = '() = ''
(          '
Node:             =Node:  = ')= = ''
)          '
Node:           type_identifierNode:  = '=_Loading = ''
=      '
Node:           ;Node:  = 'type_identifier; = ''
_DetailLoading      '
Node:       declarationNode:  = ';const factory EventListState.loaded(List<Event> events) = _Loaded = ''
;        '
Node:       redirecting_factory_constructor_signatureNode:  = 'declarationconst factory EventListState.loaded(List<Event> events) = _Loaded = ''
const factory EventDetailState.loaded(Event event) = _DetailLoaded          '
Node:         const_builtinNode:  = 'redirecting_factory_constructor_signatureconst = ''
const factory EventDetailState.loaded(Event event) = _DetailLoaded          '
Node:           factoryNode:  = 'const_builtinfactory = ''
const          '
Node:           identifierNode:  = 'factoryEventListState = ''
factory          '
Node:           .Node:  = 'identifier. = ''
EventDetailState          '
Node:           identifierNode:  = '.loaded = ''
.          '
Node:           formal_parameter_listNode:  = 'identifier(List<Event> events) = ''
loaded            '
Node:           (Node:  = 'formal_parameter_list( = ''
(Event event)            '
Node:             formal_parameterNode:  = '(List<Event> events = ''
('
                          Node: Node: type_identifierformal_parameter = ' = 'ListEvent event'
'
              Node:               type_argumentsNode:  = 'type_identifier<Event> = ''
Event                '
Node:               <Node:  = 'identifier< = ''
event                '
Node:             type_identifierNode:  = ')Event = ''
)                '
Node:           >Node:  = '=> = ''
=              '
Node:           identifierNode:  = 'type_identifierevents = ''
_DetailLoaded            '
Node:       )Node:  = ';) = ''
;          '
Node:       =Node:  = 'declaration= = ''
const factory EventDetailState.error(String message) = _DetailError          '
Node:         type_identifierNode:  = 'redirecting_factory_constructor_signature_Loaded = ''
const factory EventDetailState.error(String message) = _DetailError      '
Node:           ;Node:  = 'const_builtin; = ''
const      '
Node:           declarationNode:  = 'factoryconst factory EventListState.error(String message) = _Error = ''
factory        '
Node:           redirecting_factory_constructor_signatureNode:  = 'identifierconst factory EventListState.error(String message) = _Error = ''
EventDetailState          '
Node:           const_builtinNode:  = '.const = ''
.          '
Node:           factoryNode:  = 'identifierfactory = ''
error          '
Node:           identifierNode:  = 'formal_parameter_listEventListState = ''
(String message)          '
Node:             .Node:  = '(. = ''
(          '
Node:             identifierNode:  = 'formal_parametererror = ''
String message          '
Node: formal_parameter_list               = 'Node: (String message)type_identifier'
 = '            StringNode: '
(               = 'Node: (identifier'
 = '            messageNode: '
formal_parameter             = 'Node: String message)'
 = ')              '
Node:           type_identifierNode:  = '=String = ''
=              '
Node:           identifierNode:  = 'type_identifiermessage = ''
_DetailError            '
Node:       )Node:  = ';) = ''
;          '
Node:       =Node:  = '}= = ''
}          '
Node: === End AST ===
type_identifier = '_Error'

=== Processing class:       EventNode:  ===
; = ';'
      Node: } = '}'
  Node: class_definition = '@freezed
class EventDetailState with _$EventDetailState {
  const factory EventDetailState.initial() = _DetailInitial;
  const factory EventDetailState.loading() = _DetailLoading;
  const factory EventDetailState.loaded(Event event) = _DetailLoaded;
  const factory EventDetailState.error(String message) = _DetailError;
}'
    Node: annotation = '@freezed'
      Node: @ = '@'
      Node: identifier = 'freezed'
    Node: class = 'class'
    Node: identifier = 'EventDetailState'
    Node: superclass = 'with _$EventDetailState'
      Node: mixins = 'with _$EventDetailState'
        Node: with = 'with'
        Node: type_identifier = '_$EventDetailState'

=== Processing class:     EventCreateRequestNode:  ===
class_body = '
=== Processing class: {
  const factory EventDetailState.initial() = _DetailInitial;
  const factory EventDetailState.loading() = _DetailLoading;
  const factory EventDetailState.loaded(Event event) = _DetailLoaded;
  const factory EventDetailState.error(String message) = _DetailError;
}EventUpdateRequest'
 ===
      Node: 
=== Processing class: {EventListState = ' ===
{'

=== Processing class:       EventDetailStateNode:  ===
declaration = 'const factory EventDetailState.initial() = _DetailInitial'
        Node: redirecting_factory_constructor_signature = 'const factory EventDetailState.initial() = _DetailInitial'
          Node: const_builtin = 'const'
          Node: factory = 'factory'
          Node: identifier = 'EventDetailState'
          Node: . = '.'
          Node: identifier = 'initial'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
          Node: = = '='
          Node: type_identifier = '_DetailInitial'
      Node: ; = ';'
      Node: declaration = 'const factory EventDetailState.loading() = _DetailLoading'
        Node: redirecting_factory_constructor_signature = 'const factory EventDetailState.loading() = _DetailLoading'
          Node: const_builtin = 'const'
          Node: factory = 'factory'
          Node: identifier = 'EventDetailState'
          Node: . = '.'
          Node: identifier = 'loading'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
          Node: = = '='
          Node: type_identifier = '_DetailLoading'
      Node: ; = ';'
      Node: declaration = 'const factory EventDetailState.loaded(Event event) = _DetailLoaded'
        Node: redirecting_factory_constructor_signature = 'const factory EventDetailState.loaded(Event event) = _DetailLoaded'
          Node: const_builtin = 'const'
          Node: factory = 'factory'
          Node: identifier = 'EventDetailState'
          Node: . = '.'
          Node: identifier = 'loaded'
          Node: formal_parameter_list = '(Event event)'
            Node: ( = '('
            Node: formal_parameter = 'Event event'
              Node: type_identifier = 'Event'
              Node: identifier = 'event'
            Node: ) = ')'
          Node: = = '='
          Node: type_identifier = '_DetailLoaded'
      Node: ; = ';'
      Node: declaration = 'const factory EventDetailState.error(String message) = _DetailError'
        Node: redirecting_factory_constructor_signature = 'const factory EventDetailState.error(String message) = _DetailError'
          Node: const_builtin = 'const'
          Node: factory = 'factory'
          Node: identifier = 'EventDetailState'
          Node: . = '.'
          Node: identifier = 'error'
          Node: formal_parameter_list = '(String message)'
            Node: ( = '('
            Node: formal_parameter = 'String message'
              Node: type_identifier = 'String'
              Node: identifier = 'message'
            Node: ) = ')'
          Node: = = '='
          Node: type_identifier = '_DetailError'
      Node: ; = ';'
      Node: } = '}'
=== End AST ===

=== Processing class: Event ===

=== Processing class: EventCreateRequest ===

=== Processing class: EventUpdateRequest ===

=== Processing class: EventListState ===

=== Processing class: EventDetailState ===

=== Complete AST for test_flutter_app/aminomi/lib/providers/auth_provider.dart ===
Node: program = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;
import 'package:riverpod/riverpod.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import '../models/user.dart';
import '../services/line_auth_service.dart';

part 'auth_provider.g.dart';

@riverpod
class AuthNotifier extends _$AuthNotifier {
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}

/// 認証状態プロバイダー
@riverpod
AuthState authState(Ref ref) {
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}

/// 現在のユーザープロバイダー
@riverpod
AppUser? currentUser(Ref ref) {
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}

/// 認証済みかどうかのプロバイダー
@riverpod
bool isAuthenticated(Ref ref) {
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}
'
  Node: import_or_export = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
    Node: library_import = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
      Node: import_specification = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
        Node: import = 'import'
        Node: configurable_uri = ''package:firebase_auth/firebase_auth.dart''
          Node: uri = ''package:firebase_auth/firebase_auth.dart''
            Node: string_literal = ''package:firebase_auth/firebase_auth.dart''
              Node: ' = '''
              Node: ' = '''
        Node: as = 'as'
        Node: identifier = 'firebase_auth'
        Node: ; = ';'
  Node: import_or_export = 'import 'package:riverpod/riverpod.dart';'
    Node: library_import = 'import 'package:riverpod/riverpod.dart';'
      Node: import_specification = 'import 'package:riverpod/riverpod.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:riverpod/riverpod.dart''
          Node: uri = ''package:riverpod/riverpod.dart''
            Node: string_literal = ''package:riverpod/riverpod.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
    Node: library_import = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
      Node: import_specification = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:riverpod_annotation/riverpod_annotation.dart''
          Node: uri = ''package:riverpod_annotation/riverpod_annotation.dart''
            Node: string_literal = ''package:riverpod_annotation/riverpod_annotation.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import '../models/user.dart';'
    Node: library_import = 'import '../models/user.dart';'
      Node: import_specification = 'import '../models/user.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''../models/user.dart''
          Node: uri = ''../models/user.dart''
            Node: string_literal = ''../models/user.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import '../services/line_auth_service.dart';'
    Node: library_import = 'import '../services/line_auth_service.dart';'
      Node: import_specification = 'import '../services/line_auth_service.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''../services/line_auth_service.dart''
          Node: uri = ''../services/line_auth_service.dart''
            Node: string_literal = ''../services/line_auth_service.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: part_directive = 'part 'auth_provider.g.dart';'
    Node: part = 'part'
    Node: uri = ''auth_provider.g.dart''
      Node: string_literal = ''auth_provider.g.dart''
        Node: ' = '''
        Node: ' = '''
    Node: ; = ';'
  Node: class_definition = '@riverpod
class AuthNotifier extends _$AuthNotifier {
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}'
    Node: annotation = '@riverpod'
      Node: @ = '@'
      Node: identifier = 'riverpod'
    Node: class = 'class'
    Node: identifier = 'AuthNotifier'
    Node: superclass = 'extends _$AuthNotifier'
      Node: extends = 'extends'
      Node: type_identifier = '_$AuthNotifier'
    Node: class_body = '{
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}'
      Node: { = '{'
      Node: annotation = '@override'
        Node: @ = '@'
        Node: identifier = 'override'
      Node: method_signature = 'AuthState build()'
        Node: function_signature = 'AuthState build()'
          Node: type_identifier = 'AuthState'
          Node: identifier = 'build'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = '{
    return const AuthState.initial();
  }'
        Node: block = '{
    return const AuthState.initial();
  }'
          Node: { = '{'
          Node: return_statement = 'return const AuthState.initial();'
            Node: return = 'return'
            Node: const_object_expression = 'const AuthState.initial()'
              Node: const_builtin = 'const'
              Node: type_identifier = 'AuthState'
              Node: . = '.'
              Node: identifier = 'initial'
              Node: arguments = '()'
                Node: ( = '('
                Node: ) = ')'
            Node: ; = ';'
          Node: } = '}'
      Node: documentation_comment = '/// LINEログイン'
        Node: /// = '///'
      Node: method_signature = 'Future<void> signInWithLine()'
        Node: function_signature = 'Future<void> signInWithLine()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'signInWithLine'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: expression_statement = 'state = const AuthState.loading();'
            Node: assignment_expression = 'state = const AuthState.loading()'
              Node: assignable_expression = 'state'
                Node: identifier = 'state'
              Node: = = '='
              Node: const_object_expression = 'const AuthState.loading()'
                Node: const_builtin = 'const'
                Node: type_identifier = 'AuthState'
                Node: . = '.'
                Node: identifier = 'loading'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: ; = ';'
          Node: try_statement = 'try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    }'
              Node: { = '{'
              Node: local_variable_declaration = 'final result = await LineAuthService.login();'
                Node: initialized_variable_definition = 'final result = await LineAuthService.login()'
                  Node: final_builtin = 'final'
                    Node: final = 'final'
                  Node: identifier = 'result'
                  Node: = = '='
                  Node: unary_expression = 'await LineAuthService.login()'
                    Node: await_expression = 'await LineAuthService.login()'
                      Node: await = 'await'
                      Node: identifier = 'LineAuthService'
                      Node: selector = '.login'
                        Node: unconditional_assignable_selector = '.login'
                          Node: . = '.'
                          Node: identifier = 'login'
                      Node: selector = '()'
                        Node: argument_part = '()'
                          Node: arguments = '()'
                            Node: ( = '('
                            Node: ) = ')'
                Node: ; = ';'
              Node: if_statement = 'if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }'
                Node: if = 'if'
                Node: ( = '('
                Node: equality_expression = 'result != null'
                  Node: identifier = 'result'
                  Node: equality_operator = '!='
                  Node: null_literal = 'null'
                    Node: null = 'null'
                Node: ) = ')'
                Node: block = '{
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      }'
                  Node: { = '{'
                  Node: comment = '// Firebaseカスタムトークンでサインイン'
                    Node: // = '//'
                  Node: local_variable_declaration = 'final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );'
                    Node: initialized_variable_definition = 'final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                      Node: final_builtin = 'final'
                        Node: final = 'final'
                      Node: identifier = 'userCredential'
                      Node: = = '='
                      Node: unary_expression = 'await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                        Node: await_expression = 'await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                          Node: await = 'await'
                          Node: identifier = 'firebase_auth'
                          Node: selector = '.FirebaseAuth'
                            Node: unconditional_assignable_selector = '.FirebaseAuth'
                              Node: . = '.'
                              Node: identifier = 'FirebaseAuth'
                          Node: selector = '.instance'
                            Node: unconditional_assignable_selector = '.instance'
                              Node: . = '.'
                              Node: identifier = 'instance'
                          Node: selector = '.signInWithCustomToken'
                            Node: unconditional_assignable_selector = '.signInWithCustomToken'
                              Node: . = '.'
                              Node: identifier = 'signInWithCustomToken'
                          Node: selector = '(
          result.accessToken,
        )'
                            Node: argument_part = '(
          result.accessToken,
        )'
                              Node: arguments = '(
          result.accessToken,
        )'
                                Node: ( = '('
                                Node: argument = 'result.accessToken'
                                  Node: identifier = 'result'
                                  Node: selector = '.accessToken'
                                    Node: unconditional_assignable_selector = '.accessToken'
                                      Node: . = '.'
                                      Node: identifier = 'accessToken'
                                Node: , = ','
                                Node: ) = ')'
                    Node: ; = ';'
                  Node: if_statement = 'if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }'
                    Node: if = 'if'
                    Node: ( = '('
                    Node: equality_expression = 'userCredential.user != null'
                      Node: identifier = 'userCredential'
                      Node: selector = '.user'
                        Node: unconditional_assignable_selector = '.user'
                          Node: . = '.'
                          Node: identifier = 'user'
                      Node: equality_operator = '!='
                      Node: null_literal = 'null'
                        Node: null = 'null'
                    Node: ) = ')'
                    Node: block = '{
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        }'
                      Node: { = '{'
                      Node: local_variable_declaration = 'final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );'
                        Node: initialized_variable_definition = 'final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                          Node: final_builtin = 'final'
                            Node: final = 'final'
                          Node: identifier = 'user'
                          Node: = = '='
                          Node: identifier = 'AppUser'
                          Node: selector = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                            Node: argument_part = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                              Node: arguments = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                                Node: ( = '('
                                Node: named_argument = 'id: userCredential.user!.uid'
                                  Node: label = 'id:'
                                    Node: identifier = 'id'
                                    Node: : = ':'
                                  Node: identifier = 'userCredential'
                                  Node: selector = '.user'
                                    Node: unconditional_assignable_selector = '.user'
                                      Node: . = '.'
                                      Node: identifier = 'user'
                                  Node: selector = '!'
                                    Node: ! = '!'
                                  Node: selector = '.uid'
                                    Node: unconditional_assignable_selector = '.uid'
                                      Node: . = '.'
                                      Node: identifier = 'uid'
                                Node: , = ','
                                Node: named_argument = 'displayName: result.profile.displayName'
                                  Node: label = 'displayName:'
                                    Node: identifier = 'displayName'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.displayName'
                                    Node: unconditional_assignable_selector = '.displayName'
                                      Node: . = '.'
                                      Node: identifier = 'displayName'
                                Node: , = ','
                                Node: named_argument = 'photoURL: result.profile.pictureUrl'
                                  Node: label = 'photoURL:'
                                    Node: identifier = 'photoURL'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.pictureUrl'
                                    Node: unconditional_assignable_selector = '.pictureUrl'
                                      Node: . = '.'
                                      Node: identifier = 'pictureUrl'
                                Node: , = ','
                                Node: named_argument = 'statusMessage: result.profile.statusMessage'
                                  Node: label = 'statusMessage:'
                                    Node: identifier = 'statusMessage'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.statusMessage'
                                    Node: unconditional_assignable_selector = '.statusMessage'
                                      Node: . = '.'
                                      Node: identifier = 'statusMessage'
                                Node: , = ','
                                Node: named_argument = 'provider: 'line''
                                  Node: label = 'provider:'
                                    Node: identifier = 'provider'
                                    Node: : = ':'
                                  Node: string_literal = ''line''
                                    Node: ' = '''
                                    Node: ' = '''
                                Node: , = ','
                                Node: named_argument = 'createdAt: DateTime.now()'
                                  Node: label = 'createdAt:'
                                    Node: identifier = 'createdAt'
                                    Node: : = ':'
                                  Node: identifier = 'DateTime'
                                  Node: selector = '.now'
                                    Node: unconditional_assignable_selector = '.now'
                                      Node: . = '.'
                                      Node: identifier = 'now'
                                  Node: selector = '()'
                                    Node: argument_part = '()'
                                      Node: arguments = '()'
                                        Node: ( = '('
                                        Node: ) = ')'
                                Node: , = ','
                                Node: ) = ')'
                        Node: ; = ';'
                      Node: expression_statement = 'state = AuthState.authenticated(user);'
                        Node: assignment_expression = 'state = AuthState.authenticated(user)'
                          Node: assignable_expression = 'state'
                            Node: identifier = 'state'
                          Node: = = '='
                          Node: identifier = 'AuthState'
                          Node: selector = '.authenticated'
                            Node: unconditional_assignable_selector = '.authenticated'
                              Node: . = '.'
                              Node: identifier = 'authenticated'
                          Node: selector = '(user)'
                            Node: argument_part = '(user)'
                              Node: arguments = '(user)'
                                Node: ( = '('
                                Node: argument = 'user'
                                  Node: identifier = 'user'
                                Node: ) = ')'
                        Node: ; = ';'
                      Node: } = '}'
                    Node: else = 'else'
                    Node: block = '{
          state = const AuthState.error('Failed to sign in with custom token');
        }'
                      Node: { = '{'
                      Node: expression_statement = 'state = const AuthState.error('Failed to sign in with custom token');'
                        Node: assignment_expression = 'state = const AuthState.error('Failed to sign in with custom token')'
                          Node: assignable_expression = 'state'
                            Node: identifier = 'state'
                          Node: = = '='
                          Node: const_object_expression = 'const AuthState.error('Failed to sign in with custom token')'
                            Node: const_builtin = 'const'
                            Node: type_identifier = 'AuthState'
                            Node: . = '.'
                            Node: identifier = 'error'
                            Node: arguments = '('Failed to sign in with custom token')'
                              Node: ( = '('
                              Node: argument = ''Failed to sign in with custom token''
                                Node: string_literal = ''Failed to sign in with custom token''
                                  Node: ' = '''
                                  Node: ' = '''
                              Node: ) = ')'
                        Node: ; = ';'
                      Node: } = '}'
                  Node: } = '}'
                Node: else = 'else'
                Node: block = '{
        state = const AuthState.error('LINE login failed');
      }'
                  Node: { = '{'
                  Node: expression_statement = 'state = const AuthState.error('LINE login failed');'
                    Node: assignment_expression = 'state = const AuthState.error('LINE login failed')'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: const_object_expression = 'const AuthState.error('LINE login failed')'
                        Node: const_builtin = 'const'
                        Node: type_identifier = 'AuthState'
                        Node: . = '.'
                        Node: identifier = 'error'
                        Node: arguments = '('LINE login failed')'
                          Node: ( = '('
                          Node: argument = ''LINE login failed''
                            Node: string_literal = ''LINE login failed''
                              Node: ' = '''
                              Node: ' = '''
                          Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// ログアウト'
        Node: /// = '///'
      Node: method_signature = 'Future<void> signOut()'
        Node: function_signature = 'Future<void> signOut()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'signOut'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: try_statement = 'try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    }'
              Node: { = '{'
              Node: expression_statement = 'await firebase_auth.FirebaseAuth.instance.signOut();'
                Node: unary_expression = 'await firebase_auth.FirebaseAuth.instance.signOut()'
                  Node: await_expression = 'await firebase_auth.FirebaseAuth.instance.signOut()'
                    Node: await = 'await'
                    Node: identifier = 'firebase_auth'
                    Node: selector = '.FirebaseAuth'
                      Node: unconditional_assignable_selector = '.FirebaseAuth'
                        Node: . = '.'
                        Node: identifier = 'FirebaseAuth'
                    Node: selector = '.instance'
                      Node: unconditional_assignable_selector = '.instance'
                        Node: . = '.'
                        Node: identifier = 'instance'
                    Node: selector = '.signOut'
                      Node: unconditional_assignable_selector = '.signOut'
                        Node: . = '.'
                        Node: identifier = 'signOut'
                    Node: selector = '()'
                      Node: argument_part = '()'
                        Node: arguments = '()'
                          Node: ( = '('
                          Node: ) = ')'
                Node: ; = ';'
              Node: expression_statement = 'state = const AuthState.unauthenticated();'
                Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: const_object_expression = 'const AuthState.unauthenticated()'
                    Node: const_builtin = 'const'
                    Node: type_identifier = 'AuthState'
                    Node: . = '.'
                    Node: identifier = 'unauthenticated'
                    Node: arguments = '()'
                      Node: ( = '('
                      Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// 現在のユーザーを取得'
        Node: /// = '///'
      Node: method_signature = 'Future<void> getCurrentUser()'
        Node: function_signature = 'Future<void> getCurrentUser()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'getCurrentUser'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: expression_statement = 'state = const AuthState.loading();'
            Node: assignment_expression = 'state = const AuthState.loading()'
              Node: assignable_expression = 'state'
                Node: identifier = 'state'
              Node: = = '='
              Node: const_object_expression = 'const AuthState.loading()'
                Node: const_builtin = 'const'
                Node: type_identifier = 'AuthState'
                Node: . = '.'
                Node: identifier = 'loading'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: ; = ';'
          Node: try_statement = 'try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    }'
              Node: { = '{'
              Node: local_variable_declaration = 'final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;'
                Node: initialized_variable_definition = 'final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser'
                  Node: final_builtin = 'final'
                    Node: final = 'final'
                  Node: identifier = 'firebaseUser'
                  Node: = = '='
                  Node: identifier = 'firebase_auth'
                  Node: selector = '.FirebaseAuth'
                    Node: unconditional_assignable_selector = '.FirebaseAuth'
                      Node: . = '.'
                      Node: identifier = 'FirebaseAuth'
                  Node: selector = '.instance'
                    Node: unconditional_assignable_selector = '.instance'
                      Node: . = '.'
                      Node: identifier = 'instance'
                  Node: selector = '.currentUser'
                    Node: unconditional_assignable_selector = '.currentUser'
                      Node: . = '.'
                      Node: identifier = 'currentUser'
                Node: ; = ';'
              Node: if_statement = 'if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }'
                Node: if = 'if'
                Node: ( = '('
                Node: equality_expression = 'firebaseUser != null'
                  Node: identifier = 'firebaseUser'
                  Node: equality_operator = '!='
                  Node: null_literal = 'null'
                    Node: null = 'null'
                Node: ) = ')'
                Node: block = '{
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      }'
                  Node: { = '{'
                  Node: comment = '// Firestoreからユーザー情報を取得'
                    Node: // = '//'
                  Node: comment = '// TODO: FirestoreServiceを使用してユーザー情報を取得'
                    Node: // = '//'
                  Node: local_variable_declaration = 'final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );'
                    Node: initialized_variable_definition = 'final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                      Node: final_builtin = 'final'
                        Node: final = 'final'
                      Node: identifier = 'user'
                      Node: = = '='
                      Node: identifier = 'AppUser'
                      Node: selector = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                        Node: argument_part = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                          Node: arguments = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                            Node: ( = '('
                            Node: named_argument = 'id: firebaseUser.uid'
                              Node: label = 'id:'
                                Node: identifier = 'id'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.uid'
                                Node: unconditional_assignable_selector = '.uid'
                                  Node: . = '.'
                                  Node: identifier = 'uid'
                            Node: , = ','
                            Node: named_argument = 'displayName: firebaseUser.displayName ?? 'Unknown User''
                              Node: label = 'displayName:'
                                Node: identifier = 'displayName'
                                Node: : = ':'
                              Node: if_null_expression = 'firebaseUser.displayName ?? 'Unknown User''
                                Node: identifier = 'firebaseUser'
                                Node: selector = '.displayName'
                                  Node: unconditional_assignable_selector = '.displayName'
                                    Node: . = '.'
                                    Node: identifier = 'displayName'
                                Node: ?? = '??'
                                Node: string_literal = ''Unknown User''
                                  Node: ' = '''
                                  Node: ' = '''
                            Node: , = ','
                            Node: named_argument = 'email: firebaseUser.email'
                              Node: label = 'email:'
                                Node: identifier = 'email'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.email'
                                Node: unconditional_assignable_selector = '.email'
                                  Node: . = '.'
                                  Node: identifier = 'email'
                            Node: , = ','
                            Node: named_argument = 'photoURL: firebaseUser.photoURL'
                              Node: label = 'photoURL:'
                                Node: identifier = 'photoURL'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.photoURL'
                                Node: unconditional_assignable_selector = '.photoURL'
                                  Node: . = '.'
                                  Node: identifier = 'photoURL'
                            Node: , = ','
                            Node: named_argument = 'provider: 'line''
                              Node: label = 'provider:'
                                Node: identifier = 'provider'
                                Node: : = ':'
                              Node: string_literal = ''line''
                                Node: ' = '''
                                Node: ' = '''
                            Node: , = ','
                            Node: ) = ')'
                    Node: ; = ';'
                  Node: expression_statement = 'state = AuthState.authenticated(user);'
                    Node: assignment_expression = 'state = AuthState.authenticated(user)'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: identifier = 'AuthState'
                      Node: selector = '.authenticated'
                        Node: unconditional_assignable_selector = '.authenticated'
                          Node: . = '.'
                          Node: identifier = 'authenticated'
                      Node: selector = '(user)'
                        Node: argument_part = '(user)'
                          Node: arguments = '(user)'
                            Node: ( = '('
                            Node: argument = 'user'
                              Node: identifier = 'user'
                            Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
                Node: else = 'else'
                Node: block = '{
        state = const AuthState.unauthenticated();
      }'
                  Node: { = '{'
                  Node: expression_statement = 'state = const AuthState.unauthenticated();'
                    Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: const_object_expression = 'const AuthState.unauthenticated()'
                        Node: const_builtin = 'const'
                        Node: type_identifier = 'AuthState'
                        Node: . = '.'
                        Node: identifier = 'unauthenticated'
                        Node: arguments = '()'
                          Node: ( = '('
                          Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// 認証状態の監視'
        Node: /// = '///'
      Node: method_signature = 'void listenToAuthChanges()'
        Node: function_signature = 'void listenToAuthChanges()'
          Node: void_type = 'void'
          Node: identifier = 'listenToAuthChanges'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = '{
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }'
        Node: block = '{
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }'
          Node: { = '{'
          Node: expression_statement = 'firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });'
            Node: identifier = 'firebase_auth'
            Node: selector = '.FirebaseAuth'
              Node: unconditional_assignable_selector = '.FirebaseAuth'
                Node: . = '.'
                Node: identifier = 'FirebaseAuth'
            Node: selector = '.instance'
              Node: unconditional_assignable_selector = '.instance'
                Node: . = '.'
                Node: identifier = 'instance'
            Node: selector = '.authStateChanges'
              Node: unconditional_assignable_selector = '.authStateChanges'
                Node: . = '.'
                Node: identifier = 'authStateChanges'
            Node: selector = '()'
              Node: argument_part = '()'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: selector = '.listen'
              Node: unconditional_assignable_selector = '.listen'
                Node: . = '.'
                Node: identifier = 'listen'
            Node: selector = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
              Node: argument_part = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
                Node: arguments = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
                  Node: ( = '('
                  Node: argument = '(firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                    Node: function_expression = '(firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                      Node: formal_parameter_list = '(firebaseUser)'
                        Node: ( = '('
                        Node: formal_parameter = 'firebaseUser'
                          Node: identifier = 'firebaseUser'
                        Node: ) = ')'
                      Node: function_expression_body = '{
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                        Node: block = '{
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                          Node: { = '{'
                          Node: if_statement = 'if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }'
                            Node: if = 'if'
                            Node: ( = '('
                            Node: equality_expression = 'firebaseUser != null'
                              Node: identifier = 'firebaseUser'
                              Node: equality_operator = '!='
                              Node: null_literal = 'null'
                                Node: null = 'null'
                            Node: ) = ')'
                            Node: block = '{
        // ユーザーがログインしている場合
        getCurrentUser();
      }'
                              Node: { = '{'
                              Node: comment = '// ユーザーがログインしている場合'
                                Node: // = '//'
                              Node: expression_statement = 'getCurrentUser();'
                                Node: identifier = 'getCurrentUser'
                                Node: selector = '()'
                                  Node: argument_part = '()'
                                    Node: arguments = '()'
                                      Node: ( = '('
                                      Node: ) = ')'
                                Node: ; = ';'
                              Node: } = '}'
                            Node: else = 'else'
                            Node: block = '{
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }'
                              Node: { = '{'
                              Node: comment = '// ユーザーがログアウトしている場合'
                                Node: // = '//'
                              Node: expression_statement = 'state = const AuthState.unauthenticated();'
                                Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                                  Node: assignable_expression = 'state'
                                    Node: identifier = 'state'
                                  Node: = = '='
                                  Node: const_object_expression = 'const AuthState.unauthenticated()'
                                    Node: const_builtin = 'const'
                                    Node: type_identifier = 'AuthState'
                                    Node: . = '.'
                                    Node: identifier = 'unauthenticated'
                                    Node: arguments = '()'
                                      Node: ( = '('
                                      Node: ) = ')'
                                Node: ; = ';'
                              Node: } = '}'
                          Node: } = '}'
                  Node: ) = ')'
            Node: ; = ';'
          Node: } = '}'
      Node: } = '}'
  Node: documentation_comment = '/// 認証状態プロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'AuthState authState(Ref ref)'
    Node: type_identifier = 'AuthState'
    Node: identifier = 'authState'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}'
    Node: block = '{
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}'
      Node: { = '{'
      Node: comment = '// 初回起動時に認証状態を監視開始'
        Node: // = '//'
      Node: expression_statement = 'ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });'
        Node: identifier = 'ref'
        Node: selector = '.listen'
          Node: unconditional_assignable_selector = '.listen'
            Node: . = '.'
            Node: identifier = 'listen'
        Node: selector = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
          Node: argument_part = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
            Node: arguments = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
              Node: ( = '('
              Node: argument = 'authNotifierProvider'
                Node: identifier = 'authNotifierProvider'
              Node: , = ','
              Node: argument = '(previous, next) {
    // 認証状態が変更された時の処理
  }'
                Node: function_expression = '(previous, next) {
    // 認証状態が変更された時の処理
  }'
                  Node: formal_parameter_list = '(previous, next)'
                    Node: ( = '('
                    Node: formal_parameter = 'previous'
                      Node: identifier = 'previous'
                    Node: , = ','
                    Node: formal_parameter = 'next'
                      Node: identifier = 'next'
                    Node: ) = ')'
                  Node: function_expression_body = '{
    // 認証状態が変更された時の処理
  }'
                    Node: block = '{
    // 認証状態が変更された時の処理
  }'
                      Node: { = '{'
                      Node: comment = '// 認証状態が変更された時の処理'
                        Node: // = '//'
                      Node: } = '}'
              Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return ref.watch(authNotifierProvider);'
        Node: return = 'return'
        Node: identifier = 'ref'
        Node: selector = '.watch'
          Node: unconditional_assignable_selector = '.watch'
            Node: . = '.'
            Node: identifier = 'watch'
        Node: selector = '(authNotifierProvider)'
          Node: argument_part = '(authNotifierProvider)'
            Node: arguments = '(authNotifierProvider)'
              Node: ( = '('
              Node: argument = 'authNotifierProvider'
                Node: identifier = 'authNotifierProvider'
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
  Node: documentation_comment = '/// 現在のユーザープロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'AppUser? currentUser(Ref ref)'
    Node: type_identifier = 'AppUser'
    Node: nullable_type = '?'
      Node: ? = '?'
    Node: identifier = 'currentUser'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}'
    Node: block = '{
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}'
      Node: { = '{'
      Node: local_variable_declaration = 'final authState = ref.watch(authStateProvider);'
        Node: initialized_variable_definition = 'final authState = ref.watch(authStateProvider)'
          Node: final_builtin = 'final'
            Node: final = 'final'
          Node: identifier = 'authState'
          Node: = = '='
          Node: identifier = 'ref'
          Node: selector = '.watch'
            Node: unconditional_assignable_selector = '.watch'
              Node: . = '.'
              Node: identifier = 'watch'
          Node: selector = '(authStateProvider)'
            Node: argument_part = '(authStateProvider)'
              Node: arguments = '(authStateProvider)'
                Node: ( = '('
                Node: argument = 'authStateProvider'
                  Node: identifier = 'authStateProvider'
                Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );'
        Node: return = 'return'
        Node: identifier = 'authState'
        Node: selector = '.when'
          Node: unconditional_assignable_selector = '.when'
            Node: . = '.'
            Node: identifier = 'when'
        Node: selector = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
          Node: argument_part = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
            Node: arguments = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
              Node: ( = '('
              Node: named_argument = 'authenticated: (user) => user'
                Node: label = 'authenticated:'
                  Node: identifier = 'authenticated'
                  Node: : = ':'
                Node: function_expression = '(user) => user'
                  Node: formal_parameter_list = '(user)'
                    Node: ( = '('
                    Node: formal_parameter = 'user'
                      Node: identifier = 'user'
                    Node: ) = ')'
                  Node: function_expression_body = '=> user'
                    Node: => = '=>'
                    Node: identifier = 'user'
              Node: , = ','
              Node: named_argument = 'initial: () => null'
                Node: label = 'initial:'
                  Node: identifier = 'initial'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'loading: () => null'
                Node: label = 'loading:'
                  Node: identifier = 'loading'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'unauthenticated: () => null'
                Node: label = 'unauthenticated:'
                  Node: identifier = 'unauthenticated'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'error: (_) => null'
                Node: label = 'error:'
                  Node: identifier = 'error'
                  Node: : = ':'
                Node: function_expression = '(_) => null'
                  Node: formal_parameter_list = '(_)'
                    Node: ( = '('
                    Node: formal_parameter = '_'
                      Node: identifier = '_'
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
  Node: documentation_comment = '/// 認証済みかどうかのプロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'bool isAuthenticated(Ref ref)'
    Node: type_identifier = 'bool'
    Node: identifier = 'isAuthenticated'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}'
    Node: block = '{
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}'
      Node: { = '{'
      Node: local_variable_declaration = 'final authState = ref.watch(authStateProvider);'
        Node: initialized_variable_definition = 'final authState = ref.watch(authStateProvider)'
          Node: final_builtin = 'final'
            Node: final = 'final'
          Node: identifier = 'authState'
          Node: = = '='
          Node: identifier = 'ref'
          Node: selector = '.watch'
            Node: unconditional_assignable_selector = '.watch'
              Node: . = '.'
              Node: identifier = 'watch'
          Node: selector = '(authStateProvider)'
            Node: argument_part = '(authStateProvider)'
              Node: arguments = '(authStateProvider)'
                Node: ( = '('
                Node: argument = 'authStateProvider'
                  Node: identifier = 'authStateProvider'
                Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );'
        Node: return = 'return'
        Node: identifier = 'authState'
        Node: selector = '.maybeWhen'
          Node: unconditional_assignable_selector = '.maybeWhen'
            Node: . = '.'
            Node: identifier = 'maybeWhen'
        Node: selector = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
          Node: argument_part = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
            Node: arguments = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
              Node: ( = '('
              Node: named_argument = 'authenticated: (_) => true'
                Node: label = 'authenticated:'
                  Node: identifier = 'authenticated'
                  Node: : = ':'
                Node: function_expression = '(_) => true'
                  Node: formal_parameter_list = '(_)'
                    Node: ( = '('
                    Node: formal_parameter = '_'
                      Node: identifier = '_'
                    Node: ) = ')'
                  Node: function_expression_body = '=> true'
                    Node: => = '=>'
                    Node: true = 'true'
                      Node: true = 'true'
              Node: , = ','
              Node: named_argument = 'orElse: () => false'
                Node: label = 'orElse:'
                  Node: identifier = 'orElse'
                  Node: : = ':'
                Node: function_expression = '() => false'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> false'
                    Node: => = '=>'
                    Node: false = 'false'
                      Node: false = 'false'
              Node: , = ','
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
=== End AST ===

=== Complete AST for test_flutter_app/aminomi/lib/providers/auth_provider.dart ===
Node: program = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;
import 'package:riverpod/riverpod.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import '../models/user.dart';
import '../services/line_auth_service.dart';

part 'auth_provider.g.dart';

@riverpod
class AuthNotifier extends _$AuthNotifier {
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}

/// 認証状態プロバイダー
@riverpod
AuthState authState(Ref ref) {
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}

/// 現在のユーザープロバイダー
@riverpod
AppUser? currentUser(Ref ref) {
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}

/// 認証済みかどうかのプロバイダー
@riverpod
bool isAuthenticated(Ref ref) {
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}
'
  Node: import_or_export = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
    Node: library_import = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
      Node: import_specification = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
        Node: import = 'import'
        Node: configurable_uri = ''package:firebase_auth/firebase_auth.dart''
          Node: uri = ''package:firebase_auth/firebase_auth.dart''
            Node: string_literal = ''package:firebase_auth/firebase_auth.dart''
              Node: ' = '''
              Node: ' = '''
        Node: as = 'as'
        Node: identifier = 'firebase_auth'
        Node: ; = ';'
  Node: import_or_export = 'import 'package:riverpod/riverpod.dart';'
    Node: library_import = 'import 'package:riverpod/riverpod.dart';'
      Node: import_specification = 'import 'package:riverpod/riverpod.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:riverpod/riverpod.dart''
          Node: uri = ''package:riverpod/riverpod.dart''
            Node: string_literal = ''package:riverpod/riverpod.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
    Node: library_import = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
      Node: import_specification = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:riverpod_annotation/riverpod_annotation.dart''
          Node: uri = ''package:riverpod_annotation/riverpod_annotation.dart''
            Node: string_literal = ''package:riverpod_annotation/riverpod_annotation.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import '../models/user.dart';'
    Node: library_import = 'import '../models/user.dart';'
      Node: import_specification = 'import '../models/user.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''../models/user.dart''
          Node: uri = ''../models/user.dart''
            Node: string_literal = ''../models/user.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import '../services/line_auth_service.dart';'
    Node: library_import = 'import '../services/line_auth_service.dart';'
      Node: import_specification = 'import '../services/line_auth_service.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''../services/line_auth_service.dart''
          Node: uri = ''../services/line_auth_service.dart''
            Node: string_literal = ''../services/line_auth_service.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: part_directive = 'part 'auth_provider.g.dart';'
    Node: part = 'part'
    Node: uri = ''auth_provider.g.dart''
      Node: string_literal = ''auth_provider.g.dart''
        Node: ' = '''
        Node: ' = '''
    Node: ; = ';'
  Node: class_definition = '@riverpod
class AuthNotifier extends _$AuthNotifier {
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}'
    Node: annotation = '@riverpod'
      Node: @ = '@'
      Node: identifier = 'riverpod'
    Node: class = 'class'
    Node: identifier = 'AuthNotifier'
    Node: superclass = 'extends _$AuthNotifier'
      Node: extends = 'extends'
      Node: type_identifier = '_$AuthNotifier'
    Node: class_body = '{
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}'
      Node: { = '{'
      Node: annotation = '@override'
        Node: @ = '@'
        Node: identifier = 'override'
      Node: method_signature = 'AuthState build()'
        Node: function_signature = 'AuthState build()'
          Node: type_identifier = 'AuthState'
          Node: identifier = 'build'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = '{
    return const AuthState.initial();
  }'
        Node: block = '{
    return const AuthState.initial();
  }'
          Node: { = '{'
          Node: return_statement = 'return const AuthState.initial();'
            Node: return = 'return'
            Node: const_object_expression = 'const AuthState.initial()'
              Node: const_builtin = 'const'
              Node: type_identifier = 'AuthState'
              Node: . = '.'
              Node: identifier = 'initial'
              Node: arguments = '()'
                Node: ( = '('
                Node: ) = ')'
            Node: ; = ';'
          Node: } = '}'
      Node: documentation_comment = '/// LINEログイン'
        Node: /// = '///'
      Node: method_signature = 'Future<void> signInWithLine()'
        Node: function_signature = 'Future<void> signInWithLine()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'signInWithLine'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: expression_statement = 'state = const AuthState.loading();'
            Node: assignment_expression = 'state = const AuthState.loading()'
              Node: assignable_expression = 'state'
                Node: identifier = 'state'
              Node: = = '='
              Node: const_object_expression = 'const AuthState.loading()'
                Node: const_builtin = 'const'
                Node: type_identifier = 'AuthState'
                Node: . = '.'
                Node: identifier = 'loading'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: ; = ';'
          Node: try_statement = 'try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    }'
              Node: { = '{'
              Node: local_variable_declaration = 'final result = await LineAuthService.login();'
                Node: initialized_variable_definition = 'final result = await LineAuthService.login()'
                  Node: final_builtin = 'final'
                    Node: final = 'final'
                  Node: identifier = 'result'
                  Node: = = '='
                  Node: unary_expression = 'await LineAuthService.login()'
                    Node: await_expression = 'await LineAuthService.login()'
                      Node: await = 'await'
                      Node: identifier = 'LineAuthService'
                      Node: selector = '.login'
                        Node: unconditional_assignable_selector = '.login'
                          Node: . = '.'
                          Node: identifier = 'login'
                      Node: selector = '()'
                        Node: argument_part = '()'
                          Node: arguments = '()'
                            Node: ( = '('
                            Node: ) = ')'
                Node: ; = ';'
              Node: if_statement = 'if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }'
                Node: if = 'if'
                Node: ( = '('
                Node: equality_expression = 'result != null'
                  Node: identifier = 'result'
                  Node: equality_operator = '!='
                  Node: null_literal = 'null'
                    Node: null = 'null'
                Node: ) = ')'
                Node: block = '{
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      }'
                  Node: { = '{'
                  Node: comment = '// Firebaseカスタムトークンでサインイン'
                    Node: // = '//'
                  Node: local_variable_declaration = 'final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );'
                    Node: initialized_variable_definition = 'final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                      Node: final_builtin = 'final'
                        Node: final = 'final'
                      Node: identifier = 'userCredential'
                      Node: = = '='
                      Node: unary_expression = 'await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                        Node: await_expression = 'await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                          Node: await = 'await'
                          Node: identifier = 'firebase_auth'
                          Node: selector = '.FirebaseAuth'
                            Node: unconditional_assignable_selector = '.FirebaseAuth'
                              Node: . = '.'
                              Node: identifier = 'FirebaseAuth'
                          Node: selector = '.instance'
                            Node: unconditional_assignable_selector = '.instance'
                              Node: . = '.'
                              Node: identifier = 'instance'
                          Node: selector = '.signInWithCustomToken'
                            Node: unconditional_assignable_selector = '.signInWithCustomToken'
                              Node: . = '.'
                              Node: identifier = 'signInWithCustomToken'
                          Node: selector = '(
          result.accessToken,
        )'
                            Node: argument_part = '(
          result.accessToken,
        )'
                              Node: arguments = '(
          result.accessToken,
        )'
                                Node: ( = '('
                                Node: argument = 'result.accessToken'
                                  Node: identifier = 'result'
                                  Node: selector = '.accessToken'
                                    Node: unconditional_assignable_selector = '.accessToken'
                                      Node: . = '.'
                                      Node: identifier = 'accessToken'
                                Node: , = ','
                                Node: ) = ')'
                    Node: ; = ';'
                  Node: if_statement = 'if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }'
                    Node: if = 'if'
                    Node: ( = '('
                    Node: equality_expression = 'userCredential.user != null'
                      Node: identifier = 'userCredential'
                      Node: selector = '.user'
                        Node: unconditional_assignable_selector = '.user'
                          Node: . = '.'
                          Node: identifier = 'user'
                      Node: equality_operator = '!='
                      Node: null_literal = 'null'
                        Node: null = 'null'
                    Node: ) = ')'
                    Node: block = '{
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        }'
                      Node: { = '{'
                      Node: local_variable_declaration = 'final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );'
                        Node: initialized_variable_definition = 'final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                          Node: final_builtin = 'final'
                            Node: final = 'final'
                          Node: identifier = 'user'
                          Node: = = '='
                          Node: identifier = 'AppUser'
                          Node: selector = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                            Node: argument_part = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                              Node: arguments = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                                Node: ( = '('
                                Node: named_argument = 'id: userCredential.user!.uid'
                                  Node: label = 'id:'
                                    Node: identifier = 'id'
                                    Node: : = ':'
                                  Node: identifier = 'userCredential'
                                  Node: selector = '.user'
                                    Node: unconditional_assignable_selector = '.user'
                                      Node: . = '.'
                                      Node: identifier = 'user'
                                  Node: selector = '!'
                                    Node: ! = '!'
                                  Node: selector = '.uid'
                                    Node: unconditional_assignable_selector = '.uid'
                                      Node: . = '.'
                                      Node: identifier = 'uid'
                                Node: , = ','
                                Node: named_argument = 'displayName: result.profile.displayName'
                                  Node: label = 'displayName:'
                                    Node: identifier = 'displayName'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.displayName'
                                    Node: unconditional_assignable_selector = '.displayName'
                                      Node: . = '.'
                                      Node: identifier = 'displayName'
                                Node: , = ','
                                Node: named_argument = 'photoURL: result.profile.pictureUrl'
                                  Node: label = 'photoURL:'
                                    Node: identifier = 'photoURL'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.pictureUrl'
                                    Node: unconditional_assignable_selector = '.pictureUrl'
                                      Node: . = '.'
                                      Node: identifier = 'pictureUrl'
                                Node: , = ','
                                Node: named_argument = 'statusMessage: result.profile.statusMessage'
                                  Node: label = 'statusMessage:'
                                    Node: identifier = 'statusMessage'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.statusMessage'
                                    Node: unconditional_assignable_selector = '.statusMessage'
                                      Node: . = '.'
                                      Node: identifier = 'statusMessage'
                                Node: , = ','
                                Node: named_argument = 'provider: 'line''
                                  Node: label = 'provider:'
                                    Node: identifier = 'provider'
                                    Node: : = ':'
                                  Node: string_literal = ''line''
                                    Node: ' = '''
                                    Node: ' = '''
                                Node: , = ','
                                Node: named_argument = 'createdAt: DateTime.now()'
                                  Node: label = 'createdAt:'
                                    Node: identifier = 'createdAt'
                                    Node: : = ':'
                                  Node: identifier = 'DateTime'
                                  Node: selector = '.now'
                                    Node: unconditional_assignable_selector = '.now'
                                      Node: . = '.'
                                      Node: identifier = 'now'
                                  Node: selector = '()'
                                    Node: argument_part = '()'
                                      Node: arguments = '()'
                                        Node: ( = '('
                                        Node: ) = ')'
                                Node: , = ','
                                Node: ) = ')'
                        Node: ; = ';'
                      Node: expression_statement = 'state = AuthState.authenticated(user);'
                        Node: assignment_expression = 'state = AuthState.authenticated(user)'
                          Node: assignable_expression = 'state'
                            Node: identifier = 'state'
                          Node: = = '='
                          Node: identifier = 'AuthState'
                          Node: selector = '.authenticated'
                            Node: unconditional_assignable_selector = '.authenticated'
                              Node: . = '.'
                              Node: identifier = 'authenticated'
                          Node: selector = '(user)'
                            Node: argument_part = '(user)'
                              Node: arguments = '(user)'
                                Node: ( = '('
                                Node: argument = 'user'
                                  Node: identifier = 'user'
                                Node: ) = ')'
                        Node: ; = ';'
                      Node: } = '}'
                    Node: else = 'else'
                    Node: block = '{
          state = const AuthState.error('Failed to sign in with custom token');
        }'
                      Node: { = '{'
                      Node: expression_statement = 'state = const AuthState.error('Failed to sign in with custom token');'
                        Node: assignment_expression = 'state = const AuthState.error('Failed to sign in with custom token')'
                          Node: assignable_expression = 'state'
                            Node: identifier = 'state'
                          Node: = = '='
                          Node: const_object_expression = 'const AuthState.error('Failed to sign in with custom token')'
                            Node: const_builtin = 'const'
                            Node: type_identifier = 'AuthState'
                            Node: . = '.'
                            Node: identifier = 'error'
                            Node: arguments = '('Failed to sign in with custom token')'
                              Node: ( = '('
                              Node: argument = ''Failed to sign in with custom token''
                                Node: string_literal = ''Failed to sign in with custom token''
                                  Node: ' = '''
                                  Node: ' = '''
                              Node: ) = ')'
                        Node: ; = ';'
                      Node: } = '}'
                  Node: } = '}'
                Node: else = 'else'
                Node: block = '{
        state = const AuthState.error('LINE login failed');
      }'
                  Node: { = '{'
                  Node: expression_statement = 'state = const AuthState.error('LINE login failed');'
                    Node: assignment_expression = 'state = const AuthState.error('LINE login failed')'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: const_object_expression = 'const AuthState.error('LINE login failed')'
                        Node: const_builtin = 'const'
                        Node: type_identifier = 'AuthState'
                        Node: . = '.'
                        Node: identifier = 'error'
                        Node: arguments = '('LINE login failed')'
                          Node: ( = '('
                          Node: argument = ''LINE login failed''
                            Node: string_literal = ''LINE login failed''
                              Node: ' = '''
                              Node: ' = '''
                          Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// ログアウト'
        Node: /// = '///'
      Node: method_signature = 'Future<void> signOut()'
        Node: function_signature = 'Future<void> signOut()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'signOut'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: try_statement = 'try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    }'
              Node: { = '{'
              Node: expression_statement = 'await firebase_auth.FirebaseAuth.instance.signOut();'
                Node: unary_expression = 'await firebase_auth.FirebaseAuth.instance.signOut()'
                  Node: await_expression = 'await firebase_auth.FirebaseAuth.instance.signOut()'
                    Node: await = 'await'
                    Node: identifier = 'firebase_auth'
                    Node: selector = '.FirebaseAuth'
                      Node: unconditional_assignable_selector = '.FirebaseAuth'
                        Node: . = '.'
                        Node: identifier = 'FirebaseAuth'
                    Node: selector = '.instance'
                      Node: unconditional_assignable_selector = '.instance'
                        Node: . = '.'
                        Node: identifier = 'instance'
                    Node: selector = '.signOut'
                      Node: unconditional_assignable_selector = '.signOut'
                        Node: . = '.'
                        Node: identifier = 'signOut'
                    Node: selector = '()'
                      Node: argument_part = '()'
                        Node: arguments = '()'
                          Node: ( = '('
                          Node: ) = ')'
                Node: ; = ';'
              Node: expression_statement = 'state = const AuthState.unauthenticated();'
                Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: const_object_expression = 'const AuthState.unauthenticated()'
                    Node: const_builtin = 'const'
                    Node: type_identifier = 'AuthState'
                    Node: . = '.'
                    Node: identifier = 'unauthenticated'
                    Node: arguments = '()'
                      Node: ( = '('
                      Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// 現在のユーザーを取得'
        Node: /// = '///'
      Node: method_signature = 'Future<void> getCurrentUser()'
        Node: function_signature = 'Future<void> getCurrentUser()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'getCurrentUser'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: expression_statement = 'state = const AuthState.loading();'
            Node: assignment_expression = 'state = const AuthState.loading()'
              Node: assignable_expression = 'state'
                Node: identifier = 'state'
              Node: = = '='
              Node: const_object_expression = 'const AuthState.loading()'
                Node: const_builtin = 'const'
                Node: type_identifier = 'AuthState'
                Node: . = '.'
                Node: identifier = 'loading'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: ; = ';'
          Node: try_statement = 'try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    }'
              Node: { = '{'
              Node: local_variable_declaration = 'final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;'
                Node: initialized_variable_definition = 'final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser'
                  Node: final_builtin = 'final'
                    Node: final = 'final'
                  Node: identifier = 'firebaseUser'
                  Node: = = '='
                  Node: identifier = 'firebase_auth'
                  Node: selector = '.FirebaseAuth'
                    Node: unconditional_assignable_selector = '.FirebaseAuth'
                      Node: . = '.'
                      Node: identifier = 'FirebaseAuth'
                  Node: selector = '.instance'
                    Node: unconditional_assignable_selector = '.instance'
                      Node: . = '.'
                      Node: identifier = 'instance'
                  Node: selector = '.currentUser'
                    Node: unconditional_assignable_selector = '.currentUser'
                      Node: . = '.'
                      Node: identifier = 'currentUser'
                Node: ; = ';'
              Node: if_statement = 'if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }'
                Node: if = 'if'
                Node: ( = '('
                Node: equality_expression = 'firebaseUser != null'
                  Node: identifier = 'firebaseUser'
                  Node: equality_operator = '!='
                  Node: null_literal = 'null'
                    Node: null = 'null'
                Node: ) = ')'
                Node: block = '{
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      }'
                  Node: { = '{'
                  Node: comment = '// Firestoreからユーザー情報を取得'
                    Node: // = '//'
                  Node: comment = '// TODO: FirestoreServiceを使用してユーザー情報を取得'
                    Node: // = '//'
                  Node: local_variable_declaration = 'final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );'
                    Node: initialized_variable_definition = 'final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                      Node: final_builtin = 'final'
                        Node: final = 'final'
                      Node: identifier = 'user'
                      Node: = = '='
                      Node: identifier = 'AppUser'
                      Node: selector = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                        Node: argument_part = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                          Node: arguments = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                            Node: ( = '('
                            Node: named_argument = 'id: firebaseUser.uid'
                              Node: label = 'id:'
                                Node: identifier = 'id'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.uid'
                                Node: unconditional_assignable_selector = '.uid'
                                  Node: . = '.'
                                  Node: identifier = 'uid'
                            Node: , = ','
                            Node: named_argument = 'displayName: firebaseUser.displayName ?? 'Unknown User''
                              Node: label = 'displayName:'
                                Node: identifier = 'displayName'
                                Node: : = ':'
                              Node: if_null_expression = 'firebaseUser.displayName ?? 'Unknown User''
                                Node: identifier = 'firebaseUser'
                                Node: selector = '.displayName'
                                  Node: unconditional_assignable_selector = '.displayName'
                                    Node: . = '.'
                                    Node: identifier = 'displayName'
                                Node: ?? = '??'
                                Node: string_literal = ''Unknown User''
                                  Node: ' = '''
                                  Node: ' = '''
                            Node: , = ','
                            Node: named_argument = 'email: firebaseUser.email'
                              Node: label = 'email:'
                                Node: identifier = 'email'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.email'
                                Node: unconditional_assignable_selector = '.email'
                                  Node: . = '.'
                                  Node: identifier = 'email'
                            Node: , = ','
                            Node: named_argument = 'photoURL: firebaseUser.photoURL'
                              Node: label = 'photoURL:'
                                Node: identifier = 'photoURL'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.photoURL'
                                Node: unconditional_assignable_selector = '.photoURL'
                                  Node: . = '.'
                                  Node: identifier = 'photoURL'
                            Node: , = ','
                            Node: named_argument = 'provider: 'line''
                              Node: label = 'provider:'
                                Node: identifier = 'provider'
                                Node: : = ':'
                              Node: string_literal = ''line''
                                Node: ' = '''
                                Node: ' = '''
                            Node: , = ','
                            Node: ) = ')'
                    Node: ; = ';'
                  Node: expression_statement = 'state = AuthState.authenticated(user);'
                    Node: assignment_expression = 'state = AuthState.authenticated(user)'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: identifier = 'AuthState'
                      Node: selector = '.authenticated'
                        Node: unconditional_assignable_selector = '.authenticated'
                          Node: . = '.'
                          Node: identifier = 'authenticated'
                      Node: selector = '(user)'
                        Node: argument_part = '(user)'
                          Node: arguments = '(user)'
                            Node: ( = '('
                            Node: argument = 'user'
                              Node: identifier = 'user'
                            Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
                Node: else = 'else'
                Node: block = '{
        state = const AuthState.unauthenticated();
      }'
                  Node: { = '{'
                  Node: expression_statement = 'state = const AuthState.unauthenticated();'
                    Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: const_object_expression = 'const AuthState.unauthenticated()'
                        Node: const_builtin = 'const'
                        Node: type_identifier = 'AuthState'
                        Node: . = '.'
                        Node: identifier = 'unauthenticated'
                        Node: arguments = '()'
                          Node: ( = '('
                          Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// 認証状態の監視'
        Node: /// = '///'
      Node: method_signature = 'void listenToAuthChanges()'
        Node: function_signature = 'void listenToAuthChanges()'
          Node: void_type = 'void'
          Node: identifier = 'listenToAuthChanges'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = '{
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }'
        Node: block = '{
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }'
          Node: { = '{'
          Node: expression_statement = 'firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });'
            Node: identifier = 'firebase_auth'
            Node: selector = '.FirebaseAuth'
              Node: unconditional_assignable_selector = '.FirebaseAuth'
                Node: . = '.'
                Node: identifier = 'FirebaseAuth'
            Node: selector = '.instance'
              Node: unconditional_assignable_selector = '.instance'
                Node: . = '.'
                Node: identifier = 'instance'
            Node: selector = '.authStateChanges'
              Node: unconditional_assignable_selector = '.authStateChanges'
                Node: . = '.'
                Node: identifier = 'authStateChanges'
            Node: selector = '()'
              Node: argument_part = '()'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: selector = '.listen'
              Node: unconditional_assignable_selector = '.listen'
                Node: . = '.'
                Node: identifier = 'listen'
            Node: selector = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
              Node: argument_part = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
                Node: arguments = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
                  Node: ( = '('
                  Node: argument = '(firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                    Node: function_expression = '(firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                      Node: formal_parameter_list = '(firebaseUser)'
                        Node: ( = '('
                        Node: formal_parameter = 'firebaseUser'
                          Node: identifier = 'firebaseUser'
                        Node: ) = ')'
                      Node: function_expression_body = '{
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                        Node: block = '{
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                          Node: { = '{'
                          Node: if_statement = 'if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }'
                            Node: if = 'if'
                            Node: ( = '('
                            Node: equality_expression = 'firebaseUser != null'
                              Node: identifier = 'firebaseUser'
                              Node: equality_operator = '!='
                              Node: null_literal = 'null'
                                Node: null = 'null'
                            Node: ) = ')'
                            Node: block = '{
        // ユーザーがログインしている場合
        getCurrentUser();
      }'
                              Node: { = '{'
                              Node: comment = '// ユーザーがログインしている場合'
                                Node: // = '//'
                              Node: expression_statement = 'getCurrentUser();'
                                Node: identifier = 'getCurrentUser'
                                Node: selector = '()'
                                  Node: argument_part = '()'
                                    Node: arguments = '()'
                                      Node: ( = '('
                                      Node: ) = ')'
                                Node: ; = ';'
                              Node: } = '}'
                            Node: else = 'else'
                            Node: block = '{
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }'
                              Node: { = '{'
                              Node: comment = '// ユーザーがログアウトしている場合'
                                Node: // = '//'
                              Node: expression_statement = 'state = const AuthState.unauthenticated();'
                                Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                                  Node: assignable_expression = 'state'
                                    Node: identifier = 'state'
                                  Node: = = '='
                                  Node: const_object_expression = 'const AuthState.unauthenticated()'
                                    Node: const_builtin = 'const'
                                    Node: type_identifier = 'AuthState'
                                    Node: . = '.'
                                    Node: identifier = 'unauthenticated'
                                    Node: arguments = '()'
                                      Node: ( = '('
                                      Node: ) = ')'
                                Node: ; = ';'
                              Node: } = '}'
                          Node: } = '}'
                  Node: ) = ')'
            Node: ; = ';'
          Node: } = '}'
      Node: } = '}'
  Node: documentation_comment = '/// 認証状態プロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'AuthState authState(Ref ref)'
    Node: type_identifier = 'AuthState'
    Node: identifier = 'authState'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}'
    Node: block = '{
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}'
      Node: { = '{'
      Node: comment = '// 初回起動時に認証状態を監視開始'
        Node: // = '//'
      Node: expression_statement = 'ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });'
        Node: identifier = 'ref'
        Node: selector = '.listen'
          Node: unconditional_assignable_selector = '.listen'
            Node: . = '.'
            Node: identifier = 'listen'
        Node: selector = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
          Node: argument_part = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
            Node: arguments = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
              Node: ( = '('
              Node: argument = 'authNotifierProvider'
                Node: identifier = 'authNotifierProvider'
              Node: , = ','
              Node: argument = '(previous, next) {
    // 認証状態が変更された時の処理
  }'
                Node: function_expression = '(previous, next) {
    // 認証状態が変更された時の処理
  }'
                  Node: formal_parameter_list = '(previous, next)'
                    Node: ( = '('
                    Node: formal_parameter = 'previous'
                      Node: identifier = 'previous'
                    Node: , = ','
                    Node: formal_parameter = 'next'
                      Node: identifier = 'next'
                    Node: ) = ')'
                  Node: function_expression_body = '{
    // 認証状態が変更された時の処理
  }'
                    Node: block = '{
    // 認証状態が変更された時の処理
  }'
                      Node: { = '{'
                      Node: comment = '// 認証状態が変更された時の処理'
                        Node: // = '//'
                      Node: } = '}'
              Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return ref.watch(authNotifierProvider);'
        Node: return = 'return'
        Node: identifier = 'ref'
        Node: selector = '.watch'
          Node: unconditional_assignable_selector = '.watch'
            Node: . = '.'
            Node: identifier = 'watch'
        Node: selector = '(authNotifierProvider)'
          Node: argument_part = '(authNotifierProvider)'
            Node: arguments = '(authNotifierProvider)'
              Node: ( = '('
              Node: argument = 'authNotifierProvider'
                Node: identifier = 'authNotifierProvider'
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
  Node: documentation_comment = '/// 現在のユーザープロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'AppUser? currentUser(Ref ref)'
    Node: type_identifier = 'AppUser'
    Node: nullable_type = '?'
      Node: ? = '?'
    Node: identifier = 'currentUser'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}'
    Node: block = '{
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}'
      Node: { = '{'
      Node: local_variable_declaration = 'final authState = ref.watch(authStateProvider);'
        Node: initialized_variable_definition = 'final authState = ref.watch(authStateProvider)'
          Node: final_builtin = 'final'
            Node: final = 'final'
          Node: identifier = 'authState'
          Node: = = '='
          Node: identifier = 'ref'
          Node: selector = '.watch'
            Node: unconditional_assignable_selector = '.watch'
              Node: . = '.'
              Node: identifier = 'watch'
          Node: selector = '(authStateProvider)'
            Node: argument_part = '(authStateProvider)'
              Node: arguments = '(authStateProvider)'
                Node: ( = '('
                Node: argument = 'authStateProvider'
                  Node: identifier = 'authStateProvider'
                Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );'
        Node: return = 'return'
        Node: identifier = 'authState'
        Node: selector = '.when'
          Node: unconditional_assignable_selector = '.when'
            Node: . = '.'
            Node: identifier = 'when'
        Node: selector = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
          Node: argument_part = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
            Node: arguments = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
              Node: ( = '('
              Node: named_argument = 'authenticated: (user) => user'
                Node: label = 'authenticated:'
                  Node: identifier = 'authenticated'
                  Node: : = ':'
                Node: function_expression = '(user) => user'
                  Node: formal_parameter_list = '(user)'
                    Node: ( = '('
                    Node: formal_parameter = 'user'
                      Node: identifier = 'user'
                    Node: ) = ')'
                  Node: function_expression_body = '=> user'
                    Node: => = '=>'
                    Node: identifier = 'user'
              Node: , = ','
              Node: named_argument = 'initial: () => null'
                Node: label = 'initial:'
                  Node: identifier = 'initial'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'loading: () => null'
                Node: label = 'loading:'
                  Node: identifier = 'loading'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'unauthenticated: () => null'
                Node: label = 'unauthenticated:'
                  Node: identifier = 'unauthenticated'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'error: (_) => null'
                Node: label = 'error:'
                  Node: identifier = 'error'
                  Node: : = ':'
                Node: function_expression = '(_) => null'
                  Node: formal_parameter_list = '(_)'
                    Node: ( = '('
                    Node: formal_parameter = '_'
                      Node: identifier = '_'
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
  Node: documentation_comment = '/// 認証済みかどうかのプロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'bool isAuthenticated(Ref ref)'
    Node: type_identifier = 'bool'
    Node: identifier = 'isAuthenticated'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}'
    Node: block = '{
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}'
      Node: { = '{'
      Node: local_variable_declaration = 'final authState = ref.watch(authStateProvider);'
        Node: initialized_variable_definition = 'final authState = ref.watch(authStateProvider)'
          Node: final_builtin = 'final'
            Node: final = 'final'
          Node: identifier = 'authState'
          Node: = = '='
          Node: identifier = 'ref'
          Node: selector = '.watch'
            Node: unconditional_assignable_selector = '.watch'
              Node: . = '.'
              Node: identifier = 'watch'
          Node: selector = '(authStateProvider)'
            Node: argument_part = '(authStateProvider)'
              Node: arguments = '(authStateProvider)'
                Node: ( = '('
                Node: argument = 'authStateProvider'
                  Node: identifier = 'authStateProvider'
                Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );'
        Node: return = 'return'
        Node: identifier = 'authState'
        Node: selector = '.maybeWhen'
          Node: unconditional_assignable_selector = '.maybeWhen'
            Node: . = '.'
            Node: identifier = 'maybeWhen'
        Node: selector = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
          Node: argument_part = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
            Node: arguments = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
              Node: ( = '('
              Node: named_argument = 'authenticated: (_) => true'
                Node: label = 'authenticated:'
                  Node: identifier = 'authenticated'
                  Node: : = ':'
                Node: function_expression = '(_) => true'
                  Node: formal_parameter_list = '(_)'
                    Node: ( = '('
                    Node: formal_parameter = '_'
                      Node: identifier = '_'
                    Node: ) = ')'
                  Node: function_expression_body = '=> true'
                    Node: => = '=>'
                    Node: true = 'true'
                      Node: true = 'true'
              Node: , = ','
              Node: named_argument = 'orElse: () => false'
                Node: label = 'orElse:'
                  Node: identifier = 'orElse'
                  Node: : = ':'
                Node: function_expression = '() => false'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> false'
                    Node: => = '=>'
                    Node: false = 'false'
                      Node: false = 'false'
              Node: , = ','
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
=== End AST ===

=== Complete AST for test_flutter_app/aminomi/lib/providers/auth_provider.dart ===
Node: program = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;
import 'package:riverpod/riverpod.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import '../models/user.dart';
import '../services/line_auth_service.dart';

part 'auth_provider.g.dart';

@riverpod
class AuthNotifier extends _$AuthNotifier {
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}

/// 認証状態プロバイダー
@riverpod
AuthState authState(Ref ref) {
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}

/// 現在のユーザープロバイダー
@riverpod
AppUser? currentUser(Ref ref) {
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}

/// 認証済みかどうかのプロバイダー
@riverpod
bool isAuthenticated(Ref ref) {
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}
'
  Node: import_or_export = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
    Node: library_import = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
      Node: import_specification = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
        Node: import = 'import'
        Node: configurable_uri = ''package:firebase_auth/firebase_auth.dart''
          Node: uri = ''package:firebase_auth/firebase_auth.dart''
            Node: string_literal = ''package:firebase_auth/firebase_auth.dart''
              Node: ' = '''
              Node: ' = '''
        Node: as = 'as'
        Node: identifier = 'firebase_auth'
        Node: ; = ';'
  Node: import_or_export = 'import 'package:riverpod/riverpod.dart';'
    Node: library_import = 'import 'package:riverpod/riverpod.dart';'
      Node: import_specification = 'import 'package:riverpod/riverpod.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:riverpod/riverpod.dart''
          Node: uri = ''package:riverpod/riverpod.dart''
            Node: string_literal = ''package:riverpod/riverpod.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
    Node: library_import = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
      Node: import_specification = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:riverpod_annotation/riverpod_annotation.dart''
          Node: uri = ''package:riverpod_annotation/riverpod_annotation.dart''
            Node: string_literal = ''package:riverpod_annotation/riverpod_annotation.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import '../models/user.dart';'
    Node: library_import = 'import '../models/user.dart';'
      Node: import_specification = 'import '../models/user.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''../models/user.dart''
          Node: uri = ''../models/user.dart''
            Node: string_literal = ''../models/user.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import '../services/line_auth_service.dart';'
    Node: library_import = 'import '../services/line_auth_service.dart';'
      Node: import_specification = 'import '../services/line_auth_service.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''../services/line_auth_service.dart''
          Node: uri = ''../services/line_auth_service.dart''
            Node: string_literal = ''../services/line_auth_service.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: part_directive = 'part 'auth_provider.g.dart';'
    Node: part = 'part'
    Node: uri = ''auth_provider.g.dart''
      Node: string_literal = ''auth_provider.g.dart''
        Node: ' = '''
        Node: ' = '''
    Node: ; = ';'
  Node: class_definition = '@riverpod
class AuthNotifier extends _$AuthNotifier {
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}'
    Node: annotation = '@riverpod'
      Node: @ = '@'
      Node: identifier = 'riverpod'
    Node: class = 'class'
    Node: identifier = 'AuthNotifier'
    Node: superclass = 'extends _$AuthNotifier'
      Node: extends = 'extends'
      Node: type_identifier = '_$AuthNotifier'
    Node: class_body = '{
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}'
      Node: { = '{'
      Node: annotation = '@override'
        Node: @ = '@'
        Node: identifier = 'override'
      Node: method_signature = 'AuthState build()'
        Node: function_signature = 'AuthState build()'
          Node: type_identifier = 'AuthState'
          Node: identifier = 'build'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = '{
    return const AuthState.initial();
  }'
        Node: block = '{
    return const AuthState.initial();
  }'
          Node: { = '{'
          Node: return_statement = 'return const AuthState.initial();'
            Node: return = 'return'
            Node: const_object_expression = 'const AuthState.initial()'
              Node: const_builtin = 'const'
              Node: type_identifier = 'AuthState'
              Node: . = '.'
              Node: identifier = 'initial'
              Node: arguments = '()'
                Node: ( = '('
                Node: ) = ')'
            Node: ; = ';'
          Node: } = '}'
      Node: documentation_comment = '/// LINEログイン'
        Node: /// = '///'
      Node: method_signature = 'Future<void> signInWithLine()'
        Node: function_signature = 'Future<void> signInWithLine()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'signInWithLine'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: expression_statement = 'state = const AuthState.loading();'
            Node: assignment_expression = 'state = const AuthState.loading()'
              Node: assignable_expression = 'state'
                Node: identifier = 'state'
              Node: = = '='
              Node: const_object_expression = 'const AuthState.loading()'
                Node: const_builtin = 'const'
                Node: type_identifier = 'AuthState'
                Node: . = '.'
                Node: identifier = 'loading'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: ; = ';'
          Node: try_statement = 'try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    }'
              Node: { = '{'
              Node: local_variable_declaration = 'final result = await LineAuthService.login();'
                Node: initialized_variable_definition = 'final result = await LineAuthService.login()'
                  Node: final_builtin = 'final'
                    Node: final = 'final'
                  Node: identifier = 'result'
                  Node: = = '='
                  Node: unary_expression = 'await LineAuthService.login()'
                    Node: await_expression = 'await LineAuthService.login()'
                      Node: await = 'await'
                      Node: identifier = 'LineAuthService'
                      Node: selector = '.login'
                        Node: unconditional_assignable_selector = '.login'
                          Node: . = '.'
                          Node: identifier = 'login'
                      Node: selector = '()'
                        Node: argument_part = '()'
                          Node: arguments = '()'
                            Node: ( = '('
                            Node: ) = ')'
                Node: ; = ';'
              Node: if_statement = 'if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }'
                Node: if = 'if'
                Node: ( = '('
                Node: equality_expression = 'result != null'
                  Node: identifier = 'result'
                  Node: equality_operator = '!='
                  Node: null_literal = 'null'
                    Node: null = 'null'
                Node: ) = ')'
                Node: block = '{
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      }'
                  Node: { = '{'
                  Node: comment = '// Firebaseカスタムトークンでサインイン'
                    Node: // = '//'
                  Node: local_variable_declaration = 'final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );'
                    Node: initialized_variable_definition = 'final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                      Node: final_builtin = 'final'
                        Node: final = 'final'
                      Node: identifier = 'userCredential'
                      Node: = = '='
                      Node: unary_expression = 'await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                        Node: await_expression = 'await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                          Node: await = 'await'
                          Node: identifier = 'firebase_auth'
                          Node: selector = '.FirebaseAuth'
                            Node: unconditional_assignable_selector = '.FirebaseAuth'
                              Node: . = '.'
                              Node: identifier = 'FirebaseAuth'
                          Node: selector = '.instance'
                            Node: unconditional_assignable_selector = '.instance'
                              Node: . = '.'
                              Node: identifier = 'instance'
                          Node: selector = '.signInWithCustomToken'
                            Node: unconditional_assignable_selector = '.signInWithCustomToken'
                              Node: . = '.'
                              Node: identifier = 'signInWithCustomToken'
                          Node: selector = '(
          result.accessToken,
        )'
                            Node: argument_part = '(
          result.accessToken,
        )'
                              Node: arguments = '(
          result.accessToken,
        )'
                                Node: ( = '('
                                Node: argument = 'result.accessToken'
                                  Node: identifier = 'result'
                                  Node: selector = '.accessToken'
                                    Node: unconditional_assignable_selector = '.accessToken'
                                      Node: . = '.'
                                      Node: identifier = 'accessToken'
                                Node: , = ','
                                Node: ) = ')'
                    Node: ; = ';'
                  Node: if_statement = 'if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }'
                    Node: if = 'if'
                    Node: ( = '('
                    Node: equality_expression = 'userCredential.user != null'
                      Node: identifier = 'userCredential'
                      Node: selector = '.user'
                        Node: unconditional_assignable_selector = '.user'
                          Node: . = '.'
                          Node: identifier = 'user'
                      Node: equality_operator = '!='
                      Node: null_literal = 'null'
                        Node: null = 'null'
                    Node: ) = ')'
                    Node: block = '{
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        }'
                      Node: { = '{'
                      Node: local_variable_declaration = 'final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );'
                        Node: initialized_variable_definition = 'final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                          Node: final_builtin = 'final'
                            Node: final = 'final'
                          Node: identifier = 'user'
                          Node: = = '='
                          Node: identifier = 'AppUser'
                          Node: selector = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                            Node: argument_part = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                              Node: arguments = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                                Node: ( = '('
                                Node: named_argument = 'id: userCredential.user!.uid'
                                  Node: label = 'id:'
                                    Node: identifier = 'id'
                                    Node: : = ':'
                                  Node: identifier = 'userCredential'
                                  Node: selector = '.user'
                                    Node: unconditional_assignable_selector = '.user'
                                      Node: . = '.'
                                      Node: identifier = 'user'
                                  Node: selector = '!'
                                    Node: ! = '!'
                                  Node: selector = '.uid'
                                    Node: unconditional_assignable_selector = '.uid'
                                      Node: . = '.'
                                      Node: identifier = 'uid'
                                Node: , = ','
                                Node: named_argument = 'displayName: result.profile.displayName'
                                  Node: label = 'displayName:'
                                    Node: identifier = 'displayName'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.displayName'
                                    Node: unconditional_assignable_selector = '.displayName'
                                      Node: . = '.'
                                      Node: identifier = 'displayName'
                                Node: , = ','
                                Node: named_argument = 'photoURL: result.profile.pictureUrl'
                                  Node: label = 'photoURL:'
                                    Node: identifier = 'photoURL'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.pictureUrl'
                                    Node: unconditional_assignable_selector = '.pictureUrl'
                                      Node: . = '.'
                                      Node: identifier = 'pictureUrl'
                                Node: , = ','
                                Node: named_argument = 'statusMessage: result.profile.statusMessage'
                                  Node: label = 'statusMessage:'
                                    Node: identifier = 'statusMessage'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.statusMessage'
                                    Node: unconditional_assignable_selector = '.statusMessage'
                                      Node: . = '.'
                                      Node: identifier = 'statusMessage'
                                Node: , = ','
                                Node: named_argument = 'provider: 'line''
                                  Node: label = 'provider:'
                                    Node: identifier = 'provider'
                                    Node: : = ':'
                                  Node: string_literal = ''line''
                                    Node: ' = '''
                                    Node: ' = '''
                                Node: , = ','
                                Node: named_argument = 'createdAt: DateTime.now()'
                                  Node: label = 'createdAt:'
                                    Node: identifier = 'createdAt'
                                    Node: : = ':'
                                  Node: identifier = 'DateTime'
                                  Node: selector = '.now'
                                    Node: unconditional_assignable_selector = '.now'
                                      Node: . = '.'
                                      Node: identifier = 'now'
                                  Node: selector = '()'
                                    Node: argument_part = '()'
                                      Node: arguments = '()'
                                        Node: ( = '('
                                        Node: ) = ')'
                                Node: , = ','
                                Node: ) = ')'
                        Node: ; = ';'
                      Node: expression_statement = 'state = AuthState.authenticated(user);'
                        Node: assignment_expression = 'state = AuthState.authenticated(user)'
                          Node: assignable_expression = 'state'
                            Node: identifier = 'state'
                          Node: = = '='
                          Node: identifier = 'AuthState'
                          Node: selector = '.authenticated'
                            Node: unconditional_assignable_selector = '.authenticated'
                              Node: . = '.'
                              Node: identifier = 'authenticated'
                          Node: selector = '(user)'
                            Node: argument_part = '(user)'
                              Node: arguments = '(user)'
                                Node: ( = '('
                                Node: argument = 'user'
                                  Node: identifier = 'user'
                                Node: ) = ')'
                        Node: ; = ';'
                      Node: } = '}'
                    Node: else = 'else'
                    Node: block = '{
          state = const AuthState.error('Failed to sign in with custom token');
        }'
                      Node: { = '{'
                      Node: expression_statement = 'state = const AuthState.error('Failed to sign in with custom token');'
                        Node: assignment_expression = 'state = const AuthState.error('Failed to sign in with custom token')'
                          Node: assignable_expression = 'state'
                            Node: identifier = 'state'
                          Node: = = '='
                          Node: const_object_expression = 'const AuthState.error('Failed to sign in with custom token')'
                            Node: const_builtin = 'const'
                            Node: type_identifier = 'AuthState'
                            Node: . = '.'
                            Node: identifier = 'error'
                            Node: arguments = '('Failed to sign in with custom token')'
                              Node: ( = '('
                              Node: argument = ''Failed to sign in with custom token''
                                Node: string_literal = ''Failed to sign in with custom token''
                                  Node: ' = '''
                                  Node: ' = '''
                              Node: ) = ')'
                        Node: ; = ';'
                      Node: } = '}'
                  Node: } = '}'
                Node: else = 'else'
                Node: block = '{
        state = const AuthState.error('LINE login failed');
      }'
                  Node: { = '{'
                  Node: expression_statement = 'state = const AuthState.error('LINE login failed');'
                    Node: assignment_expression = 'state = const AuthState.error('LINE login failed')'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: const_object_expression = 'const AuthState.error('LINE login failed')'
                        Node: const_builtin = 'const'
                        Node: type_identifier = 'AuthState'
                        Node: . = '.'
                        Node: identifier = 'error'
                        Node: arguments = '('LINE login failed')'
                          Node: ( = '('
                          Node: argument = ''LINE login failed''
                            Node: string_literal = ''LINE login failed''
                              Node: ' = '''
                              Node: ' = '''
                          Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// ログアウト'
        Node: /// = '///'
      Node: method_signature = 'Future<void> signOut()'
        Node: function_signature = 'Future<void> signOut()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'signOut'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: try_statement = 'try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    }'
              Node: { = '{'
              Node: expression_statement = 'await firebase_auth.FirebaseAuth.instance.signOut();'
                Node: unary_expression = 'await firebase_auth.FirebaseAuth.instance.signOut()'
                  Node: await_expression = 'await firebase_auth.FirebaseAuth.instance.signOut()'
                    Node: await = 'await'
                    Node: identifier = 'firebase_auth'
                    Node: selector = '.FirebaseAuth'
                      Node: unconditional_assignable_selector = '.FirebaseAuth'
                        Node: . = '.'
                        Node: identifier = 'FirebaseAuth'
                    Node: selector = '.instance'
                      Node: unconditional_assignable_selector = '.instance'
                        Node: . = '.'
                        Node: identifier = 'instance'
                    Node: selector = '.signOut'
                      Node: unconditional_assignable_selector = '.signOut'
                        Node: . = '.'
                        Node: identifier = 'signOut'
                    Node: selector = '()'
                      Node: argument_part = '()'
                        Node: arguments = '()'
                          Node: ( = '('
                          Node: ) = ')'
                Node: ; = ';'
              Node: expression_statement = 'state = const AuthState.unauthenticated();'
                Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: const_object_expression = 'const AuthState.unauthenticated()'
                    Node: const_builtin = 'const'
                    Node: type_identifier = 'AuthState'
                    Node: . = '.'
                    Node: identifier = 'unauthenticated'
                    Node: arguments = '()'
                      Node: ( = '('
                      Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// 現在のユーザーを取得'
        Node: /// = '///'
      Node: method_signature = 'Future<void> getCurrentUser()'
        Node: function_signature = 'Future<void> getCurrentUser()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'getCurrentUser'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: expression_statement = 'state = const AuthState.loading();'
            Node: assignment_expression = 'state = const AuthState.loading()'
              Node: assignable_expression = 'state'
                Node: identifier = 'state'
              Node: = = '='
              Node: const_object_expression = 'const AuthState.loading()'
                Node: const_builtin = 'const'
                Node: type_identifier = 'AuthState'
                Node: . = '.'
                Node: identifier = 'loading'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: ; = ';'
          Node: try_statement = 'try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    }'
              Node: { = '{'
              Node: local_variable_declaration = 'final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;'
                Node: initialized_variable_definition = 'final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser'
                  Node: final_builtin = 'final'
                    Node: final = 'final'
                  Node: identifier = 'firebaseUser'
                  Node: = = '='
                  Node: identifier = 'firebase_auth'
                  Node: selector = '.FirebaseAuth'
                    Node: unconditional_assignable_selector = '.FirebaseAuth'
                      Node: . = '.'
                      Node: identifier = 'FirebaseAuth'
                  Node: selector = '.instance'
                    Node: unconditional_assignable_selector = '.instance'
                      Node: . = '.'
                      Node: identifier = 'instance'
                  Node: selector = '.currentUser'
                    Node: unconditional_assignable_selector = '.currentUser'
                      Node: . = '.'
                      Node: identifier = 'currentUser'
                Node: ; = ';'
              Node: if_statement = 'if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }'
                Node: if = 'if'
                Node: ( = '('
                Node: equality_expression = 'firebaseUser != null'
                  Node: identifier = 'firebaseUser'
                  Node: equality_operator = '!='
                  Node: null_literal = 'null'
                    Node: null = 'null'
                Node: ) = ')'
                Node: block = '{
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      }'
                  Node: { = '{'
                  Node: comment = '// Firestoreからユーザー情報を取得'
                    Node: // = '//'
                  Node: comment = '// TODO: FirestoreServiceを使用してユーザー情報を取得'
                    Node: // = '//'
                  Node: local_variable_declaration = 'final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );'
                    Node: initialized_variable_definition = 'final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                      Node: final_builtin = 'final'
                        Node: final = 'final'
                      Node: identifier = 'user'
                      Node: = = '='
                      Node: identifier = 'AppUser'
                      Node: selector = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                        Node: argument_part = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                          Node: arguments = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                            Node: ( = '('
                            Node: named_argument = 'id: firebaseUser.uid'
                              Node: label = 'id:'
                                Node: identifier = 'id'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.uid'
                                Node: unconditional_assignable_selector = '.uid'
                                  Node: . = '.'
                                  Node: identifier = 'uid'
                            Node: , = ','
                            Node: named_argument = 'displayName: firebaseUser.displayName ?? 'Unknown User''
                              Node: label = 'displayName:'
                                Node: identifier = 'displayName'
                                Node: : = ':'
                              Node: if_null_expression = 'firebaseUser.displayName ?? 'Unknown User''
                                Node: identifier = 'firebaseUser'
                                Node: selector = '.displayName'
                                  Node: unconditional_assignable_selector = '.displayName'
                                    Node: . = '.'
                                    Node: identifier = 'displayName'
                                Node: ?? = '??'
                                Node: string_literal = ''Unknown User''
                                  Node: ' = '''
                                  Node: ' = '''
                            Node: , = ','
                            Node: named_argument = 'email: firebaseUser.email'
                              Node: label = 'email:'
                                Node: identifier = 'email'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.email'
                                Node: unconditional_assignable_selector = '.email'
                                  Node: . = '.'
                                  Node: identifier = 'email'
                            Node: , = ','
                            Node: named_argument = 'photoURL: firebaseUser.photoURL'
                              Node: label = 'photoURL:'
                                Node: identifier = 'photoURL'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.photoURL'
                                Node: unconditional_assignable_selector = '.photoURL'
                                  Node: . = '.'
                                  Node: identifier = 'photoURL'
                            Node: , = ','
                            Node: named_argument = 'provider: 'line''
                              Node: label = 'provider:'
                                Node: identifier = 'provider'
                                Node: : = ':'
                              Node: string_literal = ''line''
                                Node: ' = '''
                                Node: ' = '''
                            Node: , = ','
                            Node: ) = ')'
                    Node: ; = ';'
                  Node: expression_statement = 'state = AuthState.authenticated(user);'
                    Node: assignment_expression = 'state = AuthState.authenticated(user)'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: identifier = 'AuthState'
                      Node: selector = '.authenticated'
                        Node: unconditional_assignable_selector = '.authenticated'
                          Node: . = '.'
                          Node: identifier = 'authenticated'
                      Node: selector = '(user)'
                        Node: argument_part = '(user)'
                          Node: arguments = '(user)'
                            Node: ( = '('
                            Node: argument = 'user'
                              Node: identifier = 'user'
                            Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
                Node: else = 'else'
                Node: block = '{
        state = const AuthState.unauthenticated();
      }'
                  Node: { = '{'
                  Node: expression_statement = 'state = const AuthState.unauthenticated();'
                    Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: const_object_expression = 'const AuthState.unauthenticated()'
                        Node: const_builtin = 'const'
                        Node: type_identifier = 'AuthState'
                        Node: . = '.'
                        Node: identifier = 'unauthenticated'
                        Node: arguments = '()'
                          Node: ( = '('
                          Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// 認証状態の監視'
        Node: /// = '///'
      Node: method_signature = 'void listenToAuthChanges()'
        Node: function_signature = 'void listenToAuthChanges()'
          Node: void_type = 'void'
          Node: identifier = 'listenToAuthChanges'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = '{
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }'
        Node: block = '{
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }'
          Node: { = '{'
          Node: expression_statement = 'firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });'
            Node: identifier = 'firebase_auth'
            Node: selector = '.FirebaseAuth'
              Node: unconditional_assignable_selector = '.FirebaseAuth'
                Node: . = '.'
                Node: identifier = 'FirebaseAuth'
            Node: selector = '.instance'
              Node: unconditional_assignable_selector = '.instance'
                Node: . = '.'
                Node: identifier = 'instance'
            Node: selector = '.authStateChanges'
              Node: unconditional_assignable_selector = '.authStateChanges'
                Node: . = '.'
                Node: identifier = 'authStateChanges'
            Node: selector = '()'
              Node: argument_part = '()'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: selector = '.listen'
              Node: unconditional_assignable_selector = '.listen'
                Node: . = '.'
                Node: identifier = 'listen'
            Node: selector = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
              Node: argument_part = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
                Node: arguments = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
                  Node: ( = '('
                  Node: argument = '(firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                    Node: function_expression = '(firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                      Node: formal_parameter_list = '(firebaseUser)'
                        Node: ( = '('
                        Node: formal_parameter = 'firebaseUser'
                          Node: identifier = 'firebaseUser'
                        Node: ) = ')'
                      Node: function_expression_body = '{
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                        Node: block = '{
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                          Node: { = '{'
                          Node: if_statement = 'if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }'
                            Node: if = 'if'
                            Node: ( = '('
                            Node: equality_expression = 'firebaseUser != null'
                              Node: identifier = 'firebaseUser'
                              Node: equality_operator = '!='
                              Node: null_literal = 'null'
                                Node: null = 'null'
                            Node: ) = ')'
                            Node: block = '{
        // ユーザーがログインしている場合
        getCurrentUser();
      }'
                              Node: { = '{'
                              Node: comment = '// ユーザーがログインしている場合'
                                Node: // = '//'
                              Node: expression_statement = 'getCurrentUser();'
                                Node: identifier = 'getCurrentUser'
                                Node: selector = '()'
                                  Node: argument_part = '()'
                                    Node: arguments = '()'
                                      Node: ( = '('
                                      Node: ) = ')'
                                Node: ; = ';'
                              Node: } = '}'
                            Node: else = 'else'
                            Node: block = '{
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }'
                              Node: { = '{'
                              Node: comment = '// ユーザーがログアウトしている場合'
                                Node: // = '//'
                              Node: expression_statement = 'state = const AuthState.unauthenticated();'
                                Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                                  Node: assignable_expression = 'state'
                                    Node: identifier = 'state'
                                  Node: = = '='
                                  Node: const_object_expression = 'const AuthState.unauthenticated()'
                                    Node: const_builtin = 'const'
                                    Node: type_identifier = 'AuthState'
                                    Node: . = '.'
                                    Node: identifier = 'unauthenticated'
                                    Node: arguments = '()'
                                      Node: ( = '('
                                      Node: ) = ')'
                                Node: ; = ';'
                              Node: } = '}'
                          Node: } = '}'
                  Node: ) = ')'
            Node: ; = ';'
          Node: } = '}'
      Node: } = '}'
  Node: documentation_comment = '/// 認証状態プロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'AuthState authState(Ref ref)'
    Node: type_identifier = 'AuthState'
    Node: identifier = 'authState'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}'
    Node: block = '{
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}'
      Node: { = '{'
      Node: comment = '// 初回起動時に認証状態を監視開始'
        Node: // = '//'
      Node: expression_statement = 'ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });'
        Node: identifier = 'ref'
        Node: selector = '.listen'
          Node: unconditional_assignable_selector = '.listen'
            Node: . = '.'
            Node: identifier = 'listen'
        Node: selector = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
          Node: argument_part = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
            Node: arguments = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
              Node: ( = '('
              Node: argument = 'authNotifierProvider'
                Node: identifier = 'authNotifierProvider'
              Node: , = ','
              Node: argument = '(previous, next) {
    // 認証状態が変更された時の処理
  }'
                Node: function_expression = '(previous, next) {
    // 認証状態が変更された時の処理
  }'
                  Node: formal_parameter_list = '(previous, next)'
                    Node: ( = '('
                    Node: formal_parameter = 'previous'
                      Node: identifier = 'previous'
                    Node: , = ','
                    Node: formal_parameter = 'next'
                      Node: identifier = 'next'
                    Node: ) = ')'
                  Node: function_expression_body = '{
    // 認証状態が変更された時の処理
  }'
                    Node: block = '{
    // 認証状態が変更された時の処理
  }'
                      Node: { = '{'
                      Node: comment = '// 認証状態が変更された時の処理'
                        Node: // = '//'
                      Node: } = '}'
              Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return ref.watch(authNotifierProvider);'
        Node: return = 'return'
        Node: identifier = 'ref'
        Node: selector = '.watch'
          Node: unconditional_assignable_selector = '.watch'
            Node: . = '.'
            Node: identifier = 'watch'
        Node: selector = '(authNotifierProvider)'
          Node: argument_part = '(authNotifierProvider)'
            Node: arguments = '(authNotifierProvider)'
              Node: ( = '('
              Node: argument = 'authNotifierProvider'
                Node: identifier = 'authNotifierProvider'
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
  Node: documentation_comment = '/// 現在のユーザープロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'AppUser? currentUser(Ref ref)'
    Node: type_identifier = 'AppUser'
    Node: nullable_type = '?'
      Node: ? = '?'
    Node: identifier = 'currentUser'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}'
    Node: block = '{
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}'
      Node: { = '{'
      Node: local_variable_declaration = 'final authState = ref.watch(authStateProvider);'
        Node: initialized_variable_definition = 'final authState = ref.watch(authStateProvider)'
          Node: final_builtin = 'final'
            Node: final = 'final'
          Node: identifier = 'authState'
          Node: = = '='
          Node: identifier = 'ref'
          Node: selector = '.watch'
            Node: unconditional_assignable_selector = '.watch'
              Node: . = '.'
              Node: identifier = 'watch'
          Node: selector = '(authStateProvider)'
            Node: argument_part = '(authStateProvider)'
              Node: arguments = '(authStateProvider)'
                Node: ( = '('
                Node: argument = 'authStateProvider'
                  Node: identifier = 'authStateProvider'
                Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );'
        Node: return = 'return'
        Node: identifier = 'authState'
        Node: selector = '.when'
          Node: unconditional_assignable_selector = '.when'
            Node: . = '.'
            Node: identifier = 'when'
        Node: selector = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
          Node: argument_part = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
            Node: arguments = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
              Node: ( = '('
              Node: named_argument = 'authenticated: (user) => user'
                Node: label = 'authenticated:'
                  Node: identifier = 'authenticated'
                  Node: : = ':'
                Node: function_expression = '(user) => user'
                  Node: formal_parameter_list = '(user)'
                    Node: ( = '('
                    Node: formal_parameter = 'user'
                      Node: identifier = 'user'
                    Node: ) = ')'
                  Node: function_expression_body = '=> user'
                    Node: => = '=>'
                    Node: identifier = 'user'
              Node: , = ','
              Node: named_argument = 'initial: () => null'
                Node: label = 'initial:'
                  Node: identifier = 'initial'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'loading: () => null'
                Node: label = 'loading:'
                  Node: identifier = 'loading'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'unauthenticated: () => null'
                Node: label = 'unauthenticated:'
                  Node: identifier = 'unauthenticated'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'error: (_) => null'
                Node: label = 'error:'
                  Node: identifier = 'error'
                  Node: : = ':'
                Node: function_expression = '(_) => null'
                  Node: formal_parameter_list = '(_)'
                    Node: ( = '('
                    Node: formal_parameter = '_'
                      Node: identifier = '_'
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
  Node: documentation_comment = '/// 認証済みかどうかのプロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'bool isAuthenticated(Ref ref)'
    Node: type_identifier = 'bool'
    Node: identifier = 'isAuthenticated'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}'
    Node: block = '{
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}'
      Node: { = '{'
      Node: local_variable_declaration = 'final authState = ref.watch(authStateProvider);'
        Node: initialized_variable_definition = 'final authState = ref.watch(authStateProvider)'
          Node: final_builtin = 'final'
            Node: final = 'final'
          Node: identifier = 'authState'
          Node: = = '='
          Node: identifier = 'ref'
          Node: selector = '.watch'
            Node: unconditional_assignable_selector = '.watch'
              Node: . = '.'
              Node: identifier = 'watch'
          Node: selector = '(authStateProvider)'
            Node: argument_part = '(authStateProvider)'
              Node: arguments = '(authStateProvider)'
                Node: ( = '('
                Node: argument = 'authStateProvider'
                  Node: identifier = 'authStateProvider'
                Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );'
        Node: return = 'return'
        Node: identifier = 'authState'
        Node: selector = '.maybeWhen'
          Node: unconditional_assignable_selector = '.maybeWhen'
            Node: . = '.'
            Node: identifier = 'maybeWhen'
        Node: selector = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
          Node: argument_part = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
            Node: arguments = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
              Node: ( = '('
              Node: named_argument = 'authenticated: (_) => true'
                Node: label = 'authenticated:'
                  Node: identifier = 'authenticated'
                  Node: : = ':'
                Node: function_expression = '(_) => true'
                  Node: formal_parameter_list = '(_)'
                    Node: ( = '('
                    Node: formal_parameter = '_'
                      Node: identifier = '_'
                    Node: ) = ')'
                  Node: function_expression_body = '=> true'
                    Node: => = '=>'
                    Node: true = 'true'
                      Node: true = 'true'
              Node: , = ','
              Node: named_argument = 'orElse: () => false'
                Node: label = 'orElse:'
                  Node: identifier = 'orElse'
                  Node: : = ':'
                Node: function_expression = '() => false'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> false'
                    Node: => = '=>'
                    Node: false = 'false'
                      Node: false = 'false'
              Node: , = ','
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
=== End AST ===

=== Complete AST for test_flutter_app/aminomi/lib/providers/auth_provider.dart ===
Node: program = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;
import 'package:riverpod/riverpod.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import '../models/user.dart';
import '../services/line_auth_service.dart';

part 'auth_provider.g.dart';

@riverpod
class AuthNotifier extends _$AuthNotifier {
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}

/// 認証状態プロバイダー
@riverpod
AuthState authState(Ref ref) {
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}

/// 現在のユーザープロバイダー
@riverpod
AppUser? currentUser(Ref ref) {
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}

/// 認証済みかどうかのプロバイダー
@riverpod
bool isAuthenticated(Ref ref) {
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}
'
  Node: import_or_export = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
    Node: library_import = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
      Node: import_specification = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
        Node: import = 'import'
        Node: configurable_uri = ''package:firebase_auth/firebase_auth.dart''
          Node: uri = ''package:firebase_auth/firebase_auth.dart''
            Node: string_literal = ''package:firebase_auth/firebase_auth.dart''
              Node: ' = '''
              Node: ' = '''
        Node: as = 'as'
        Node: identifier = 'firebase_auth'
        Node: ; = ';'
  Node: import_or_export = 'import 'package:riverpod/riverpod.dart';'
    Node: library_import = 'import 'package:riverpod/riverpod.dart';'
      Node: import_specification = 'import 'package:riverpod/riverpod.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:riverpod/riverpod.dart''
          Node: uri = ''package:riverpod/riverpod.dart''
            Node: string_literal = ''package:riverpod/riverpod.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
    Node: library_import = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
      Node: import_specification = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:riverpod_annotation/riverpod_annotation.dart''
          Node: uri = ''package:riverpod_annotation/riverpod_annotation.dart''
            Node: string_literal = ''package:riverpod_annotation/riverpod_annotation.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import '../models/user.dart';'
    Node: library_import = 'import '../models/user.dart';'
      Node: import_specification = 'import '../models/user.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''../models/user.dart''
          Node: uri = ''../models/user.dart''
            Node: string_literal = ''../models/user.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import '../services/line_auth_service.dart';'
    Node: library_import = 'import '../services/line_auth_service.dart';'
      Node: import_specification = 'import '../services/line_auth_service.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''../services/line_auth_service.dart''
          Node: uri = ''../services/line_auth_service.dart''
            Node: string_literal = ''../services/line_auth_service.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: part_directive = 'part 'auth_provider.g.dart';'
    Node: part = 'part'
    Node: uri = ''auth_provider.g.dart''
      Node: string_literal = ''auth_provider.g.dart''
        Node: ' = '''
        Node: ' = '''
    Node: ; = ';'
  Node: class_definition = '@riverpod
class AuthNotifier extends _$AuthNotifier {
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}'
    Node: annotation = '@riverpod'
      Node: @ = '@'
      Node: identifier = 'riverpod'
    Node: class = 'class'
    Node: identifier = 'AuthNotifier'
    Node: superclass = 'extends _$AuthNotifier'
      Node: extends = 'extends'
      Node: type_identifier = '_$AuthNotifier'
    Node: class_body = '{
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}'
      Node: { = '{'
      Node: annotation = '@override'
        Node: @ = '@'
        Node: identifier = 'override'
      Node: method_signature = 'AuthState build()'
        Node: function_signature = 'AuthState build()'
          Node: type_identifier = 'AuthState'
          Node: identifier = 'build'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = '{
    return const AuthState.initial();
  }'
        Node: block = '{
    return const AuthState.initial();
  }'
          Node: { = '{'
          Node: return_statement = 'return const AuthState.initial();'
            Node: return = 'return'
            Node: const_object_expression = 'const AuthState.initial()'
              Node: const_builtin = 'const'
              Node: type_identifier = 'AuthState'
              Node: . = '.'
              Node: identifier = 'initial'
              Node: arguments = '()'
                Node: ( = '('
                Node: ) = ')'
            Node: ; = ';'
          Node: } = '}'
      Node: documentation_comment = '/// LINEログイン'
        Node: /// = '///'
      Node: method_signature = 'Future<void> signInWithLine()'
        Node: function_signature = 'Future<void> signInWithLine()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'signInWithLine'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: expression_statement = 'state = const AuthState.loading();'
            Node: assignment_expression = 'state = const AuthState.loading()'
              Node: assignable_expression = 'state'
                Node: identifier = 'state'
              Node: = = '='
              Node: const_object_expression = 'const AuthState.loading()'
                Node: const_builtin = 'const'
                Node: type_identifier = 'AuthState'
                Node: . = '.'
                Node: identifier = 'loading'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: ; = ';'
          Node: try_statement = 'try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    }'
              Node: { = '{'
              Node: local_variable_declaration = 'final result = await LineAuthService.login();'
                Node: initialized_variable_definition = 'final result = await LineAuthService.login()'
                  Node: final_builtin = 'final'
                    Node: final = 'final'
                  Node: identifier = 'result'
                  Node: = = '='
                  Node: unary_expression = 'await LineAuthService.login()'
                    Node: await_expression = 'await LineAuthService.login()'
                      Node: await = 'await'
                      Node: identifier = 'LineAuthService'
                      Node: selector = '.login'
                        Node: unconditional_assignable_selector = '.login'
                          Node: . = '.'
                          Node: identifier = 'login'
                      Node: selector = '()'
                        Node: argument_part = '()'
                          Node: arguments = '()'
                            Node: ( = '('
                            Node: ) = ')'
                Node: ; = ';'
              Node: if_statement = 'if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }'
                Node: if = 'if'
                Node: ( = '('
                Node: equality_expression = 'result != null'
                  Node: identifier = 'result'
                  Node: equality_operator = '!='
                  Node: null_literal = 'null'
                    Node: null = 'null'
                Node: ) = ')'
                Node: block = '{
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      }'
                  Node: { = '{'
                  Node: comment = '// Firebaseカスタムトークンでサインイン'
                    Node: // = '//'
                  Node: local_variable_declaration = 'final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );'
                    Node: initialized_variable_definition = 'final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                      Node: final_builtin = 'final'
                        Node: final = 'final'
                      Node: identifier = 'userCredential'
                      Node: = = '='
                      Node: unary_expression = 'await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                        Node: await_expression = 'await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                          Node: await = 'await'
                          Node: identifier = 'firebase_auth'
                          Node: selector = '.FirebaseAuth'
                            Node: unconditional_assignable_selector = '.FirebaseAuth'
                              Node: . = '.'
                              Node: identifier = 'FirebaseAuth'
                          Node: selector = '.instance'
                            Node: unconditional_assignable_selector = '.instance'
                              Node: . = '.'
                              Node: identifier = 'instance'
                          Node: selector = '.signInWithCustomToken'
                            Node: unconditional_assignable_selector = '.signInWithCustomToken'
                              Node: . = '.'
                              Node: identifier = 'signInWithCustomToken'
                          Node: selector = '(
          result.accessToken,
        )'
                            Node: argument_part = '(
          result.accessToken,
        )'
                              Node: arguments = '(
          result.accessToken,
        )'
                                Node: ( = '('
                                Node: argument = 'result.accessToken'
                                  Node: identifier = 'result'
                                  Node: selector = '.accessToken'
                                    Node: unconditional_assignable_selector = '.accessToken'
                                      Node: . = '.'
                                      Node: identifier = 'accessToken'
                                Node: , = ','
                                Node: ) = ')'
                    Node: ; = ';'
                  Node: if_statement = 'if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }'
                    Node: if = 'if'
                    Node: ( = '('
                    Node: equality_expression = 'userCredential.user != null'
                      Node: identifier = 'userCredential'
                      Node: selector = '.user'
                        Node: unconditional_assignable_selector = '.user'
                          Node: . = '.'
                          Node: identifier = 'user'
                      Node: equality_operator = '!='
                      Node: null_literal = 'null'
                        Node: null = 'null'
                    Node: ) = ')'
                    Node: block = '{
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        }'
                      Node: { = '{'
                      Node: local_variable_declaration = 'final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );'
                        Node: initialized_variable_definition = 'final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                          Node: final_builtin = 'final'
                            Node: final = 'final'
                          Node: identifier = 'user'
                          Node: = = '='
                          Node: identifier = 'AppUser'
                          Node: selector = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                            Node: argument_part = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                              Node: arguments = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                                Node: ( = '('
                                Node: named_argument = 'id: userCredential.user!.uid'
                                  Node: label = 'id:'
                                    Node: identifier = 'id'
                                    Node: : = ':'
                                  Node: identifier = 'userCredential'
                                  Node: selector = '.user'
                                    Node: unconditional_assignable_selector = '.user'
                                      Node: . = '.'
                                      Node: identifier = 'user'
                                  Node: selector = '!'
                                    Node: ! = '!'
                                  Node: selector = '.uid'
                                    Node: unconditional_assignable_selector = '.uid'
                                      Node: . = '.'
                                      Node: identifier = 'uid'
                                Node: , = ','
                                Node: named_argument = 'displayName: result.profile.displayName'
                                  Node: label = 'displayName:'
                                    Node: identifier = 'displayName'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.displayName'
                                    Node: unconditional_assignable_selector = '.displayName'
                                      Node: . = '.'
                                      Node: identifier = 'displayName'
                                Node: , = ','
                                Node: named_argument = 'photoURL: result.profile.pictureUrl'
                                  Node: label = 'photoURL:'
                                    Node: identifier = 'photoURL'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.pictureUrl'
                                    Node: unconditional_assignable_selector = '.pictureUrl'
                                      Node: . = '.'
                                      Node: identifier = 'pictureUrl'
                                Node: , = ','
                                Node: named_argument = 'statusMessage: result.profile.statusMessage'
                                  Node: label = 'statusMessage:'
                                    Node: identifier = 'statusMessage'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.statusMessage'
                                    Node: unconditional_assignable_selector = '.statusMessage'
                                      Node: . = '.'
                                      Node: identifier = 'statusMessage'
                                Node: , = ','
                                Node: named_argument = 'provider: 'line''
                                  Node: label = 'provider:'
                                    Node: identifier = 'provider'
                                    Node: : = ':'
                                  Node: string_literal = ''line''
                                    Node: ' = '''
                                    Node: ' = '''
                                Node: , = ','
                                Node: named_argument = 'createdAt: DateTime.now()'
                                  Node: label = 'createdAt:'
                                    Node: identifier = 'createdAt'
                                    Node: : = ':'
                                  Node: identifier = 'DateTime'
                                  Node: selector = '.now'
                                    Node: unconditional_assignable_selector = '.now'
                                      Node: . = '.'
                                      Node: identifier = 'now'
                                  Node: selector = '()'
                                    Node: argument_part = '()'
                                      Node: arguments = '()'
                                        Node: ( = '('
                                        Node: ) = ')'
                                Node: , = ','
                                Node: ) = ')'
                        Node: ; = ';'
                      Node: expression_statement = 'state = AuthState.authenticated(user);'
                        Node: assignment_expression = 'state = AuthState.authenticated(user)'
                          Node: assignable_expression = 'state'
                            Node: identifier = 'state'
                          Node: = = '='
                          Node: identifier = 'AuthState'
                          Node: selector = '.authenticated'
                            Node: unconditional_assignable_selector = '.authenticated'
                              Node: . = '.'
                              Node: identifier = 'authenticated'
                          Node: selector = '(user)'
                            Node: argument_part = '(user)'
                              Node: arguments = '(user)'
                                Node: ( = '('
                                Node: argument = 'user'
                                  Node: identifier = 'user'
                                Node: ) = ')'
                        Node: ; = ';'
                      Node: } = '}'
                    Node: else = 'else'
                    Node: block = '{
          state = const AuthState.error('Failed to sign in with custom token');
        }'
                      Node: { = '{'
                      Node: expression_statement = 'state = const AuthState.error('Failed to sign in with custom token');'
                        Node: assignment_expression = 'state = const AuthState.error('Failed to sign in with custom token')'
                          Node: assignable_expression = 'state'
                            Node: identifier = 'state'
                          Node: = = '='
                          Node: const_object_expression = 'const AuthState.error('Failed to sign in with custom token')'
                            Node: const_builtin = 'const'
                            Node: type_identifier = 'AuthState'
                            Node: . = '.'
                            Node: identifier = 'error'
                            Node: arguments = '('Failed to sign in with custom token')'
                              Node: ( = '('
                              Node: argument = ''Failed to sign in with custom token''
                                Node: string_literal = ''Failed to sign in with custom token''
                                  Node: ' = '''
                                  Node: ' = '''
                              Node: ) = ')'
                        Node: ; = ';'
                      Node: } = '}'
                  Node: } = '}'
                Node: else = 'else'
                Node: block = '{
        state = const AuthState.error('LINE login failed');
      }'
                  Node: { = '{'
                  Node: expression_statement = 'state = const AuthState.error('LINE login failed');'
                    Node: assignment_expression = 'state = const AuthState.error('LINE login failed')'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: const_object_expression = 'const AuthState.error('LINE login failed')'
                        Node: const_builtin = 'const'
                        Node: type_identifier = 'AuthState'
                        Node: . = '.'
                        Node: identifier = 'error'
                        Node: arguments = '('LINE login failed')'
                          Node: ( = '('
                          Node: argument = ''LINE login failed''
                            Node: string_literal = ''LINE login failed''
                              Node: ' = '''
                              Node: ' = '''
                          Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// ログアウト'
        Node: /// = '///'
      Node: method_signature = 'Future<void> signOut()'
        Node: function_signature = 'Future<void> signOut()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'signOut'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: try_statement = 'try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    }'
              Node: { = '{'
              Node: expression_statement = 'await firebase_auth.FirebaseAuth.instance.signOut();'
                Node: unary_expression = 'await firebase_auth.FirebaseAuth.instance.signOut()'
                  Node: await_expression = 'await firebase_auth.FirebaseAuth.instance.signOut()'
                    Node: await = 'await'
                    Node: identifier = 'firebase_auth'
                    Node: selector = '.FirebaseAuth'
                      Node: unconditional_assignable_selector = '.FirebaseAuth'
                        Node: . = '.'
                        Node: identifier = 'FirebaseAuth'
                    Node: selector = '.instance'
                      Node: unconditional_assignable_selector = '.instance'
                        Node: . = '.'
                        Node: identifier = 'instance'
                    Node: selector = '.signOut'
                      Node: unconditional_assignable_selector = '.signOut'
                        Node: . = '.'
                        Node: identifier = 'signOut'
                    Node: selector = '()'
                      Node: argument_part = '()'
                        Node: arguments = '()'
                          Node: ( = '('
                          Node: ) = ')'
                Node: ; = ';'
              Node: expression_statement = 'state = const AuthState.unauthenticated();'
                Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: const_object_expression = 'const AuthState.unauthenticated()'
                    Node: const_builtin = 'const'
                    Node: type_identifier = 'AuthState'
                    Node: . = '.'
                    Node: identifier = 'unauthenticated'
                    Node: arguments = '()'
                      Node: ( = '('
                      Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// 現在のユーザーを取得'
        Node: /// = '///'
      Node: method_signature = 'Future<void> getCurrentUser()'
        Node: function_signature = 'Future<void> getCurrentUser()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'getCurrentUser'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: expression_statement = 'state = const AuthState.loading();'
            Node: assignment_expression = 'state = const AuthState.loading()'
              Node: assignable_expression = 'state'
                Node: identifier = 'state'
              Node: = = '='
              Node: const_object_expression = 'const AuthState.loading()'
                Node: const_builtin = 'const'
                Node: type_identifier = 'AuthState'
                Node: . = '.'
                Node: identifier = 'loading'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: ; = ';'
          Node: try_statement = 'try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    }'
              Node: { = '{'
              Node: local_variable_declaration = 'final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;'
                Node: initialized_variable_definition = 'final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser'
                  Node: final_builtin = 'final'
                    Node: final = 'final'
                  Node: identifier = 'firebaseUser'
                  Node: = = '='
                  Node: identifier = 'firebase_auth'
                  Node: selector = '.FirebaseAuth'
                    Node: unconditional_assignable_selector = '.FirebaseAuth'
                      Node: . = '.'
                      Node: identifier = 'FirebaseAuth'
                  Node: selector = '.instance'
                    Node: unconditional_assignable_selector = '.instance'
                      Node: . = '.'
                      Node: identifier = 'instance'
                  Node: selector = '.currentUser'
                    Node: unconditional_assignable_selector = '.currentUser'
                      Node: . = '.'
                      Node: identifier = 'currentUser'
                Node: ; = ';'
              Node: if_statement = 'if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }'
                Node: if = 'if'
                Node: ( = '('
                Node: equality_expression = 'firebaseUser != null'
                  Node: identifier = 'firebaseUser'
                  Node: equality_operator = '!='
                  Node: null_literal = 'null'
                    Node: null = 'null'
                Node: ) = ')'
                Node: block = '{
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      }'
                  Node: { = '{'
                  Node: comment = '// Firestoreからユーザー情報を取得'
                    Node: // = '//'
                  Node: comment = '// TODO: FirestoreServiceを使用してユーザー情報を取得'
                    Node: // = '//'
                  Node: local_variable_declaration = 'final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );'
                    Node: initialized_variable_definition = 'final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                      Node: final_builtin = 'final'
                        Node: final = 'final'
                      Node: identifier = 'user'
                      Node: = = '='
                      Node: identifier = 'AppUser'
                      Node: selector = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                        Node: argument_part = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                          Node: arguments = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                            Node: ( = '('
                            Node: named_argument = 'id: firebaseUser.uid'
                              Node: label = 'id:'
                                Node: identifier = 'id'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.uid'
                                Node: unconditional_assignable_selector = '.uid'
                                  Node: . = '.'
                                  Node: identifier = 'uid'
                            Node: , = ','
                            Node: named_argument = 'displayName: firebaseUser.displayName ?? 'Unknown User''
                              Node: label = 'displayName:'
                                Node: identifier = 'displayName'
                                Node: : = ':'
                              Node: if_null_expression = 'firebaseUser.displayName ?? 'Unknown User''
                                Node: identifier = 'firebaseUser'
                                Node: selector = '.displayName'
                                  Node: unconditional_assignable_selector = '.displayName'
                                    Node: . = '.'
                                    Node: identifier = 'displayName'
                                Node: ?? = '??'
                                Node: string_literal = ''Unknown User''
                                  Node: ' = '''
                                  Node: ' = '''
                            Node: , = ','
                            Node: named_argument = 'email: firebaseUser.email'
                              Node: label = 'email:'
                                Node: identifier = 'email'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.email'
                                Node: unconditional_assignable_selector = '.email'
                                  Node: . = '.'
                                  Node: identifier = 'email'
                            Node: , = ','
                            Node: named_argument = 'photoURL: firebaseUser.photoURL'
                              Node: label = 'photoURL:'
                                Node: identifier = 'photoURL'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.photoURL'
                                Node: unconditional_assignable_selector = '.photoURL'
                                  Node: . = '.'
                                  Node: identifier = 'photoURL'
                            Node: , = ','
                            Node: named_argument = 'provider: 'line''
                              Node: label = 'provider:'
                                Node: identifier = 'provider'
                                Node: : = ':'
                              Node: string_literal = ''line''
                                Node: ' = '''
                                Node: ' = '''
                            Node: , = ','
                            Node: ) = ')'
                    Node: ; = ';'
                  Node: expression_statement = 'state = AuthState.authenticated(user);'
                    Node: assignment_expression = 'state = AuthState.authenticated(user)'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: identifier = 'AuthState'
                      Node: selector = '.authenticated'
                        Node: unconditional_assignable_selector = '.authenticated'
                          Node: . = '.'
                          Node: identifier = 'authenticated'
                      Node: selector = '(user)'
                        Node: argument_part = '(user)'
                          Node: arguments = '(user)'
                            Node: ( = '('
                            Node: argument = 'user'
                              Node: identifier = 'user'
                            Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
                Node: else = 'else'
                Node: block = '{
        state = const AuthState.unauthenticated();
      }'
                  Node: { = '{'
                  Node: expression_statement = 'state = const AuthState.unauthenticated();'
                    Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: const_object_expression = 'const AuthState.unauthenticated()'
                        Node: const_builtin = 'const'
                        Node: type_identifier = 'AuthState'
                        Node: . = '.'
                        Node: identifier = 'unauthenticated'
                        Node: arguments = '()'
                          Node: ( = '('
                          Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// 認証状態の監視'
        Node: /// = '///'
      Node: method_signature = 'void listenToAuthChanges()'
        Node: function_signature = 'void listenToAuthChanges()'
          Node: void_type = 'void'
          Node: identifier = 'listenToAuthChanges'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = '{
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }'
        Node: block = '{
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }'
          Node: { = '{'
          Node: expression_statement = 'firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });'
            Node: identifier = 'firebase_auth'
            Node: selector = '.FirebaseAuth'
              Node: unconditional_assignable_selector = '.FirebaseAuth'
                Node: . = '.'
                Node: identifier = 'FirebaseAuth'
            Node: selector = '.instance'
              Node: unconditional_assignable_selector = '.instance'
                Node: . = '.'
                Node: identifier = 'instance'
            Node: selector = '.authStateChanges'
              Node: unconditional_assignable_selector = '.authStateChanges'
                Node: . = '.'
                Node: identifier = 'authStateChanges'
            Node: selector = '()'
              Node: argument_part = '()'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: selector = '.listen'
              Node: unconditional_assignable_selector = '.listen'
                Node: . = '.'
                Node: identifier = 'listen'
            Node: selector = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
              Node: argument_part = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
                Node: arguments = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
                  Node: ( = '('
                  Node: argument = '(firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                    Node: function_expression = '(firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                      Node: formal_parameter_list = '(firebaseUser)'
                        Node: ( = '('
                        Node: formal_parameter = 'firebaseUser'
                          Node: identifier = 'firebaseUser'
                        Node: ) = ')'
                      Node: function_expression_body = '{
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                        Node: block = '{
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                          Node: { = '{'
                          Node: if_statement = 'if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }'
                            Node: if = 'if'
                            Node: ( = '('
                            Node: equality_expression = 'firebaseUser != null'
                              Node: identifier = 'firebaseUser'
                              Node: equality_operator = '!='
                              Node: null_literal = 'null'
                                Node: null = 'null'
                            Node: ) = ')'
                            Node: block = '{
        // ユーザーがログインしている場合
        getCurrentUser();
      }'
                              Node: { = '{'
                              Node: comment = '// ユーザーがログインしている場合'
                                Node: // = '//'
                              Node: expression_statement = 'getCurrentUser();'
                                Node: identifier = 'getCurrentUser'
                                Node: selector = '()'
                                  Node: argument_part = '()'
                                    Node: arguments = '()'
                                      Node: ( = '('
                                      Node: ) = ')'
                                Node: ; = ';'
                              Node: } = '}'
                            Node: else = 'else'
                            Node: block = '{
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }'
                              Node: { = '{'
                              Node: comment = '// ユーザーがログアウトしている場合'
                                Node: // = '//'
                              Node: expression_statement = 'state = const AuthState.unauthenticated();'
                                Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                                  Node: assignable_expression = 'state'
                                    Node: identifier = 'state'
                                  Node: = = '='
                                  Node: const_object_expression = 'const AuthState.unauthenticated()'
                                    Node: const_builtin = 'const'
                                    Node: type_identifier = 'AuthState'
                                    Node: . = '.'
                                    Node: identifier = 'unauthenticated'
                                    Node: arguments = '()'
                                      Node: ( = '('
                                      Node: ) = ')'
                                Node: ; = ';'
                              Node: } = '}'
                          Node: } = '}'
                  Node: ) = ')'
            Node: ; = ';'
          Node: } = '}'
      Node: } = '}'
  Node: documentation_comment = '/// 認証状態プロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'AuthState authState(Ref ref)'
    Node: type_identifier = 'AuthState'
    Node: identifier = 'authState'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}'
    Node: block = '{
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}'
      Node: { = '{'
      Node: comment = '// 初回起動時に認証状態を監視開始'
        Node: // = '//'
      Node: expression_statement = 'ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });'
        Node: identifier = 'ref'
        Node: selector = '.listen'
          Node: unconditional_assignable_selector = '.listen'
            Node: . = '.'
            Node: identifier = 'listen'
        Node: selector = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
          Node: argument_part = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
            Node: arguments = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
              Node: ( = '('
              Node: argument = 'authNotifierProvider'
                Node: identifier = 'authNotifierProvider'
              Node: , = ','
              Node: argument = '(previous, next) {
    // 認証状態が変更された時の処理
  }'
                Node: function_expression = '(previous, next) {
    // 認証状態が変更された時の処理
  }'
                  Node: formal_parameter_list = '(previous, next)'
                    Node: ( = '('
                    Node: formal_parameter = 'previous'
                      Node: identifier = 'previous'
                    Node: , = ','
                    Node: formal_parameter = 'next'
                      Node: identifier = 'next'
                    Node: ) = ')'
                  Node: function_expression_body = '{
    // 認証状態が変更された時の処理
  }'
                    Node: block = '{
    // 認証状態が変更された時の処理
  }'
                      Node: { = '{'
                      Node: comment = '// 認証状態が変更された時の処理'
                        Node: // = '//'
                      Node: } = '}'
              Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return ref.watch(authNotifierProvider);'
        Node: return = 'return'
        Node: identifier = 'ref'
        Node: selector = '.watch'
          Node: unconditional_assignable_selector = '.watch'
            Node: . = '.'
            Node: identifier = 'watch'
        Node: selector = '(authNotifierProvider)'
          Node: argument_part = '(authNotifierProvider)'
            Node: arguments = '(authNotifierProvider)'
              Node: ( = '('
              Node: argument = 'authNotifierProvider'
                Node: identifier = 'authNotifierProvider'
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
  Node: documentation_comment = '/// 現在のユーザープロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'AppUser? currentUser(Ref ref)'
    Node: type_identifier = 'AppUser'
    Node: nullable_type = '?'
      Node: ? = '?'
    Node: identifier = 'currentUser'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}'
    Node: block = '{
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}'
      Node: { = '{'
      Node: local_variable_declaration = 'final authState = ref.watch(authStateProvider);'
        Node: initialized_variable_definition = 'final authState = ref.watch(authStateProvider)'
          Node: final_builtin = 'final'
            Node: final = 'final'
          Node: identifier = 'authState'
          Node: = = '='
          Node: identifier = 'ref'
          Node: selector = '.watch'
            Node: unconditional_assignable_selector = '.watch'
              Node: . = '.'
              Node: identifier = 'watch'
          Node: selector = '(authStateProvider)'
            Node: argument_part = '(authStateProvider)'
              Node: arguments = '(authStateProvider)'
                Node: ( = '('
                Node: argument = 'authStateProvider'
                  Node: identifier = 'authStateProvider'
                Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );'
        Node: return = 'return'
        Node: identifier = 'authState'
        Node: selector = '.when'
          Node: unconditional_assignable_selector = '.when'
            Node: . = '.'
            Node: identifier = 'when'
        Node: selector = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
          Node: argument_part = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
            Node: arguments = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
              Node: ( = '('
              Node: named_argument = 'authenticated: (user) => user'
                Node: label = 'authenticated:'
                  Node: identifier = 'authenticated'
                  Node: : = ':'
                Node: function_expression = '(user) => user'
                  Node: formal_parameter_list = '(user)'
                    Node: ( = '('
                    Node: formal_parameter = 'user'
                      Node: identifier = 'user'
                    Node: ) = ')'
                  Node: function_expression_body = '=> user'
                    Node: => = '=>'
                    Node: identifier = 'user'
              Node: , = ','
              Node: named_argument = 'initial: () => null'
                Node: label = 'initial:'
                  Node: identifier = 'initial'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'loading: () => null'
                Node: label = 'loading:'
                  Node: identifier = 'loading'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'unauthenticated: () => null'
                Node: label = 'unauthenticated:'
                  Node: identifier = 'unauthenticated'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'error: (_) => null'
                Node: label = 'error:'
                  Node: identifier = 'error'
                  Node: : = ':'
                Node: function_expression = '(_) => null'
                  Node: formal_parameter_list = '(_)'
                    Node: ( = '('
                    Node: formal_parameter = '_'
                      Node: identifier = '_'
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
  Node: documentation_comment = '/// 認証済みかどうかのプロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'bool isAuthenticated(Ref ref)'
    Node: type_identifier = 'bool'
    Node: identifier = 'isAuthenticated'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}'
    Node: block = '{
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}'
      Node: { = '{'
      Node: local_variable_declaration = 'final authState = ref.watch(authStateProvider);'
        Node: initialized_variable_definition = 'final authState = ref.watch(authStateProvider)'
          Node: final_builtin = 'final'
            Node: final = 'final'
          Node: identifier = 'authState'
          Node: = = '='
          Node: identifier = 'ref'
          Node: selector = '.watch'
            Node: unconditional_assignable_selector = '.watch'
              Node: . = '.'
              Node: identifier = 'watch'
          Node: selector = '(authStateProvider)'
            Node: argument_part = '(authStateProvider)'
              Node: arguments = '(authStateProvider)'
                Node: ( = '('
                Node: argument = 'authStateProvider'
                  Node: identifier = 'authStateProvider'
                Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );'
        Node: return = 'return'
        Node: identifier = 'authState'
        Node: selector = '.maybeWhen'
          Node: unconditional_assignable_selector = '.maybeWhen'
            Node: . = '.'
            Node: identifier = 'maybeWhen'
        Node: selector = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
          Node: argument_part = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
            Node: arguments = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
              Node: ( = '('
              Node: named_argument = 'authenticated: (_) => true'
                Node: label = 'authenticated:'
                  Node: identifier = 'authenticated'
                  Node: : = ':'
                Node: function_expression = '(_) => true'
                  Node: formal_parameter_list = '(_)'
                    Node: ( = '('
                    Node: formal_parameter = '_'
                      Node: identifier = '_'
                    Node: ) = ')'
                  Node: function_expression_body = '=> true'
                    Node: => = '=>'
                    Node: true = 'true'
                      Node: true = 'true'
              Node: , = ','
              Node: named_argument = 'orElse: () => false'
                Node: label = 'orElse:'
                  Node: identifier = 'orElse'
                  Node: : = ':'
                Node: function_expression = '() => false'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> false'
                    Node: => = '=>'
                    Node: false = 'false'
                      Node: false = 'false'
              Node: , = ','
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
=== End AST ===

=== Complete AST for test_flutter_app/aminomi/lib/providers/auth_provider.dart ===
Node: program = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;
import 'package:riverpod/riverpod.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import '../models/user.dart';
import '../services/line_auth_service.dart';

part 'auth_provider.g.dart';

@riverpod
class AuthNotifier extends _$AuthNotifier {
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}

/// 認証状態プロバイダー
@riverpod
AuthState authState(Ref ref) {
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}

/// 現在のユーザープロバイダー
@riverpod
AppUser? currentUser(Ref ref) {
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}

/// 認証済みかどうかのプロバイダー
@riverpod
bool isAuthenticated(Ref ref) {
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}
'
  Node: import_or_export = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
    Node: library_import = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
      Node: import_specification = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
        Node: import = 'import'
        Node: configurable_uri = ''package:firebase_auth/firebase_auth.dart''
          Node: uri = ''package:firebase_auth/firebase_auth.dart''
            Node: string_literal = ''package:firebase_auth/firebase_auth.dart''
              Node: ' = '''
              Node: ' = '''
        Node: as = 'as'
        Node: identifier = 'firebase_auth'
        Node: ; = ';'
  Node: import_or_export = 'import 'package:riverpod/riverpod.dart';'
    Node: library_import = 'import 'package:riverpod/riverpod.dart';'
      Node: import_specification = 'import 'package:riverpod/riverpod.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:riverpod/riverpod.dart''
          Node: uri = ''package:riverpod/riverpod.dart''
            Node: string_literal = ''package:riverpod/riverpod.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
    Node: library_import = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
      Node: import_specification = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:riverpod_annotation/riverpod_annotation.dart''
          Node: uri = ''package:riverpod_annotation/riverpod_annotation.dart''
            Node: string_literal = ''package:riverpod_annotation/riverpod_annotation.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import '../models/user.dart';'
    Node: library_import = 'import '../models/user.dart';'
      Node: import_specification = 'import '../models/user.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''../models/user.dart''
          Node: uri = ''../models/user.dart''
            Node: string_literal = ''../models/user.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import '../services/line_auth_service.dart';'
    Node: library_import = 'import '../services/line_auth_service.dart';'
      Node: import_specification = 'import '../services/line_auth_service.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''../services/line_auth_service.dart''
          Node: uri = ''../services/line_auth_service.dart''
            Node: string_literal = ''../services/line_auth_service.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: part_directive = 'part 'auth_provider.g.dart';'
    Node: part = 'part'
    Node: uri = ''auth_provider.g.dart''
      Node: string_literal = ''auth_provider.g.dart''
        Node: ' = '''
        Node: ' = '''
    Node: ; = ';'
  Node: class_definition = '@riverpod
class AuthNotifier extends _$AuthNotifier {
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}'
    Node: annotation = '@riverpod'
      Node: @ = '@'
      Node: identifier = 'riverpod'
    Node: class = 'class'
    Node: identifier = 'AuthNotifier'
    Node: superclass = 'extends _$AuthNotifier'
      Node: extends = 'extends'
      Node: type_identifier = '_$AuthNotifier'
    Node: class_body = '{
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}'
      Node: { = '{'
      Node: annotation = '@override'
        Node: @ = '@'
        Node: identifier = 'override'
      Node: method_signature = 'AuthState build()'
        Node: function_signature = 'AuthState build()'
          Node: type_identifier = 'AuthState'
          Node: identifier = 'build'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = '{
    return const AuthState.initial();
  }'
        Node: block = '{
    return const AuthState.initial();
  }'
          Node: { = '{'
          Node: return_statement = 'return const AuthState.initial();'
            Node: return = 'return'
            Node: const_object_expression = 'const AuthState.initial()'
              Node: const_builtin = 'const'
              Node: type_identifier = 'AuthState'
              Node: . = '.'
              Node: identifier = 'initial'
              Node: arguments = '()'
                Node: ( = '('
                Node: ) = ')'
            Node: ; = ';'
          Node: } = '}'
      Node: documentation_comment = '/// LINEログイン'
        Node: /// = '///'
      Node: method_signature = 'Future<void> signInWithLine()'
        Node: function_signature = 'Future<void> signInWithLine()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'signInWithLine'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: expression_statement = 'state = const AuthState.loading();'
            Node: assignment_expression = 'state = const AuthState.loading()'
              Node: assignable_expression = 'state'
                Node: identifier = 'state'
              Node: = = '='
              Node: const_object_expression = 'const AuthState.loading()'
                Node: const_builtin = 'const'
                Node: type_identifier = 'AuthState'
                Node: . = '.'
                Node: identifier = 'loading'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: ; = ';'
          Node: try_statement = 'try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    }'
              Node: { = '{'
              Node: local_variable_declaration = 'final result = await LineAuthService.login();'
                Node: initialized_variable_definition = 'final result = await LineAuthService.login()'
                  Node: final_builtin = 'final'
                    Node: final = 'final'
                  Node: identifier = 'result'
                  Node: = = '='
                  Node: unary_expression = 'await LineAuthService.login()'
                    Node: await_expression = 'await LineAuthService.login()'
                      Node: await = 'await'
                      Node: identifier = 'LineAuthService'
                      Node: selector = '.login'
                        Node: unconditional_assignable_selector = '.login'
                          Node: . = '.'
                          Node: identifier = 'login'
                      Node: selector = '()'
                        Node: argument_part = '()'
                          Node: arguments = '()'
                            Node: ( = '('
                            Node: ) = ')'
                Node: ; = ';'
              Node: if_statement = 'if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }'
                Node: if = 'if'
                Node: ( = '('
                Node: equality_expression = 'result != null'
                  Node: identifier = 'result'
                  Node: equality_operator = '!='
                  Node: null_literal = 'null'
                    Node: null = 'null'
                Node: ) = ')'
                Node: block = '{
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      }'
                  Node: { = '{'
                  Node: comment = '// Firebaseカスタムトークンでサインイン'
                    Node: // = '//'
                  Node: local_variable_declaration = 'final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );'
                    Node: initialized_variable_definition = 'final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                      Node: final_builtin = 'final'
                        Node: final = 'final'
                      Node: identifier = 'userCredential'
                      Node: = = '='
                      Node: unary_expression = 'await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                        Node: await_expression = 'await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                          Node: await = 'await'
                          Node: identifier = 'firebase_auth'
                          Node: selector = '.FirebaseAuth'
                            Node: unconditional_assignable_selector = '.FirebaseAuth'
                              Node: . = '.'
                              Node: identifier = 'FirebaseAuth'
                          Node: selector = '.instance'
                            Node: unconditional_assignable_selector = '.instance'
                              Node: . = '.'
                              Node: identifier = 'instance'
                          Node: selector = '.signInWithCustomToken'
                            Node: unconditional_assignable_selector = '.signInWithCustomToken'
                              Node: . = '.'
                              Node: identifier = 'signInWithCustomToken'
                          Node: selector = '(
          result.accessToken,
        )'
                            Node: argument_part = '(
          result.accessToken,
        )'
                              Node: arguments = '(
          result.accessToken,
        )'
                                Node: ( = '('
                                Node: argument = 'result.accessToken'
                                  Node: identifier = 'result'
                                  Node: selector = '.accessToken'
                                    Node: unconditional_assignable_selector = '.accessToken'
                                      Node: . = '.'
                                      Node: identifier = 'accessToken'
                                Node: , = ','
                                Node: ) = ')'
                    Node: ; = ';'
                  Node: if_statement = 'if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }'
                    Node: if = 'if'
                    Node: ( = '('
                    Node: equality_expression = 'userCredential.user != null'
                      Node: identifier = 'userCredential'
                      Node: selector = '.user'
                        Node: unconditional_assignable_selector = '.user'
                          Node: . = '.'
                          Node: identifier = 'user'
                      Node: equality_operator = '!='
                      Node: null_literal = 'null'
                        Node: null = 'null'
                    Node: ) = ')'
                    Node: block = '{
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        }'
                      Node: { = '{'
                      Node: local_variable_declaration = 'final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );'
                        Node: initialized_variable_definition = 'final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                          Node: final_builtin = 'final'
                            Node: final = 'final'
                          Node: identifier = 'user'
                          Node: = = '='
                          Node: identifier = 'AppUser'
                          Node: selector = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                            Node: argument_part = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                              Node: arguments = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                                Node: ( = '('
                                Node: named_argument = 'id: userCredential.user!.uid'
                                  Node: label = 'id:'
                                    Node: identifier = 'id'
                                    Node: : = ':'
                                  Node: identifier = 'userCredential'
                                  Node: selector = '.user'
                                    Node: unconditional_assignable_selector = '.user'
                                      Node: . = '.'
                                      Node: identifier = 'user'
                                  Node: selector = '!'
                                    Node: ! = '!'
                                  Node: selector = '.uid'
                                    Node: unconditional_assignable_selector = '.uid'
                                      Node: . = '.'
                                      Node: identifier = 'uid'
                                Node: , = ','
                                Node: named_argument = 'displayName: result.profile.displayName'
                                  Node: label = 'displayName:'
                                    Node: identifier = 'displayName'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.displayName'
                                    Node: unconditional_assignable_selector = '.displayName'
                                      Node: . = '.'
                                      Node: identifier = 'displayName'
                                Node: , = ','
                                Node: named_argument = 'photoURL: result.profile.pictureUrl'
                                  Node: label = 'photoURL:'
                                    Node: identifier = 'photoURL'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.pictureUrl'
                                    Node: unconditional_assignable_selector = '.pictureUrl'
                                      Node: . = '.'
                                      Node: identifier = 'pictureUrl'
                                Node: , = ','
                                Node: named_argument = 'statusMessage: result.profile.statusMessage'
                                  Node: label = 'statusMessage:'
                                    Node: identifier = 'statusMessage'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.statusMessage'
                                    Node: unconditional_assignable_selector = '.statusMessage'
                                      Node: . = '.'
                                      Node: identifier = 'statusMessage'
                                Node: , = ','
                                Node: named_argument = 'provider: 'line''
                                  Node: label = 'provider:'
                                    Node: identifier = 'provider'
                                    Node: : = ':'
                                  Node: string_literal = ''line''
                                    Node: ' = '''
                                    Node: ' = '''
                                Node: , = ','
                                Node: named_argument = 'createdAt: DateTime.now()'
                                  Node: label = 'createdAt:'
                                    Node: identifier = 'createdAt'
                                    Node: : = ':'
                                  Node: identifier = 'DateTime'
                                  Node: selector = '.now'
                                    Node: unconditional_assignable_selector = '.now'
                                      Node: . = '.'
                                      Node: identifier = 'now'
                                  Node: selector = '()'
                                    Node: argument_part = '()'
                                      Node: arguments = '()'
                                        Node: ( = '('
                                        Node: ) = ')'
                                Node: , = ','
                                Node: ) = ')'
                        Node: ; = ';'
                      Node: expression_statement = 'state = AuthState.authenticated(user);'
                        Node: assignment_expression = 'state = AuthState.authenticated(user)'
                          Node: assignable_expression = 'state'
                            Node: identifier = 'state'
                          Node: = = '='
                          Node: identifier = 'AuthState'
                          Node: selector = '.authenticated'
                            Node: unconditional_assignable_selector = '.authenticated'
                              Node: . = '.'
                              Node: identifier = 'authenticated'
                          Node: selector = '(user)'
                            Node: argument_part = '(user)'
                              Node: arguments = '(user)'
                                Node: ( = '('
                                Node: argument = 'user'
                                  Node: identifier = 'user'
                                Node: ) = ')'
                        Node: ; = ';'
                      Node: } = '}'
                    Node: else = 'else'
                    Node: block = '{
          state = const AuthState.error('Failed to sign in with custom token');
        }'
                      Node: { = '{'
                      Node: expression_statement = 'state = const AuthState.error('Failed to sign in with custom token');'
                        Node: assignment_expression = 'state = const AuthState.error('Failed to sign in with custom token')'
                          Node: assignable_expression = 'state'
                            Node: identifier = 'state'
                          Node: = = '='
                          Node: const_object_expression = 'const AuthState.error('Failed to sign in with custom token')'
                            Node: const_builtin = 'const'
                            Node: type_identifier = 'AuthState'
                            Node: . = '.'
                            Node: identifier = 'error'
                            Node: arguments = '('Failed to sign in with custom token')'
                              Node: ( = '('
                              Node: argument = ''Failed to sign in with custom token''
                                Node: string_literal = ''Failed to sign in with custom token''
                                  Node: ' = '''
                                  Node: ' = '''
                              Node: ) = ')'
                        Node: ; = ';'
                      Node: } = '}'
                  Node: } = '}'
                Node: else = 'else'
                Node: block = '{
        state = const AuthState.error('LINE login failed');
      }'
                  Node: { = '{'
                  Node: expression_statement = 'state = const AuthState.error('LINE login failed');'
                    Node: assignment_expression = 'state = const AuthState.error('LINE login failed')'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: const_object_expression = 'const AuthState.error('LINE login failed')'
                        Node: const_builtin = 'const'
                        Node: type_identifier = 'AuthState'
                        Node: . = '.'
                        Node: identifier = 'error'
                        Node: arguments = '('LINE login failed')'
                          Node: ( = '('
                          Node: argument = ''LINE login failed''
                            Node: string_literal = ''LINE login failed''
                              Node: ' = '''
                              Node: ' = '''
                          Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// ログアウト'
        Node: /// = '///'
      Node: method_signature = 'Future<void> signOut()'
        Node: function_signature = 'Future<void> signOut()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'signOut'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: try_statement = 'try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    }'
              Node: { = '{'
              Node: expression_statement = 'await firebase_auth.FirebaseAuth.instance.signOut();'
                Node: unary_expression = 'await firebase_auth.FirebaseAuth.instance.signOut()'
                  Node: await_expression = 'await firebase_auth.FirebaseAuth.instance.signOut()'
                    Node: await = 'await'
                    Node: identifier = 'firebase_auth'
                    Node: selector = '.FirebaseAuth'
                      Node: unconditional_assignable_selector = '.FirebaseAuth'
                        Node: . = '.'
                        Node: identifier = 'FirebaseAuth'
                    Node: selector = '.instance'
                      Node: unconditional_assignable_selector = '.instance'
                        Node: . = '.'
                        Node: identifier = 'instance'
                    Node: selector = '.signOut'
                      Node: unconditional_assignable_selector = '.signOut'
                        Node: . = '.'
                        Node: identifier = 'signOut'
                    Node: selector = '()'
                      Node: argument_part = '()'
                        Node: arguments = '()'
                          Node: ( = '('
                          Node: ) = ')'
                Node: ; = ';'
              Node: expression_statement = 'state = const AuthState.unauthenticated();'
                Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: const_object_expression = 'const AuthState.unauthenticated()'
                    Node: const_builtin = 'const'
                    Node: type_identifier = 'AuthState'
                    Node: . = '.'
                    Node: identifier = 'unauthenticated'
                    Node: arguments = '()'
                      Node: ( = '('
                      Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// 現在のユーザーを取得'
        Node: /// = '///'
      Node: method_signature = 'Future<void> getCurrentUser()'
        Node: function_signature = 'Future<void> getCurrentUser()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'getCurrentUser'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: expression_statement = 'state = const AuthState.loading();'
            Node: assignment_expression = 'state = const AuthState.loading()'
              Node: assignable_expression = 'state'
                Node: identifier = 'state'
              Node: = = '='
              Node: const_object_expression = 'const AuthState.loading()'
                Node: const_builtin = 'const'
                Node: type_identifier = 'AuthState'
                Node: . = '.'
                Node: identifier = 'loading'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: ; = ';'
          Node: try_statement = 'try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    }'
              Node: { = '{'
              Node: local_variable_declaration = 'final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;'
                Node: initialized_variable_definition = 'final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser'
                  Node: final_builtin = 'final'
                    Node: final = 'final'
                  Node: identifier = 'firebaseUser'
                  Node: = = '='
                  Node: identifier = 'firebase_auth'
                  Node: selector = '.FirebaseAuth'
                    Node: unconditional_assignable_selector = '.FirebaseAuth'
                      Node: . = '.'
                      Node: identifier = 'FirebaseAuth'
                  Node: selector = '.instance'
                    Node: unconditional_assignable_selector = '.instance'
                      Node: . = '.'
                      Node: identifier = 'instance'
                  Node: selector = '.currentUser'
                    Node: unconditional_assignable_selector = '.currentUser'
                      Node: . = '.'
                      Node: identifier = 'currentUser'
                Node: ; = ';'
              Node: if_statement = 'if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }'
                Node: if = 'if'
                Node: ( = '('
                Node: equality_expression = 'firebaseUser != null'
                  Node: identifier = 'firebaseUser'
                  Node: equality_operator = '!='
                  Node: null_literal = 'null'
                    Node: null = 'null'
                Node: ) = ')'
                Node: block = '{
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      }'
                  Node: { = '{'
                  Node: comment = '// Firestoreからユーザー情報を取得'
                    Node: // = '//'
                  Node: comment = '// TODO: FirestoreServiceを使用してユーザー情報を取得'
                    Node: // = '//'
                  Node: local_variable_declaration = 'final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );'
                    Node: initialized_variable_definition = 'final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                      Node: final_builtin = 'final'
                        Node: final = 'final'
                      Node: identifier = 'user'
                      Node: = = '='
                      Node: identifier = 'AppUser'
                      Node: selector = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                        Node: argument_part = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                          Node: arguments = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                            Node: ( = '('
                            Node: named_argument = 'id: firebaseUser.uid'
                              Node: label = 'id:'
                                Node: identifier = 'id'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.uid'
                                Node: unconditional_assignable_selector = '.uid'
                                  Node: . = '.'
                                  Node: identifier = 'uid'
                            Node: , = ','
                            Node: named_argument = 'displayName: firebaseUser.displayName ?? 'Unknown User''
                              Node: label = 'displayName:'
                                Node: identifier = 'displayName'
                                Node: : = ':'
                              Node: if_null_expression = 'firebaseUser.displayName ?? 'Unknown User''
                                Node: identifier = 'firebaseUser'
                                Node: selector = '.displayName'
                                  Node: unconditional_assignable_selector = '.displayName'
                                    Node: . = '.'
                                    Node: identifier = 'displayName'
                                Node: ?? = '??'
                                Node: string_literal = ''Unknown User''
                                  Node: ' = '''
                                  Node: ' = '''
                            Node: , = ','
                            Node: named_argument = 'email: firebaseUser.email'
                              Node: label = 'email:'
                                Node: identifier = 'email'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.email'
                                Node: unconditional_assignable_selector = '.email'
                                  Node: . = '.'
                                  Node: identifier = 'email'
                            Node: , = ','
                            Node: named_argument = 'photoURL: firebaseUser.photoURL'
                              Node: label = 'photoURL:'
                                Node: identifier = 'photoURL'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.photoURL'
                                Node: unconditional_assignable_selector = '.photoURL'
                                  Node: . = '.'
                                  Node: identifier = 'photoURL'
                            Node: , = ','
                            Node: named_argument = 'provider: 'line''
                              Node: label = 'provider:'
                                Node: identifier = 'provider'
                                Node: : = ':'
                              Node: string_literal = ''line''
                                Node: ' = '''
                                Node: ' = '''
                            Node: , = ','
                            Node: ) = ')'
                    Node: ; = ';'
                  Node: expression_statement = 'state = AuthState.authenticated(user);'
                    Node: assignment_expression = 'state = AuthState.authenticated(user)'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: identifier = 'AuthState'
                      Node: selector = '.authenticated'
                        Node: unconditional_assignable_selector = '.authenticated'
                          Node: . = '.'
                          Node: identifier = 'authenticated'
                      Node: selector = '(user)'
                        Node: argument_part = '(user)'
                          Node: arguments = '(user)'
                            Node: ( = '('
                            Node: argument = 'user'
                              Node: identifier = 'user'
                            Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
                Node: else = 'else'
                Node: block = '{
        state = const AuthState.unauthenticated();
      }'
                  Node: { = '{'
                  Node: expression_statement = 'state = const AuthState.unauthenticated();'
                    Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: const_object_expression = 'const AuthState.unauthenticated()'
                        Node: const_builtin = 'const'
                        Node: type_identifier = 'AuthState'
                        Node: . = '.'
                        Node: identifier = 'unauthenticated'
                        Node: arguments = '()'
                          Node: ( = '('
                          Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// 認証状態の監視'
        Node: /// = '///'
      Node: method_signature = 'void listenToAuthChanges()'
        Node: function_signature = 'void listenToAuthChanges()'
          Node: void_type = 'void'
          Node: identifier = 'listenToAuthChanges'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = '{
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }'
        Node: block = '{
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }'
          Node: { = '{'
          Node: expression_statement = 'firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });'
            Node: identifier = 'firebase_auth'
            Node: selector = '.FirebaseAuth'
              Node: unconditional_assignable_selector = '.FirebaseAuth'
                Node: . = '.'
                Node: identifier = 'FirebaseAuth'
            Node: selector = '.instance'
              Node: unconditional_assignable_selector = '.instance'
                Node: . = '.'
                Node: identifier = 'instance'
            Node: selector = '.authStateChanges'
              Node: unconditional_assignable_selector = '.authStateChanges'
                Node: . = '.'
                Node: identifier = 'authStateChanges'
            Node: selector = '()'
              Node: argument_part = '()'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: selector = '.listen'
              Node: unconditional_assignable_selector = '.listen'
                Node: . = '.'
                Node: identifier = 'listen'
            Node: selector = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
              Node: argument_part = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
                Node: arguments = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
                  Node: ( = '('
                  Node: argument = '(firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                    Node: function_expression = '(firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                      Node: formal_parameter_list = '(firebaseUser)'
                        Node: ( = '('
                        Node: formal_parameter = 'firebaseUser'
                          Node: identifier = 'firebaseUser'
                        Node: ) = ')'
                      Node: function_expression_body = '{
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                        Node: block = '{
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                          Node: { = '{'
                          Node: if_statement = 'if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }'
                            Node: if = 'if'
                            Node: ( = '('
                            Node: equality_expression = 'firebaseUser != null'
                              Node: identifier = 'firebaseUser'
                              Node: equality_operator = '!='
                              Node: null_literal = 'null'
                                Node: null = 'null'
                            Node: ) = ')'
                            Node: block = '{
        // ユーザーがログインしている場合
        getCurrentUser();
      }'
                              Node: { = '{'
                              Node: comment = '// ユーザーがログインしている場合'
                                Node: // = '//'
                              Node: expression_statement = 'getCurrentUser();'
                                Node: identifier = 'getCurrentUser'
                                Node: selector = '()'
                                  Node: argument_part = '()'
                                    Node: arguments = '()'
                                      Node: ( = '('
                                      Node: ) = ')'
                                Node: ; = ';'
                              Node: } = '}'
                            Node: else = 'else'
                            Node: block = '{
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }'
                              Node: { = '{'
                              Node: comment = '// ユーザーがログアウトしている場合'
                                Node: // = '//'
                              Node: expression_statement = 'state = const AuthState.unauthenticated();'
                                Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                                  Node: assignable_expression = 'state'
                                    Node: identifier = 'state'
                                  Node: = = '='
                                  Node: const_object_expression = 'const AuthState.unauthenticated()'
                                    Node: const_builtin = 'const'
                                    Node: type_identifier = 'AuthState'
                                    Node: . = '.'
                                    Node: identifier = 'unauthenticated'
                                    Node: arguments = '()'
                                      Node: ( = '('
                                      Node: ) = ')'
                                Node: ; = ';'
                              Node: } = '}'
                          Node: } = '}'
                  Node: ) = ')'
            Node: ; = ';'
          Node: } = '}'
      Node: } = '}'
  Node: documentation_comment = '/// 認証状態プロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'AuthState authState(Ref ref)'
    Node: type_identifier = 'AuthState'
    Node: identifier = 'authState'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}'
    Node: block = '{
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}'
      Node: { = '{'
      Node: comment = '// 初回起動時に認証状態を監視開始'
        Node: // = '//'
      Node: expression_statement = 'ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });'
        Node: identifier = 'ref'
        Node: selector = '.listen'
          Node: unconditional_assignable_selector = '.listen'
            Node: . = '.'
            Node: identifier = 'listen'
        Node: selector = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
          Node: argument_part = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
            Node: arguments = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
              Node: ( = '('
              Node: argument = 'authNotifierProvider'
                Node: identifier = 'authNotifierProvider'
              Node: , = ','
              Node: argument = '(previous, next) {
    // 認証状態が変更された時の処理
  }'
                Node: function_expression = '(previous, next) {
    // 認証状態が変更された時の処理
  }'
                  Node: formal_parameter_list = '(previous, next)'
                    Node: ( = '('
                    Node: formal_parameter = 'previous'
                      Node: identifier = 'previous'
                    Node: , = ','
                    Node: formal_parameter = 'next'
                      Node: identifier = 'next'
                    Node: ) = ')'
                  Node: function_expression_body = '{
    // 認証状態が変更された時の処理
  }'
                    Node: block = '{
    // 認証状態が変更された時の処理
  }'
                      Node: { = '{'
                      Node: comment = '// 認証状態が変更された時の処理'
                        Node: // = '//'
                      Node: } = '}'
              Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return ref.watch(authNotifierProvider);'
        Node: return = 'return'
        Node: identifier = 'ref'
        Node: selector = '.watch'
          Node: unconditional_assignable_selector = '.watch'
            Node: . = '.'
            Node: identifier = 'watch'
        Node: selector = '(authNotifierProvider)'
          Node: argument_part = '(authNotifierProvider)'
            Node: arguments = '(authNotifierProvider)'
              Node: ( = '('
              Node: argument = 'authNotifierProvider'
                Node: identifier = 'authNotifierProvider'
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
  Node: documentation_comment = '/// 現在のユーザープロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'AppUser? currentUser(Ref ref)'
    Node: type_identifier = 'AppUser'
    Node: nullable_type = '?'
      Node: ? = '?'
    Node: identifier = 'currentUser'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}'
    Node: block = '{
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}'
      Node: { = '{'
      Node: local_variable_declaration = 'final authState = ref.watch(authStateProvider);'
        Node: initialized_variable_definition = 'final authState = ref.watch(authStateProvider)'
          Node: final_builtin = 'final'
            Node: final = 'final'
          Node: identifier = 'authState'
          Node: = = '='
          Node: identifier = 'ref'
          Node: selector = '.watch'
            Node: unconditional_assignable_selector = '.watch'
              Node: . = '.'
              Node: identifier = 'watch'
          Node: selector = '(authStateProvider)'
            Node: argument_part = '(authStateProvider)'
              Node: arguments = '(authStateProvider)'
                Node: ( = '('
                Node: argument = 'authStateProvider'
                  Node: identifier = 'authStateProvider'
                Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );'
        Node: return = 'return'
        Node: identifier = 'authState'
        Node: selector = '.when'
          Node: unconditional_assignable_selector = '.when'
            Node: . = '.'
            Node: identifier = 'when'
        Node: selector = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
          Node: argument_part = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
            Node: arguments = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
              Node: ( = '('
              Node: named_argument = 'authenticated: (user) => user'
                Node: label = 'authenticated:'
                  Node: identifier = 'authenticated'
                  Node: : = ':'
                Node: function_expression = '(user) => user'
                  Node: formal_parameter_list = '(user)'
                    Node: ( = '('
                    Node: formal_parameter = 'user'
                      Node: identifier = 'user'
                    Node: ) = ')'
                  Node: function_expression_body = '=> user'
                    Node: => = '=>'
                    Node: identifier = 'user'
              Node: , = ','
              Node: named_argument = 'initial: () => null'
                Node: label = 'initial:'
                  Node: identifier = 'initial'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'loading: () => null'
                Node: label = 'loading:'
                  Node: identifier = 'loading'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'unauthenticated: () => null'
                Node: label = 'unauthenticated:'
                  Node: identifier = 'unauthenticated'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'error: (_) => null'
                Node: label = 'error:'
                  Node: identifier = 'error'
                  Node: : = ':'
                Node: function_expression = '(_) => null'
                  Node: formal_parameter_list = '(_)'
                    Node: ( = '('
                    Node: formal_parameter = '_'
                      Node: identifier = '_'
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
  Node: documentation_comment = '/// 認証済みかどうかのプロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'bool isAuthenticated(Ref ref)'
    Node: type_identifier = 'bool'
    Node: identifier = 'isAuthenticated'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}'
    Node: block = '{
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}'
      Node: { = '{'
      Node: local_variable_declaration = 'final authState = ref.watch(authStateProvider);'
        Node: initialized_variable_definition = 'final authState = ref.watch(authStateProvider)'
          Node: final_builtin = 'final'
            Node: final = 'final'
          Node: identifier = 'authState'
          Node: = = '='
          Node: identifier = 'ref'
          Node: selector = '.watch'
            Node: unconditional_assignable_selector = '.watch'
              Node: . = '.'
              Node: identifier = 'watch'
          Node: selector = '(authStateProvider)'
            Node: argument_part = '(authStateProvider)'
              Node: arguments = '(authStateProvider)'
                Node: ( = '('
                Node: argument = 'authStateProvider'
                  Node: identifier = 'authStateProvider'
                Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );'
        Node: return = 'return'
        Node: identifier = 'authState'
        Node: selector = '.maybeWhen'
          Node: unconditional_assignable_selector = '.maybeWhen'
            Node: . = '.'
            Node: identifier = 'maybeWhen'
        Node: selector = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
          Node: argument_part = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
            Node: arguments = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
              Node: ( = '('
              Node: named_argument = 'authenticated: (_) => true'
                Node: label = 'authenticated:'
                  Node: identifier = 'authenticated'
                  Node: : = ':'
                Node: function_expression = '(_) => true'
                  Node: formal_parameter_list = '(_)'
                    Node: ( = '('
                    Node: formal_parameter = '_'
                      Node: identifier = '_'
                    Node: ) = ')'
                  Node: function_expression_body = '=> true'
                    Node: => = '=>'
                    Node: true = 'true'
                      Node: true = 'true'
              Node: , = ','
              Node: named_argument = 'orElse: () => false'
                Node: label = 'orElse:'
                  Node: identifier = 'orElse'
                  Node: : = ':'
                Node: function_expression = '() => false'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> false'
                    Node: => = '=>'
                    Node: false = 'false'
                      Node: false = 'false'
              Node: , = ','
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
=== End AST ===

=== Complete AST for source ===
Node: program = 'import 'package:freezed_annotation/freezed_annotation.dart';

part 'user.freezed.dart';
part 'user.g.dart';

@freezed
class User with _$User {
  const factory User({
    required String name,
    required String email,
    int? age,
  }) = _User;

  factory User.fromJson(Map<String, dynamic> json) => _$UserFromJson(json);
}
'
  Node: import_or_export = 'import 'package:freezed_annotation/freezed_annotation.dart';'
    Node: library_import = 'import 'package:freezed_annotation/freezed_annotation.dart';'
      Node: import_specification = 'import 'package:freezed_annotation/freezed_annotation.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:freezed_annotation/freezed_annotation.dart''
          Node: uri = ''package:freezed_annotation/freezed_annotation.dart''
            Node: string_literal = ''package:freezed_annotation/freezed_annotation.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: part_directive = 'part 'user.freezed.dart';'
    Node: part = 'part'
    Node: uri = ''user.freezed.dart''
      Node: string_literal = ''user.freezed.dart''
        Node: ' = '''
        Node: ' = '''
    Node: ; = ';'
  Node: part_directive = 'part 'user.g.dart';'
    Node: part = 'part'
    Node: uri = ''user.g.dart''
      Node: string_literal = ''user.g.dart''
        Node: ' = '''
        Node: ' = '''
    Node: ; = ';'
  Node: class_definition = '@freezed
class User with _$User {
  const factory User({
    required String name,
    required String email,
    int? age,
  }) = _User;

  factory User.fromJson(Map<String, dynamic> json) => _$UserFromJson(json);
}'
    Node: annotation = '@freezed'
      Node: @ = '@'
      Node: identifier = 'freezed'
    Node: class = 'class'
    Node: identifier = 'User'
    Node: superclass = 'with _$User'
      Node: mixins = 'with _$User'
        Node: with = 'with'
        Node: type_identifier = '_$User'
    Node: class_body = '{
  const factory User({
    required String name,
    required String email,
    int? age,
  }) = _User;

  factory User.fromJson(Map<String, dynamic> json) => _$UserFromJson(json);
}'
      Node: { = '{'
      Node: declaration = 'const factory User({
    required String name,
    required String email,
    int? age,
  }) = _User'
        Node: redirecting_factory_constructor_signature = 'const factory User({
    required String name,
    required String email,
    int? age,
  }) = _User'
          Node: const_builtin = 'const'
          Node: factory = 'factory'
          Node: identifier = 'User'
          Node: formal_parameter_list = '({
    required String name,
    required String email,
    int? age,
  })'
            Node: ( = '('
            Node: optional_formal_parameters = '{
    required String name,
    required String email,
    int? age,
  }'
              Node: { = '{'
              Node: required = 'required'
              Node: formal_parameter = 'String name'
                Node: type_identifier = 'String'
                Node: identifier = 'name'
              Node: , = ','
              Node: required = 'required'
              Node: formal_parameter = 'String email'
                Node: type_identifier = 'String'
                Node: identifier = 'email'
              Node: , = ','
              Node: formal_parameter = 'int? age'
                Node: type_identifier = 'int'
                Node: nullable_type = '?'
                  Node: ? = '?'
                Node: identifier = 'age'
              Node: , = ','
              Node: } = '}'
            Node: ) = ')'
          Node: = = '='
          Node: type_identifier = '_User'
      Node: ; = ';'
      Node: method_signature = 'factory User.fromJson(Map<String, dynamic> json)'
        Node: factory_constructor_signature = 'factory User.fromJson(Map<String, dynamic> json)'
          Node: factory = 'factory'
          Node: identifier = 'User'
          Node: . = '.'
          Node: identifier = 'fromJson'
          Node: formal_parameter_list = '(Map<String, dynamic> json)'
            Node: ( = '('
            Node: formal_parameter = 'Map<String, dynamic> json'
              Node: type_identifier = 'Map'
              Node: type_arguments = '<String, dynamic>'
                Node: < = '<'
                Node: type_identifier = 'String'
                Node: , = ','
                Node: type_identifier = 'dynamic'
                Node: > = '>'
              Node: identifier = 'json'
            Node: ) = ')'
      Node: function_body = '=> _$UserFromJson(json);'
        Node: => = '=>'
        Node: identifier = '_$UserFromJson'
        Node: selector = '(json)'
          Node: argument_part = '(json)'
            Node: arguments = '(json)'
              Node: ( = '('
              Node: argument = 'json'
                Node: identifier = 'json'
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
=== End AST ===

=== Processing class: User ===

=== Complete AST for source ===
Node: program = 'import 'package:freezed_annotation/freezed_annotation.dart';

part 'user.freezed.dart';
part 'user.g.dart';

@freezed
class User with _$User {
  const factory User({
    required String name,
    required String email,
    int? age,
  }) = _User;

  factory User.fromJson(Map<String, dynamic> json) => _$UserFromJson(json);
}
'
  Node: import_or_export = 'import 'package:freezed_annotation/freezed_annotation.dart';'
    Node: library_import = 'import 'package:freezed_annotation/freezed_annotation.dart';'
      Node: import_specification = 'import 'package:freezed_annotation/freezed_annotation.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:freezed_annotation/freezed_annotation.dart''
          Node: uri = ''package:freezed_annotation/freezed_annotation.dart''
            Node: string_literal = ''package:freezed_annotation/freezed_annotation.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: part_directive = 'part 'user.freezed.dart';'
    Node: part = 'part'
    Node: uri = ''user.freezed.dart''
      Node: string_literal = ''user.freezed.dart''
        Node: ' = '''
        Node: ' = '''
    Node: ; = ';'
  Node: part_directive = 'part 'user.g.dart';'
    Node: part = 'part'
    Node: uri = ''user.g.dart''
      Node: string_literal = ''user.g.dart''
        Node: ' = '''
        Node: ' = '''
    Node: ; = ';'
  Node: class_definition = '@freezed
class User with _$User {
  const factory User({
    required String name,
    required String email,
    int? age,
  }) = _User;

  factory User.fromJson(Map<String, dynamic> json) => _$UserFromJson(json);
}'
    Node: annotation = '@freezed'
      Node: @ = '@'
      Node: identifier = 'freezed'
    Node: class = 'class'
    Node: identifier = 'User'
    Node: superclass = 'with _$User'
      Node: mixins = 'with _$User'
        Node: with = 'with'
        Node: type_identifier = '_$User'
    Node: class_body = '{
  const factory User({
    required String name,
    required String email,
    int? age,
  }) = _User;

  factory User.fromJson(Map<String, dynamic> json) => _$UserFromJson(json);
}'
      Node: { = '{'
      Node: declaration = 'const factory User({
    required String name,
    required String email,
    int? age,
  }) = _User'
        Node: redirecting_factory_constructor_signature = 'const factory User({
    required String name,
    required String email,
    int? age,
  }) = _User'
          Node: const_builtin = 'const'
          Node: factory = 'factory'
          Node: identifier = 'User'
          Node: formal_parameter_list = '({
    required String name,
    required String email,
    int? age,
  })'
            Node: ( = '('
            Node: optional_formal_parameters = '{
    required String name,
    required String email,
    int? age,
  }'
              Node: { = '{'
              Node: required = 'required'
              Node: formal_parameter = 'String name'
                Node: type_identifier = 'String'
                Node: identifier = 'name'
              Node: , = ','
              Node: required = 'required'
              Node: formal_parameter = 'String email'
                Node: type_identifier = 'String'
                Node: identifier = 'email'
              Node: , = ','
              Node: formal_parameter = 'int? age'
                Node: type_identifier = 'int'
                Node: nullable_type = '?'
                  Node: ? = '?'
                Node: identifier = 'age'
              Node: , = ','
              Node: } = '}'
            Node: ) = ')'
          Node: = = '='
          Node: type_identifier = '_User'
      Node: ; = ';'
      Node: method_signature = 'factory User.fromJson(Map<String, dynamic> json)'
        Node: factory_constructor_signature = 'factory User.fromJson(Map<String, dynamic> json)'
          Node: factory = 'factory'
          Node: identifier = 'User'
          Node: . = '.'
          Node: identifier = 'fromJson'
          Node: formal_parameter_list = '(Map<String, dynamic> json)'
            Node: ( = '('
            Node: formal_parameter = 'Map<String, dynamic> json'
              Node: type_identifier = 'Map'
              Node: type_arguments = '<String, dynamic>'
                Node: < = '<'
                Node: type_identifier = 'String'
                Node: , = ','
                Node: type_identifier = 'dynamic'
                Node: > = '>'
              Node: identifier = 'json'
            Node: ) = ')'
      Node: function_body = '=> _$UserFromJson(json);'
        Node: => = '=>'
        Node: identifier = '_$UserFromJson'
        Node: selector = '(json)'
          Node: argument_part = '(json)'
            Node: arguments = '(json)'
              Node: ( = '('
              Node: argument = 'json'
                Node: identifier = 'json'
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
=== End AST ===

=== Processing class: User ===

=== Complete AST for test_flutter_app/aminomi/lib/providers/auth_provider.dart ===
Node: program = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;
import 'package:riverpod/riverpod.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import '../models/user.dart';
import '../services/line_auth_service.dart';

part 'auth_provider.g.dart';

@riverpod
class AuthNotifier extends _$AuthNotifier {
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}

/// 認証状態プロバイダー
@riverpod
AuthState authState(Ref ref) {
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}

/// 現在のユーザープロバイダー
@riverpod
AppUser? currentUser(Ref ref) {
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}

/// 認証済みかどうかのプロバイダー
@riverpod
bool isAuthenticated(Ref ref) {
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}
'
  Node: import_or_export = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
    Node: library_import = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
      Node: import_specification = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
        Node: import = 'import'
        Node: configurable_uri = ''package:firebase_auth/firebase_auth.dart''
          Node: uri = ''package:firebase_auth/firebase_auth.dart''
            Node: string_literal = ''package:firebase_auth/firebase_auth.dart''
              Node: ' = '''
              Node: ' = '''
        Node: as = 'as'
        Node: identifier = 'firebase_auth'
        Node: ; = ';'
  Node: import_or_export = 'import 'package:riverpod/riverpod.dart';'
    Node: library_import = 'import 'package:riverpod/riverpod.dart';'
      Node: import_specification = 'import 'package:riverpod/riverpod.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:riverpod/riverpod.dart''
          Node: uri = ''package:riverpod/riverpod.dart''
            Node: string_literal = ''package:riverpod/riverpod.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
    Node: library_import = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
      Node: import_specification = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:riverpod_annotation/riverpod_annotation.dart''
          Node: uri = ''package:riverpod_annotation/riverpod_annotation.dart''
            Node: string_literal = ''package:riverpod_annotation/riverpod_annotation.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import '../models/user.dart';'
    Node: library_import = 'import '../models/user.dart';'
      Node: import_specification = 'import '../models/user.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''../models/user.dart''
          Node: uri = ''../models/user.dart''
            Node: string_literal = ''../models/user.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import '../services/line_auth_service.dart';'
    Node: library_import = 'import '../services/line_auth_service.dart';'
      Node: import_specification = 'import '../services/line_auth_service.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''../services/line_auth_service.dart''
          Node: uri = ''../services/line_auth_service.dart''
            Node: string_literal = ''../services/line_auth_service.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: part_directive = 'part 'auth_provider.g.dart';'
    Node: part = 'part'
    Node: uri = ''auth_provider.g.dart''
      Node: string_literal = ''auth_provider.g.dart''
        Node: ' = '''
        Node: ' = '''
    Node: ; = ';'
  Node: class_definition = '@riverpod
class AuthNotifier extends _$AuthNotifier {
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}'
    Node: annotation = '@riverpod'
      Node: @ = '@'
      Node: identifier = 'riverpod'
    Node: class = 'class'
    Node: identifier = 'AuthNotifier'
    Node: superclass = 'extends _$AuthNotifier'
      Node: extends = 'extends'
      Node: type_identifier = '_$AuthNotifier'
    Node: class_body = '{
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}'
      Node: { = '{'
      Node: annotation = '@override'
        Node: @ = '@'
        Node: identifier = 'override'
      Node: method_signature = 'AuthState build()'
        Node: function_signature = 'AuthState build()'
          Node: type_identifier = 'AuthState'
          Node: identifier = 'build'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = '{
    return const AuthState.initial();
  }'
        Node: block = '{
    return const AuthState.initial();
  }'
          Node: { = '{'
          Node: return_statement = 'return const AuthState.initial();'
            Node: return = 'return'
            Node: const_object_expression = 'const AuthState.initial()'
              Node: const_builtin = 'const'
              Node: type_identifier = 'AuthState'
              Node: . = '.'
              Node: identifier = 'initial'
              Node: arguments = '()'
                Node: ( = '('
                Node: ) = ')'
            Node: ; = ';'
          Node: } = '}'
      Node: documentation_comment = '/// LINEログイン'
        Node: /// = '///'
      Node: method_signature = 'Future<void> signInWithLine()'
        Node: function_signature = 'Future<void> signInWithLine()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'signInWithLine'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: expression_statement = 'state = const AuthState.loading();'
            Node: assignment_expression = 'state = const AuthState.loading()'
              Node: assignable_expression = 'state'
                Node: identifier = 'state'
              Node: = = '='
              Node: const_object_expression = 'const AuthState.loading()'
                Node: const_builtin = 'const'
                Node: type_identifier = 'AuthState'
                Node: . = '.'
                Node: identifier = 'loading'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: ; = ';'
          Node: try_statement = 'try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    }'
              Node: { = '{'
              Node: local_variable_declaration = 'final result = await LineAuthService.login();'
                Node: initialized_variable_definition = 'final result = await LineAuthService.login()'
                  Node: final_builtin = 'final'
                    Node: final = 'final'
                  Node: identifier = 'result'
                  Node: = = '='
                  Node: unary_expression = 'await LineAuthService.login()'
                    Node: await_expression = 'await LineAuthService.login()'
                      Node: await = 'await'
                      Node: identifier = 'LineAuthService'
                      Node: selector = '.login'
                        Node: unconditional_assignable_selector = '.login'
                          Node: . = '.'
                          Node: identifier = 'login'
                      Node: selector = '()'
                        Node: argument_part = '()'
                          Node: arguments = '()'
                            Node: ( = '('
                            Node: ) = ')'
                Node: ; = ';'
              Node: if_statement = 'if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }'
                Node: if = 'if'
                Node: ( = '('
                Node: equality_expression = 'result != null'
                  Node: identifier = 'result'
                  Node: equality_operator = '!='
                  Node: null_literal = 'null'
                    Node: null = 'null'
                Node: ) = ')'
                Node: block = '{
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      }'
                  Node: { = '{'
                  Node: comment = '// Firebaseカスタムトークンでサインイン'
                    Node: // = '//'
                  Node: local_variable_declaration = 'final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );'
                    Node: initialized_variable_definition = 'final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                      Node: final_builtin = 'final'
                        Node: final = 'final'
                      Node: identifier = 'userCredential'
                      Node: = = '='
                      Node: unary_expression = 'await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                        Node: await_expression = 'await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                          Node: await = 'await'
                          Node: identifier = 'firebase_auth'
                          Node: selector = '.FirebaseAuth'
                            Node: unconditional_assignable_selector = '.FirebaseAuth'
                              Node: . = '.'
                              Node: identifier = 'FirebaseAuth'
                          Node: selector = '.instance'
                            Node: unconditional_assignable_selector = '.instance'
                              Node: . = '.'
                              Node: identifier = 'instance'
                          Node: selector = '.signInWithCustomToken'
                            Node: unconditional_assignable_selector = '.signInWithCustomToken'
                              Node: . = '.'
                              Node: identifier = 'signInWithCustomToken'
                          Node: selector = '(
          result.accessToken,
        )'
                            Node: argument_part = '(
          result.accessToken,
        )'
                              Node: arguments = '(
          result.accessToken,
        )'
                                Node: ( = '('
                                Node: argument = 'result.accessToken'
                                  Node: identifier = 'result'
                                  Node: selector = '.accessToken'
                                    Node: unconditional_assignable_selector = '.accessToken'
                                      Node: . = '.'
                                      Node: identifier = 'accessToken'
                                Node: , = ','
                                Node: ) = ')'
                    Node: ; = ';'
                  Node: if_statement = 'if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }'
                    Node: if = 'if'
                    Node: ( = '('
                    Node: equality_expression = 'userCredential.user != null'
                      Node: identifier = 'userCredential'
                      Node: selector = '.user'
                        Node: unconditional_assignable_selector = '.user'
                          Node: . = '.'
                          Node: identifier = 'user'
                      Node: equality_operator = '!='
                      Node: null_literal = 'null'
                        Node: null = 'null'
                    Node: ) = ')'
                    Node: block = '{
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        }'
                      Node: { = '{'
                      Node: local_variable_declaration = 'final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );'
                        Node: initialized_variable_definition = 'final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                          Node: final_builtin = 'final'
                            Node: final = 'final'
                          Node: identifier = 'user'
                          Node: = = '='
                          Node: identifier = 'AppUser'
                          Node: selector = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                            Node: argument_part = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                              Node: arguments = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                                Node: ( = '('
                                Node: named_argument = 'id: userCredential.user!.uid'
                                  Node: label = 'id:'
                                    Node: identifier = 'id'
                                    Node: : = ':'
                                  Node: identifier = 'userCredential'
                                  Node: selector = '.user'
                                    Node: unconditional_assignable_selector = '.user'
                                      Node: . = '.'
                                      Node: identifier = 'user'
                                  Node: selector = '!'
                                    Node: ! = '!'
                                  Node: selector = '.uid'
                                    Node: unconditional_assignable_selector = '.uid'
                                      Node: . = '.'
                                      Node: identifier = 'uid'
                                Node: , = ','
                                Node: named_argument = 'displayName: result.profile.displayName'
                                  Node: label = 'displayName:'
                                    Node: identifier = 'displayName'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.displayName'
                                    Node: unconditional_assignable_selector = '.displayName'
                                      Node: . = '.'
                                      Node: identifier = 'displayName'
                                Node: , = ','
                                Node: named_argument = 'photoURL: result.profile.pictureUrl'
                                  Node: label = 'photoURL:'
                                    Node: identifier = 'photoURL'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.pictureUrl'
                                    Node: unconditional_assignable_selector = '.pictureUrl'
                                      Node: . = '.'
                                      Node: identifier = 'pictureUrl'
                                Node: , = ','
                                Node: named_argument = 'statusMessage: result.profile.statusMessage'
                                  Node: label = 'statusMessage:'
                                    Node: identifier = 'statusMessage'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.statusMessage'
                                    Node: unconditional_assignable_selector = '.statusMessage'
                                      Node: . = '.'
                                      Node: identifier = 'statusMessage'
                                Node: , = ','
                                Node: named_argument = 'provider: 'line''
                                  Node: label = 'provider:'
                                    Node: identifier = 'provider'
                                    Node: : = ':'
                                  Node: string_literal = ''line''
                                    Node: ' = '''
                                    Node: ' = '''
                                Node: , = ','
                                Node: named_argument = 'createdAt: DateTime.now()'
                                  Node: label = 'createdAt:'
                                    Node: identifier = 'createdAt'
                                    Node: : = ':'
                                  Node: identifier = 'DateTime'
                                  Node: selector = '.now'
                                    Node: unconditional_assignable_selector = '.now'
                                      Node: . = '.'
                                      Node: identifier = 'now'
                                  Node: selector = '()'
                                    Node: argument_part = '()'
                                      Node: arguments = '()'
                                        Node: ( = '('
                                        Node: ) = ')'
                                Node: , = ','
                                Node: ) = ')'
                        Node: ; = ';'
                      Node: expression_statement = 'state = AuthState.authenticated(user);'
                        Node: assignment_expression = 'state = AuthState.authenticated(user)'
                          Node: assignable_expression = 'state'
                            Node: identifier = 'state'
                          Node: = = '='
                          Node: identifier = 'AuthState'
                          Node: selector = '.authenticated'
                            Node: unconditional_assignable_selector = '.authenticated'
                              Node: . = '.'
                              Node: identifier = 'authenticated'
                          Node: selector = '(user)'
                            Node: argument_part = '(user)'
                              Node: arguments = '(user)'
                                Node: ( = '('
                                Node: argument = 'user'
                                  Node: identifier = 'user'
                                Node: ) = ')'
                        Node: ; = ';'
                      Node: } = '}'
                    Node: else = 'else'
                    Node: block = '{
          state = const AuthState.error('Failed to sign in with custom token');
        }'
                      Node: { = '{'
                      Node: expression_statement = 'state = const AuthState.error('Failed to sign in with custom token');'
                        Node: assignment_expression = 'state = const AuthState.error('Failed to sign in with custom token')'
                          Node: assignable_expression = 'state'
                            Node: identifier = 'state'
                          Node: = = '='
                          Node: const_object_expression = 'const AuthState.error('Failed to sign in with custom token')'
                            Node: const_builtin = 'const'
                            Node: type_identifier = 'AuthState'
                            Node: . = '.'
                            Node: identifier = 'error'
                            Node: arguments = '('Failed to sign in with custom token')'
                              Node: ( = '('
                              Node: argument = ''Failed to sign in with custom token''
                                Node: string_literal = ''Failed to sign in with custom token''
                                  Node: ' = '''
                                  Node: ' = '''
                              Node: ) = ')'
                        Node: ; = ';'
                      Node: } = '}'
                  Node: } = '}'
                Node: else = 'else'
                Node: block = '{
        state = const AuthState.error('LINE login failed');
      }'
                  Node: { = '{'
                  Node: expression_statement = 'state = const AuthState.error('LINE login failed');'
                    Node: assignment_expression = 'state = const AuthState.error('LINE login failed')'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: const_object_expression = 'const AuthState.error('LINE login failed')'
                        Node: const_builtin = 'const'
                        Node: type_identifier = 'AuthState'
                        Node: . = '.'
                        Node: identifier = 'error'
                        Node: arguments = '('LINE login failed')'
                          Node: ( = '('
                          Node: argument = ''LINE login failed''
                            Node: string_literal = ''LINE login failed''
                              Node: ' = '''
                              Node: ' = '''
                          Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// ログアウト'
        Node: /// = '///'
      Node: method_signature = 'Future<void> signOut()'
        Node: function_signature = 'Future<void> signOut()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'signOut'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: try_statement = 'try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    }'
              Node: { = '{'
              Node: expression_statement = 'await firebase_auth.FirebaseAuth.instance.signOut();'
                Node: unary_expression = 'await firebase_auth.FirebaseAuth.instance.signOut()'
                  Node: await_expression = 'await firebase_auth.FirebaseAuth.instance.signOut()'
                    Node: await = 'await'
                    Node: identifier = 'firebase_auth'
                    Node: selector = '.FirebaseAuth'
                      Node: unconditional_assignable_selector = '.FirebaseAuth'
                        Node: . = '.'
                        Node: identifier = 'FirebaseAuth'
                    Node: selector = '.instance'
                      Node: unconditional_assignable_selector = '.instance'
                        Node: . = '.'
                        Node: identifier = 'instance'
                    Node: selector = '.signOut'
                      Node: unconditional_assignable_selector = '.signOut'
                        Node: . = '.'
                        Node: identifier = 'signOut'
                    Node: selector = '()'
                      Node: argument_part = '()'
                        Node: arguments = '()'
                          Node: ( = '('
                          Node: ) = ')'
                Node: ; = ';'
              Node: expression_statement = 'state = const AuthState.unauthenticated();'
                Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: const_object_expression = 'const AuthState.unauthenticated()'
                    Node: const_builtin = 'const'
                    Node: type_identifier = 'AuthState'
                    Node: . = '.'
                    Node: identifier = 'unauthenticated'
                    Node: arguments = '()'
                      Node: ( = '('
                      Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// 現在のユーザーを取得'
        Node: /// = '///'
      Node: method_signature = 'Future<void> getCurrentUser()'
        Node: function_signature = 'Future<void> getCurrentUser()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'getCurrentUser'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: expression_statement = 'state = const AuthState.loading();'
            Node: assignment_expression = 'state = const AuthState.loading()'
              Node: assignable_expression = 'state'
                Node: identifier = 'state'
              Node: = = '='
              Node: const_object_expression = 'const AuthState.loading()'
                Node: const_builtin = 'const'
                Node: type_identifier = 'AuthState'
                Node: . = '.'
                Node: identifier = 'loading'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: ; = ';'
          Node: try_statement = 'try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    }'
              Node: { = '{'
              Node: local_variable_declaration = 'final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;'
                Node: initialized_variable_definition = 'final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser'
                  Node: final_builtin = 'final'
                    Node: final = 'final'
                  Node: identifier = 'firebaseUser'
                  Node: = = '='
                  Node: identifier = 'firebase_auth'
                  Node: selector = '.FirebaseAuth'
                    Node: unconditional_assignable_selector = '.FirebaseAuth'
                      Node: . = '.'
                      Node: identifier = 'FirebaseAuth'
                  Node: selector = '.instance'
                    Node: unconditional_assignable_selector = '.instance'
                      Node: . = '.'
                      Node: identifier = 'instance'
                  Node: selector = '.currentUser'
                    Node: unconditional_assignable_selector = '.currentUser'
                      Node: . = '.'
                      Node: identifier = 'currentUser'
                Node: ; = ';'
              Node: if_statement = 'if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }'
                Node: if = 'if'
                Node: ( = '('
                Node: equality_expression = 'firebaseUser != null'
                  Node: identifier = 'firebaseUser'
                  Node: equality_operator = '!='
                  Node: null_literal = 'null'
                    Node: null = 'null'
                Node: ) = ')'
                Node: block = '{
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      }'
                  Node: { = '{'
                  Node: comment = '// Firestoreからユーザー情報を取得'
                    Node: // = '//'
                  Node: comment = '// TODO: FirestoreServiceを使用してユーザー情報を取得'
                    Node: // = '//'
                  Node: local_variable_declaration = 'final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );'
                    Node: initialized_variable_definition = 'final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                      Node: final_builtin = 'final'
                        Node: final = 'final'
                      Node: identifier = 'user'
                      Node: = = '='
                      Node: identifier = 'AppUser'
                      Node: selector = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                        Node: argument_part = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                          Node: arguments = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                            Node: ( = '('
                            Node: named_argument = 'id: firebaseUser.uid'
                              Node: label = 'id:'
                                Node: identifier = 'id'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.uid'
                                Node: unconditional_assignable_selector = '.uid'
                                  Node: . = '.'
                                  Node: identifier = 'uid'
                            Node: , = ','
                            Node: named_argument = 'displayName: firebaseUser.displayName ?? 'Unknown User''
                              Node: label = 'displayName:'
                                Node: identifier = 'displayName'
                                Node: : = ':'
                              Node: if_null_expression = 'firebaseUser.displayName ?? 'Unknown User''
                                Node: identifier = 'firebaseUser'
                                Node: selector = '.displayName'
                                  Node: unconditional_assignable_selector = '.displayName'
                                    Node: . = '.'
                                    Node: identifier = 'displayName'
                                Node: ?? = '??'
                                Node: string_literal = ''Unknown User''
                                  Node: ' = '''
                                  Node: ' = '''
                            Node: , = ','
                            Node: named_argument = 'email: firebaseUser.email'
                              Node: label = 'email:'
                                Node: identifier = 'email'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.email'
                                Node: unconditional_assignable_selector = '.email'
                                  Node: . = '.'
                                  Node: identifier = 'email'
                            Node: , = ','
                            Node: named_argument = 'photoURL: firebaseUser.photoURL'
                              Node: label = 'photoURL:'
                                Node: identifier = 'photoURL'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.photoURL'
                                Node: unconditional_assignable_selector = '.photoURL'
                                  Node: . = '.'
                                  Node: identifier = 'photoURL'
                            Node: , = ','
                            Node: named_argument = 'provider: 'line''
                              Node: label = 'provider:'
                                Node: identifier = 'provider'
                                Node: : = ':'
                              Node: string_literal = ''line''
                                Node: ' = '''
                                Node: ' = '''
                            Node: , = ','
                            Node: ) = ')'
                    Node: ; = ';'
                  Node: expression_statement = 'state = AuthState.authenticated(user);'
                    Node: assignment_expression = 'state = AuthState.authenticated(user)'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: identifier = 'AuthState'
                      Node: selector = '.authenticated'
                        Node: unconditional_assignable_selector = '.authenticated'
                          Node: . = '.'
                          Node: identifier = 'authenticated'
                      Node: selector = '(user)'
                        Node: argument_part = '(user)'
                          Node: arguments = '(user)'
                            Node: ( = '('
                            Node: argument = 'user'
                              Node: identifier = 'user'
                            Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
                Node: else = 'else'
                Node: block = '{
        state = const AuthState.unauthenticated();
      }'
                  Node: { = '{'
                  Node: expression_statement = 'state = const AuthState.unauthenticated();'
                    Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: const_object_expression = 'const AuthState.unauthenticated()'
                        Node: const_builtin = 'const'
                        Node: type_identifier = 'AuthState'
                        Node: . = '.'
                        Node: identifier = 'unauthenticated'
                        Node: arguments = '()'
                          Node: ( = '('
                          Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// 認証状態の監視'
        Node: /// = '///'
      Node: method_signature = 'void listenToAuthChanges()'
        Node: function_signature = 'void listenToAuthChanges()'
          Node: void_type = 'void'
          Node: identifier = 'listenToAuthChanges'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = '{
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }'
        Node: block = '{
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }'
          Node: { = '{'
          Node: expression_statement = 'firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });'
            Node: identifier = 'firebase_auth'
            Node: selector = '.FirebaseAuth'
              Node: unconditional_assignable_selector = '.FirebaseAuth'
                Node: . = '.'
                Node: identifier = 'FirebaseAuth'
            Node: selector = '.instance'
              Node: unconditional_assignable_selector = '.instance'
                Node: . = '.'
                Node: identifier = 'instance'
            Node: selector = '.authStateChanges'
              Node: unconditional_assignable_selector = '.authStateChanges'
                Node: . = '.'
                Node: identifier = 'authStateChanges'
            Node: selector = '()'
              Node: argument_part = '()'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: selector = '.listen'
              Node: unconditional_assignable_selector = '.listen'
                Node: . = '.'
                Node: identifier = 'listen'
            Node: selector = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
              Node: argument_part = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
                Node: arguments = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
                  Node: ( = '('
                  Node: argument = '(firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                    Node: function_expression = '(firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                      Node: formal_parameter_list = '(firebaseUser)'
                        Node: ( = '('
                        Node: formal_parameter = 'firebaseUser'
                          Node: identifier = 'firebaseUser'
                        Node: ) = ')'
                      Node: function_expression_body = '{
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                        Node: block = '{
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                          Node: { = '{'
                          Node: if_statement = 'if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }'
                            Node: if = 'if'
                            Node: ( = '('
                            Node: equality_expression = 'firebaseUser != null'
                              Node: identifier = 'firebaseUser'
                              Node: equality_operator = '!='
                              Node: null_literal = 'null'
                                Node: null = 'null'
                            Node: ) = ')'
                            Node: block = '{
        // ユーザーがログインしている場合
        getCurrentUser();
      }'
                              Node: { = '{'
                              Node: comment = '// ユーザーがログインしている場合'
                                Node: // = '//'
                              Node: expression_statement = 'getCurrentUser();'
                                Node: identifier = 'getCurrentUser'
                                Node: selector = '()'
                                  Node: argument_part = '()'
                                    Node: arguments = '()'
                                      Node: ( = '('
                                      Node: ) = ')'
                                Node: ; = ';'
                              Node: } = '}'
                            Node: else = 'else'
                            Node: block = '{
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }'
                              Node: { = '{'
                              Node: comment = '// ユーザーがログアウトしている場合'
                                Node: // = '//'
                              Node: expression_statement = 'state = const AuthState.unauthenticated();'
                                Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                                  Node: assignable_expression = 'state'
                                    Node: identifier = 'state'
                                  Node: = = '='
                                  Node: const_object_expression = 'const AuthState.unauthenticated()'
                                    Node: const_builtin = 'const'
                                    Node: type_identifier = 'AuthState'
                                    Node: . = '.'
                                    Node: identifier = 'unauthenticated'
                                    Node: arguments = '()'
                                      Node: ( = '('
                                      Node: ) = ')'
                                Node: ; = ';'
                              Node: } = '}'
                          Node: } = '}'
                  Node: ) = ')'
            Node: ; = ';'
          Node: } = '}'
      Node: } = '}'
  Node: documentation_comment = '/// 認証状態プロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'AuthState authState(Ref ref)'
    Node: type_identifier = 'AuthState'
    Node: identifier = 'authState'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}'
    Node: block = '{
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}'
      Node: { = '{'
      Node: comment = '// 初回起動時に認証状態を監視開始'
        Node: // = '//'
      Node: expression_statement = 'ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });'
        Node: identifier = 'ref'
        Node: selector = '.listen'
          Node: unconditional_assignable_selector = '.listen'
            Node: . = '.'
            Node: identifier = 'listen'
        Node: selector = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
          Node: argument_part = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
            Node: arguments = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
              Node: ( = '('
              Node: argument = 'authNotifierProvider'
                Node: identifier = 'authNotifierProvider'
              Node: , = ','
              Node: argument = '(previous, next) {
    // 認証状態が変更された時の処理
  }'
                Node: function_expression = '(previous, next) {
    // 認証状態が変更された時の処理
  }'
                  Node: formal_parameter_list = '(previous, next)'
                    Node: ( = '('
                    Node: formal_parameter = 'previous'
                      Node: identifier = 'previous'
                    Node: , = ','
                    Node: formal_parameter = 'next'
                      Node: identifier = 'next'
                    Node: ) = ')'
                  Node: function_expression_body = '{
    // 認証状態が変更された時の処理
  }'
                    Node: block = '{
    // 認証状態が変更された時の処理
  }'
                      Node: { = '{'
                      Node: comment = '// 認証状態が変更された時の処理'
                        Node: // = '//'
                      Node: } = '}'
              Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return ref.watch(authNotifierProvider);'
        Node: return = 'return'
        Node: identifier = 'ref'
        Node: selector = '.watch'
          Node: unconditional_assignable_selector = '.watch'
            Node: . = '.'
            Node: identifier = 'watch'
        Node: selector = '(authNotifierProvider)'
          Node: argument_part = '(authNotifierProvider)'
            Node: arguments = '(authNotifierProvider)'
              Node: ( = '('
              Node: argument = 'authNotifierProvider'
                Node: identifier = 'authNotifierProvider'
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
  Node: documentation_comment = '/// 現在のユーザープロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'AppUser? currentUser(Ref ref)'
    Node: type_identifier = 'AppUser'
    Node: nullable_type = '?'
      Node: ? = '?'
    Node: identifier = 'currentUser'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}'
    Node: block = '{
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}'
      Node: { = '{'
      Node: local_variable_declaration = 'final authState = ref.watch(authStateProvider);'
        Node: initialized_variable_definition = 'final authState = ref.watch(authStateProvider)'
          Node: final_builtin = 'final'
            Node: final = 'final'
          Node: identifier = 'authState'
          Node: = = '='
          Node: identifier = 'ref'
          Node: selector = '.watch'
            Node: unconditional_assignable_selector = '.watch'
              Node: . = '.'
              Node: identifier = 'watch'
          Node: selector = '(authStateProvider)'
            Node: argument_part = '(authStateProvider)'
              Node: arguments = '(authStateProvider)'
                Node: ( = '('
                Node: argument = 'authStateProvider'
                  Node: identifier = 'authStateProvider'
                Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );'
        Node: return = 'return'
        Node: identifier = 'authState'
        Node: selector = '.when'
          Node: unconditional_assignable_selector = '.when'
            Node: . = '.'
            Node: identifier = 'when'
        Node: selector = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
          Node: argument_part = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
            Node: arguments = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
              Node: ( = '('
              Node: named_argument = 'authenticated: (user) => user'
                Node: label = 'authenticated:'
                  Node: identifier = 'authenticated'
                  Node: : = ':'
                Node: function_expression = '(user) => user'
                  Node: formal_parameter_list = '(user)'
                    Node: ( = '('
                    Node: formal_parameter = 'user'
                      Node: identifier = 'user'
                    Node: ) = ')'
                  Node: function_expression_body = '=> user'
                    Node: => = '=>'
                    Node: identifier = 'user'
              Node: , = ','
              Node: named_argument = 'initial: () => null'
                Node: label = 'initial:'
                  Node: identifier = 'initial'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'loading: () => null'
                Node: label = 'loading:'
                  Node: identifier = 'loading'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'unauthenticated: () => null'
                Node: label = 'unauthenticated:'
                  Node: identifier = 'unauthenticated'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'error: (_) => null'
                Node: label = 'error:'
                  Node: identifier = 'error'
                  Node: : = ':'
                Node: function_expression = '(_) => null'
                  Node: formal_parameter_list = '(_)'
                    Node: ( = '('
                    Node: formal_parameter = '_'
                      Node: identifier = '_'
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
  Node: documentation_comment = '/// 認証済みかどうかのプロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'bool isAuthenticated(Ref ref)'
    Node: type_identifier = 'bool'
    Node: identifier = 'isAuthenticated'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}'
    Node: block = '{
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}'
      Node: { = '{'
      Node: local_variable_declaration = 'final authState = ref.watch(authStateProvider);'
        Node: initialized_variable_definition = 'final authState = ref.watch(authStateProvider)'
          Node: final_builtin = 'final'
            Node: final = 'final'
          Node: identifier = 'authState'
          Node: = = '='
          Node: identifier = 'ref'
          Node: selector = '.watch'
            Node: unconditional_assignable_selector = '.watch'
              Node: . = '.'
              Node: identifier = 'watch'
          Node: selector = '(authStateProvider)'
            Node: argument_part = '(authStateProvider)'
              Node: arguments = '(authStateProvider)'
                Node: ( = '('
                Node: argument = 'authStateProvider'
                  Node: identifier = 'authStateProvider'
                Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );'
        Node: return = 'return'
        Node: identifier = 'authState'
        Node: selector = '.maybeWhen'
          Node: unconditional_assignable_selector = '.maybeWhen'
            Node: . = '.'
            Node: identifier = 'maybeWhen'
        Node: selector = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
          Node: argument_part = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
            Node: arguments = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
              Node: ( = '('
              Node: named_argument = 'authenticated: (_) => true'
                Node: label = 'authenticated:'
                  Node: identifier = 'authenticated'
                  Node: : = ':'
                Node: function_expression = '(_) => true'
                  Node: formal_parameter_list = '(_)'
                    Node: ( = '('
                    Node: formal_parameter = '_'
                      Node: identifier = '_'
                    Node: ) = ')'
                  Node: function_expression_body = '=> true'
                    Node: => = '=>'
                    Node: true = 'true'
                      Node: true = 'true'
              Node: , = ','
              Node: named_argument = 'orElse: () => false'
                Node: label = 'orElse:'
                  Node: identifier = 'orElse'
                  Node: : = ':'
                Node: function_expression = '() => false'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> false'
                    Node: => = '=>'
                    Node: false = 'false'
                      Node: false = 'false'
              Node: , = ','
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
=== End AST ===

=== Complete AST for test_flutter_app/aminomi/lib/providers/auth_provider.dart ===
Node: program = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;
import 'package:riverpod/riverpod.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import '../models/user.dart';
import '../services/line_auth_service.dart';

part 'auth_provider.g.dart';

@riverpod
class AuthNotifier extends _$AuthNotifier {
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}

/// 認証状態プロバイダー
@riverpod
AuthState authState(Ref ref) {
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}

/// 現在のユーザープロバイダー
@riverpod
AppUser? currentUser(Ref ref) {
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}

/// 認証済みかどうかのプロバイダー
@riverpod
bool isAuthenticated(Ref ref) {
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}
'
  Node: import_or_export = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
    Node: library_import = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
      Node: import_specification = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
        Node: import = 'import'
        Node: configurable_uri = ''package:firebase_auth/firebase_auth.dart''
          Node: uri = ''package:firebase_auth/firebase_auth.dart''
            Node: string_literal = ''package:firebase_auth/firebase_auth.dart''
              Node: ' = '''
              Node: ' = '''
        Node: as = 'as'
        Node: identifier = 'firebase_auth'
        Node: ; = ';'
  Node: import_or_export = 'import 'package:riverpod/riverpod.dart';'
    Node: library_import = 'import 'package:riverpod/riverpod.dart';'
      Node: import_specification = 'import 'package:riverpod/riverpod.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:riverpod/riverpod.dart''
          Node: uri = ''package:riverpod/riverpod.dart''
            Node: string_literal = ''package:riverpod/riverpod.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
    Node: library_import = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
      Node: import_specification = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:riverpod_annotation/riverpod_annotation.dart''
          Node: uri = ''package:riverpod_annotation/riverpod_annotation.dart''
            Node: string_literal = ''package:riverpod_annotation/riverpod_annotation.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import '../models/user.dart';'
    Node: library_import = 'import '../models/user.dart';'
      Node: import_specification = 'import '../models/user.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''../models/user.dart''
          Node: uri = ''../models/user.dart''
            Node: string_literal = ''../models/user.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import '../services/line_auth_service.dart';'
    Node: library_import = 'import '../services/line_auth_service.dart';'
      Node: import_specification = 'import '../services/line_auth_service.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''../services/line_auth_service.dart''
          Node: uri = ''../services/line_auth_service.dart''
            Node: string_literal = ''../services/line_auth_service.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: part_directive = 'part 'auth_provider.g.dart';'
    Node: part = 'part'
    Node: uri = ''auth_provider.g.dart''
      Node: string_literal = ''auth_provider.g.dart''
        Node: ' = '''
        Node: ' = '''
    Node: ; = ';'
  Node: class_definition = '@riverpod
class AuthNotifier extends _$AuthNotifier {
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}'
    Node: annotation = '@riverpod'
      Node: @ = '@'
      Node: identifier = 'riverpod'
    Node: class = 'class'
    Node: identifier = 'AuthNotifier'
    Node: superclass = 'extends _$AuthNotifier'
      Node: extends = 'extends'
      Node: type_identifier = '_$AuthNotifier'
    Node: class_body = '{
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}'
      Node: { = '{'
      Node: annotation = '@override'
        Node: @ = '@'
        Node: identifier = 'override'
      Node: method_signature = 'AuthState build()'
        Node: function_signature = 'AuthState build()'
          Node: type_identifier = 'AuthState'
          Node: identifier = 'build'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = '{
    return const AuthState.initial();
  }'
        Node: block = '{
    return const AuthState.initial();
  }'
          Node: { = '{'
          Node: return_statement = 'return const AuthState.initial();'
            Node: return = 'return'
            Node: const_object_expression = 'const AuthState.initial()'
              Node: const_builtin = 'const'
              Node: type_identifier = 'AuthState'
              Node: . = '.'
              Node: identifier = 'initial'
              Node: arguments = '()'
                Node: ( = '('
                Node: ) = ')'
            Node: ; = ';'
          Node: } = '}'
      Node: documentation_comment = '/// LINEログイン'
        Node: /// = '///'
      Node: method_signature = 'Future<void> signInWithLine()'
        Node: function_signature = 'Future<void> signInWithLine()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'signInWithLine'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: expression_statement = 'state = const AuthState.loading();'
            Node: assignment_expression = 'state = const AuthState.loading()'
              Node: assignable_expression = 'state'
                Node: identifier = 'state'
              Node: = = '='
              Node: const_object_expression = 'const AuthState.loading()'
                Node: const_builtin = 'const'
                Node: type_identifier = 'AuthState'
                Node: . = '.'
                Node: identifier = 'loading'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: ; = ';'
          Node: try_statement = 'try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    }'
              Node: { = '{'
              Node: local_variable_declaration = 'final result = await LineAuthService.login();'
                Node: initialized_variable_definition = 'final result = await LineAuthService.login()'
                  Node: final_builtin = 'final'
                    Node: final = 'final'
                  Node: identifier = 'result'
                  Node: = = '='
                  Node: unary_expression = 'await LineAuthService.login()'
                    Node: await_expression = 'await LineAuthService.login()'
                      Node: await = 'await'
                      Node: identifier = 'LineAuthService'
                      Node: selector = '.login'
                        Node: unconditional_assignable_selector = '.login'
                          Node: . = '.'
                          Node: identifier = 'login'
                      Node: selector = '()'
                        Node: argument_part = '()'
                          Node: arguments = '()'
                            Node: ( = '('
                            Node: ) = ')'
                Node: ; = ';'
              Node: if_statement = 'if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }'
                Node: if = 'if'
                Node: ( = '('
                Node: equality_expression = 'result != null'
                  Node: identifier = 'result'
                  Node: equality_operator = '!='
                  Node: null_literal = 'null'
                    Node: null = 'null'
                Node: ) = ')'
                Node: block = '{
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      }'
                  Node: { = '{'
                  Node: comment = '// Firebaseカスタムトークンでサインイン'
                    Node: // = '//'
                  Node: local_variable_declaration = 'final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );'
                    Node: initialized_variable_definition = 'final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                      Node: final_builtin = 'final'
                        Node: final = 'final'
                      Node: identifier = 'userCredential'
                      Node: = = '='
                      Node: unary_expression = 'await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                        Node: await_expression = 'await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                          Node: await = 'await'
                          Node: identifier = 'firebase_auth'
                          Node: selector = '.FirebaseAuth'
                            Node: unconditional_assignable_selector = '.FirebaseAuth'
                              Node: . = '.'
                              Node: identifier = 'FirebaseAuth'
                          Node: selector = '.instance'
                            Node: unconditional_assignable_selector = '.instance'
                              Node: . = '.'
                              Node: identifier = 'instance'
                          Node: selector = '.signInWithCustomToken'
                            Node: unconditional_assignable_selector = '.signInWithCustomToken'
                              Node: . = '.'
                              Node: identifier = 'signInWithCustomToken'
                          Node: selector = '(
          result.accessToken,
        )'
                            Node: argument_part = '(
          result.accessToken,
        )'
                              Node: arguments = '(
          result.accessToken,
        )'
                                Node: ( = '('
                                Node: argument = 'result.accessToken'
                                  Node: identifier = 'result'
                                  Node: selector = '.accessToken'
                                    Node: unconditional_assignable_selector = '.accessToken'
                                      Node: . = '.'
                                      Node: identifier = 'accessToken'
                                Node: , = ','
                                Node: ) = ')'
                    Node: ; = ';'
                  Node: if_statement = 'if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }'
                    Node: if = 'if'
                    Node: ( = '('
                    Node: equality_expression = 'userCredential.user != null'
                      Node: identifier = 'userCredential'
                      Node: selector = '.user'
                        Node: unconditional_assignable_selector = '.user'
                          Node: . = '.'
                          Node: identifier = 'user'
                      Node: equality_operator = '!='
                      Node: null_literal = 'null'
                        Node: null = 'null'
                    Node: ) = ')'
                    Node: block = '{
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        }'
                      Node: { = '{'
                      Node: local_variable_declaration = 'final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );'
                        Node: initialized_variable_definition = 'final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                          Node: final_builtin = 'final'
                            Node: final = 'final'
                          Node: identifier = 'user'
                          Node: = = '='
                          Node: identifier = 'AppUser'
                          Node: selector = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                            Node: argument_part = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                              Node: arguments = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                                Node: ( = '('
                                Node: named_argument = 'id: userCredential.user!.uid'
                                  Node: label = 'id:'
                                    Node: identifier = 'id'
                                    Node: : = ':'
                                  Node: identifier = 'userCredential'
                                  Node: selector = '.user'
                                    Node: unconditional_assignable_selector = '.user'
                                      Node: . = '.'
                                      Node: identifier = 'user'
                                  Node: selector = '!'
                                    Node: ! = '!'
                                  Node: selector = '.uid'
                                    Node: unconditional_assignable_selector = '.uid'
                                      Node: . = '.'
                                      Node: identifier = 'uid'
                                Node: , = ','
                                Node: named_argument = 'displayName: result.profile.displayName'
                                  Node: label = 'displayName:'
                                    Node: identifier = 'displayName'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.displayName'
                                    Node: unconditional_assignable_selector = '.displayName'
                                      Node: . = '.'
                                      Node: identifier = 'displayName'
                                Node: , = ','
                                Node: named_argument = 'photoURL: result.profile.pictureUrl'
                                  Node: label = 'photoURL:'
                                    Node: identifier = 'photoURL'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.pictureUrl'
                                    Node: unconditional_assignable_selector = '.pictureUrl'
                                      Node: . = '.'
                                      Node: identifier = 'pictureUrl'
                                Node: , = ','
                                Node: named_argument = 'statusMessage: result.profile.statusMessage'
                                  Node: label = 'statusMessage:'
                                    Node: identifier = 'statusMessage'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.statusMessage'
                                    Node: unconditional_assignable_selector = '.statusMessage'
                                      Node: . = '.'
                                      Node: identifier = 'statusMessage'
                                Node: , = ','
                                Node: named_argument = 'provider: 'line''
                                  Node: label = 'provider:'
                                    Node: identifier = 'provider'
                                    Node: : = ':'
                                  Node: string_literal = ''line''
                                    Node: ' = '''
                                    Node: ' = '''
                                Node: , = ','
                                Node: named_argument = 'createdAt: DateTime.now()'
                                  Node: label = 'createdAt:'
                                    Node: identifier = 'createdAt'
                                    Node: : = ':'
                                  Node: identifier = 'DateTime'
                                  Node: selector = '.now'
                                    Node: unconditional_assignable_selector = '.now'
                                      Node: . = '.'
                                      Node: identifier = 'now'
                                  Node: selector = '()'
                                    Node: argument_part = '()'
                                      Node: arguments = '()'
                                        Node: ( = '('
                                        Node: ) = ')'
                                Node: , = ','
                                Node: ) = ')'
                        Node: ; = ';'
                      Node: expression_statement = 'state = AuthState.authenticated(user);'
                        Node: assignment_expression = 'state = AuthState.authenticated(user)'
                          Node: assignable_expression = 'state'
                            Node: identifier = 'state'
                          Node: = = '='
                          Node: identifier = 'AuthState'
                          Node: selector = '.authenticated'
                            Node: unconditional_assignable_selector = '.authenticated'
                              Node: . = '.'
                              Node: identifier = 'authenticated'
                          Node: selector = '(user)'
                            Node: argument_part = '(user)'
                              Node: arguments = '(user)'
                                Node: ( = '('
                                Node: argument = 'user'
                                  Node: identifier = 'user'
                                Node: ) = ')'
                        Node: ; = ';'
                      Node: } = '}'
                    Node: else = 'else'
                    Node: block = '{
          state = const AuthState.error('Failed to sign in with custom token');
        }'
                      Node: { = '{'
                      Node: expression_statement = 'state = const AuthState.error('Failed to sign in with custom token');'
                        Node: assignment_expression = 'state = const AuthState.error('Failed to sign in with custom token')'
                          Node: assignable_expression = 'state'
                            Node: identifier = 'state'
                          Node: = = '='
                          Node: const_object_expression = 'const AuthState.error('Failed to sign in with custom token')'
                            Node: const_builtin = 'const'
                            Node: type_identifier = 'AuthState'
                            Node: . = '.'
                            Node: identifier = 'error'
                            Node: arguments = '('Failed to sign in with custom token')'
                              Node: ( = '('
                              Node: argument = ''Failed to sign in with custom token''
                                Node: string_literal = ''Failed to sign in with custom token''
                                  Node: ' = '''
                                  Node: ' = '''
                              Node: ) = ')'
                        Node: ; = ';'
                      Node: } = '}'
                  Node: } = '}'
                Node: else = 'else'
                Node: block = '{
        state = const AuthState.error('LINE login failed');
      }'
                  Node: { = '{'
                  Node: expression_statement = 'state = const AuthState.error('LINE login failed');'
                    Node: assignment_expression = 'state = const AuthState.error('LINE login failed')'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: const_object_expression = 'const AuthState.error('LINE login failed')'
                        Node: const_builtin = 'const'
                        Node: type_identifier = 'AuthState'
                        Node: . = '.'
                        Node: identifier = 'error'
                        Node: arguments = '('LINE login failed')'
                          Node: ( = '('
                          Node: argument = ''LINE login failed''
                            Node: string_literal = ''LINE login failed''
                              Node: ' = '''
                              Node: ' = '''
                          Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// ログアウト'
        Node: /// = '///'
      Node: method_signature = 'Future<void> signOut()'
        Node: function_signature = 'Future<void> signOut()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'signOut'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: try_statement = 'try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    }'
              Node: { = '{'
              Node: expression_statement = 'await firebase_auth.FirebaseAuth.instance.signOut();'
                Node: unary_expression = 'await firebase_auth.FirebaseAuth.instance.signOut()'
                  Node: await_expression = 'await firebase_auth.FirebaseAuth.instance.signOut()'
                    Node: await = 'await'
                    Node: identifier = 'firebase_auth'
                    Node: selector = '.FirebaseAuth'
                      Node: unconditional_assignable_selector = '.FirebaseAuth'
                        Node: . = '.'
                        Node: identifier = 'FirebaseAuth'
                    Node: selector = '.instance'
                      Node: unconditional_assignable_selector = '.instance'
                        Node: . = '.'
                        Node: identifier = 'instance'
                    Node: selector = '.signOut'
                      Node: unconditional_assignable_selector = '.signOut'
                        Node: . = '.'
                        Node: identifier = 'signOut'
                    Node: selector = '()'
                      Node: argument_part = '()'
                        Node: arguments = '()'
                          Node: ( = '('
                          Node: ) = ')'
                Node: ; = ';'
              Node: expression_statement = 'state = const AuthState.unauthenticated();'
                Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: const_object_expression = 'const AuthState.unauthenticated()'
                    Node: const_builtin = 'const'
                    Node: type_identifier = 'AuthState'
                    Node: . = '.'
                    Node: identifier = 'unauthenticated'
                    Node: arguments = '()'
                      Node: ( = '('
                      Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// 現在のユーザーを取得'
        Node: /// = '///'
      Node: method_signature = 'Future<void> getCurrentUser()'
        Node: function_signature = 'Future<void> getCurrentUser()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'getCurrentUser'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: expression_statement = 'state = const AuthState.loading();'
            Node: assignment_expression = 'state = const AuthState.loading()'
              Node: assignable_expression = 'state'
                Node: identifier = 'state'
              Node: = = '='
              Node: const_object_expression = 'const AuthState.loading()'
                Node: const_builtin = 'const'
                Node: type_identifier = 'AuthState'
                Node: . = '.'
                Node: identifier = 'loading'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: ; = ';'
          Node: try_statement = 'try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    }'
              Node: { = '{'
              Node: local_variable_declaration = 'final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;'
                Node: initialized_variable_definition = 'final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser'
                  Node: final_builtin = 'final'
                    Node: final = 'final'
                  Node: identifier = 'firebaseUser'
                  Node: = = '='
                  Node: identifier = 'firebase_auth'
                  Node: selector = '.FirebaseAuth'
                    Node: unconditional_assignable_selector = '.FirebaseAuth'
                      Node: . = '.'
                      Node: identifier = 'FirebaseAuth'
                  Node: selector = '.instance'
                    Node: unconditional_assignable_selector = '.instance'
                      Node: . = '.'
                      Node: identifier = 'instance'
                  Node: selector = '.currentUser'
                    Node: unconditional_assignable_selector = '.currentUser'
                      Node: . = '.'
                      Node: identifier = 'currentUser'
                Node: ; = ';'
              Node: if_statement = 'if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }'
                Node: if = 'if'
                Node: ( = '('
                Node: equality_expression = 'firebaseUser != null'
                  Node: identifier = 'firebaseUser'
                  Node: equality_operator = '!='
                  Node: null_literal = 'null'
                    Node: null = 'null'
                Node: ) = ')'
                Node: block = '{
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      }'
                  Node: { = '{'
                  Node: comment = '// Firestoreからユーザー情報を取得'
                    Node: // = '//'
                  Node: comment = '// TODO: FirestoreServiceを使用してユーザー情報を取得'
                    Node: // = '//'
                  Node: local_variable_declaration = 'final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );'
                    Node: initialized_variable_definition = 'final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                      Node: final_builtin = 'final'
                        Node: final = 'final'
                      Node: identifier = 'user'
                      Node: = = '='
                      Node: identifier = 'AppUser'
                      Node: selector = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                        Node: argument_part = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                          Node: arguments = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                            Node: ( = '('
                            Node: named_argument = 'id: firebaseUser.uid'
                              Node: label = 'id:'
                                Node: identifier = 'id'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.uid'
                                Node: unconditional_assignable_selector = '.uid'
                                  Node: . = '.'
                                  Node: identifier = 'uid'
                            Node: , = ','
                            Node: named_argument = 'displayName: firebaseUser.displayName ?? 'Unknown User''
                              Node: label = 'displayName:'
                                Node: identifier = 'displayName'
                                Node: : = ':'
                              Node: if_null_expression = 'firebaseUser.displayName ?? 'Unknown User''
                                Node: identifier = 'firebaseUser'
                                Node: selector = '.displayName'
                                  Node: unconditional_assignable_selector = '.displayName'
                                    Node: . = '.'
                                    Node: identifier = 'displayName'
                                Node: ?? = '??'
                                Node: string_literal = ''Unknown User''
                                  Node: ' = '''
                                  Node: ' = '''
                            Node: , = ','
                            Node: named_argument = 'email: firebaseUser.email'
                              Node: label = 'email:'
                                Node: identifier = 'email'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.email'
                                Node: unconditional_assignable_selector = '.email'
                                  Node: . = '.'
                                  Node: identifier = 'email'
                            Node: , = ','
                            Node: named_argument = 'photoURL: firebaseUser.photoURL'
                              Node: label = 'photoURL:'
                                Node: identifier = 'photoURL'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.photoURL'
                                Node: unconditional_assignable_selector = '.photoURL'
                                  Node: . = '.'
                                  Node: identifier = 'photoURL'
                            Node: , = ','
                            Node: named_argument = 'provider: 'line''
                              Node: label = 'provider:'
                                Node: identifier = 'provider'
                                Node: : = ':'
                              Node: string_literal = ''line''
                                Node: ' = '''
                                Node: ' = '''
                            Node: , = ','
                            Node: ) = ')'
                    Node: ; = ';'
                  Node: expression_statement = 'state = AuthState.authenticated(user);'
                    Node: assignment_expression = 'state = AuthState.authenticated(user)'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: identifier = 'AuthState'
                      Node: selector = '.authenticated'
                        Node: unconditional_assignable_selector = '.authenticated'
                          Node: . = '.'
                          Node: identifier = 'authenticated'
                      Node: selector = '(user)'
                        Node: argument_part = '(user)'
                          Node: arguments = '(user)'
                            Node: ( = '('
                            Node: argument = 'user'
                              Node: identifier = 'user'
                            Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
                Node: else = 'else'
                Node: block = '{
        state = const AuthState.unauthenticated();
      }'
                  Node: { = '{'
                  Node: expression_statement = 'state = const AuthState.unauthenticated();'
                    Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: const_object_expression = 'const AuthState.unauthenticated()'
                        Node: const_builtin = 'const'
                        Node: type_identifier = 'AuthState'
                        Node: . = '.'
                        Node: identifier = 'unauthenticated'
                        Node: arguments = '()'
                          Node: ( = '('
                          Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// 認証状態の監視'
        Node: /// = '///'
      Node: method_signature = 'void listenToAuthChanges()'
        Node: function_signature = 'void listenToAuthChanges()'
          Node: void_type = 'void'
          Node: identifier = 'listenToAuthChanges'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = '{
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }'
        Node: block = '{
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }'
          Node: { = '{'
          Node: expression_statement = 'firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });'
            Node: identifier = 'firebase_auth'
            Node: selector = '.FirebaseAuth'
              Node: unconditional_assignable_selector = '.FirebaseAuth'
                Node: . = '.'
                Node: identifier = 'FirebaseAuth'
            Node: selector = '.instance'
              Node: unconditional_assignable_selector = '.instance'
                Node: . = '.'
                Node: identifier = 'instance'
            Node: selector = '.authStateChanges'
              Node: unconditional_assignable_selector = '.authStateChanges'
                Node: . = '.'
                Node: identifier = 'authStateChanges'
            Node: selector = '()'
              Node: argument_part = '()'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: selector = '.listen'
              Node: unconditional_assignable_selector = '.listen'
                Node: . = '.'
                Node: identifier = 'listen'
            Node: selector = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
              Node: argument_part = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
                Node: arguments = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
                  Node: ( = '('
                  Node: argument = '(firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                    Node: function_expression = '(firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                      Node: formal_parameter_list = '(firebaseUser)'
                        Node: ( = '('
                        Node: formal_parameter = 'firebaseUser'
                          Node: identifier = 'firebaseUser'
                        Node: ) = ')'
                      Node: function_expression_body = '{
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                        Node: block = '{
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                          Node: { = '{'
                          Node: if_statement = 'if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }'
                            Node: if = 'if'
                            Node: ( = '('
                            Node: equality_expression = 'firebaseUser != null'
                              Node: identifier = 'firebaseUser'
                              Node: equality_operator = '!='
                              Node: null_literal = 'null'
                                Node: null = 'null'
                            Node: ) = ')'
                            Node: block = '{
        // ユーザーがログインしている場合
        getCurrentUser();
      }'
                              Node: { = '{'
                              Node: comment = '// ユーザーがログインしている場合'
                                Node: // = '//'
                              Node: expression_statement = 'getCurrentUser();'
                                Node: identifier = 'getCurrentUser'
                                Node: selector = '()'
                                  Node: argument_part = '()'
                                    Node: arguments = '()'
                                      Node: ( = '('
                                      Node: ) = ')'
                                Node: ; = ';'
                              Node: } = '}'
                            Node: else = 'else'
                            Node: block = '{
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }'
                              Node: { = '{'
                              Node: comment = '// ユーザーがログアウトしている場合'
                                Node: // = '//'
                              Node: expression_statement = 'state = const AuthState.unauthenticated();'
                                Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                                  Node: assignable_expression = 'state'
                                    Node: identifier = 'state'
                                  Node: = = '='
                                  Node: const_object_expression = 'const AuthState.unauthenticated()'
                                    Node: const_builtin = 'const'
                                    Node: type_identifier = 'AuthState'
                                    Node: . = '.'
                                    Node: identifier = 'unauthenticated'
                                    Node: arguments = '()'
                                      Node: ( = '('
                                      Node: ) = ')'
                                Node: ; = ';'
                              Node: } = '}'
                          Node: } = '}'
                  Node: ) = ')'
            Node: ; = ';'
          Node: } = '}'
      Node: } = '}'
  Node: documentation_comment = '/// 認証状態プロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'AuthState authState(Ref ref)'
    Node: type_identifier = 'AuthState'
    Node: identifier = 'authState'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}'
    Node: block = '{
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}'
      Node: { = '{'
      Node: comment = '// 初回起動時に認証状態を監視開始'
        Node: // = '//'
      Node: expression_statement = 'ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });'
        Node: identifier = 'ref'
        Node: selector = '.listen'
          Node: unconditional_assignable_selector = '.listen'
            Node: . = '.'
            Node: identifier = 'listen'
        Node: selector = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
          Node: argument_part = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
            Node: arguments = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
              Node: ( = '('
              Node: argument = 'authNotifierProvider'
                Node: identifier = 'authNotifierProvider'
              Node: , = ','
              Node: argument = '(previous, next) {
    // 認証状態が変更された時の処理
  }'
                Node: function_expression = '(previous, next) {
    // 認証状態が変更された時の処理
  }'
                  Node: formal_parameter_list = '(previous, next)'
                    Node: ( = '('
                    Node: formal_parameter = 'previous'
                      Node: identifier = 'previous'
                    Node: , = ','
                    Node: formal_parameter = 'next'
                      Node: identifier = 'next'
                    Node: ) = ')'
                  Node: function_expression_body = '{
    // 認証状態が変更された時の処理
  }'
                    Node: block = '{
    // 認証状態が変更された時の処理
  }'
                      Node: { = '{'
                      Node: comment = '// 認証状態が変更された時の処理'
                        Node: // = '//'
                      Node: } = '}'
              Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return ref.watch(authNotifierProvider);'
        Node: return = 'return'
        Node: identifier = 'ref'
        Node: selector = '.watch'
          Node: unconditional_assignable_selector = '.watch'
            Node: . = '.'
            Node: identifier = 'watch'
        Node: selector = '(authNotifierProvider)'
          Node: argument_part = '(authNotifierProvider)'
            Node: arguments = '(authNotifierProvider)'
              Node: ( = '('
              Node: argument = 'authNotifierProvider'
                Node: identifier = 'authNotifierProvider'
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
  Node: documentation_comment = '/// 現在のユーザープロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'AppUser? currentUser(Ref ref)'
    Node: type_identifier = 'AppUser'
    Node: nullable_type = '?'
      Node: ? = '?'
    Node: identifier = 'currentUser'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}'
    Node: block = '{
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}'
      Node: { = '{'
      Node: local_variable_declaration = 'final authState = ref.watch(authStateProvider);'
        Node: initialized_variable_definition = 'final authState = ref.watch(authStateProvider)'
          Node: final_builtin = 'final'
            Node: final = 'final'
          Node: identifier = 'authState'
          Node: = = '='
          Node: identifier = 'ref'
          Node: selector = '.watch'
            Node: unconditional_assignable_selector = '.watch'
              Node: . = '.'
              Node: identifier = 'watch'
          Node: selector = '(authStateProvider)'
            Node: argument_part = '(authStateProvider)'
              Node: arguments = '(authStateProvider)'
                Node: ( = '('
                Node: argument = 'authStateProvider'
                  Node: identifier = 'authStateProvider'
                Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );'
        Node: return = 'return'
        Node: identifier = 'authState'
        Node: selector = '.when'
          Node: unconditional_assignable_selector = '.when'
            Node: . = '.'
            Node: identifier = 'when'
        Node: selector = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
          Node: argument_part = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
            Node: arguments = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
              Node: ( = '('
              Node: named_argument = 'authenticated: (user) => user'
                Node: label = 'authenticated:'
                  Node: identifier = 'authenticated'
                  Node: : = ':'
                Node: function_expression = '(user) => user'
                  Node: formal_parameter_list = '(user)'
                    Node: ( = '('
                    Node: formal_parameter = 'user'
                      Node: identifier = 'user'
                    Node: ) = ')'
                  Node: function_expression_body = '=> user'
                    Node: => = '=>'
                    Node: identifier = 'user'
              Node: , = ','
              Node: named_argument = 'initial: () => null'
                Node: label = 'initial:'
                  Node: identifier = 'initial'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'loading: () => null'
                Node: label = 'loading:'
                  Node: identifier = 'loading'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'unauthenticated: () => null'
                Node: label = 'unauthenticated:'
                  Node: identifier = 'unauthenticated'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'error: (_) => null'
                Node: label = 'error:'
                  Node: identifier = 'error'
                  Node: : = ':'
                Node: function_expression = '(_) => null'
                  Node: formal_parameter_list = '(_)'
                    Node: ( = '('
                    Node: formal_parameter = '_'
                      Node: identifier = '_'
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
  Node: documentation_comment = '/// 認証済みかどうかのプロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'bool isAuthenticated(Ref ref)'
    Node: type_identifier = 'bool'
    Node: identifier = 'isAuthenticated'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}'
    Node: block = '{
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}'
      Node: { = '{'
      Node: local_variable_declaration = 'final authState = ref.watch(authStateProvider);'
        Node: initialized_variable_definition = 'final authState = ref.watch(authStateProvider)'
          Node: final_builtin = 'final'
            Node: final = 'final'
          Node: identifier = 'authState'
          Node: = = '='
          Node: identifier = 'ref'
          Node: selector = '.watch'
            Node: unconditional_assignable_selector = '.watch'
              Node: . = '.'
              Node: identifier = 'watch'
          Node: selector = '(authStateProvider)'
            Node: argument_part = '(authStateProvider)'
              Node: arguments = '(authStateProvider)'
                Node: ( = '('
                Node: argument = 'authStateProvider'
                  Node: identifier = 'authStateProvider'
                Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );'
        Node: return = 'return'
        Node: identifier = 'authState'
        Node: selector = '.maybeWhen'
          Node: unconditional_assignable_selector = '.maybeWhen'
            Node: . = '.'
            Node: identifier = 'maybeWhen'
        Node: selector = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
          Node: argument_part = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
            Node: arguments = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
              Node: ( = '('
              Node: named_argument = 'authenticated: (_) => true'
                Node: label = 'authenticated:'
                  Node: identifier = 'authenticated'
                  Node: : = ':'
                Node: function_expression = '(_) => true'
                  Node: formal_parameter_list = '(_)'
                    Node: ( = '('
                    Node: formal_parameter = '_'
                      Node: identifier = '_'
                    Node: ) = ')'
                  Node: function_expression_body = '=> true'
                    Node: => = '=>'
                    Node: true = 'true'
                      Node: true = 'true'
              Node: , = ','
              Node: named_argument = 'orElse: () => false'
                Node: label = 'orElse:'
                  Node: identifier = 'orElse'
                  Node: : = ':'
                Node: function_expression = '() => false'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> false'
                    Node: => = '=>'
                    Node: false = 'false'
                      Node: false = 'false'
              Node: , = ','
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
=== End AST ===

=== Complete AST for test_flutter_app/aminomi/lib/providers/auth_provider.dart ===
Node: program = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;
import 'package:riverpod/riverpod.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import '../models/user.dart';
import '../services/line_auth_service.dart';

part 'auth_provider.g.dart';

@riverpod
class AuthNotifier extends _$AuthNotifier {
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}

/// 認証状態プロバイダー
@riverpod
AuthState authState(Ref ref) {
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}

/// 現在のユーザープロバイダー
@riverpod
AppUser? currentUser(Ref ref) {
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}

/// 認証済みかどうかのプロバイダー
@riverpod
bool isAuthenticated(Ref ref) {
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}
'
  Node: import_or_export = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
    Node: library_import = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
      Node: import_specification = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
        Node: import = 'import'
        Node: configurable_uri = ''package:firebase_auth/firebase_auth.dart''
          Node: uri = ''package:firebase_auth/firebase_auth.dart''
            Node: string_literal = ''package:firebase_auth/firebase_auth.dart''
              Node: ' = '''
              Node: ' = '''
        Node: as = 'as'
        Node: identifier = 'firebase_auth'
        Node: ; = ';'
  Node: import_or_export = 'import 'package:riverpod/riverpod.dart';'
    Node: library_import = 'import 'package:riverpod/riverpod.dart';'
      Node: import_specification = 'import 'package:riverpod/riverpod.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:riverpod/riverpod.dart''
          Node: uri = ''package:riverpod/riverpod.dart''
            Node: string_literal = ''package:riverpod/riverpod.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
    Node: library_import = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
      Node: import_specification = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:riverpod_annotation/riverpod_annotation.dart''
          Node: uri = ''package:riverpod_annotation/riverpod_annotation.dart''
            Node: string_literal = ''package:riverpod_annotation/riverpod_annotation.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import '../models/user.dart';'
    Node: library_import = 'import '../models/user.dart';'
      Node: import_specification = 'import '../models/user.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''../models/user.dart''
          Node: uri = ''../models/user.dart''
            Node: string_literal = ''../models/user.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import '../services/line_auth_service.dart';'
    Node: library_import = 'import '../services/line_auth_service.dart';'
      Node: import_specification = 'import '../services/line_auth_service.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''../services/line_auth_service.dart''
          Node: uri = ''../services/line_auth_service.dart''
            Node: string_literal = ''../services/line_auth_service.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: part_directive = 'part 'auth_provider.g.dart';'
    Node: part = 'part'
    Node: uri = ''auth_provider.g.dart''
      Node: string_literal = ''auth_provider.g.dart''
        Node: ' = '''
        Node: ' = '''
    Node: ; = ';'
  Node: class_definition = '@riverpod
class AuthNotifier extends _$AuthNotifier {
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}'
    Node: annotation = '@riverpod'
      Node: @ = '@'
      Node: identifier = 'riverpod'
    Node: class = 'class'
    Node: identifier = 'AuthNotifier'
    Node: superclass = 'extends _$AuthNotifier'
      Node: extends = 'extends'
      Node: type_identifier = '_$AuthNotifier'
    Node: class_body = '{
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}'
      Node: { = '{'
      Node: annotation = '@override'
        Node: @ = '@'
        Node: identifier = 'override'
      Node: method_signature = 'AuthState build()'
        Node: function_signature = 'AuthState build()'
          Node: type_identifier = 'AuthState'
          Node: identifier = 'build'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = '{
    return const AuthState.initial();
  }'
        Node: block = '{
    return const AuthState.initial();
  }'
          Node: { = '{'
          Node: return_statement = 'return const AuthState.initial();'
            Node: return = 'return'
            Node: const_object_expression = 'const AuthState.initial()'
              Node: const_builtin = 'const'
              Node: type_identifier = 'AuthState'
              Node: . = '.'
              Node: identifier = 'initial'
              Node: arguments = '()'
                Node: ( = '('
                Node: ) = ')'
            Node: ; = ';'
          Node: } = '}'
      Node: documentation_comment = '/// LINEログイン'
        Node: /// = '///'
      Node: method_signature = 'Future<void> signInWithLine()'
        Node: function_signature = 'Future<void> signInWithLine()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'signInWithLine'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: expression_statement = 'state = const AuthState.loading();'
            Node: assignment_expression = 'state = const AuthState.loading()'
              Node: assignable_expression = 'state'
                Node: identifier = 'state'
              Node: = = '='
              Node: const_object_expression = 'const AuthState.loading()'
                Node: const_builtin = 'const'
                Node: type_identifier = 'AuthState'
                Node: . = '.'
                Node: identifier = 'loading'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: ; = ';'
          Node: try_statement = 'try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    }'
              Node: { = '{'
              Node: local_variable_declaration = 'final result = await LineAuthService.login();'
                Node: initialized_variable_definition = 'final result = await LineAuthService.login()'
                  Node: final_builtin = 'final'
                    Node: final = 'final'
                  Node: identifier = 'result'
                  Node: = = '='
                  Node: unary_expression = 'await LineAuthService.login()'
                    Node: await_expression = 'await LineAuthService.login()'
                      Node: await = 'await'
                      Node: identifier = 'LineAuthService'
                      Node: selector = '.login'
                        Node: unconditional_assignable_selector = '.login'
                          Node: . = '.'
                          Node: identifier = 'login'
                      Node: selector = '()'
                        Node: argument_part = '()'
                          Node: arguments = '()'
                            Node: ( = '('
                            Node: ) = ')'
                Node: ; = ';'
              Node: if_statement = 'if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }'
                Node: if = 'if'
                Node: ( = '('
                Node: equality_expression = 'result != null'
                  Node: identifier = 'result'
                  Node: equality_operator = '!='
                  Node: null_literal = 'null'
                    Node: null = 'null'
                Node: ) = ')'
                Node: block = '{
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      }'
                  Node: { = '{'
                  Node: comment = '// Firebaseカスタムトークンでサインイン'
                    Node: // = '//'
                  Node: local_variable_declaration = 'final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );'
                    Node: initialized_variable_definition = 'final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                      Node: final_builtin = 'final'
                        Node: final = 'final'
                      Node: identifier = 'userCredential'
                      Node: = = '='
                      Node: unary_expression = 'await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                        Node: await_expression = 'await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                          Node: await = 'await'
                          Node: identifier = 'firebase_auth'
                          Node: selector = '.FirebaseAuth'
                            Node: unconditional_assignable_selector = '.FirebaseAuth'
                              Node: . = '.'
                              Node: identifier = 'FirebaseAuth'
                          Node: selector = '.instance'
                            Node: unconditional_assignable_selector = '.instance'
                              Node: . = '.'
                              Node: identifier = 'instance'
                          Node: selector = '.signInWithCustomToken'
                            Node: unconditional_assignable_selector = '.signInWithCustomToken'
                              Node: . = '.'
                              Node: identifier = 'signInWithCustomToken'
                          Node: selector = '(
          result.accessToken,
        )'
                            Node: argument_part = '(
          result.accessToken,
        )'
                              Node: arguments = '(
          result.accessToken,
        )'
                                Node: ( = '('
                                Node: argument = 'result.accessToken'
                                  Node: identifier = 'result'
                                  Node: selector = '.accessToken'
                                    Node: unconditional_assignable_selector = '.accessToken'
                                      Node: . = '.'
                                      Node: identifier = 'accessToken'
                                Node: , = ','
                                Node: ) = ')'
                    Node: ; = ';'
                  Node: if_statement = 'if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }'
                    Node: if = 'if'
                    Node: ( = '('
                    Node: equality_expression = 'userCredential.user != null'
                      Node: identifier = 'userCredential'
                      Node: selector = '.user'
                        Node: unconditional_assignable_selector = '.user'
                          Node: . = '.'
                          Node: identifier = 'user'
                      Node: equality_operator = '!='
                      Node: null_literal = 'null'
                        Node: null = 'null'
                    Node: ) = ')'
                    Node: block = '{
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        }'
                      Node: { = '{'
                      Node: local_variable_declaration = 'final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );'
                        Node: initialized_variable_definition = 'final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                          Node: final_builtin = 'final'
                            Node: final = 'final'
                          Node: identifier = 'user'
                          Node: = = '='
                          Node: identifier = 'AppUser'
                          Node: selector = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                            Node: argument_part = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                              Node: arguments = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                                Node: ( = '('
                                Node: named_argument = 'id: userCredential.user!.uid'
                                  Node: label = 'id:'
                                    Node: identifier = 'id'
                                    Node: : = ':'
                                  Node: identifier = 'userCredential'
                                  Node: selector = '.user'
                                    Node: unconditional_assignable_selector = '.user'
                                      Node: . = '.'
                                      Node: identifier = 'user'
                                  Node: selector = '!'
                                    Node: ! = '!'
                                  Node: selector = '.uid'
                                    Node: unconditional_assignable_selector = '.uid'
                                      Node: . = '.'
                                      Node: identifier = 'uid'
                                Node: , = ','
                                Node: named_argument = 'displayName: result.profile.displayName'
                                  Node: label = 'displayName:'
                                    Node: identifier = 'displayName'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.displayName'
                                    Node: unconditional_assignable_selector = '.displayName'
                                      Node: . = '.'
                                      Node: identifier = 'displayName'
                                Node: , = ','
                                Node: named_argument = 'photoURL: result.profile.pictureUrl'
                                  Node: label = 'photoURL:'
                                    Node: identifier = 'photoURL'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.pictureUrl'
                                    Node: unconditional_assignable_selector = '.pictureUrl'
                                      Node: . = '.'
                                      Node: identifier = 'pictureUrl'
                                Node: , = ','
                                Node: named_argument = 'statusMessage: result.profile.statusMessage'
                                  Node: label = 'statusMessage:'
                                    Node: identifier = 'statusMessage'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.statusMessage'
                                    Node: unconditional_assignable_selector = '.statusMessage'
                                      Node: . = '.'
                                      Node: identifier = 'statusMessage'
                                Node: , = ','
                                Node: named_argument = 'provider: 'line''
                                  Node: label = 'provider:'
                                    Node: identifier = 'provider'
                                    Node: : = ':'
                                  Node: string_literal = ''line''
                                    Node: ' = '''
                                    Node: ' = '''
                                Node: , = ','
                                Node: named_argument = 'createdAt: DateTime.now()'
                                  Node: label = 'createdAt:'
                                    Node: identifier = 'createdAt'
                                    Node: : = ':'
                                  Node: identifier = 'DateTime'
                                  Node: selector = '.now'
                                    Node: unconditional_assignable_selector = '.now'
                                      Node: . = '.'
                                      Node: identifier = 'now'
                                  Node: selector = '()'
                                    Node: argument_part = '()'
                                      Node: arguments = '()'
                                        Node: ( = '('
                                        Node: ) = ')'
                                Node: , = ','
                                Node: ) = ')'
                        Node: ; = ';'
                      Node: expression_statement = 'state = AuthState.authenticated(user);'
                        Node: assignment_expression = 'state = AuthState.authenticated(user)'
                          Node: assignable_expression = 'state'
                            Node: identifier = 'state'
                          Node: = = '='
                          Node: identifier = 'AuthState'
                          Node: selector = '.authenticated'
                            Node: unconditional_assignable_selector = '.authenticated'
                              Node: . = '.'
                              Node: identifier = 'authenticated'
                          Node: selector = '(user)'
                            Node: argument_part = '(user)'
                              Node: arguments = '(user)'
                                Node: ( = '('
                                Node: argument = 'user'
                                  Node: identifier = 'user'
                                Node: ) = ')'
                        Node: ; = ';'
                      Node: } = '}'
                    Node: else = 'else'
                    Node: block = '{
          state = const AuthState.error('Failed to sign in with custom token');
        }'
                      Node: { = '{'
                      Node: expression_statement = 'state = const AuthState.error('Failed to sign in with custom token');'
                        Node: assignment_expression = 'state = const AuthState.error('Failed to sign in with custom token')'
                          Node: assignable_expression = 'state'
                            Node: identifier = 'state'
                          Node: = = '='
                          Node: const_object_expression = 'const AuthState.error('Failed to sign in with custom token')'
                            Node: const_builtin = 'const'
                            Node: type_identifier = 'AuthState'
                            Node: . = '.'
                            Node: identifier = 'error'
                            Node: arguments = '('Failed to sign in with custom token')'
                              Node: ( = '('
                              Node: argument = ''Failed to sign in with custom token''
                                Node: string_literal = ''Failed to sign in with custom token''
                                  Node: ' = '''
                                  Node: ' = '''
                              Node: ) = ')'
                        Node: ; = ';'
                      Node: } = '}'
                  Node: } = '}'
                Node: else = 'else'
                Node: block = '{
        state = const AuthState.error('LINE login failed');
      }'
                  Node: { = '{'
                  Node: expression_statement = 'state = const AuthState.error('LINE login failed');'
                    Node: assignment_expression = 'state = const AuthState.error('LINE login failed')'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: const_object_expression = 'const AuthState.error('LINE login failed')'
                        Node: const_builtin = 'const'
                        Node: type_identifier = 'AuthState'
                        Node: . = '.'
                        Node: identifier = 'error'
                        Node: arguments = '('LINE login failed')'
                          Node: ( = '('
                          Node: argument = ''LINE login failed''
                            Node: string_literal = ''LINE login failed''
                              Node: ' = '''
                              Node: ' = '''
                          Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// ログアウト'
        Node: /// = '///'
      Node: method_signature = 'Future<void> signOut()'
        Node: function_signature = 'Future<void> signOut()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'signOut'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: try_statement = 'try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    }'
              Node: { = '{'
              Node: expression_statement = 'await firebase_auth.FirebaseAuth.instance.signOut();'
                Node: unary_expression = 'await firebase_auth.FirebaseAuth.instance.signOut()'
                  Node: await_expression = 'await firebase_auth.FirebaseAuth.instance.signOut()'
                    Node: await = 'await'
                    Node: identifier = 'firebase_auth'
                    Node: selector = '.FirebaseAuth'
                      Node: unconditional_assignable_selector = '.FirebaseAuth'
                        Node: . = '.'
                        Node: identifier = 'FirebaseAuth'
                    Node: selector = '.instance'
                      Node: unconditional_assignable_selector = '.instance'
                        Node: . = '.'
                        Node: identifier = 'instance'
                    Node: selector = '.signOut'
                      Node: unconditional_assignable_selector = '.signOut'
                        Node: . = '.'
                        Node: identifier = 'signOut'
                    Node: selector = '()'
                      Node: argument_part = '()'
                        Node: arguments = '()'
                          Node: ( = '('
                          Node: ) = ')'
                Node: ; = ';'
              Node: expression_statement = 'state = const AuthState.unauthenticated();'
                Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: const_object_expression = 'const AuthState.unauthenticated()'
                    Node: const_builtin = 'const'
                    Node: type_identifier = 'AuthState'
                    Node: . = '.'
                    Node: identifier = 'unauthenticated'
                    Node: arguments = '()'
                      Node: ( = '('
                      Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// 現在のユーザーを取得'
        Node: /// = '///'
      Node: method_signature = 'Future<void> getCurrentUser()'
        Node: function_signature = 'Future<void> getCurrentUser()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'getCurrentUser'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: expression_statement = 'state = const AuthState.loading();'
            Node: assignment_expression = 'state = const AuthState.loading()'
              Node: assignable_expression = 'state'
                Node: identifier = 'state'
              Node: = = '='
              Node: const_object_expression = 'const AuthState.loading()'
                Node: const_builtin = 'const'
                Node: type_identifier = 'AuthState'
                Node: . = '.'
                Node: identifier = 'loading'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: ; = ';'
          Node: try_statement = 'try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    }'
              Node: { = '{'
              Node: local_variable_declaration = 'final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;'
                Node: initialized_variable_definition = 'final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser'
                  Node: final_builtin = 'final'
                    Node: final = 'final'
                  Node: identifier = 'firebaseUser'
                  Node: = = '='
                  Node: identifier = 'firebase_auth'
                  Node: selector = '.FirebaseAuth'
                    Node: unconditional_assignable_selector = '.FirebaseAuth'
                      Node: . = '.'
                      Node: identifier = 'FirebaseAuth'
                  Node: selector = '.instance'
                    Node: unconditional_assignable_selector = '.instance'
                      Node: . = '.'
                      Node: identifier = 'instance'
                  Node: selector = '.currentUser'
                    Node: unconditional_assignable_selector = '.currentUser'
                      Node: . = '.'
                      Node: identifier = 'currentUser'
                Node: ; = ';'
              Node: if_statement = 'if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }'
                Node: if = 'if'
                Node: ( = '('
                Node: equality_expression = 'firebaseUser != null'
                  Node: identifier = 'firebaseUser'
                  Node: equality_operator = '!='
                  Node: null_literal = 'null'
                    Node: null = 'null'
                Node: ) = ')'
                Node: block = '{
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      }'
                  Node: { = '{'
                  Node: comment = '// Firestoreからユーザー情報を取得'
                    Node: // = '//'
                  Node: comment = '// TODO: FirestoreServiceを使用してユーザー情報を取得'
                    Node: // = '//'
                  Node: local_variable_declaration = 'final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );'
                    Node: initialized_variable_definition = 'final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                      Node: final_builtin = 'final'
                        Node: final = 'final'
                      Node: identifier = 'user'
                      Node: = = '='
                      Node: identifier = 'AppUser'
                      Node: selector = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                        Node: argument_part = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                          Node: arguments = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                            Node: ( = '('
                            Node: named_argument = 'id: firebaseUser.uid'
                              Node: label = 'id:'
                                Node: identifier = 'id'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.uid'
                                Node: unconditional_assignable_selector = '.uid'
                                  Node: . = '.'
                                  Node: identifier = 'uid'
                            Node: , = ','
                            Node: named_argument = 'displayName: firebaseUser.displayName ?? 'Unknown User''
                              Node: label = 'displayName:'
                                Node: identifier = 'displayName'
                                Node: : = ':'
                              Node: if_null_expression = 'firebaseUser.displayName ?? 'Unknown User''
                                Node: identifier = 'firebaseUser'
                                Node: selector = '.displayName'
                                  Node: unconditional_assignable_selector = '.displayName'
                                    Node: . = '.'
                                    Node: identifier = 'displayName'
                                Node: ?? = '??'
                                Node: string_literal = ''Unknown User''
                                  Node: ' = '''
                                  Node: ' = '''
                            Node: , = ','
                            Node: named_argument = 'email: firebaseUser.email'
                              Node: label = 'email:'
                                Node: identifier = 'email'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.email'
                                Node: unconditional_assignable_selector = '.email'
                                  Node: . = '.'
                                  Node: identifier = 'email'
                            Node: , = ','
                            Node: named_argument = 'photoURL: firebaseUser.photoURL'
                              Node: label = 'photoURL:'
                                Node: identifier = 'photoURL'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.photoURL'
                                Node: unconditional_assignable_selector = '.photoURL'
                                  Node: . = '.'
                                  Node: identifier = 'photoURL'
                            Node: , = ','
                            Node: named_argument = 'provider: 'line''
                              Node: label = 'provider:'
                                Node: identifier = 'provider'
                                Node: : = ':'
                              Node: string_literal = ''line''
                                Node: ' = '''
                                Node: ' = '''
                            Node: , = ','
                            Node: ) = ')'
                    Node: ; = ';'
                  Node: expression_statement = 'state = AuthState.authenticated(user);'
                    Node: assignment_expression = 'state = AuthState.authenticated(user)'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: identifier = 'AuthState'
                      Node: selector = '.authenticated'
                        Node: unconditional_assignable_selector = '.authenticated'
                          Node: . = '.'
                          Node: identifier = 'authenticated'
                      Node: selector = '(user)'
                        Node: argument_part = '(user)'
                          Node: arguments = '(user)'
                            Node: ( = '('
                            Node: argument = 'user'
                              Node: identifier = 'user'
                            Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
                Node: else = 'else'
                Node: block = '{
        state = const AuthState.unauthenticated();
      }'
                  Node: { = '{'
                  Node: expression_statement = 'state = const AuthState.unauthenticated();'
                    Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: const_object_expression = 'const AuthState.unauthenticated()'
                        Node: const_builtin = 'const'
                        Node: type_identifier = 'AuthState'
                        Node: . = '.'
                        Node: identifier = 'unauthenticated'
                        Node: arguments = '()'
                          Node: ( = '('
                          Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// 認証状態の監視'
        Node: /// = '///'
      Node: method_signature = 'void listenToAuthChanges()'
        Node: function_signature = 'void listenToAuthChanges()'
          Node: void_type = 'void'
          Node: identifier = 'listenToAuthChanges'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = '{
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }'
        Node: block = '{
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }'
          Node: { = '{'
          Node: expression_statement = 'firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });'
            Node: identifier = 'firebase_auth'
            Node: selector = '.FirebaseAuth'
              Node: unconditional_assignable_selector = '.FirebaseAuth'
                Node: . = '.'
                Node: identifier = 'FirebaseAuth'
            Node: selector = '.instance'
              Node: unconditional_assignable_selector = '.instance'
                Node: . = '.'
                Node: identifier = 'instance'
            Node: selector = '.authStateChanges'
              Node: unconditional_assignable_selector = '.authStateChanges'
                Node: . = '.'
                Node: identifier = 'authStateChanges'
            Node: selector = '()'
              Node: argument_part = '()'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: selector = '.listen'
              Node: unconditional_assignable_selector = '.listen'
                Node: . = '.'
                Node: identifier = 'listen'
            Node: selector = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
              Node: argument_part = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
                Node: arguments = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
                  Node: ( = '('
                  Node: argument = '(firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                    Node: function_expression = '(firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                      Node: formal_parameter_list = '(firebaseUser)'
                        Node: ( = '('
                        Node: formal_parameter = 'firebaseUser'
                          Node: identifier = 'firebaseUser'
                        Node: ) = ')'
                      Node: function_expression_body = '{
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                        Node: block = '{
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                          Node: { = '{'
                          Node: if_statement = 'if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }'
                            Node: if = 'if'
                            Node: ( = '('
                            Node: equality_expression = 'firebaseUser != null'
                              Node: identifier = 'firebaseUser'
                              Node: equality_operator = '!='
                              Node: null_literal = 'null'
                                Node: null = 'null'
                            Node: ) = ')'
                            Node: block = '{
        // ユーザーがログインしている場合
        getCurrentUser();
      }'
                              Node: { = '{'
                              Node: comment = '// ユーザーがログインしている場合'
                                Node: // = '//'
                              Node: expression_statement = 'getCurrentUser();'
                                Node: identifier = 'getCurrentUser'
                                Node: selector = '()'
                                  Node: argument_part = '()'
                                    Node: arguments = '()'
                                      Node: ( = '('
                                      Node: ) = ')'
                                Node: ; = ';'
                              Node: } = '}'
                            Node: else = 'else'
                            Node: block = '{
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }'
                              Node: { = '{'
                              Node: comment = '// ユーザーがログアウトしている場合'
                                Node: // = '//'
                              Node: expression_statement = 'state = const AuthState.unauthenticated();'
                                Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                                  Node: assignable_expression = 'state'
                                    Node: identifier = 'state'
                                  Node: = = '='
                                  Node: const_object_expression = 'const AuthState.unauthenticated()'
                                    Node: const_builtin = 'const'
                                    Node: type_identifier = 'AuthState'
                                    Node: . = '.'
                                    Node: identifier = 'unauthenticated'
                                    Node: arguments = '()'
                                      Node: ( = '('
                                      Node: ) = ')'
                                Node: ; = ';'
                              Node: } = '}'
                          Node: } = '}'
                  Node: ) = ')'
            Node: ; = ';'
          Node: } = '}'
      Node: } = '}'
  Node: documentation_comment = '/// 認証状態プロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'AuthState authState(Ref ref)'
    Node: type_identifier = 'AuthState'
    Node: identifier = 'authState'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}'
    Node: block = '{
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}'
      Node: { = '{'
      Node: comment = '// 初回起動時に認証状態を監視開始'
        Node: // = '//'
      Node: expression_statement = 'ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });'
        Node: identifier = 'ref'
        Node: selector = '.listen'
          Node: unconditional_assignable_selector = '.listen'
            Node: . = '.'
            Node: identifier = 'listen'
        Node: selector = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
          Node: argument_part = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
            Node: arguments = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
              Node: ( = '('
              Node: argument = 'authNotifierProvider'
                Node: identifier = 'authNotifierProvider'
              Node: , = ','
              Node: argument = '(previous, next) {
    // 認証状態が変更された時の処理
  }'
                Node: function_expression = '(previous, next) {
    // 認証状態が変更された時の処理
  }'
                  Node: formal_parameter_list = '(previous, next)'
                    Node: ( = '('
                    Node: formal_parameter = 'previous'
                      Node: identifier = 'previous'
                    Node: , = ','
                    Node: formal_parameter = 'next'
                      Node: identifier = 'next'
                    Node: ) = ')'
                  Node: function_expression_body = '{
    // 認証状態が変更された時の処理
  }'
                    Node: block = '{
    // 認証状態が変更された時の処理
  }'
                      Node: { = '{'
                      Node: comment = '// 認証状態が変更された時の処理'
                        Node: // = '//'
                      Node: } = '}'
              Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return ref.watch(authNotifierProvider);'
        Node: return = 'return'
        Node: identifier = 'ref'
        Node: selector = '.watch'
          Node: unconditional_assignable_selector = '.watch'
            Node: . = '.'
            Node: identifier = 'watch'
        Node: selector = '(authNotifierProvider)'
          Node: argument_part = '(authNotifierProvider)'
            Node: arguments = '(authNotifierProvider)'
              Node: ( = '('
              Node: argument = 'authNotifierProvider'
                Node: identifier = 'authNotifierProvider'
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
  Node: documentation_comment = '/// 現在のユーザープロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'AppUser? currentUser(Ref ref)'
    Node: type_identifier = 'AppUser'
    Node: nullable_type = '?'
      Node: ? = '?'
    Node: identifier = 'currentUser'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}'
    Node: block = '{
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}'
      Node: { = '{'
      Node: local_variable_declaration = 'final authState = ref.watch(authStateProvider);'
        Node: initialized_variable_definition = 'final authState = ref.watch(authStateProvider)'
          Node: final_builtin = 'final'
            Node: final = 'final'
          Node: identifier = 'authState'
          Node: = = '='
          Node: identifier = 'ref'
          Node: selector = '.watch'
            Node: unconditional_assignable_selector = '.watch'
              Node: . = '.'
              Node: identifier = 'watch'
          Node: selector = '(authStateProvider)'
            Node: argument_part = '(authStateProvider)'
              Node: arguments = '(authStateProvider)'
                Node: ( = '('
                Node: argument = 'authStateProvider'
                  Node: identifier = 'authStateProvider'
                Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );'
        Node: return = 'return'
        Node: identifier = 'authState'
        Node: selector = '.when'
          Node: unconditional_assignable_selector = '.when'
            Node: . = '.'
            Node: identifier = 'when'
        Node: selector = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
          Node: argument_part = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
            Node: arguments = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
              Node: ( = '('
              Node: named_argument = 'authenticated: (user) => user'
                Node: label = 'authenticated:'
                  Node: identifier = 'authenticated'
                  Node: : = ':'
                Node: function_expression = '(user) => user'
                  Node: formal_parameter_list = '(user)'
                    Node: ( = '('
                    Node: formal_parameter = 'user'
                      Node: identifier = 'user'
                    Node: ) = ')'
                  Node: function_expression_body = '=> user'
                    Node: => = '=>'
                    Node: identifier = 'user'
              Node: , = ','
              Node: named_argument = 'initial: () => null'
                Node: label = 'initial:'
                  Node: identifier = 'initial'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'loading: () => null'
                Node: label = 'loading:'
                  Node: identifier = 'loading'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'unauthenticated: () => null'
                Node: label = 'unauthenticated:'
                  Node: identifier = 'unauthenticated'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'error: (_) => null'
                Node: label = 'error:'
                  Node: identifier = 'error'
                  Node: : = ':'
                Node: function_expression = '(_) => null'
                  Node: formal_parameter_list = '(_)'
                    Node: ( = '('
                    Node: formal_parameter = '_'
                      Node: identifier = '_'
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
  Node: documentation_comment = '/// 認証済みかどうかのプロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'bool isAuthenticated(Ref ref)'
    Node: type_identifier = 'bool'
    Node: identifier = 'isAuthenticated'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}'
    Node: block = '{
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}'
      Node: { = '{'
      Node: local_variable_declaration = 'final authState = ref.watch(authStateProvider);'
        Node: initialized_variable_definition = 'final authState = ref.watch(authStateProvider)'
          Node: final_builtin = 'final'
            Node: final = 'final'
          Node: identifier = 'authState'
          Node: = = '='
          Node: identifier = 'ref'
          Node: selector = '.watch'
            Node: unconditional_assignable_selector = '.watch'
              Node: . = '.'
              Node: identifier = 'watch'
          Node: selector = '(authStateProvider)'
            Node: argument_part = '(authStateProvider)'
              Node: arguments = '(authStateProvider)'
                Node: ( = '('
                Node: argument = 'authStateProvider'
                  Node: identifier = 'authStateProvider'
                Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );'
        Node: return = 'return'
        Node: identifier = 'authState'
        Node: selector = '.maybeWhen'
          Node: unconditional_assignable_selector = '.maybeWhen'
            Node: . = '.'
            Node: identifier = 'maybeWhen'
        Node: selector = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
          Node: argument_part = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
            Node: arguments = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
              Node: ( = '('
              Node: named_argument = 'authenticated: (_) => true'
                Node: label = 'authenticated:'
                  Node: identifier = 'authenticated'
                  Node: : = ':'
                Node: function_expression = '(_) => true'
                  Node: formal_parameter_list = '(_)'
                    Node: ( = '('
                    Node: formal_parameter = '_'
                      Node: identifier = '_'
                    Node: ) = ')'
                  Node: function_expression_body = '=> true'
                    Node: => = '=>'
                    Node: true = 'true'
                      Node: true = 'true'
              Node: , = ','
              Node: named_argument = 'orElse: () => false'
                Node: label = 'orElse:'
                  Node: identifier = 'orElse'
                  Node: : = ':'
                Node: function_expression = '() => false'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> false'
                    Node: => = '=>'
                    Node: false = 'false'
                      Node: false = 'false'
              Node: , = ','
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
=== End AST ===

=== Complete AST for test_flutter_app/aminomi/lib/providers/auth_provider.dart ===
Node: program = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;
import 'package:riverpod/riverpod.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import '../models/user.dart';
import '../services/line_auth_service.dart';

part 'auth_provider.g.dart';

@riverpod
class AuthNotifier extends _$AuthNotifier {
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}

/// 認証状態プロバイダー
@riverpod
AuthState authState(Ref ref) {
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}

/// 現在のユーザープロバイダー
@riverpod
AppUser? currentUser(Ref ref) {
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}

/// 認証済みかどうかのプロバイダー
@riverpod
bool isAuthenticated(Ref ref) {
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}
'
  Node: import_or_export = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
    Node: library_import = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
      Node: import_specification = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
        Node: import = 'import'
        Node: configurable_uri = ''package:firebase_auth/firebase_auth.dart''
          Node: uri = ''package:firebase_auth/firebase_auth.dart''
            Node: string_literal = ''package:firebase_auth/firebase_auth.dart''
              Node: ' = '''
              Node: ' = '''
        Node: as = 'as'
        Node: identifier = 'firebase_auth'
        Node: ; = ';'
  Node: import_or_export = 'import 'package:riverpod/riverpod.dart';'
    Node: library_import = 'import 'package:riverpod/riverpod.dart';'
      Node: import_specification = 'import 'package:riverpod/riverpod.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:riverpod/riverpod.dart''
          Node: uri = ''package:riverpod/riverpod.dart''
            Node: string_literal = ''package:riverpod/riverpod.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
    Node: library_import = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
      Node: import_specification = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:riverpod_annotation/riverpod_annotation.dart''
          Node: uri = ''package:riverpod_annotation/riverpod_annotation.dart''
            Node: string_literal = ''package:riverpod_annotation/riverpod_annotation.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import '../models/user.dart';'
    Node: library_import = 'import '../models/user.dart';'
      Node: import_specification = 'import '../models/user.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''../models/user.dart''
          Node: uri = ''../models/user.dart''
            Node: string_literal = ''../models/user.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import '../services/line_auth_service.dart';'
    Node: library_import = 'import '../services/line_auth_service.dart';'
      Node: import_specification = 'import '../services/line_auth_service.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''../services/line_auth_service.dart''
          Node: uri = ''../services/line_auth_service.dart''
            Node: string_literal = ''../services/line_auth_service.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: part_directive = 'part 'auth_provider.g.dart';'
    Node: part = 'part'
    Node: uri = ''auth_provider.g.dart''
      Node: string_literal = ''auth_provider.g.dart''
        Node: ' = '''
        Node: ' = '''
    Node: ; = ';'
  Node: class_definition = '@riverpod
class AuthNotifier extends _$AuthNotifier {
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}'
    Node: annotation = '@riverpod'
      Node: @ = '@'
      Node: identifier = 'riverpod'
    Node: class = 'class'
    Node: identifier = 'AuthNotifier'
    Node: superclass = 'extends _$AuthNotifier'
      Node: extends = 'extends'
      Node: type_identifier = '_$AuthNotifier'
    Node: class_body = '{
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}'
      Node: { = '{'
      Node: annotation = '@override'
        Node: @ = '@'
        Node: identifier = 'override'
      Node: method_signature = 'AuthState build()'
        Node: function_signature = 'AuthState build()'
          Node: type_identifier = 'AuthState'
          Node: identifier = 'build'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = '{
    return const AuthState.initial();
  }'
        Node: block = '{
    return const AuthState.initial();
  }'
          Node: { = '{'
          Node: return_statement = 'return const AuthState.initial();'
            Node: return = 'return'
            Node: const_object_expression = 'const AuthState.initial()'
              Node: const_builtin = 'const'
              Node: type_identifier = 'AuthState'
              Node: . = '.'
              Node: identifier = 'initial'
              Node: arguments = '()'
                Node: ( = '('
                Node: ) = ')'
            Node: ; = ';'
          Node: } = '}'
      Node: documentation_comment = '/// LINEログイン'
        Node: /// = '///'
      Node: method_signature = 'Future<void> signInWithLine()'
        Node: function_signature = 'Future<void> signInWithLine()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'signInWithLine'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: expression_statement = 'state = const AuthState.loading();'
            Node: assignment_expression = 'state = const AuthState.loading()'
              Node: assignable_expression = 'state'
                Node: identifier = 'state'
              Node: = = '='
              Node: const_object_expression = 'const AuthState.loading()'
                Node: const_builtin = 'const'
                Node: type_identifier = 'AuthState'
                Node: . = '.'
                Node: identifier = 'loading'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: ; = ';'
          Node: try_statement = 'try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    }'
              Node: { = '{'
              Node: local_variable_declaration = 'final result = await LineAuthService.login();'
                Node: initialized_variable_definition = 'final result = await LineAuthService.login()'
                  Node: final_builtin = 'final'
                    Node: final = 'final'
                  Node: identifier = 'result'
                  Node: = = '='
                  Node: unary_expression = 'await LineAuthService.login()'
                    Node: await_expression = 'await LineAuthService.login()'
                      Node: await = 'await'
                      Node: identifier = 'LineAuthService'
                      Node: selector = '.login'
                        Node: unconditional_assignable_selector = '.login'
                          Node: . = '.'
                          Node: identifier = 'login'
                      Node: selector = '()'
                        Node: argument_part = '()'
                          Node: arguments = '()'
                            Node: ( = '('
                            Node: ) = ')'
                Node: ; = ';'
              Node: if_statement = 'if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }'
                Node: if = 'if'
                Node: ( = '('
                Node: equality_expression = 'result != null'
                  Node: identifier = 'result'
                  Node: equality_operator = '!='
                  Node: null_literal = 'null'
                    Node: null = 'null'
                Node: ) = ')'
                Node: block = '{
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      }'
                  Node: { = '{'
                  Node: comment = '// Firebaseカスタムトークンでサインイン'
                    Node: // = '//'
                  Node: local_variable_declaration = 'final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );'
                    Node: initialized_variable_definition = 'final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                      Node: final_builtin = 'final'
                        Node: final = 'final'
                      Node: identifier = 'userCredential'
                      Node: = = '='
                      Node: unary_expression = 'await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                        Node: await_expression = 'await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                          Node: await = 'await'
                          Node: identifier = 'firebase_auth'
                          Node: selector = '.FirebaseAuth'
                            Node: unconditional_assignable_selector = '.FirebaseAuth'
                              Node: . = '.'
                              Node: identifier = 'FirebaseAuth'
                          Node: selector = '.instance'
                            Node: unconditional_assignable_selector = '.instance'
                              Node: . = '.'
                              Node: identifier = 'instance'
                          Node: selector = '.signInWithCustomToken'
                            Node: unconditional_assignable_selector = '.signInWithCustomToken'
                              Node: . = '.'
                              Node: identifier = 'signInWithCustomToken'
                          Node: selector = '(
          result.accessToken,
        )'
                            Node: argument_part = '(
          result.accessToken,
        )'
                              Node: arguments = '(
          result.accessToken,
        )'
                                Node: ( = '('
                                Node: argument = 'result.accessToken'
                                  Node: identifier = 'result'
                                  Node: selector = '.accessToken'
                                    Node: unconditional_assignable_selector = '.accessToken'
                                      Node: . = '.'
                                      Node: identifier = 'accessToken'
                                Node: , = ','
                                Node: ) = ')'
                    Node: ; = ';'
                  Node: if_statement = 'if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }'
                    Node: if = 'if'
                    Node: ( = '('
                    Node: equality_expression = 'userCredential.user != null'
                      Node: identifier = 'userCredential'
                      Node: selector = '.user'
                        Node: unconditional_assignable_selector = '.user'
                          Node: . = '.'
                          Node: identifier = 'user'
                      Node: equality_operator = '!='
                      Node: null_literal = 'null'
                        Node: null = 'null'
                    Node: ) = ')'
                    Node: block = '{
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        }'
                      Node: { = '{'
                      Node: local_variable_declaration = 'final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );'
                        Node: initialized_variable_definition = 'final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                          Node: final_builtin = 'final'
                            Node: final = 'final'
                          Node: identifier = 'user'
                          Node: = = '='
                          Node: identifier = 'AppUser'
                          Node: selector = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                            Node: argument_part = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                              Node: arguments = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                                Node: ( = '('
                                Node: named_argument = 'id: userCredential.user!.uid'
                                  Node: label = 'id:'
                                    Node: identifier = 'id'
                                    Node: : = ':'
                                  Node: identifier = 'userCredential'
                                  Node: selector = '.user'
                                    Node: unconditional_assignable_selector = '.user'
                                      Node: . = '.'
                                      Node: identifier = 'user'
                                  Node: selector = '!'
                                    Node: ! = '!'
                                  Node: selector = '.uid'
                                    Node: unconditional_assignable_selector = '.uid'
                                      Node: . = '.'
                                      Node: identifier = 'uid'
                                Node: , = ','
                                Node: named_argument = 'displayName: result.profile.displayName'
                                  Node: label = 'displayName:'
                                    Node: identifier = 'displayName'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.displayName'
                                    Node: unconditional_assignable_selector = '.displayName'
                                      Node: . = '.'
                                      Node: identifier = 'displayName'
                                Node: , = ','
                                Node: named_argument = 'photoURL: result.profile.pictureUrl'
                                  Node: label = 'photoURL:'
                                    Node: identifier = 'photoURL'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.pictureUrl'
                                    Node: unconditional_assignable_selector = '.pictureUrl'
                                      Node: . = '.'
                                      Node: identifier = 'pictureUrl'
                                Node: , = ','
                                Node: named_argument = 'statusMessage: result.profile.statusMessage'
                                  Node: label = 'statusMessage:'
                                    Node: identifier = 'statusMessage'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.statusMessage'
                                    Node: unconditional_assignable_selector = '.statusMessage'
                                      Node: . = '.'
                                      Node: identifier = 'statusMessage'
                                Node: , = ','
                                Node: named_argument = 'provider: 'line''
                                  Node: label = 'provider:'
                                    Node: identifier = 'provider'
                                    Node: : = ':'
                                  Node: string_literal = ''line''
                                    Node: ' = '''
                                    Node: ' = '''
                                Node: , = ','
                                Node: named_argument = 'createdAt: DateTime.now()'
                                  Node: label = 'createdAt:'
                                    Node: identifier = 'createdAt'
                                    Node: : = ':'
                                  Node: identifier = 'DateTime'
                                  Node: selector = '.now'
                                    Node: unconditional_assignable_selector = '.now'
                                      Node: . = '.'
                                      Node: identifier = 'now'
                                  Node: selector = '()'
                                    Node: argument_part = '()'
                                      Node: arguments = '()'
                                        Node: ( = '('
                                        Node: ) = ')'
                                Node: , = ','
                                Node: ) = ')'
                        Node: ; = ';'
                      Node: expression_statement = 'state = AuthState.authenticated(user);'
                        Node: assignment_expression = 'state = AuthState.authenticated(user)'
                          Node: assignable_expression = 'state'
                            Node: identifier = 'state'
                          Node: = = '='
                          Node: identifier = 'AuthState'
                          Node: selector = '.authenticated'
                            Node: unconditional_assignable_selector = '.authenticated'
                              Node: . = '.'
                              Node: identifier = 'authenticated'
                          Node: selector = '(user)'
                            Node: argument_part = '(user)'
                              Node: arguments = '(user)'
                                Node: ( = '('
                                Node: argument = 'user'
                                  Node: identifier = 'user'
                                Node: ) = ')'
                        Node: ; = ';'
                      Node: } = '}'
                    Node: else = 'else'
                    Node: block = '{
          state = const AuthState.error('Failed to sign in with custom token');
        }'
                      Node: { = '{'
                      Node: expression_statement = 'state = const AuthState.error('Failed to sign in with custom token');'
                        Node: assignment_expression = 'state = const AuthState.error('Failed to sign in with custom token')'
                          Node: assignable_expression = 'state'
                            Node: identifier = 'state'
                          Node: = = '='
                          Node: const_object_expression = 'const AuthState.error('Failed to sign in with custom token')'
                            Node: const_builtin = 'const'
                            Node: type_identifier = 'AuthState'
                            Node: . = '.'
                            Node: identifier = 'error'
                            Node: arguments = '('Failed to sign in with custom token')'
                              Node: ( = '('
                              Node: argument = ''Failed to sign in with custom token''
                                Node: string_literal = ''Failed to sign in with custom token''
                                  Node: ' = '''
                                  Node: ' = '''
                              Node: ) = ')'
                        Node: ; = ';'
                      Node: } = '}'
                  Node: } = '}'
                Node: else = 'else'
                Node: block = '{
        state = const AuthState.error('LINE login failed');
      }'
                  Node: { = '{'
                  Node: expression_statement = 'state = const AuthState.error('LINE login failed');'
                    Node: assignment_expression = 'state = const AuthState.error('LINE login failed')'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: const_object_expression = 'const AuthState.error('LINE login failed')'
                        Node: const_builtin = 'const'
                        Node: type_identifier = 'AuthState'
                        Node: . = '.'
                        Node: identifier = 'error'
                        Node: arguments = '('LINE login failed')'
                          Node: ( = '('
                          Node: argument = ''LINE login failed''
                            Node: string_literal = ''LINE login failed''
                              Node: ' = '''
                              Node: ' = '''
                          Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// ログアウト'
        Node: /// = '///'
      Node: method_signature = 'Future<void> signOut()'
        Node: function_signature = 'Future<void> signOut()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'signOut'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: try_statement = 'try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    }'
              Node: { = '{'
              Node: expression_statement = 'await firebase_auth.FirebaseAuth.instance.signOut();'
                Node: unary_expression = 'await firebase_auth.FirebaseAuth.instance.signOut()'
                  Node: await_expression = 'await firebase_auth.FirebaseAuth.instance.signOut()'
                    Node: await = 'await'
                    Node: identifier = 'firebase_auth'
                    Node: selector = '.FirebaseAuth'
                      Node: unconditional_assignable_selector = '.FirebaseAuth'
                        Node: . = '.'
                        Node: identifier = 'FirebaseAuth'
                    Node: selector = '.instance'
                      Node: unconditional_assignable_selector = '.instance'
                        Node: . = '.'
                        Node: identifier = 'instance'
                    Node: selector = '.signOut'
                      Node: unconditional_assignable_selector = '.signOut'
                        Node: . = '.'
                        Node: identifier = 'signOut'
                    Node: selector = '()'
                      Node: argument_part = '()'
                        Node: arguments = '()'
                          Node: ( = '('
                          Node: ) = ')'
                Node: ; = ';'
              Node: expression_statement = 'state = const AuthState.unauthenticated();'
                Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: const_object_expression = 'const AuthState.unauthenticated()'
                    Node: const_builtin = 'const'
                    Node: type_identifier = 'AuthState'
                    Node: . = '.'
                    Node: identifier = 'unauthenticated'
                    Node: arguments = '()'
                      Node: ( = '('
                      Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// 現在のユーザーを取得'
        Node: /// = '///'
      Node: method_signature = 'Future<void> getCurrentUser()'
        Node: function_signature = 'Future<void> getCurrentUser()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'getCurrentUser'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: expression_statement = 'state = const AuthState.loading();'
            Node: assignment_expression = 'state = const AuthState.loading()'
              Node: assignable_expression = 'state'
                Node: identifier = 'state'
              Node: = = '='
              Node: const_object_expression = 'const AuthState.loading()'
                Node: const_builtin = 'const'
                Node: type_identifier = 'AuthState'
                Node: . = '.'
                Node: identifier = 'loading'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: ; = ';'
          Node: try_statement = 'try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    }'
              Node: { = '{'
              Node: local_variable_declaration = 'final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;'
                Node: initialized_variable_definition = 'final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser'
                  Node: final_builtin = 'final'
                    Node: final = 'final'
                  Node: identifier = 'firebaseUser'
                  Node: = = '='
                  Node: identifier = 'firebase_auth'
                  Node: selector = '.FirebaseAuth'
                    Node: unconditional_assignable_selector = '.FirebaseAuth'
                      Node: . = '.'
                      Node: identifier = 'FirebaseAuth'
                  Node: selector = '.instance'
                    Node: unconditional_assignable_selector = '.instance'
                      Node: . = '.'
                      Node: identifier = 'instance'
                  Node: selector = '.currentUser'
                    Node: unconditional_assignable_selector = '.currentUser'
                      Node: . = '.'
                      Node: identifier = 'currentUser'
                Node: ; = ';'
              Node: if_statement = 'if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }'
                Node: if = 'if'
                Node: ( = '('
                Node: equality_expression = 'firebaseUser != null'
                  Node: identifier = 'firebaseUser'
                  Node: equality_operator = '!='
                  Node: null_literal = 'null'
                    Node: null = 'null'
                Node: ) = ')'
                Node: block = '{
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      }'
                  Node: { = '{'
                  Node: comment = '// Firestoreからユーザー情報を取得'
                    Node: // = '//'
                  Node: comment = '// TODO: FirestoreServiceを使用してユーザー情報を取得'
                    Node: // = '//'
                  Node: local_variable_declaration = 'final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );'
                    Node: initialized_variable_definition = 'final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                      Node: final_builtin = 'final'
                        Node: final = 'final'
                      Node: identifier = 'user'
                      Node: = = '='
                      Node: identifier = 'AppUser'
                      Node: selector = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                        Node: argument_part = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                          Node: arguments = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                            Node: ( = '('
                            Node: named_argument = 'id: firebaseUser.uid'
                              Node: label = 'id:'
                                Node: identifier = 'id'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.uid'
                                Node: unconditional_assignable_selector = '.uid'
                                  Node: . = '.'
                                  Node: identifier = 'uid'
                            Node: , = ','
                            Node: named_argument = 'displayName: firebaseUser.displayName ?? 'Unknown User''
                              Node: label = 'displayName:'
                                Node: identifier = 'displayName'
                                Node: : = ':'
                              Node: if_null_expression = 'firebaseUser.displayName ?? 'Unknown User''
                                Node: identifier = 'firebaseUser'
                                Node: selector = '.displayName'
                                  Node: unconditional_assignable_selector = '.displayName'
                                    Node: . = '.'
                                    Node: identifier = 'displayName'
                                Node: ?? = '??'
                                Node: string_literal = ''Unknown User''
                                  Node: ' = '''
                                  Node: ' = '''
                            Node: , = ','
                            Node: named_argument = 'email: firebaseUser.email'
                              Node: label = 'email:'
                                Node: identifier = 'email'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.email'
                                Node: unconditional_assignable_selector = '.email'
                                  Node: . = '.'
                                  Node: identifier = 'email'
                            Node: , = ','
                            Node: named_argument = 'photoURL: firebaseUser.photoURL'
                              Node: label = 'photoURL:'
                                Node: identifier = 'photoURL'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.photoURL'
                                Node: unconditional_assignable_selector = '.photoURL'
                                  Node: . = '.'
                                  Node: identifier = 'photoURL'
                            Node: , = ','
                            Node: named_argument = 'provider: 'line''
                              Node: label = 'provider:'
                                Node: identifier = 'provider'
                                Node: : = ':'
                              Node: string_literal = ''line''
                                Node: ' = '''
                                Node: ' = '''
                            Node: , = ','
                            Node: ) = ')'
                    Node: ; = ';'
                  Node: expression_statement = 'state = AuthState.authenticated(user);'
                    Node: assignment_expression = 'state = AuthState.authenticated(user)'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: identifier = 'AuthState'
                      Node: selector = '.authenticated'
                        Node: unconditional_assignable_selector = '.authenticated'
                          Node: . = '.'
                          Node: identifier = 'authenticated'
                      Node: selector = '(user)'
                        Node: argument_part = '(user)'
                          Node: arguments = '(user)'
                            Node: ( = '('
                            Node: argument = 'user'
                              Node: identifier = 'user'
                            Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
                Node: else = 'else'
                Node: block = '{
        state = const AuthState.unauthenticated();
      }'
                  Node: { = '{'
                  Node: expression_statement = 'state = const AuthState.unauthenticated();'
                    Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: const_object_expression = 'const AuthState.unauthenticated()'
                        Node: const_builtin = 'const'
                        Node: type_identifier = 'AuthState'
                        Node: . = '.'
                        Node: identifier = 'unauthenticated'
                        Node: arguments = '()'
                          Node: ( = '('
                          Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// 認証状態の監視'
        Node: /// = '///'
      Node: method_signature = 'void listenToAuthChanges()'
        Node: function_signature = 'void listenToAuthChanges()'
          Node: void_type = 'void'
          Node: identifier = 'listenToAuthChanges'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = '{
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }'
        Node: block = '{
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }'
          Node: { = '{'
          Node: expression_statement = 'firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });'
            Node: identifier = 'firebase_auth'
            Node: selector = '.FirebaseAuth'
              Node: unconditional_assignable_selector = '.FirebaseAuth'
                Node: . = '.'
                Node: identifier = 'FirebaseAuth'
            Node: selector = '.instance'
              Node: unconditional_assignable_selector = '.instance'
                Node: . = '.'
                Node: identifier = 'instance'
            Node: selector = '.authStateChanges'
              Node: unconditional_assignable_selector = '.authStateChanges'
                Node: . = '.'
                Node: identifier = 'authStateChanges'
            Node: selector = '()'
              Node: argument_part = '()'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: selector = '.listen'
              Node: unconditional_assignable_selector = '.listen'
                Node: . = '.'
                Node: identifier = 'listen'
            Node: selector = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
              Node: argument_part = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
                Node: arguments = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
                  Node: ( = '('
                  Node: argument = '(firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                    Node: function_expression = '(firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                      Node: formal_parameter_list = '(firebaseUser)'
                        Node: ( = '('
                        Node: formal_parameter = 'firebaseUser'
                          Node: identifier = 'firebaseUser'
                        Node: ) = ')'
                      Node: function_expression_body = '{
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                        Node: block = '{
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                          Node: { = '{'
                          Node: if_statement = 'if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }'
                            Node: if = 'if'
                            Node: ( = '('
                            Node: equality_expression = 'firebaseUser != null'
                              Node: identifier = 'firebaseUser'
                              Node: equality_operator = '!='
                              Node: null_literal = 'null'
                                Node: null = 'null'
                            Node: ) = ')'
                            Node: block = '{
        // ユーザーがログインしている場合
        getCurrentUser();
      }'
                              Node: { = '{'
                              Node: comment = '// ユーザーがログインしている場合'
                                Node: // = '//'
                              Node: expression_statement = 'getCurrentUser();'
                                Node: identifier = 'getCurrentUser'
                                Node: selector = '()'
                                  Node: argument_part = '()'
                                    Node: arguments = '()'
                                      Node: ( = '('
                                      Node: ) = ')'
                                Node: ; = ';'
                              Node: } = '}'
                            Node: else = 'else'
                            Node: block = '{
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }'
                              Node: { = '{'
                              Node: comment = '// ユーザーがログアウトしている場合'
                                Node: // = '//'
                              Node: expression_statement = 'state = const AuthState.unauthenticated();'
                                Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                                  Node: assignable_expression = 'state'
                                    Node: identifier = 'state'
                                  Node: = = '='
                                  Node: const_object_expression = 'const AuthState.unauthenticated()'
                                    Node: const_builtin = 'const'
                                    Node: type_identifier = 'AuthState'
                                    Node: . = '.'
                                    Node: identifier = 'unauthenticated'
                                    Node: arguments = '()'
                                      Node: ( = '('
                                      Node: ) = ')'
                                Node: ; = ';'
                              Node: } = '}'
                          Node: } = '}'
                  Node: ) = ')'
            Node: ; = ';'
          Node: } = '}'
      Node: } = '}'
  Node: documentation_comment = '/// 認証状態プロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'AuthState authState(Ref ref)'
    Node: type_identifier = 'AuthState'
    Node: identifier = 'authState'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}'
    Node: block = '{
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}'
      Node: { = '{'
      Node: comment = '// 初回起動時に認証状態を監視開始'
        Node: // = '//'
      Node: expression_statement = 'ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });'
        Node: identifier = 'ref'
        Node: selector = '.listen'
          Node: unconditional_assignable_selector = '.listen'
            Node: . = '.'
            Node: identifier = 'listen'
        Node: selector = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
          Node: argument_part = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
            Node: arguments = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
              Node: ( = '('
              Node: argument = 'authNotifierProvider'
                Node: identifier = 'authNotifierProvider'
              Node: , = ','
              Node: argument = '(previous, next) {
    // 認証状態が変更された時の処理
  }'
                Node: function_expression = '(previous, next) {
    // 認証状態が変更された時の処理
  }'
                  Node: formal_parameter_list = '(previous, next)'
                    Node: ( = '('
                    Node: formal_parameter = 'previous'
                      Node: identifier = 'previous'
                    Node: , = ','
                    Node: formal_parameter = 'next'
                      Node: identifier = 'next'
                    Node: ) = ')'
                  Node: function_expression_body = '{
    // 認証状態が変更された時の処理
  }'
                    Node: block = '{
    // 認証状態が変更された時の処理
  }'
                      Node: { = '{'
                      Node: comment = '// 認証状態が変更された時の処理'
                        Node: // = '//'
                      Node: } = '}'
              Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return ref.watch(authNotifierProvider);'
        Node: return = 'return'
        Node: identifier = 'ref'
        Node: selector = '.watch'
          Node: unconditional_assignable_selector = '.watch'
            Node: . = '.'
            Node: identifier = 'watch'
        Node: selector = '(authNotifierProvider)'
          Node: argument_part = '(authNotifierProvider)'
            Node: arguments = '(authNotifierProvider)'
              Node: ( = '('
              Node: argument = 'authNotifierProvider'
                Node: identifier = 'authNotifierProvider'
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
  Node: documentation_comment = '/// 現在のユーザープロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'AppUser? currentUser(Ref ref)'
    Node: type_identifier = 'AppUser'
    Node: nullable_type = '?'
      Node: ? = '?'
    Node: identifier = 'currentUser'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}'
    Node: block = '{
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}'
      Node: { = '{'
      Node: local_variable_declaration = 'final authState = ref.watch(authStateProvider);'
        Node: initialized_variable_definition = 'final authState = ref.watch(authStateProvider)'
          Node: final_builtin = 'final'
            Node: final = 'final'
          Node: identifier = 'authState'
          Node: = = '='
          Node: identifier = 'ref'
          Node: selector = '.watch'
            Node: unconditional_assignable_selector = '.watch'
              Node: . = '.'
              Node: identifier = 'watch'
          Node: selector = '(authStateProvider)'
            Node: argument_part = '(authStateProvider)'
              Node: arguments = '(authStateProvider)'
                Node: ( = '('
                Node: argument = 'authStateProvider'
                  Node: identifier = 'authStateProvider'
                Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );'
        Node: return = 'return'
        Node: identifier = 'authState'
        Node: selector = '.when'
          Node: unconditional_assignable_selector = '.when'
            Node: . = '.'
            Node: identifier = 'when'
        Node: selector = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
          Node: argument_part = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
            Node: arguments = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
              Node: ( = '('
              Node: named_argument = 'authenticated: (user) => user'
                Node: label = 'authenticated:'
                  Node: identifier = 'authenticated'
                  Node: : = ':'
                Node: function_expression = '(user) => user'
                  Node: formal_parameter_list = '(user)'
                    Node: ( = '('
                    Node: formal_parameter = 'user'
                      Node: identifier = 'user'
                    Node: ) = ')'
                  Node: function_expression_body = '=> user'
                    Node: => = '=>'
                    Node: identifier = 'user'
              Node: , = ','
              Node: named_argument = 'initial: () => null'
                Node: label = 'initial:'
                  Node: identifier = 'initial'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'loading: () => null'
                Node: label = 'loading:'
                  Node: identifier = 'loading'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'unauthenticated: () => null'
                Node: label = 'unauthenticated:'
                  Node: identifier = 'unauthenticated'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'error: (_) => null'
                Node: label = 'error:'
                  Node: identifier = 'error'
                  Node: : = ':'
                Node: function_expression = '(_) => null'
                  Node: formal_parameter_list = '(_)'
                    Node: ( = '('
                    Node: formal_parameter = '_'
                      Node: identifier = '_'
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
  Node: documentation_comment = '/// 認証済みかどうかのプロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'bool isAuthenticated(Ref ref)'
    Node: type_identifier = 'bool'
    Node: identifier = 'isAuthenticated'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}'
    Node: block = '{
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}'
      Node: { = '{'
      Node: local_variable_declaration = 'final authState = ref.watch(authStateProvider);'
        Node: initialized_variable_definition = 'final authState = ref.watch(authStateProvider)'
          Node: final_builtin = 'final'
            Node: final = 'final'
          Node: identifier = 'authState'
          Node: = = '='
          Node: identifier = 'ref'
          Node: selector = '.watch'
            Node: unconditional_assignable_selector = '.watch'
              Node: . = '.'
              Node: identifier = 'watch'
          Node: selector = '(authStateProvider)'
            Node: argument_part = '(authStateProvider)'
              Node: arguments = '(authStateProvider)'
                Node: ( = '('
                Node: argument = 'authStateProvider'
                  Node: identifier = 'authStateProvider'
                Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );'
        Node: return = 'return'
        Node: identifier = 'authState'
        Node: selector = '.maybeWhen'
          Node: unconditional_assignable_selector = '.maybeWhen'
            Node: . = '.'
            Node: identifier = 'maybeWhen'
        Node: selector = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
          Node: argument_part = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
            Node: arguments = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
              Node: ( = '('
              Node: named_argument = 'authenticated: (_) => true'
                Node: label = 'authenticated:'
                  Node: identifier = 'authenticated'
                  Node: : = ':'
                Node: function_expression = '(_) => true'
                  Node: formal_parameter_list = '(_)'
                    Node: ( = '('
                    Node: formal_parameter = '_'
                      Node: identifier = '_'
                    Node: ) = ')'
                  Node: function_expression_body = '=> true'
                    Node: => = '=>'
                    Node: true = 'true'
                      Node: true = 'true'
              Node: , = ','
              Node: named_argument = 'orElse: () => false'
                Node: label = 'orElse:'
                  Node: identifier = 'orElse'
                  Node: : = ':'
                Node: function_expression = '() => false'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> false'
                    Node: => = '=>'
                    Node: false = 'false'
                      Node: false = 'false'
              Node: , = ','
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
=== End AST ===

=== Complete AST for source ===
Node: program = 'import 'package:freezed_annotation/freezed_annotation.dart';

part 'user.freezed.dart';
part 'user.g.dart';

@freezed
class AppUser with _$AppUser {
  const factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUser;

  factory AppUser.fromJson(Map<String, dynamic> json) =>
      _$AppUserFromJson(json);
}

@freezed
class UserProfile with _$UserProfile {
  const factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfile;

  factory UserProfile.fromJson(Map<String, dynamic> json) =>
      _$UserProfileFromJson(json);
}

@freezed
class AuthState with _$AuthState {
  const factory AuthState.initial() = _Initial;
  const factory AuthState.loading() = _Loading;
  const factory AuthState.authenticated(AppUser user) = _Authenticated;
  const factory AuthState.unauthenticated() = _Unauthenticated;
  const factory AuthState.error(String message) = _Error;
}
'
  Node: import_or_export = 'import 'package:freezed_annotation/freezed_annotation.dart';'
    Node: library_import = 'import 'package:freezed_annotation/freezed_annotation.dart';'
      Node: import_specification = 'import 'package:freezed_annotation/freezed_annotation.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:freezed_annotation/freezed_annotation.dart''
          Node: uri = ''package:freezed_annotation/freezed_annotation.dart''
            Node: string_literal = ''package:freezed_annotation/freezed_annotation.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: part_directive = 'part 'user.freezed.dart';'
    Node: part = 'part'
    Node: uri = ''user.freezed.dart''
      Node: string_literal = ''user.freezed.dart''
        Node: ' = '''
        Node: ' = '''
    Node: ; = ';'
  Node: part_directive = 'part 'user.g.dart';'
    Node: part = 'part'
    Node: uri = ''user.g.dart''
      Node: string_literal = ''user.g.dart''
        Node: ' = '''
        Node: ' = '''
    Node: ; = ';'
  Node: class_definition = '@freezed
class AppUser with _$AppUser {
  const factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUser;

  factory AppUser.fromJson(Map<String, dynamic> json) =>
      _$AppUserFromJson(json);
}'
    Node: annotation = '@freezed'
      Node: @ = '@'
      Node: identifier = 'freezed'
    Node: class = 'class'
    Node: identifier = 'AppUser'
    Node: superclass = 'with _$AppUser'
      Node: mixins = 'with _$AppUser'
        Node: with = 'with'
        Node: type_identifier = '_$AppUser'
    Node: class_body = '{
  const factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUser;

  factory AppUser.fromJson(Map<String, dynamic> json) =>
      _$AppUserFromJson(json);
}'
      Node: { = '{'
      Node: declaration = 'const factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUser'
        Node: redirecting_factory_constructor_signature = 'const factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUser'
          Node: const_builtin = 'const'
          Node: factory = 'factory'
          Node: identifier = 'AppUser'
          Node: formal_parameter_list = '({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  })'
            Node: ( = '('
            Node: optional_formal_parameters = '{
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }'
              Node: { = '{'
              Node: required = 'required'
              Node: formal_parameter = 'String id'
                Node: type_identifier = 'String'
                Node: identifier = 'id'
              Node: , = ','
              Node: required = 'required'
              Node: formal_parameter = 'String displayName'
                Node: type_identifier = 'String'
                Node: identifier = 'displayName'
              Node: , = ','
              Node: formal_parameter = 'String? email'
                Node: type_identifier = '
=== Complete AST for source ===
StringNode: '
program                 = 'Node: import 'package:freezed_annotation/freezed_annotation.dart';

part 'payment.freezed.dart';
part 'payment.g.dart';

@freezed
class Payment with _$Payment {
  const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Payment;

  factory Payment.fromJson(Map<String, dynamic> json) =>
      _$PaymentFromJson(json);
}

@freezed
class PaymentCreateRequest with _$PaymentCreateRequest {
  const factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequest;

  factory PaymentCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$PaymentCreateRequestFromJson(json);
}

@freezed
class PaymentResult with _$PaymentResult {
  const factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _Success;

  const factory PaymentResult.failed({
    required String errorMessage,
  }) = _Failed;

  const factory PaymentResult.cancelled() = _Cancelled;
}

@freezed
class PaymentState with _$PaymentState {
  const factory PaymentState.initial() = _StateInitial;
  const factory PaymentState.loading() = _StateLoading;
  const factory PaymentState.success(Payment payment) = _StateSuccess;
  const factory PaymentState.failed(String errorMessage) = _StateFailed;
}
nullable_type'
 = '  ?Node: '
import_or_export                   = 'Node: import 'package:freezed_annotation/freezed_annotation.dart';?'
 = '    ?Node: '
library_import                 = 'Node: import 'package:freezed_annotation/freezed_annotation.dart';identifier'
 = '      emailNode: '
import_specification               = 'Node: import 'package:freezed_annotation/freezed_annotation.dart';,'
 = '        ,Node: '
import               = 'Node: importformal_parameter'
 = '        String? photoURLNode: '
configurable_uri                 = 'Node: 'package:freezed_annotation/freezed_annotation.dart'type_identifier'
 = '          StringNode: '
uri                 = 'Node: 'package:freezed_annotation/freezed_annotation.dart'nullable_type'
 = '            ?Node: '
string_literal                   = ''package:freezed_annotation/freezed_annotation.dart''
Node:               ?
=== Complete AST for source ===
 = 'Node: ?Node: '
'                programNode:  = 'identifierimport 'package:freezed_annotation/freezed_annotation.dart';

part 'event.freezed.dart';
part 'event.g.dart';

@freezed
class Event with _$Event {
  const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event;

  factory Event.fromJson(Map<String, dynamic> json) => _$EventFromJson(json);
}

@freezed
class EventCreateRequest with _$EventCreateRequest {
  const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest;

  factory EventCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventCreateRequestFromJson(json);
}

@freezed
class EventUpdateRequest with _$EventUpdateRequest {
  const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest;

  factory EventUpdateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventUpdateRequestFromJson(json);
}

@freezed
class EventListState with _$EventListState {
  const factory EventListState.initial() = _Initial;
  const factory EventListState.loading() = _Loading;
  const factory EventListState.loaded(List<Event> events) = _Loaded;
  const factory EventListState.error(String message) = _Error;
}

@freezed
class EventDetailState with _$EventDetailState {
  const factory EventDetailState.initial() = _DetailInitial;
  const factory EventDetailState.loading() = _DetailLoading;
  const factory EventDetailState.loaded(Event event) = _DetailLoaded;
  const factory EventDetailState.error(String message) = _DetailError;
}
 = ' = ''
photoURL''
  '
                            Node: Node: Node: import_or_export, = ' = 'import 'package:freezed_annotation/freezed_annotation.dart';,'
'     = 'Node: 'library_import'
 = '        import 'package:freezed_annotation/freezed_annotation.dart';Node: '
;      Node: '
import_specification               = 'Node: import 'package:freezed_annotation/freezed_annotation.dart';formal_parameter'
 = '        String? statusMessageNode: '
import                 = 'Node: importtype_identifier'
 = '        StringNode: '
configurable_uri                 = 'Node: 'package:freezed_annotation/freezed_annotation.dart'nullable_type'
 = '          ?Node: '
uri                   = 'Node: 'package:freezed_annotation/freezed_annotation.dart'?'
 = '            ?Node: '
string_literal                 = 'Node: 'package:freezed_annotation/freezed_annotation.dart'identifier'
 = '              statusMessageNode: '
'               = 'Node: ','
 = '              ,Node: '
'               = 'Node: 'annotation'
 = '        @Default('line')Node: '
;                 = 'Node: ;@'
 = '  @Node: '
part_directive                 = 'Node: part 'event.freezed.dart';identifier'
 = '    DefaultNode: '
part                 = 'Node: partarguments'
 = '    ('line')Node: '
uri                   = 'Node: 'event.freezed.dart'('
 = '      (Node: '
string_literal                   = 'Node: 'event.freezed.dart'argument'
 = '        'line'Node: '
'                     = 'Node: 'string_literal'
 = '        'line'Node: '
'                       = 'Node: '''
 = '    'Node: '
;                       = 'Node: ;''
 = '  'Node: '
part_directive                   = 'Node: part 'event.g.dart';)'
 = '    )Node: '
part               = 'Node: partformal_parameter'
 = '    String providerNode: '
uri                 = 'Node: 'event.g.dart'type_identifier'
 = '      StringNode: '
string_literal                 = 'Node: 'event.g.dart'identifier'
 = '        providerNode: '
'               = 'Node: ','
 = '        ,Node: '
'               = 'Node: 'annotation'
 = '    @Default(false)Node: '
;                 = 'Node: ;@'
 = '  @Node: '
class_definition                 = 'Node: @freezed
class Event with _$Event {
  const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event;

  factory Event.fromJson(Map<String, dynamic> json) => _$EventFromJson(json);
}identifier'
 = '    DefaultNode: '
annotation                 = 'Node: @freezedarguments'
 = '      (false)Node: '
@                   = 'Node: @('
 = '      (Node: '
identifier                   = 'Node: freezedargument'
 = '    falseNode: '
class                     = 'Node: classfalse'
 = 'false'

=== Complete AST for source ===
                          Node: Node: programfalse = ' = ' = ';import 'package:freezed_annotation/freezed_annotation.dart';

part 'user.freezed.dart';
part 'user.g.dart';

@freezed
class AppUser with _$AppUser {
  const factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUser;

  factory AppUser.fromJson(Map<String, dynamic> json) =>
      _$AppUserFromJson(json);
}

@freezed
class UserProfile with _$UserProfile {
  const factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfile;

  factory UserProfile.fromJson(Map<String, dynamic> json) =>
      _$UserProfileFromJson(json);
}

@freezed
class AuthState with _$AuthState {
  const factory AuthState.initial() = _Initial;
  const factory AuthState.loading() = _Loading;
  const factory AuthState.authenticated(AppUser user) = _Authenticated;
  const factory AuthState.unauthenticated() = _Unauthenticated;
  const factory AuthState.error(String message) = _Error;
}
false'
'
'
Node:                   identifierNode: )   = 'Node: Eventimport_or_export'
 = 'import 'package:freezed_annotation/freezed_annotation.dart';      Node:  = ''
    superclassNode:  = 'library_importwith _$Event = ''
Node: )      import 'package:freezed_annotation/freezed_annotation.dart';Node: part_directive'
mixins = '       = 'Node: with _$Eventimport_specification'
 = ''
        import 'package:freezed_annotation/freezed_annotation.dart';part 'payment.freezed.dart';'
              '
            Node: Node: Node: importpart = ' = 'formal_parameterpartNode:  = ''
withbool isEmailVerified     = 'Node: '
uriwith = '                '
Node: type_identifierimport = ''
'payment.freezed.dart'bool        '
        '
                Node: Node: configurable_uriidentifier = ' = ''package:freezed_annotation/freezed_annotation.dart'isEmailVerified'
'
      Node:               type_identifierNode:  = ',Node:  = '          ,string_literalNode:  = 'uri'payment.freezed.dart''
 = ''
'package:freezed_annotation/freezed_annotation.dart'              '
Node:             formal_parameterNode:  = 'string_literalDateTime? createdAt        '
_$EventNode:                 'Node:  = 'type_identifier' = ''package:freezed_annotation/freezed_annotation.dart' = ''
DateTime'
              '
            '
Node: Node:                 'Node: class_bodynullable_type = ' = ''?'
Node:  = ''{
  const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event;

  factory Event.fromJson(Map<String, dynamic> json) => _$EventFromJson(json);
} = ''
          Node: Node: '
;{' = ' = ';{                  '
'
      Node:               ?'
 = 'Node: ?  '
Node:                 'declaration = ' = ''Node: '
Node: part_directive         = 'Node: part 'payment.g.dart';;identifierconst factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event = ' = 'createdAt;'
'
'
          Node: Node:               redirecting_factory_constructor_signaturepart_directive = 'Node:  = ',part 'user.freezed.dart';'
 = ''
,    '
Node: const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Eventpart'
 = '          part              Node: '
const_builtinNode:      = '    Node: consturi'
 = 'formal_parameter'user.freezed.dart'Node: '
          part       = 'Node: partstring_literal = ' = 'Node: 'user.freezed.dart'DateTime? updatedAt'
factory        '
 = 'Node:                 factory''
 = '          'Node: '
Node: identifier         = 'type_identifierEvent = ''
Node:     DateTimeNode: '
'
=== Complete AST for source ===
uriNode:  = ''
'payment.g.dart'program'
                 = '                ' = 'Node: '
nullable_typeNode:  = '    Node: import 'package:freezed_annotation/freezed_annotation.dart';

part 'payment.freezed.dart';
part 'payment.g.dart';

@freezed
class Payment with _$Payment {
  const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Payment;

  factory Payment.fromJson(Map<String, dynamic> json) =>
      _$PaymentFromJson(json);
}

@freezed
class PaymentCreateRequest with _$PaymentCreateRequest {
  const factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequest;

  factory PaymentCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$PaymentCreateRequestFromJson(json);
}

@freezed
class PaymentResult with _$PaymentResult {
  const factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _Success;

  const factory PaymentResult.failed({
    required String errorMessage,
  }) = _Failed;

  const factory PaymentResult.cancelled() = _Cancelled;
}

@freezed
class PaymentState with _$PaymentState {
  const factory PaymentState.initial() = _StateInitial;
  const factory PaymentState.loading() = _StateLoading;
  const factory PaymentState.success(Payment payment) = _StateSuccess;
  const factory PaymentState.failed(String errorMessage) = _StateFailed;
}
?string_literal'
 = '                  'payment.g.dart'formal_parameter_listNode: '
 = ';Node:   ({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  })Node: '
import_or_export'
 = ' = 'import 'package:freezed_annotation/freezed_annotation.dart';;        '
?'
 = '  ?Node:     '
            Node: Node: library_import                 = 'Node: import 'package:freezed_annotation/freezed_annotation.dart';identifier'
Node:  = '(updatedAt = '(      '
'Node:             import_specificationNode:  = 'optional_formal_parameterspart_directive = ''
 = '{
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  } = 'part 'user.g.dart';              '
Node: '
import 'package:freezed_annotation/freezed_annotation.dart';''
,'
 = '                ,Node: '
'Node:                                 Node: Node: }{import = ' = ' = '} = ''
import'            '
Node: Node: ){ = ''
)part'
'
            Node:           Node: configurable_uriNode:  = '='package:freezed_annotation/freezed_annotation.dart' = ' = ''
;=           = '              ;partNode: '
required'
'
            Node: Node: Node:  = '    urirequiredNode: '
uri               = ' = 'class_definitiontype_identifier'package:freezed_annotation/freezed_annotation.dart' = ''
 = '            'user.g.dart'Node: @freezed
class Payment with _$Payment {
  const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Payment;

  factory Payment.fromJson(Map<String, dynamic> json) =>
      _$PaymentFromJson(json);
}string_literal'
 = ''package:freezed_annotation/freezed_annotation.dart'_AppUser'
'
'
                          Node: Node: '; = ' = '';'
'
Node: Node: formal_parameter       = 'Node: String id                  string_literalNode:  = '''user.g.dart' = 'Node: method_signature'
annotation = ''
                factory AppUser.fromJson(Map<String, dynamic> json)Node: '
type_identifier = '' = '                String'
Node:         '
factory_constructor_signature                 = 'Node: factory AppUser.fromJson(Map<String, dynamic> json)Node: identifier'
 = '          id@freezed'
Node:               'Node: '
, = 'Node:  = '',;'
'
 = '              ;Node:               requiredNode:  = '@required = 'Node: '
@factory'
 = '      factoryNode: '
identifier'           = ' = ''Node: freezed'
identifier'
 = '        Node: AppUser;Node: '
class = '           = 'Node: class.'
; = '    .Node: '
identifier'
 = 'Payment  '
Node:                   part_directiveNode:  = 'formal_parameterpart 'payment.freezed.dart'; = ''
String title    '
Node:                 partNode:  = 'type_identifierpart = ''
String    '
Node:                 uriNode:  = 'identifier'payment.freezed.dart' = ''
title      '
Node:               string_literalNode:  = ','payment.freezed.dart' = ''
,        '
Node:               'Node:  = 'required' = ''
required        '
Node:               'Node:  = 'formal_parameter' = ''
String description    '
Node:                 ;Node:  = 'type_identifier; = ''
String  '
Node:                 part_directiveNode:  = 'identifierpart 'payment.g.dart'; = ''
description    '
Node:               partNode:  = ',part = ''
,    '
Node:               uriNode:  = 'required'payment.g.dart' = ''
required      '
Node:               string_literalNode:  = 'formal_parameter'payment.g.dart' = ''
DateTime startDate        '
Node:                 'Node:  = 'type_identifier' = ''
DateTime        '
Node:                 'Node:  = 'identifier' = ''
startDate    '
Node:               ;Node:  = ',; = ''
,  '
Node:               class_definitionNode:  = 'required@freezed
class Payment with _$Payment {
  const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Payment;

  factory Payment.fromJson(Map<String, dynamic> json) =>
      _$PaymentFromJson(json);
} = ''
required    '
Node:               annotationNode:  = 'formal_parameter@freezed = ''
DateTime endDate      '
Node:                 @Node:  = 'type_identifier@ = ''
DateTime      '
Node:                 identifierNode:  = 'identifierfreezed = ''
endDate    '
Node:               classNode:  = ',class = ''
,'
  Node: class_definition = '@freezed
class AppUser with _$AppUser {
  const factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUser;

  factory AppUser.fromJson(Map<String, dynamic> json) =>
      _$AppUserFromJson(json);
}'
    Node: annotation = '@freezed'
      Node: @ = '@'
      Node: identifier = 'freezed'
    Node: class = 'class'
    Node: identifier = 'AppUser'
    Node: superclass = 'with _$AppUser'
      Node: mixins = 'with _$AppUser'
        Node: with = 'with'
        Node: type_identifier = '_$AppUser'
    Node: class_body = '{
  const factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUser;

  factory AppUser.fromJson(Map<String, dynamic> json) =>
      _$AppUserFromJson(json);
}'
      Node: { = '{'
      Node:           Node: identifier = 'fromJson'
          Node: formal_parameter_list = '(Map<String, dynamic> json)'

=== Complete AST for source ===
            Node: Node: programNode: (
=== Complete AST for source ===
 = 'Node: (program'
 = '            import 'package:freezed_annotation/freezed_annotation.dart';

part 'event.freezed.dart';
part 'event.g.dart';

@freezed
class Event with _$Event {
  const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event;

  factory Event.fromJson(Map<String, dynamic> json) => _$EventFromJson(json);
}

@freezed
class EventCreateRequest with _$EventCreateRequest {
  const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest;

  factory EventCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventCreateRequestFromJson(json);
}

@freezed
class EventUpdateRequest with _$EventUpdateRequest {
  const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest;

  factory EventUpdateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventUpdateRequestFromJson(json);
}

@freezed
class EventListState with _$EventListState {
  const factory EventListState.initial() = _Initial;
  const factory EventListState.loading() = _Loading;
  const factory EventListState.loaded(List<Event> events) = _Loaded;
  const factory EventListState.error(String message) = _Error;
}

@freezed
class EventDetailState with _$EventDetailState {
  const factory EventDetailState.initial() = _DetailInitial;
  const factory EventDetailState.loading() = _DetailLoading;
  const factory EventDetailState.loaded(Event event) = _DetailLoaded;
  const factory EventDetailState.error(String message) = _DetailError;
}
Node: '
formal_parameter   = 'Node: Map<String, dynamic> jsonimport_or_export'
 = '              import 'package:freezed_annotation/freezed_annotation.dart';Node: '
type_identifier     = 'Node: Maplibrary_import'
 = '              Node: type_arguments = '<String, dynamic>'
                Node: < = '<superclass = 'with _$Payment'
      Node:  = 'mixinsimport 'package:freezed_annotation/freezed_annotation.dart';

part 'event.freezed.dart';
part 'event.g.dart';

@freezed
class Event with _$Event {
  const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event;

  factory Event.fromJson(Map<String, dynamic> json) => _$EventFromJson(json);
}

@freezed
class EventCreateRequest with _$EventCreateRequest {
  const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest;

  factory EventCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventCreateRequestFromJson(json);
}

@freezed
class EventUpdateRequest with _$EventUpdateRequest {
  const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest;

  factory EventUpdateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventUpdateRequestFromJson(json);
}

@freezed
class EventListState with _$EventListState {
  const factory EventListState.initial() = _Initial;
  const factory EventListState.loading() = _Loading;
  const factory EventListState.loaded(List<Event> events) = _Loaded;
  const factory EventListState.error(String message) = _Error;
}

@freezed
class EventDetailState with _$EventDetailState {
  const factory EventDetailState.initial() = _DetailInitial;
  const factory EventDetailState.loading() = _DetailLoading;
  const factory EventDetailState.loaded(Event event) = _DetailLoaded;
  const factory EventDetailState.error(String message) = _DetailError;
}
 = ''
with _$Payment  '
Node:         import_or_exportNode:  = 'withimport 'package:freezed_annotation/freezed_annotation.dart'; = ''
with    '
Node: '
library_import             = 'Node: Node: identifiertype_identifier = ' = 'Payment_$Paymentimport 'package:freezed_annotation/freezed_annotation.dart';'
'
    '
Node:     superclassNode:  = 'class_bodywith _$Payment                     = 'Node: {
  const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Payment;

  factory Payment.fromJson(Map<String, dynamic> json) =>
      _$PaymentFromJson(json);
}import_specification'
 = 'Node: import 'package:freezed_annotation/freezed_annotation.dart';required'
'
 = 'required'
                      Node:       importNode:  = '{Node:  = 'formal_parameter{ = 'declarationimport 'package:freezed_annotation/freezed_annotation.dart'; = 'String location'
const factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUser'
      '
Node:                         import_specificationNode:  = 'redirecting_factory_constructor_signatureimport 'package:freezed_annotation/freezed_annotation.dart';'
 = 'Node: const factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUsertype_identifier'
 = '                Node: Stringconst_builtinNode:  = ''
constdeclaration'
                 = '          Node: Node: const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Paymentfactoryidentifier'
 = ' = '        factorylocationNode: '
redirecting_factory_constructor_signature              '
 = 'Node:           ,Node:  = 'identifier'
 = '        AppUser      Node: const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _PaymentimportNode:  = 'mixinsimport'
'
,                          Node: Node: '
const_builtin              type_identifier = 'Node: importrequired = ' = 'with _$Payment'
'
const                  '
Node:  = '        '
required'
with'
         = '              Node: Node: Node: configurable_uriconfigurable_uriwithformal_parameter_list           = 'Node: 'package:freezed_annotation/freezed_annotation.dart'factory'
String         = 'Node: 'package:freezed_annotation/freezed_annotation.dart' = ''
({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = ''
          Node: '
formal_parameterfactory = '            Node:           uri'
'
int capacity                          Node: '
Node: type_identifier = ' = 'Node: identifier(, = ' = '( = ''
Payment,            Node: _$Payment'
'
                    Node: Node: Node: type_identifierclass_body = ''package:freezed_annotation/freezed_annotation.dart'                '
optional_formal_parameters'
Node:  = '            dynamicuri = ''
{
  const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Payment;

  factory Payment.fromJson(Map<String, dynamic> json) =>
      _$PaymentFromJson(json);
} = '{
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }type_identifier                 = ''
intNode: '
>                               = 'Node: Node: identifier           = ''
>'
Node: {string_literal = ' = '{'package:freezed_annotation/freezed_annotation.dart''
'
Node:               formal_parameter_list              'package:freezed_annotation/freezed_annotation.dart' = 'Node:               Node: Node: ({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  })      '
Node: '
            {Node:              = 'Node: ({string_literalrequiredcapacity = '''
 = 'identifier'package:freezed_annotation/freezed_annotation.dart'      '
 = 'Node:               jsondeclaration'
Node:  = '            '
 = 'const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Paymentrequired'               = 'Node: ')'
Node:  = ',' = '              ('
'
)                    '
Node: Node: optional_formal_parameters'
 = ''
              {
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }              redirecting_factory_constructor_signatureNode:        = ''
Node:  = 'Node: ,''const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Payment = 'formal_parameter               = '' = '''
Node: '
Node: '
'
{                        Node: Node:  = '{'
required        const_builtinfunction_body = 'String id = ''
=>
      _$AppUserFromJson(json);const'
 = ''
                      Node:           =>Node:  = 'requiredNode: Node:  = '=>factory'
                        ;Node:         identifier = ' = 'factory_$AppUserFromJson'
'
           = 'Node: ;Node: Node: requiredtype_identifier;'
 = ' = ';String'
              '
Node: required                '
formal_parameterNode:               identifierNode:  = 'formal_parameterid'
 = ' = '        String idNode: '
int priceselector'
  identifier  Node:                  = '                (json)'
Node: '
part_directiveNode:                         Node:  = 'Node: , = 'Node: argument_partpart_directivepart 'event.freezed.dart'; = 'Paymenttype_identifier = ' = ''
,int'
'
type_identifier                   = ''
(json)'
                      Node: Node: formal_parameter_listarguments = ' = 'part 'event.freezed.dart';                Node: Node: partrequiredNode: '
identifier = '({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = ' = '(json)     = ''
'
Node: Stringpartrequired'
'
                    '
priceNode:               identifierNode: Node: (uri = ' = 'idpart'
                                         = ''event.freezed.dart'Node: '
partNode: '
Node:                     formal_parameter, = ' = 'String displayName = ''
(Node: ('
Node: ,string_literal                , = ' = ',('
'
                  Node: '
 = '            'event.freezed.dart'              '
'
Node: type_identifier        Node:  = 'requiredString              Node:  = ''
required'Node: Node:                 '
uriargumentNode: Node:               requiredNode:  = 'formal_parameterrequired = ' = ' = 'optional_formal_parametersidentifier = '''
{
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  } = ''
jsonString createdBy = ''
'event.freezed.dart''
                      Node: Node: type_identifierstring_literal = ' = 'String'event.freezed.dart''
'
                        displayName'
'
                      Node: Node: Node: 'formal_parameter = 'identifier' = ''
'
String eventId                  '
Node: Node: ;               = ',;Node:  = ','
'
 = '                  createdByNode: '
part_directiveNode:                = 'identifier              part 'event.g.dart';Node:  = '                Node: Node: '
type_identifier = 'String''
 = 'Node: 'formal_parameter'
                         = ',String? emailjson = ''
    ,              Node: Node: {)part'
 = ''
Node: Node: 'identifier = ' = ''eventId)               = ' = ''
{part    '
'
Node:                   '
Node:                 Node: '
Node:         annotationtype_identifierNode: required               = ' = ' = 'uri;String = ''
'event.g.dart'Node: '
requiredNode: @Default('draft'); = ' = ''
;;                '
'
Node:                         Node: Node: Node: }nullable_typepart_directive = ' = '? = ''
part 'event.g.dart';'
                  '
},'
      @    Node:  = 'Node: Node: part? = ', = ''
              part?'
Node: '
    formal_parameterstring_literal               = ' = '  String idNode: '
@class_definition'
 = '                @freezed
class UserProfile with _$UserProfile {
  const factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfile;

  factory UserProfile.fromJson(Map<String, dynamic> json) =>
      _$UserProfileFromJson(json);
}Node: '
type_identifier                 = '    String                '
Node:                 uriNode:  = 'Node: 'event.g.dart'identifierNode:  = 'identifierNode: '
 = 'identifier      emailNode: '
 = ''event.g.dart'               = 'requiredNode: string_literal = ' = 'required'event.g.dart'annotation'
idNode: Default,'
'
              '
              '
Node:  = ',         = 'Node:  = ',formal_parameter,Node:  = ''String userId = '                '
'
@freezed'
'
'                    Node: '
requiredNode:  = '        required@'
                       = 'Node: @              Node: Node: 'formal_parameter = 'Node: ' = ''
arguments = '        ('draft')                '
Node: String? photoURLNode: formal_parameterNode: '
'
'                  type_identifier       = ''                Node: Node:  = 'type_identifier = ' = 'String'' = ''
(String eventId = ''
    '
StringNode: Node: (;'
'
                                  '
Node: identifierNode:     argumentNode:                  = 'Node:  = 'type_identifier;freezed = ''
'
identifier                ;Node:  = ' = ';'draft''
'
        nullable_typeNode:  = 'class? = ''
 = 'class                    Node: StringNode: class_definition'
string_literal = '                @freezed
class Event with _$Event {
  const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event;

  factory Event.fromJson(Map<String, dynamic> json) => _$EventFromJson(json);
} = ''
Node: 'draft'class_definitionNode: '
 = 'identifier@freezed
class Event with _$Event {
  const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event;

  factory Event.fromJson(Map<String, dynamic> json) => _$EventFromJson(json);
}                      '
 = '                      Node: Node: ?annotation = 'userId = '?@freezedeventId'
'
'
'
                    '
Node: Node:     '@Node:                      = ' = 'Node: '@'
'
,                                     = 'Node: Node:       identifieridentifierNode:  = 'identifierphotoURL = 'Node: '
 = 'freezed,UserProfile''
Node:                              = ''
,'Node:     '
annotationNode:  = 'required, = ' = ''
,,'
'
                  @freezed = ''
              required              Node:       Node: '
formal_parameterNode: Node: superclassNode: @ = ')with _$UserProfile = ''
    @               = 'required = ')String? statusMessage'
 = ''
required              '
                Node:       Node: formal_parameter'
 = 'Node: Node: type_identifierformal_parameter = ' = 'StringString status'
Node: String userId              mixins                      Node: Node: class'
 = 'Node: class                '
formal_parameterNode: '
type_identifier = ' = '                 = 'Node: Stringtype_identifieridentifier = ' = 'freezednullable_type     = ''
Node: ?                identifier'
Node: String'
'
identifier                  int amount = 'with _$UserProfileEvent                     = ''
'
'
                    Node: Node:         type_identifierNode: superclass = 'withuserIdNode: '
 = '?               = 'intNode: ?'
 = ',withNode:  = 'with _$Event                '
'
Node:                       identifierNode: Node: identifier'
 = 'mixins        Node:  = 'classidentifier = ',with _$Event'
Node:  = ' = 'statusstatusMessageclass'
'
'
                                Node: Node: Node: ,, = ' = '              ,,'
amount'
              '
Node: identifier               = 'Node: Eventtype_identifiercomment'
 = ''
Node: annotation     = 'required@Default('line')Node: '
superclass = '                Node: @ = '              // draft, published, cancelled, completed        Node: '
Node: , = ' = 'with _$Eventrequiredwith = ''
 = '_$UserProfile              '
Node: with    formal_parameterNode: '
                '
Node: class_body = '@,'
//'
                 = 'Node:               //Node: '
              {
  const factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfile;

  factory UserProfile.fromJson(Map<String, dynamic> json) =>
      _$UserProfileFromJson(json);
}Node: Node: '
required = '       = 'Node: requiredint amount'
{'
                            Node: Node:                 formal_parameterformal_parameter = 'identifierString? imageUrl = ''
 = ' = '                Defaulttype_identifier'
 = '{_$Event                Node: Node: String currencytype_identifier'
Node: '
arguments     = '      ('line')Node: class_body'
 = 'type_identifier'
 = ' = '{
  const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event;

  factory Event.fromJson(Map<String, dynamic> json) => _$EventFromJson(json);
}Stringmixins'
'
Node:                 Node:                 int = 'Node: with _$Event'
'
                type_identifier                          nullable_typeNode: declaration       = 'Node: Node: {Stringwith = ''
 = '{                Node: '
Node: identifier      identifierwith = '(const factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfile = ' = ' = 'amount?('
'
                  '
Node: '
                  Node: argument = 'Node: ?currencydeclaration'
 = ' = '              ?'
Node:                = ''
'line'                Node: const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _EventNode: '
type_identifier, = ' = '_$Event,'
                '
Node:         redirecting_factory_constructor_signature              Node: Node: Node: '
 = 'redirecting_factory_constructor_signatureconst factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfile                    ,identifier     = 'Node: const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Eventrequired'
string_literal = '           = 'Node: requiredconst_builtin'line' = ' = ''
imageUrl'
 = 'const'
Node:                         class_bodyNode: Node: ,'
'
'
 = 'formal_parameter              {
  const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event;

  factory Event.fromJson(Map<String, dynamic> json) => _$EventFromJson(json);
}Node: '
requiredconst_builtin = '      required = 'Node: '
{const                                     = 'Node: Node: {,' = '           = 'Node: String currency'              '
 = ''
      factory'
 = ''
factory          Node: '
                      Node:                 Node: Node: ,'declarationformal_parameter'
 = ' = '              String statusconst factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _EventNode: '
'
formal_parameterNode:  = '          List<String>? tagstype_identifier'
Node:  = 'factoryString = ' = 'factory'
''
identifier          '
                                 = 'Node: Node:                   Event        '
Node: Node:           redirecting_factory_constructor_signature                Node: identifiertype_identifieridentifier = ' = ' = 'currencyUserProfile'
String'
'
Node:  = '                          const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _EventNode: )formal_parameter_listNode:               '
 = ' = 'Node: )({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  })formal_parameter_list'
 = ''
({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  })            '
Node:                           Node: ( = '(Node: (type_identifieridentifier = ' = '( = ''
Liststatus,'
 = ''
,                '
              Node:               Node: Node: '
,formal_parameter                      requiredNode: Node:  = 'type_arguments             = ' = ' = 'String providerNode: '
requiredconst_builtin                '
<String>Node: optional_formal_parameters,'
'
type_identifier = ' = 'Node: {
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }const'
'
optional_formal_parameters                                Node:                = 'Node:           Node:               Node: {
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  } = ''
{String = '              '
{<                 = 'comment<Node: factoryNode: identifier'
 = ''
              formal_parameterNode:  = ' = '{factoryString status = '// pending, succeeded, failed, cancelled'
'
 = '                '
Node: provider          //'
Node: Node:               requiredidentifier = 'Node:  = ',{required'
'
                                 = 'Node: Node: Event              '
Node: type_identifier          formal_parameter = ' = '//String userId                '
'
Node:                                = 'requiredNode: , = 'type_identifierrequiredNode: Node:  = 'type_identifierrequired'
 = 'String              requiredNode: formal_parameter_list'
annotationString'
'
'
                 = '                  Node:  = 'identifier@Default(false) = '              ({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  })              StringNode: '
'
>                 = '                >Node:  = 'Node: status@'
identifier = '               = 'userId'
@'
            '
Node:                               (Node:  = 'formal_parameter(Node:  = ''
Node:             String idNode: formal_parameteroptional_formal_parameters = 'Node: identifier,'
'
Node:  = ', = 'Default = ''
,String paymentMethod                '
Node:  = '              argumentsNode:  = 'comment(false)'
, = ''
// pending, succeeded, failed, cancelled{
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }                                '
              '
Node: Node:                 type_identifierNode:  = ''
String'
                  requiredNode:  = 'Node: required('
nullable_type = '               = 'Node: ?formal_parameter(               = 'Node: String displayName//'
                                '
                { = '                  Node: Node: type_identifierNode:  = 'Node: //'
argument'
 = '                                Node: false?Node:  = 'identifierString = '{'
required'
                     = 'Node:                = 'id'
?falsetype_identifier = ''
falserequired'
'
Node: '
                 = 'Node: Stringidentifier                             = 'tags'
                '
Node: formal_parameter                 = 'Node: String paymentMethodidentifier'
required                Node: Node: ,                       = '              identifierNode:  = ',displayNameNode:  = ' = 'type_identifier, = ''
requiredString              '
'
Node:               ,Node:  = 'formal_parameter, = ''
'
Node:  = 'falseString idpaymentMethod'
              Node: annotation = '                                falseNode: '
identifierNode:                    = 'Node: type_identifierpaymentMethod) = ' = ''
String,              '
Node: '
,               = '              ,Node: Node:  = ',@Default([]) = '              ,Node: )'
'
formal_parameter                '
              '
required'
 = '                 = 'Node: String? pictureUrl              '
Node: @ = '@requiredNode:                 '
formal_parameter               = 'Node: formal_parameterNode: String? stripeSessionId = ''
bool isEmailVerifiedidentifier'
                              Node: formal_parameter = '                '
Node: Node: type_identifier                 = 'Node: Stringtype_identifier = 'bool'
 = 'type_identifierString? stripeSessionId = '                Node: Node: Stringnullable_type'
 = 'formal_parameter?                 = 'identifierNode:  = 'String titleDefault'
'
nullable_type                                Node: Node: arguments = ' = 'type_identifier?([])'
'
                   = '                  Node: StringNode: '
?( = ' = '                (Node: '
?identifier                   = 'Node: '
argument'
 = ''
[]title'
                '
                    Node: Node:               identifierNode:  = 'list_literalpictureUrl                 = ''
[]Node: '
                                      '
                  type_identifier               = 'idNode: String,'
 = ''
,                              '
Node: Node:               nullable_typeNode:  = 'formal_parameter, = ' = 'String? statusMessage?'
,'
'
                                  Node:               type_identifierNode:  = '?StringNode: '
 = ',                Node: Node: requiredNode:  = 'Node: ?identifier, = ''
isEmailVerified'
[nullable_type = '                              ?Node:  = 'required?'
[ = '              '
 = ''
required                '
Node:                                     Node: identifier]Node:  = ' = ' = ']requiredstripeSessionId'
'
'
?                            '
Node: Node:                   Node: Node: formal_parameterNode: ,? = ' = ' = ',String description'
'
formal_parameter               = 'Node:                 formal_parameterString title                  ,Node: identifier?Node:  = 'type_identifier)'
'
 = '                DateTime? createdAt                Node: '
Node:  = ' = ',String = ''
'
)                              Node: '
formal_parameter = 'Node: identifiertype_identifieridentifier = ' = 'Stringdescription'
'
stripeSessionId                              Node: Node: identifier, = 'String? stripePaymentIntentId = '              Node: formal_parameter'
 = ' = 'List<String> attendees              '
Node: title                ,'
Node: type_identifier = 'List                '
statusMessage = '                '
Node: ,type_identifierNode: '
              ,Node:  = ''
,DateTime               = ''
'
Node:                                 Node: ,nullable_type'
Node:  = 'type_arguments?              type_identifierNode:                = ',String               = 'requiredNode: '
 = 'annotation                required = 'Node: '
Node:  = 'formal_parameter,<String>@Default('line') = 'nullable_type              '
 = ''
'
              ?'
Node: Node: '
String? stripePaymentIntentId                                    Node: '
<                requiredNode:  = 'Node:  = '?                formal_parameter<@required = '                  ? = ''
Node: '
@                 = 'Node: '
Node: identifier?                  DateTime startDate               = ' = 'type_identifierNode: formal_parameter = 'String description'
'
Node: '
                stripePaymentIntentIdNode: '
identifier              Node: , = ', = ''
type_identifier?                '
 = 'Node: Default                                              Node: Node:  = 'StringNode: type_identifierformal_parameter'
 = 'identifierStringtype_identifierString? errorMessage'
'
                Node: nullable_type = '?'
                  Node: ? = '?'
                Node: identifier = 'stripePaymentIntentId'
              Node: , = ','
               = 'DateTime                Node: arguments = '('line')'
                  '
Node:                                 (Node: Node:  = 'Node:  = 'formal_parameter( = ' = 'identifierString? errorMessagetype_identifier'
'
 = '                StringNode: '
                  type_identifierNode:                 '
Node: argument                  nullable_typecreatedAtNode:  = '>String = ' = ''
>'line'                '
Node: '
 = 'identifierstartDate                    '
 = '?StringNode: '
              string_literalNode:                = 'Node: 'line',                , = ''
'
 = '                                      Node: Node:  = 'nullable_typeidentifier = ', = 'descriptionNode: attendees''
 = ''
              'Node: '
'
,                                    ?'
Node: ,'
 = ',Node:                = ''                  Node:  = ',required' = ''
required'
Node: '
?               = '              ?Node: '
requiredNode:  = '                formal_parameter,                  '
'
Node:               ?               = 'Node:                   formal_parameterrequired = ' = ''
Node: DateTime endDate              )Node: '
 = 'formal_parameter)                DateTime? updatedAtNode: Node: '
type_identifieridentifier = ' = '?DateTime startDate = '                '
'
Node: DateTimetype_identifier                 = 'Node: '
type_identifierDateTime              '
Node: '
                formal_parameterNode:  = ' = 'nullable_typeString provider = 'DateTimeerrorMessage'
                Node: Node:                 identifierformal_parameterNode:  = ''
type_identifier                endDate = ''
StringNode: '
              '
Node: identifier,               = ' = ',                Node: '
,Node:               identifierNode: ? = ''
 = 'DateTime? createdAt,'
'
                                                Node: errorMessagetype_identifierNode:  = 'Node: DateTime = ''
formal_parameterstartDate                '
Node:                 nullable_type = '?'
 = ' = '?              DateTime? createdAt'
'
                Node:                               Node: Node: Node: type_identifierNode: identifier = ' = 'identifier?updatedAtDateTimerequired'
,               = 'Node:  = ''
 = ',                  required'
,               = ''
,              '
'
Node: Node: Node: required?                 = 'formal_parameterNode:  = '?nullable_type = ' = 'required'
?'
'
                                  Node: String location,provideridentifier = ' = '              createdAt'
,                            '
Node: Node: ,                Node:  = ''
formal_parameter,'
Node: Node: ?type_identifierformal_parameter               = ' = '?DateTime? createdAtNode: '
 = ' = ''
String                              Node: Node: '
type_identifier} = ' = '                '
}Node:                 '
Node: identifierDateTime endDateidentifierDateTime,             = 'Node: location)'
 = ' = ')              '
,Node:           '
 = 'Node:               createdAt='
 = 'Node:                               formal_parameter,'
Node: '
Node: =type_identifier'
                 = '          DateTimeNode:  = 'nullable_type              , = '? = ',Node: Node: type_identifier} = 'DateTime? updatedAt = ''
}_AppUser'
'
            '
Node: '
)                 = ' = '                )Node: Node: '
                  ,'
Node: identifier'
               = '      Node: endDate          ?type_identifier = '               = '?Node: formal_parameter'
 = 'Node:                 '
Node: DateTimeidentifier'
Node:  = '              createdAt                Node: '
Node: ,nullable_type=;required = ' = ' = ';required'
 = ''
 = '                    Node: ?DateTime? updatedAtmethod_signature= = ''
'
factory AppUser.fromJson(Map<String, dynamic> json)              '
                                    ,Node: Node: '
?              '
Node: factory_constructor_signaturerequiredNode:  = ' = 'requiredfactory AppUser.fromJson(Map<String, dynamic> json), = 'Node: type_identifier                Node: Node: '
type_identifierformal_parameter = ' = ' = '              ,int capacity'
'
?Node: DateTime                formal_parameter              Node:  = ''
'
String location                          '
Node: Node: '
factorytype_identifier = ' = 'Node: factory                 = 'formal_parameter                identifierNode: '
 = '_UserProfileNode: int = 'type_identifier'
 = ''
String                      DateTime? updatedAtupdatedAt'
Node:           nullable_typeNode:  = 'identifier?                '
 = '                  AppUserNode: identifier'
Node: ?'
          identifierNode:  = ''
location = ''
?              '
Node: Node: .                 = '                ,; = ' = ' = '.;Node: '
'
type_identifier = '                    ,          Node: '
Node:               method_signatureNode: identifierNode: Node:  = ' = 'DateTimefactory UserProfile.fromJson(Map<String, dynamic> json)}'
 = '        }identifierNode: '
 = ''
capacity,factory_constructor_signature = '                , = 'Node: '
factory UserProfile.fromJson(Map<String, dynamic> json)nullable_type               = 'Node:             requiredupdatedAtNode: ?'
'
              fromJson                  '
Node:  = ''
required'
'
Node:                         Node:               factoryNode:  = '          ,factoryformal_parameterNode: )? = ' = ') = ''
'
 = '?Node: '
formal_parameter_list                 = '          Node: (Map<String, dynamic> json),,          Node:  = 'identifier, = 'Node: int capacityUserProfileidentifier'
 = ''
'
updatedAt                        '
              Node:               .Node: '
Node: Node: '
, = '=             = ' = 'Node: =(                '
,.} = ''
(required          '
Node:  = 'identifier             = ' = '          required'
'
}              Node:               '
Node: Node: formal_parameter}            type_identifier = 'fromJsonint priceNode:  = ''
}Node: '
                            Node: Node: Node: type_identifier) = 'formal_parameterint = ''
) = '                )'
Node: Map<String, dynamic> jsonidentifier          '
Node: '
 = 'type_identifier = ' = '_Eventintcapacity'
'
'
                                    Node: =Node: identifier = '           = '=price = ''
,'
Node:               )Node:               '
Node: formal_parameter_listNode: ,type_identifier = '           = '           = 'Node: (Map<String, dynamic> json) = ',,'
'
'
                            Node: Node: requiredMap = 'requiredrequired = ''
'
=              Node: Node:  = 'formal_parametertype_identifier = '= = ';_Payment'
 = ''
;          '
                                      Node: Node: type_argumentsmethod_signatureNode:  = ' = '<String, dynamic>factory Event.fromJson(Map<String, dynamic> json)required'
'
String createdBy'
'
Node:                                 (Node: Node:  = '<(type_identifier'
 = 'Node: <            '
Node: type_identifier                 = 'Node:  = 'type_identifierString = '_PaymentString'
'
;                                 = 'Node:         ;identifier'
              Node:       Node: '
 = 'Node: formal_parameterformal_parametercreatedBy = 'Node: Map<String, dynamic> json = 'method_signature'
 = 'int pricefactory Payment.fromJson(Map<String, dynamic> json)'
'
,                       = 'Node: Node: factory_constructor_signaturetype_identifier = ' = 'factory Payment.fromJson(Map<String, dynamic> json)Map              '
'
,factory_constructor_signature                      Node:  = 'type_identifierfactory Event.fromJson(Map<String, dynamic> json)Node: '
          Node:           '
Node: '
;,                 = 'Node: , = 'factory'
 = 'int              '
factory                Node: Node:  = 'factoryNode: '
;type_identifier = ' = 'factorydynamic'
              '
'
                annotationNode:           method_signature = ' = '@Default('draft')Node: factory Payment.fromJson(Map<String, dynamic> json)'
Node: Node: '
                        Node: Node: @ = 'identifiertype_arguments@factory_constructor_signatureidentifier'
 = ' = '                                priceNode: Node: '
 = 'factory Payment.fromJson(Map<String, dynamic> json)              Payment'
Node: ,           = 'Node: '
factoryidentifier = ' = 'factoryDefault          identifier> = ''
Event = 'Node: <String, dynamic>'
.'
 = '                ,Node: '
. = 'arguments>'
          '
                        Node:  = '              Node: Node: identifier('draft') = '                '
Node: Payment          Node: Node: required'
 = '<.required = 'identifier'
          identifier = 'Node:  = '.fromJson = '                  .'
 = ''
json<          .'
Node:             '
Node: formal_parameter_list'
(Node:  = ' = '(Map<String, dynamic> json)('
'
                                                        )Node:  = '(Node: Node: )'
Node: argument'
           = 'type_identifier'draft'Node: '
       = '                    Node: identifierNode: identifier = ' = 'fromJson = '(Stringfunction_body'
'
              string_literalNode:                 formal_parameter = 'Node:  = ',String createdBy = ''
,'draft'                '
Node: fromJsontype_identifier'
 = ''
 = '                      Node: Node: String          formal_parameterNode: '
 = 'formal_parameter_listMap<String, dynamic> json = ''
(Map<String, dynamic> json)                '
'
formal_parameter_list                            Node: Node: (                                    identifierNode:  = ' = 'createdBytype_identifier(Map<String, dynamic> json)'
'
 = '                          Node: =>
      _$AppUserFromJson(json);Node: , = ' = 'Node: ,Node: '
('
'type_identifier         = ' = ''Map'
Node: '
(=>              ('
Node: '
type_arguments             = 'Node:                       =>formal_parameter               = '            Map<String, dynamic> jsonNode: Node: formal_parameterannotation = ' = ''
'
dynamicMap<String, dynamic> json        '
Node:                               Node: identifier = ''
 = 'Node: Node:  = 'type_identifier@Default('draft') = ''
Map                '
'>               = 'Node: 'type_arguments'
 = '<String, dynamic><String, dynamic>                  '
Node: Node: '
 = '@>                '
Node:  = '              <Node:  = '_$AppUserFromJson<                )'
@Node:               '
                                <Node:  = 'Node: <type_identifierNode: '
identifiertype_identifier                 = 'Node: Maptype_identifier'
identifier = 'Default = ''
 = 'StringString'
'
 = '                                '
 = 'Node: json              ,Node:  = 'Node:         ,,'
 = ')                ,'
'
Node: type_arguments              selectorNode: Node:  = 'formal_parameter(json) = '                 = '            '
String statusNode:           )'
 = 'Node:                 )Node: Node: type_identifier'
'
<String, dynamic>type_identifier                '
arguments                       = 'argument_partNode:  = 'String(json) = ''
 = '<'
('draft')                '
Node:                   dynamicNode: Node: Node:              = 'type_identifierNode: < = ''
argumentsdynamic                '
identifierNode:  = 'type_identifier(json) = ''
String              function_body'
('
                 = 'Node: Node:  = '>                                 = 'Node:  = '>(,status = '=>
      _$UserProfileFromJson(json);,'
'
'
                      Node: (Node: => = ' = '(Node:                 identifier>Node:  = 'type_identifier'
>               = ''
dynamic = ''
json'
=>Node:                 argument'
 = ''
json                              '
'
Node:         Node:                             Node: )                 = 'identifier)Node: Node: '
Node:  = 'argument_$UserProfileFromJsonidentifierNode: '
 = '>identifier = ',> = ''
, = '               = 'Node:         identifier      json = ''
jsonNode: 'draft'            Node: function_body'
'
 = 'json                                  '
Node: Node: commentNode:  = 'string_literal              '
=> _$EventFromJson(json);Node:             )Node:  = '))selector = ''
'
// draft, published, cancelled, completed)                 = 'Node: Node: '
;=>) = ' = ' = '=>                '
Node: (json)        //Node:  = ''
//'draft''
'
 = '      )                        Node: '
Node: ;      function_bodyNode: '
 = 'function_body=>
      _$PaymentFromJson(json); = ''
=>
      _$PaymentFromJson(json);              '
Node: identifierformal_parameter=> = 'Node:  = '        Node:  = ''
_$EventFromJson}'
                               = 'Node: Node: selectorargument_part}=>'
Node: =>String? imageUrl'  '
 = ' = ''                '
=>Node: Node:                        = 'class_definition = 'Node:  = '(json)(json)''
@freezed
class UserProfile with _$UserProfile {
  const factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfile;

  factory UserProfile.fromJson(Map<String, dynamic> json) =>
      _$UserProfileFromJson(json);
}'
 = ''
'
                              'Node: '
argument_parttype_identifier         = ' = '    StringNode: Node: annotationidentifier = 'Node: (json)Node: arguments'
identifier = ' = '(json)_$PaymentFromJson                '
'
@freezed'
'
               = 'Node:         (_$PaymentFromJson            Node: '
'
                  Node:         Node: Node: )argumentsselector = ' = ') = '      (Node:  = ''
selectorNode: (json) = ''
              (json)Node: '
              nullable_type          (json)Node:  = 'argument?@ = ' = 'json@'
Node: '
'
('
 = '                                  argument_partNode: (Node:           '
?Node:               argument_partNode:  = ' = 'formal_parameter = '?(json)       = ''
'
                '
identifierNode: Node:  = '              jsonNode: '
identifier = 'freezedidentifierString status = '(json)imageUrl'
'
argument                '
Node:  = '                                      Node: '
Node: json              argumentsNode: type_identifier = ' = 'argumentsString(json)'
 = ''
(json)Node:                 '
Node: '
identifier               = '              ,                Node: ) = 'status = ''
)              ( = 'Node: '
,Node: '
identifier                          Node: (Node:  = 'formal_parameter( = 'jsonNode: List<String>? tags, = ''
'
(                              '
Node: '
Node: ;class = ' = 'class               = 'Node: '
,argument'
 = '              json              Node: '
Node: Node:     type_identifierNode: )identifier = ' = ' = ')UserProfile'
comment        ListNode: ;argument                '
'
 = '          Node: Node: json}superclass = ' = 'Node: '
with _$UserProfile = ''
'
// draft, published, cancelled, completed      }Node: '
mixins'
identifier = ' = 'jsonwith _$UserProfile'
'
;                                      Node: Node: )   = 'with                                 = 'Node: Node: Node: //; = ''
//type_argumentsidentifier = ')Node: '
<String>      class_definitionNode:          = '}'
 = 'Node: json@freezed
class AuthState with _$AuthState {
  const factory AuthState.initial() = _Initial;
  const factory AuthState.loading() = _Loading;
  const factory AuthState.authenticated(AppUser user) = _Authenticated;
  const factory AuthState.unauthenticated() = _Unauthenticated;
  const factory AuthState.error(String message) = _Error;
}'
'
;                   = 'Node: Node: annotation;               = ''
@freezedNode: '
 = 'formal_parameter      '
} = '      String? imageUrl = ''
)with                '
Node:  = 'type_identifierNode: Node:                           Node: @ = 'type_identifier) = ''
_$UserProfileStringNode: '
'
}'
     = '                Node: Node: class_bodynullable_type = '}<'
 = '@<        '
Node:  = '                  ?;Node:  = ''
; = ''
'
{
  const factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfile;

  factory UserProfile.fromJson(Map<String, dynamic> json) =>
      _$UserProfileFromJson(json);
}            Node: Node:                   identifier} = ' = 'Node: }    '
Node: '
class_definition         = 'Node: Node: class_definitionNode: type_identifier@freezed
class PaymentCreateRequest with _$PaymentCreateRequest {
  const factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequest;

  factory PaymentCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$PaymentCreateRequestFromJson(json);
} = ''
String{ = ''
freezed    ?class_definition'
Node:  = '    @freezed
class EventCreateRequest with _$EventCreateRequest {
  const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest;

  factory EventCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventCreateRequestFromJson(json);
}annotationNode: '
@freezed
class PaymentCreateRequest with _$PaymentCreateRequest {
  const factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequest;

  factory PaymentCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$PaymentCreateRequestFromJson(json);
} = ' = ''
?@freezed    '
Node:  = '                annotation{                      classNode: '
 = ' = 'identifierNode: '
class@freezedNode:        = ''
imageUrl>Node: '
       = '              annotationNode: > = ','
@freezedNode: '
'
 = '                Node: Node: identifierNode:  = '@declaration = ', = '@const factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfile                '
Node: @'
              nullable_type       = '@Node: Node: identifierAuthState@ = ''
formal_parameter = '     = ''
Node: List<String>? tags@superclass'
         = '                Node: Node: freezedtype_identifier'
 = 'redirecting_factory_constructor_signature = ''
with _$AuthState'
 = '      ?const factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfileNode: List'
identifier'
 = '      '
'
                                Node: Node:                 ?Node:  = 'const_builtin?type_arguments'
       = '                constNode: freezed = 'Node: Node: identifieridentifier'
 = ' = 'freezed          Node: '
tagsNode: <String>classfactory'
 = ' = '                  classfactory'
'
    '
Node: mixinsclass     = 'classNode: '
identifier           = '    Node: Node: identifierwith _$AuthState'
'
 = 'classPaymentCreateRequest = ' = ''
classUserProfile'
    Node: Node:     superclassNode:  = 'identifierwith _$PaymentCreateRequest'
                  Node: '
,           = '       = ',Node: '
EventCreateRequest        mixinsNode: Node: Node:               < = 'identifier = 'with _$PaymentCreateRequest = '<'
PaymentCreateRequest'
Node:                           Node: with'
'
 = '    with    '
Node: type_identifierformal_parameter_listNode:  = ' = 'with({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = 'StringNode: withsuperclasssuperclass'
annotation = ' = '        '
with _$PaymentCreateRequestNode:                   type_identifierNode: '
        >'
 = 'Node: >             = ''
type_identifier = 'Node: with _$EventCreateRequest@Default([])      '
'
Node:       mixins = ' = '                Node: _$AuthStatewith _$PaymentCreateRequest('
Node:          = '                Node: nullable_type'
mixins(with = '_$PaymentCreateRequest = '    ?'
Node: '
            class_body                  '
with _$EventCreateRequest = 'Node:  = 'Node: withNode: ?@optional_formal_parameters = ' = '? = '    '
{
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }@        '
Node: '
              '
{
  const factory AuthState.initial() = _Initial;
  const factory AuthState.loading() = _Loading;
  const factory AuthState.authenticated(AppUser user) = _Authenticated;
  const factory AuthState.unauthenticated() = _Unauthenticated;
  const factory AuthState.error(String message) = _Error;
}Node: '
{type_identifier = '      {Node:         Node:  = ''
_$PaymentCreateRequestclass_body'
                '
{Node:                   Node: Node: class_bodyrequired = 'Node: {
  const factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequest;

  factory PaymentCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$PaymentCreateRequestFromJson(json);
} = 'with{
  const factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequest;

  factory PaymentCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$PaymentCreateRequestFromJson(json);
} = '                '
 = '      Node: requiredNode: identifieridentifier{ = ' = 'with{'
'
{'
        '
      Node:       type_identifierNode:        = 'declaration_$EventCreateRequestNode:  = ''
const factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequestdeclaration    Node: '
 = '        Node: {Node: class_bodyconst factory AuthState.initial() = _Initial = 'redirecting_factory_constructor_signature = ' = ''
const factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequest{
  const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest;

  factory EventCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventCreateRequestFromJson(json);
}'
'
        '
      {          Node: redirecting_factory_constructor_signatureNode:               { = ' = 'Node: {formal_parameter = ''
 = 'String userIdtags'
 = ''
Node: Defaultconst factory AuthState.initial() = _Initial                '
Node: '
type_identifier                 = '      String                const_builtinNode: Node: '
 = 'declarationconstNode: '
          argumentsNode: Node:  = '              const_builtin'
 = 'const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequestNode: const                ,Node: '
 = '        declaration'
 = 'identifier          , = 'Node: userId'
'
Node: factory              factoryredirecting_factory_constructor_signatureNode:  = ',const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest([])'
 = ' = ' = 'const factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequest              '
Node:  = 'annotation        factoryfactory,          '
'
'
Node:  = 'redirecting_factory_constructor_signature           = '@Default([])const factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequestNode:           '
Node: '
'
identifierNode:                = '                  PaymentCreateRequest'
Node:           identifier           = 'Node: AuthStateformal_parameter_listNode:  = 'const_builtin                ({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = ''
required            '
Node: const_builtin = '(required = 'Node: (          ('
 = '            '
Node:  = 'optional_formal_parameters              constNode: Node: formal_parameterconst@ = ' = 'String displayName@'
'
Node:                           (Node: '
identifierNode: '
 = 'factory = ''
                  {
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  } = ''
                Node:               .Node:  = '{          Defaultargument = 'factory'
{'
'
          .Node:               Node: Node: Node: factoryrequired = 'identifier                type_identifierNode:  = 'arguments = ' = 'String = ' = ''
'
PaymentCreateRequest([])[]factory'
required'
                    '
Node:                   list_literal'
          Node: Node:           ( = '                              identifier[]Node:  = ''
EventCreateRequest = '                      Node: Node: (Node: '
formal_parameter                  identifier'
 = ''
 = 'Node: identifierinitial           = 'Node: argumentdisplayName'
'
formal_parameter_list = '              [Node: []'
String eventId           = 'Node: '
formal_parameter_list[                 = 'Node: (),'
           = ' = 'Node: ,formal_parameter_list                    '
'
({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  })Node:                       type_identifierNode: list_literal]               = ' = 'String = ' = '[]]            '
'
Node: Node: ({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  })('
'
 = ''
            (                  Node: Node: ('
) = ' = '            )                                      Node: '
)Node:               [Node:  = '(formal_parameterNode:              = 'identifierNode:  = '(String? pictureUrleventId = ''
 = '('
[                formal_parameter) = ''
'
List<String> attendees'
Node:           Node: ='
 = '=              '
'
                      Node:                 ]Node: type_identifier = ']            '
Node: optional_formal_parameters                   = '{
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }'
Node:               )Node:  = '{) = '{'
              Node: required = 'required'
                          Node: formal_parameter = 'Node: String eventId,'
 = '          type_identifierNode:  = 'type_identifierList = ''
                _Initial                '
Node:  = '      type_argumentsNode:  = ';<String> = ';'
'
      StringNode: '
declaration                 = 'Node: const factory AuthState.loading() = _Loadingnullable_type'
 = '        ?Node: '
redirecting_factory_constructor_signature                   = 'Node: const factory AuthState.loading() = _Loading?'
 = '          ?Node: '
const_builtin                 = 'Node: constidentifier'
 = 'pictureUrl'
              '
Node: ,               = 'Node: ,formal_parameter'
 = '              List<String> attendeesNode: '
formal_parameter = '                String? statusMessageNode: '
type_identifier = '                ListNode: '
type_identifier                 = 'Node: Stringtype_arguments'
 = '                <String>Node: '
nullable_type                   = 'Node: ?<'
 = '                  <Node: '
?                   = 'Node: ?type_identifier'
 = '          StringNode: '
                Node: Node: factoryidentifier = ' = 'factorystatusMessage'
'
                        Node: Node: identifier, = ' = 'AuthState,'
'
                        Node: Node: .annotation = ' = '.@Default('line')'
'
                          Node: Node: identifier@ = ' = 'loading@'
'
                          Node: Node: formal_parameter_listidentifier = ' = '()Default'
'
                            Node: Node: (arguments = ' = '('
            Node:                   optional_formal_parametersNode: >) = '>'
                Node: identifier = 'attendees'
              Node: , = ','
              Node: formal_parameter = 'DateTime? createdAt'
                Node: type_identifier = 'DateTime,Node: '
type_identifier                                Node:  = 'Node: String<('line')required'
'
 = '                  requiredNode: '
(                 = 'Node:               (identifier'
Node:  = '                  formal_parametereventId = 'Node: '
int amountargument'
               = 'Node: 'line'                '
Node: type_identifier                     = 'Node: ,string_literal) = ''
 = ''line','
          '
                      Node:               Node: =' = ' = '='
 = ' = '{
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }           = ''
'int                '
Node: Node:                 requiredNode: '
identifier'
 = ' = '<amountrequired'
'
'
                                          Node: Node: Node: ,formal_parameter{ = 'nullable_typeint amount                  '
 = 'Node:                 ?Node: '
                                        type_identifierNode: Node: ?type_identifier = ' = ' = 'Node: String{'
type_identifier = '                  '
 = ',Node: _Loading>'
'
 = '              >      '
              Node:                 'Node:  = 'identifier = ' = 'attendeesintNode: '
;              required'
 = 'Node: 'Node:  = '                ?,required'
'
;                Node: Node: identifierannotation              '
 = 'Node:                    = '@Default('jpy')Node: '
formal_parameter)                 = 'Node: )@ = ''
 = 'String title@'
'
              identifier                ,Node:                 '
identifierNode:  = ''
Node:                = 'formal_parameter = ' = 'Node: String providerDefault'
'
formal_parameter                 = '                      amountNode: DateTime? createdAt'
type_identifier'
              Node: createdAtNode:                 type_identifierarguments = 'Node:  = 'Stringdeclaration = ''
String'
                Node: ('jpy')identifierNode: '
 = 'type_identifierprovider = ''
                '
DateTime,'
                   = '                const factory AuthState.authenticated(AppUser user) = _AuthenticatedNode:  = ''
Node: Node:               nullable_type(               = 'Node: ,?identifierNode:  = ',title = ''
,,              '
Node:  = '              ,,'
 = ' = '              (Node: Node: '
annotation'
                  '
                                        Node: Node:  = '?argument}@Default('jpy') = ',Node: '
'
 = '                              Node: Node:  = '?redirecting_factory_constructor_signature@'
 = 'Node: const factory AuthState.authenticated(AppUser user) = _Authenticated                '
required = '           = ''jpy'}Node: '
'
formal_parameter                                Node:  = 'requiredDateTime? updatedAtidentifierNode:  = '@createdAt)'
 = 'Node: '
)const_builtin'
              string_literalNode: '
,                 = ' = ','
const'
'
                         = '                Node:           'jpy'Node: '
Node: identifier              Node:  = 'Node:                       =factory = ' = '=factoryDefaultformal_parameter'
'
'
Node: formal_parameterNode:  = ''String description = ''
type_identifier'                 = 'Node:                 type_identifier = 'DateTime? updatedAt = 'Node: '
StringDateTimearguments                '
'
                Node: '
Node:                     identifier = '                                      Node: ('jpy')type_identifier'
 = 'Node:                   Node: type_identifier_UserProfileNode: Node:  = '''
 = 'DateTime( = ''
nullable_type      'Node:                 ; = ' = ''
?description; = 'identifier(Node:                   '
Node: nullable_type) = '               = ''
'
)                  '
Node:                      = '?Node: Node:  = 'formal_parameterNode:  = '?method_signature'
String currency,                 = ''
Node:  = '                identifierNode: , = ''
updatedAttype_identifier'
 = 'factory UserProfile.fromJson(Map<String, dynamic> json)              StringNode: '
'
              AuthState                Node: Node:         '
identifier,          ?required = ''
, = 'required'
                  Node:                   Node: Node: .'
argument? = ' = '. = 'Node: ?'
'
          '
factory_constructor_signature               = '                'jpy'Node: currency}'
Node: '
                                                Node: , = ' = 'Node: }Node: identifier'
 = 'string_literal             = 'factory UserProfile.fromJson(Map<String, dynamic> json)authenticatedidentifierNode:  = ''
formal_parameter'jpy' = ''
          Node:                       factoryNode:  = ' = 'DateTime startDate,factory'
'
'
Node: )'updatedAt = '              )'
'
Node:                            = '          Node: Node: Node: formal_parameter_listtype_identifier          'annotation'
 = 'Node:                       =Node: identifier = '@Default('stripe')'
 = '=              DateTime = 'Node: , = ''
'
,''
 = '                '              Node:                 '
 = 'Node: '
                  (AppUser user)Node: UserProfile)'
 = 'Node: }'
          identifier)Node:  = 'type_identifier}@ = '_Event             = ''
'
startDate'
      '
                                        Node:           ;Node:  = 'Node: formal_parameterNode:  = ')String currency = ' = 'Node: @,'
 = ''
,                Node: '
Node:                 identifier               = 'Node: DefaultNode: required)'
.'
; = '                '
(required      '
Node:  = ' = 'Node: (method_signature.type_identifier = ' = 'factory Event.fromJson(Map<String, dynamic> json)String'
'
                            '
              '
arguments                            Node: Node:  = 'identifierformal_parameter('stripe') = 'Node: AppUser user'
formal_parameterNode:  = ''
Node:  = 'Node: currencyidentifier='
 = ' = '=factory_constructor_signature              '
 = 'fromJson                                factory Event.fromJson(Map<String, dynamic> json)Node: Node: '
(           = 'type_identifier(DateTime endDate'
 = '                  AppUser'
Node: '
Node:               '
Node: Node: identifier           = 'Node: ,                formal_parameter_list = '           = ',factory(Map<String, dynamic> json)userargumentNode: '
Node: type_identifiertype_identifier             = 'Node:  = '_Event = ''
)DateTime = '      )'
Node: ;'
'
                '
Node:                        = 'Node: Node: =factory'
 = '='stripe'('
identifier = '           = 'Node: endDate;'
'
 = '                                  Node: (Node:               ,'
type_identifier = '          ,Node:             string_literal = ' = '_Authenticated'stripe''
'
'
Node:                       annotation'
Node:  = '            Node: Node: ;@Default('stripe')Node:  = 'formal_parametermethod_signature; = 'identifier'Map<String, dynamic> json = ''
              '
               = 'Node: 'Node:  = ''
type_identifierfactory Event.fromJson(Map<String, dynamic> json) = '                      MapEvent'
Node: required'               = ''
'                '
'
Node:                         @Node: Node: '
 = '        declarationrequiredNode: '
factory_constructor_signature = '               = 'Node:           const factory AuthState.unauthenticated() = _Unauthenticated@Node: formal_parameter'
type_arguments = ''
                 = '        String locationNode: '
Node: factory Event.fromJson(Map<String, dynamic> json)identifier'
)Node:  = ' = '.Default)redirecting_factory_constructor_signature = ''
'
 = '                .          const factory AuthState.unauthenticated() = _UnauthenticatedNode:  = 'factory'
 = '<String, dynamic>factoryNode: '
                '
                    Node: Node: type_identifieridentifier          Node:  = 'identifier = 'StringEvent = ''
              '
fromJsonNode:                 '
Node: '
identifier                          Node:  = 'argumentslocationNode:  = 'formal_parameterNode: '
formal_parameter_list           = ' = 'const_builtin('stripe')               = '(Map<String, dynamic> json)String paymentMethod<'
 = 'Node: '
<Node: const            '
Node: '
(. = '                           = '(Node: Node: .factorytype_identifier'
 = ' = 'factoryString            '
Node:                   formal_parameter                 = 'Node: Map<String, dynamic> json'
'
type_identifier           = 'Node: StringNode:               '
Node: identifier          type_identifierNode:  = 'identifierMap = '('
'
 = '                 = '              AuthStateNode: '
type_argumentsNode:            = 'Node: '
.( = '                .fromJson,'
'
 = '                            Node: Node: formal_parameter_listargument = ' = '(Map<String, dynamic> json)'stripe'<String, dynamic>'
,'
                    '
Node: identifierstring_literal               = ' = 'Node: 'stripe'Node: '
                ,                      Node: '
Node: <' = ' = ' = '<''
'
paymentMethod                                      Node: '
Node: ,'               = 'type_identifierNode:  = '','
            '
String                          '
Node: Node: type_identifier = 'identifier = ',dynamic'
 = 'Node:               (Node: unauthenticated'
required'
                 = 'Node:           (>'
Node:  = '            >formal_parameter_listNode: '
formal_parameter} = '                  Map<String, dynamic> json = ' = ' = 'required'
'
()              '
                              Node: }            '
'
Node: Node: )Node:  = '            )identifierNode:                = ',Node: json = 'type_identifier'
formal_parameter( = ' = 'Map = 'int capacity('
'
'
'
,                '
            Node:                 Node: type_identifierNode:  = 'type_identifierint = ''
dynamic                              )Node:  = 'identifier)               = ''
capacityNode: '
          type_arguments              '
 = 'Node: <String, dynamic>                '
Node:             formal_parameterNode:  = 'Node: String paymentMethod)'
 = 'Node:                 >Node: )                )Node: '
 = ',) = '      ,'
'
Node: Node: function_body = '<          > = 'Node: '
=>
      _$UserProfileFromJson(json);=type_identifier=               = ' = 'Node: =identifier'
'
 = '                        json<Node: '
Node: type_identifier             = ' = ' = ''
        _Unauthenticated=Node: Node: =>'
) = 'String=> = ''
      )required'
Node:  = '      ;Node:  = 'function_body                           = ''
Node: => _$EventFromJson(json);requiredtype_identifier'
 = '                        String'
Node: '
              =>                 = 'Node: Node: =>formal_parameter'
 = ',Node:  = 'int priceidentifier, = ''
paymentMethod'
'
                        Node: '
type_identifierNode:  = 'identifierdynamicNode:               '
Node: type_identifier,                 = ' = 'Node: _$UserProfileFromJson_PaymentCreateRequest>'
'
         = '                ,Node: '
type_identifierNode:               identifier = 'Node: int} = ' = ''
       = '                Node: Node: ;identifier = ' = '}price'
;'
            _$EventFromJsonNode: '
'
)               = 'Node: Node: )selector'
>                  '
Node: Node: =selector = 'method_signature= = ' = ' = '              '
              factory PaymentCreateRequest.fromJson(Map<String, dynamic> json)          Node: Node: ,type_identifier = ''
,Node: (json)identifier = '         = '_PaymentCreateRequest'
'
jsonNode: '
      factory_constructor_signature             = 'Node:           '
;Node:  = 'argument_part;              Node: '
(json))       = 'Node:  = 'method_signature) = ''
factory PaymentCreateRequest.fromJson(Map<String, dynamic> json)'
'
              ;          factory PaymentCreateRequest.fromJson(Map<String, dynamic> json)'
Node: (json)'
argument_part                 = 'Node: (json)factory'
'
Node:                         declarationNode: Node: argumentsNode: Node:  = 'function_body = 'factory_constructor_signature(json) = ''
Node: const factory AuthState.error(String message) = _Error = ''
factory=> _$EventFromJson(json);        '
Node:  = 'redirecting_factory_constructor_signature           = 'Node: const factory AuthState.error(String message) = _Erroridentifier'
 = 'formal_parameterPaymentCreateRequest          argumentsNode:               const_builtinfactory PaymentCreateRequest.fromJson(Map<String, dynamic> json)Node:  = ''
'
'
 = '((json)                            Node: '
 = 'Node: ( = '=>'
String? imageUrl.'
 = '                              Node: Node: . = 'type_identifier=> = '              const'
StringargumentNode:  = 'factoryjson = ''
'
'
          factory'
Node: Node:                 identifierNode:  = '        nullable_typeNode: fromJson = ''
?                '
          '
                  (Node: identifierformal_parameter_listNode:  = '?(Map<String, dynamic> json) = ' = ''
_$EventFromJson                      Node: Node: Node: (factory = ' = '(?'
identifier'
             = 'Node: '
formal_parameter                   = 'Node:                 Map<String, dynamic> json(Node: json'
Node: identifier'
              identifier              Node: Node: argument = ' = ') = 'selector = 'json'
factoryimageUrl'
 = ''
          (json)Node:               identifier'
PaymentCreateRequest = ' = '          AuthState)'
'
Node:                         Node: '
.'
 = 'Node: .type_identifier         = 'argument_partNode: '
 = 'Node:           (json)Node: '
,;                            Node:           arguments = ' = ' = ';,Node: '
'
Map              (json)Node: '
Node:                     '
Node: Node: type_argumentsidentifier}              .Node:  = ' = '( = '} = '<String, dynamic>('
fromJson = ''
'
formal_parameter              identifierNode:  = ' = 'argument           = 'json'
List<String>? tags'
Node: '
              formal_parameter_listNode:                 )json.   = '                Node: )class_definition'
 = 'Node:           '
'
 = '<                @freezed
class AuthState with _$AuthState {
  const factory AuthState.initial() = _Initial;
  const factory AuthState.loading() = _Loading;
  const factory AuthState.authenticated(AppUser user) = _Authenticated;
  const factory AuthState.unauthenticated() = _Unauthenticated;
  const factory AuthState.error(String message) = _Error;
} = 'Node: '
(Map<String, dynamic> json)Node:     Node: Node: identifiertype_identifier<annotation'
'
 = '                    jsonNode: Node: '
; = ' = '@freezed               = 'identifierNode: ; = ''
(                       = '()Node: '
List}       = ''
Node:                 type_identifiererror'
Node: Node:             '
Node:           formal_parametertype_argumentsNode:  = 'formal_parameter_listMap<String, dynamic> json = ''
(String message)}              '
Node:  = '            '
@<String> = ' = '@String'
'
type_identifier'
 = '                        )Node: Node:   '
<Node:          = 'class_definition = ' = 'Node: Node: @freezed
class EventCreateRequest with _$EventCreateRequest {
  const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest;

  factory EventCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventCreateRequestFromJson(json);
}                Map('
Node:  = ''
,( = ''
                              ,Node: formal_parameter; = '< = 'String message;'
'
identifier'
       = 'Node:                   '
Node: }                 = 'Node: freezedtype_identifier'
}annotation = 'Node: dynamictype_arguments    '
Node: '
                 = '                 = 'Node: @freezedclass_definition'
Node: Node:       Node: >type_identifier = ' = 'Node:  = '<String, dynamic>classtype_identifier> = '@ = 'String = ''
@class'
                  String      '
Node: '
              '
@freezed
class EventCreateRequest with _$EventCreateRequest {
  const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest;

  factory EventCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventCreateRequestFromJson(json);
}              identifier     = 'Node: freezedNode: identifier = 'AuthStateNode: '
'
Node: identifier                 = 'Node: jsonidentifier>'
     = '< = '     = 'message<>'
Node: Node: '
'
'
            '
                    Node: Node: type_identifiersuperclass = ' = '            annotationString                 = 'Node: @freezednullable_type'
Node:  = 'with _$AuthState?'
class       = '      '
classNode: '
                '
    Node: Node: Node: @)identifier = ' = ' = ',                  Node: )EventCreateRequest)mixins@ = 'Node:  = ''
?       = 'with _$AuthState?'
 = 'Node:         identifier,Node:  = 'withfreezed'
)'
                    '
Node: Node:  = ''
class'
                 = '    Node: classidentifier'
 = ''
    tags                withNode: Node: superclasstype_identifier = ' = 'with _$EventCreateRequestdynamic'
Node: ='
'
function_body                    Node: Node: mixins,Node:          = ' = '==>
      _$PaymentCreateRequestFromJson(json); = ''
'
,                  '
Node: Node:               type_identifier'
Node:  = '                _ErrorNode: }>Node:  = ' = ' = '}>identifier'
 = 'type_identifierEventCreateRequest              '
Node:  = 'identifier    _$AuthState=>with _$EventCreateRequestNode: '
superclass'
'
 = '    '
with _$EventCreateRequest = ''
=>      '
Node:               Node: Node: identifier = 'mixins         = ' = 'Node: with _$EventCreateRequest_$PaymentCreateRequestFromJson            '
json;Node: '
class_body = '            with = 'Node:  = ';        with'
'
)Node:  = ')) = ''
)Node:                       Node: '
'
function_body       = 'Node:           =>
      _$PaymentCreateRequestFromJson(json);}'
 = '{
  const factory AuthState.initial() = _Initial;
  const factory AuthState.loading() = _Loading;
  const factory AuthState.authenticated(AppUser user) = _Authenticated;
  const factory AuthState.unauthenticated() = _Unauthenticated;
  const factory AuthState.error(String message) = _Error;
}}        '
withNode: Node: = = ' = 'type_identifier=withNode: '
Node:  = ''
selector'
=== End AST ===
_$EventCreateRequest'
=> = '     = '
=== Processing class: (json)AppUser'
 ===
=>          Node:                   Node:       '
argument_partNode:  = '{        (json)Node: Node:  = 'identifier{type_identifier = 'class_body = '_$PaymentCreateRequestFromJson'
'
_EventCreateRequest            '
Node: Node:       argumentsNode:  = ';       = 'Node:  = '{
  const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest;

  factory EventCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventCreateRequestFromJson(json);
}declarationtype_identifier'
 = ' = '_$EventCreateRequestconst factory AuthState.initial() = _Initial'
'
'
    (json)                Node: Node: class_body       = 'Node: {
  const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest;

  factory EventCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventCreateRequestFromJson(json);
}{selector = ''
{'
      '
Node:               {      Node: Node:  = 'redirecting_factory_constructor_signaturedeclaration{ = ';'
const factory AuthState.initial() = _Initial'
      '
      Node: Node: Node: method_signature( = '( = ' = '          const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest = 'Node: factory EventCreateRequest.fromJson(Map<String, dynamic> json)'
'
                const_builtinNode: Node: redirecting_factory_constructor_signaturefactory_constructor_signature = ' = '(json)factory EventCreateRequest.fromJson(Map<String, dynamic> json)'
'
constdeclaration
=== Processing class:  = '          '
 = ''
Node:               const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest          '
Node: Node:           UserProfileargument_partNode: argument          const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequestconst_builtinNode: '
factory = '        const = 'factoryfactory ===
'
 = 'factory          '
'

=== Processing class:                     AuthStateNode: Node:  = 'identifierredirecting_factory_constructor_signature = 'Node:  = 'jsonEventCreateRequestfactory'
 = 'Node: '
           = 'Node: identifier. = '(json) = '.'
 ===
                AuthStateconst factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequestNode: '
'
identifier                    Node: Node: const_builtinfactory = ''
const = '          '
json'
'
Node:                           Node: identifierargumentsNode:            = '.(json) = ' = ''
EventCreateRequest.)              Node: Node: ('
 = ' = '          ()'
'
Node: '
        factory              identifier = 'Node:           argumentfactoryNode:  = 'identifierjson = ''
initial          Node: '
'
Node:                           Node:  = 'formal_parameter_list; = 'Node: ({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = ''
identifier;formal_parameter_list = 'fromJsonjson            '
'
'
                         = 'Node: Node: formal_parameter_list( = '()Node: (Map<String, dynamic> json)          '
) = '                  Node:  = '(Node: )}'
 = '(        '
 = ''
(            '
            }Node: Node: Node: Node: optional_formal_parameters(identifier = ' = ' = '(EventCreateRequest            '
Node: '
'
formal_parameter; = '           = '            ;Map<String, dynamic> json'
'
Node:       )              Node: {
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }}Node:  = ''
  } = ''
formal_parameter_listNode:                 type_identifierNode:  = 'class_definition = ' = 'Map({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  })@freezed
class PaymentResult with _$PaymentResult {
  const factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _Success;

  const factory PaymentResult.failed({
    required String errorMessage,
  }) = _Failed;

  const factory PaymentResult.cancelled() = _Cancelled;
}'
Node: Node:               {Node: class_definitiontype_arguments = ' = ' = ')<String, dynamic>'
'
              '
'
Node:                             =Node:  = 'Node: @freezed
class PaymentResult with _$PaymentResult {
  const factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _Success;

  const factory PaymentResult.failed({
    required String errorMessage,
  }) = _Failed;

  const factory PaymentResult.cancelled() = _Cancelled;
}Node: '
<= = '{'
annotation'
<                        Node: Node: required(type_identifier     = ' = '('
'
 = '            _Initial                '
required = ''
Node:       Node: Node: optional_formal_parametersNode:  = ';{
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  } = 'type_identifier; = ''
String                    '
Node: annotation                Node: declaration'
formal_parameter = '@freezed = ' = 'String titleconst factory AuthState.loading() = _Loading@freezedNode: '
'
,       = 'Node: ,@                '
 = 'Node: '
@type_identifier       = ''
Node: '
      @Node:  = 'Stringidentifier@ = ''
freezed              '
                              Node: Node: redirecting_factory_constructor_signatureNode: identifier = 'identifierconst factory AuthState.loading() = _Loading                '
 = ' = 'Node: titletype_identifierfreezed = ''
dynamic          '
Node:                     const_builtinNode:  = '>const = ''
>Node: '
class                        Node: Node:  = 'identifierfactory = ' = 'jsonclass'
'
'
Node: factory'
{    '
 = '              {          '
Node: Node: identifier               = 'Node: AuthStateNode: class = 'class,'
'
 = '              ,Node: '
.Node:                = 'identifierNode: .required'
 = ' = '              PaymentResult'
requiredrequired'
             = '                  Node: Node: )formal_parameterNode:  = 'requiredsuperclassString description = ''
Node: '
                 = 'Node: )type_identifierNode: '
 = 'identifier      identifier               = ' = 'with _$PaymentResultloadingNode: '
'
formal_parameter          StringNode:  = ''
function_body      String titlePaymentResultNode: '
mixins'
 = 'Node:                 with _$PaymentResultformal_parameter_list'
Node:  = 'type_identifier                         = 'Node:  = 'withString = ''
()=>
      _$EventCreateRequestFromJson(json);with                    '
Node: Node:         '
Node: superclassidentifier = 'type_identifier = 'with _$PaymentResulttitle'
'
 = '            Node: Node: _$PaymentResult(       = 'Node: '
mixins(    identifier'
Node:  = 'class_body             = 'Node: with _$PaymentResult)'
 = ' = '){
  const factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _Success;

  const factory PaymentResult.failed({
    required String errorMessage,
  }) = _Failed;

  const factory PaymentResult.cancelled() = _Cancelled;
}'
'
                  '
Node:         =Node:                = 'Node: with,=description = ' = 'Node: ,with'
'
'
                                    Node: Node: Node: type_identifierrequired = '=> = '_$PaymentResultrequired'
,'
 = '                              Node: formal_parameter = '=> = 'String descriptionNode: ,'
'
'
                              Node: Node: type_identifierrequiredtype_identifier'
 = ' = ' = 'required        Node: '
StringNode:               {identifierNode:  = ' = '_$EventCreateRequestFromJson{'
'
'
formal_parameter_Loading            '
Node: Node: selectorclass_body       = 'Node: (json) = ''
;           = 'Node: DateTime startDateargument_part = '                {
  const factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _Success;

  const factory PaymentResult.failed({
    required String errorMessage,
  }) = _Failed;

  const factory PaymentResult.cancelled() = _Cancelled;
};'
'
'
Node:                             Node: Node:       {declaration = ' = 'Node: const factory AuthState.authenticated(AppUser user) = _Authenticateddeclaration = '{(json) = ''
'
      '
identifier        Node: redirecting_factory_constructor_signatureNode: const factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _SuccessNode:  = ''
            type_identifier         = 'Node: DateTimeredirecting_factory_constructor_signatureconst factory AuthState.authenticated(AppUser user) = _Authenticateddeclaration'
Node:  = '                argumentsNode:  = ' = ' = '(json)description'
const factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _Success'
              '
Node:         (           = 'Node: Node: identifierconst_builtin( = 'const factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _Successconst'
'
'
'
 = '          startDateredirecting_factory_constructor_signatureNode: '
 = '              const_builtinNode:           argumentconst factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _Success = ' = 'constjson'
'
                                        '
              Node:           Node: Node: ,const_builtin = ' = 'Node: Node: factory,identifier = ' = 'factoryNode: '
'
factory,           = 'Node: , = ''
identifier               = '              AuthStateNode: json'
const          Node: '
Node: required          factoryrequiredNode: '
factory          . = ''
Node: factory = '              '
Node: identifier          ) = 'Node:  = 'identifier = ') = ''
PaymentResultrequired'
'
required        PaymentResult'
 = '                            .'
Node: '
Node: formal_parameter                    Node:  = 'formal_parameterDateTime endDateidentifier = ' = ''
authenticatedNode: DateTime startDate'
Node: '
          .                Node: Node: ;type_identifier = ' = '                .DateTime'
'
 = '                          Node: ;identifierNode: '
Node:           formal_parameter_listNode:  = '.type_identifieridentifier = ' = ' = '      .Node: '
} = ' = 'DateTime}          success'
startDate'
  (AppUser user)          Node: Node: class_definition'
Node: formal_parameter_list'
'
 = '                          @freezed
class EventUpdateRequest with _$EventUpdateRequest {
  const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest;

  factory EventUpdateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventUpdateRequestFromJson(json);
}Node: '
,Node:                     (Node: Node: annotationidentifier = ' = '@freezed = ''
endDateidentifier'
       = 'Node:                = '@({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = ',@'
success            '
 = 'Node: Node: '
'
,       = 'Node:               (identifier = '           = 'freezed,('
'
'
    Node:                           Node: Node: Node: formal_parameterclass = ' = 'AppUser userNode: classformal_parameter_list'
'
 = 'requiredrequired = '    requiredNode: '
 = '(required({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  })              identifierNode: '
formal_parameter = '             = 'Node: String location('
'
              EventUpdateRequest = '                '
'
Node:     type_identifierNode:  = '            String('
superclass                               = 'Node: Node: with _$EventUpdateRequestidentifierformal_parameter = ' = 'locationDateTime endDateNode: '
'
type_identifierNode:  = '            AppUseroptional_formal_parameters'
 = '              '
                Node: Node: '
optional_formal_parametersidentifier = '      {
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }Node: '
mixins                             = '{
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }Node: Node:  = ',type_identifier'
 = 'userDateTime              '
Node:  = '{Node: '
 = ',{                 = ''
{{'
'
              with _$EventUpdateRequest              Node:               Node: Node:             Node: requiredNode:  = ')required = ''
identifier)required'
 = 'requiredrequired        '
 = '              required              '
Node: Node: Node:               formal_parameterformal_parameterNode:  = 'formal_parameterint capacity = ' = ' = 'endDatewith'
'
 = '          withNode: '
              =        Node:  = ''
=,                '
Node:  = '          type_identifierNode: String paymentId = 'type_identifierint = ''
'
_Authenticated                ,Node: Node: '
type_identifieridentifier              '
 = 'String paymentId      _$EventUpdateRequestNode: '
;'
 = '                ;                '
Node:           type_identifierNode:  = 'Node: Node: StringrequireddeclarationNode: type_identifier = ' = ' = ''
requiredcapacity'
'
                               = 'StringNode: const factory AuthState.unauthenticated() = _Unauthenticated,              class_body'
Node:  = ' = 'identifier, = ''
paymentId{
  const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest;

  factory EventUpdateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventUpdateRequestFromJson(json);
}        '
'
'
Node:                     redirecting_factory_constructor_signatureNode: Node: required                 = ' = 'requiredconst factory AuthState.unauthenticated() = _UnauthenticatedNode:               Node: '
{'
 = 'identifier{              Node: '
Node:  = 'formal_parameter                 = 'Node: Node: const_builtinformal_parameter = 'declaration,const = 'int priceconst factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest = ''
paymentId        String location'
Node: '
              redirecting_factory_constructor_signature                Node:  = ' = 'const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest,'
'
 = '          ,Node: '
'
                        ,Node: Node: '
required              factoryconst_builtinNode:  = '                type_identifier = 'Node: const = ''
Stringfactory = ''
required                '
'
type_identifier              Node:  = '          Node: intformal_parameter'
Node: identifier                requiredNode:  = 'identifier           = 'requiredNode: '
 = ' = '              String sessionIdAuthStateNode: Node: formal_parameter'
 = 'priceString sessionId'
'
factory'
                                Node: Node: type_identifier = ' = 'type_identifier                        Node: factoryString.'
 = '          '
 = 'identifier. = 'locationNode: '
,Node:                = 'Node: identifier, = ' = ',String,EventUpdateRequest'
                '
'
Node:               identifier           = 'Node: '
          formal_parameterNode:               formal_parameter_listsessionIdNode:  = ''
'
({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = '                '
Node: String? imageUrl            identifierrequired               = 'Node: sessionId,'
 = ' = 'Node: ,identifier'
 = 'Node:               unauthenticatedNode: '
formal_parameterrequired          '
 = 'Node:               (              Node:  = 'Node: (,String? paymentIntentId = ''
'
,            '
Node: '
              optional_formal_parametersNode: formal_parameterformal_parameter = '                 = 'int capacityString? paymentIntentId'
Node:  = 'type_identifierformal_parameter_list{
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }'
                 = ''
              StringNode:                 '
Node:                 {                type_identifierNode: Node:  = 'type_identifiertype_identifier = ' = '()int = ''
'
StringNode:              = 'Node: nullable_type'
({ = ' = ''
(?'
                                          StringNode: Node: formal_parameter) = ''
 = 'String? title                '
'
Node:                                   Node: Node: type_identifier? = ' = 'String?                Node: )Node: identifier'
 = 'nullable_typecapacity          '
Node: nullable_type='
               = 'Node:                 =Node: ,'
'
 = 'identifier                          Node:  = 'Node: nullable_typepaymentIntentId = '? = ' = '??'
'
'
type_identifier'
                                    Node:  = '              _Unauthenticated?'
Node: ,                        Node: Node: ;'
 = '?;,'
              Node:        = ' = 'Node:  = 'declaration? = ''
const factory AuthState.error(String message) = _Error?Node: '
required        , = 'Node: '
redirecting_factory_constructor_signature?                required'
Node:  = 'identifier                 = '?imageUrl'
              '
Node:                 }               = 'Node: }formal_parameterNode: '
 = '            int priceNode: '
Node: identifieridentifier)'
 = ' = '              )const factory AuthState.error(String message) = _ErrorNode:  = ','
title = ''
 = '                        ,Node: '
Node: =,                paymentIntentId = 'Node: '
 = ',              '
type_identifier=              '
Node:  = 'formal_parameter           = 'Node: String? descriptionNode: ,              '
const_builtin'
 = ' = 'intconst'
'
,          '
Node:           factoryNode:  = 'Node: factorytype_identifierformal_parameter'
 = '                        List<String>? tagsNode: Node:                  = ''
_Successidentifier'
} = ' = '      }Node: '
;                 = '                AuthStateNode:             Node: ;Node: '
)type_identifier       = ' = 'Node: )String'
identifierNode: '
 = 'declarationprice                '
Node:  = '              nullable_typetype_identifierNode:  = 'const factory PaymentResult.failed({
    required String errorMessage,
  }) = _Failed?,'
 = ''
,                  '
'
 = '                        ListNode: Node: Node: '
?         = 'Node: ?                redirecting_factory_constructor_signature'
 = '.const factory PaymentResult.failed({
    required String errorMessage,
  }) = _Failed          '
 = 'formal_parameterNode:  = '          type_argumentsString? imageUrlNode: '
 = '.const_builtinNode:                  = ''
Node: constidentifier'
 = '          description='
Node:  = '              identifier          Node:  = '=                <String>'
Node: '
          type_identifier                   = 'Node: Node: String<type_identifier = ' = '<_Success'
,                  '
'
error                      '
Node:           ;Node:  = 'formal_parameter_list, = ''
(String message)              Node: Node: factorytype_identifier = 'Node:  = 'nullable_typeString = ' = ''
factory'
?Node: '
formal_parameter                               = 'Node: DateTime? startDate?'
 = '?;'
Node: '
                (Node:            = 'Node: (identifier'
identifier'
                   = '      PaymentResultNode: Node: declaration'
                 = '          const factory PaymentResult.failed({
    required String errorMessage,
  }) = _Failed = ''
Node: imageUrl.'
            > = '                      Node: .Node: ,redirecting_factory_constructor_signature'
 = ' = 'const factory PaymentResult.failed({
    required String errorMessage,
  }) = _Failed          '
Node: Node: ,type_identifier = '          >Node: Node: '
formal_parameter                '
const_builtinNode:                = 'Node: nullable_typeformal_parameter = ' = ' = 'List<String>? tagsconst'
'
identifier                           = 'Node: Node: failedfactory = ' = ''
factorytype_identifierDateTime = 'String messageList'
?'
                          '
Node:               '
Node: Node:                   type_identifiernullable_typeNode:  = ' = '??formal_parameter_list'
                 = 'Node:           Stringtype_argumentsNode:  = ''
<String> = '              identifierNode: ({
    required String errorMessage,
  })identifier = ''
PaymentResult'
            '
Node:  = '?'
message          '
Node: '
.             = 'Node: .)'
                   = '          )Node: '
identifier( = '          failedNode: '
 = '=           = 'Node: =formal_parameter_list'
                  Node: Node:                  = 'Node: (identifier'
 = '({
    required String errorMessage,
  })tags            '
Node:           ?<Node:  = ' = '?<type_identifier'
'
 = ''
_Error                  '
              Node: Node:       ,            optional_formal_parameters = 'Node:  = '({
    required String errorMessage,
  } = ','
('
              '
Node:                 {            Node: Node:  = 'optional_formal_parametersidentifiertype_identifier = ' = '{
    required String errorMessage,
  } = ''
StringNode:               '
;startDate              Node:                   '
Node: {>              Node:  = ',{ = ' = ''
{;'
              '
              Node:       Node: Node: Node: }required> = ' = '}} = ''
 = 'required                }'
'
Node:               nullable_type=== End AST ===
 = 'required? = '
=== Processing class: Node: '
'
formal_parameter,required            '
Node: '
               = 'AppUserString errorMessage ===
                  
=== Processing class: '
Node: )              formal_parameterNode: UserProfileNode:  ===
 = 'formal_parameter                DateTime? endDate = 'Node: '
String errorMessagetype_identifier'
                 = 'Node:                 type_identifierNode:  = 'type_identifierDateTime? = ''
 = ')                ?StringNode: '
'
 = 'nullable_type                                Node:  = 'identifier? = ''
errorMessage                  '
StringNode: '
?'
 = '                          Node: ?='
 = '                
=== Processing class: =Node: '
Node: AuthStateidentifier           ===
identifier = '              tags = ''
Node: endDate              identifierNode: '
, = ' = 'errorMessage,              '
'
Node:                             Node: type_identifier = 'Node: Node: _EventCreateRequest,, = ' = ','
,'
'
}              Node:               Node: Node: }formal_parameter, = ' = ' = ', = '}}'
'
String? location'
                        '
Node: Node: )                ) = ' = '))              '
'
Node:                     }Node: Node:  = '      type_identifierNode: } = '=Node: String = ''
=;                '
Node:  = 'nullable_type          ;Node: '
 = 'type_identifier'
 = '?_EventCreateRequest'
'
=            Node: Node: method_signature = ' = ';factory EventCreateRequest.fromJson(Map<String, dynamic> json) = ''
;            '
                          Node: =factory_constructor_signatureNode: '
                Node:  = 'method_signatureNode:  = 'type_identifierNode:  = ')_Failed = ''
factory EventCreateRequest.fromJson(Map<String, dynamic> json))      '
Node: '
;           = '          ;Node: factory EventCreateRequest.fromJson(Map<String, dynamic> json)'
=Node:  = '      =factory'
Node:  = 'declaration          '
Node: ?type_identifierfactory = ' = '_Failed? = ''
'
const factory PaymentResult.cancelled() = _Cancelled                      Node: Node: identifier        ; = 'Node: location = ''
factory_constructor_signature;              '
 = '      '
Node: Node: declaration, = ' = '        factory EventCreateRequest.fromJson(Map<String, dynamic> json)'
const factory PaymentResult.cancelled() = _Cancelled'
Node:           redirecting_factory_constructor_signatureNode:  = 'identifierconst factory PaymentResult.cancelled() = _Cancelled           = ','
'
'
          EventCreateRequest              Node: Node: '
const_builtinformal_parameterNode:  = 'factoryconst = ' = '                  factoryNode: '
redirecting_factory_constructor_signatureint? capacity = '          '
const factory PaymentResult.cancelled() = _CancelledNode: '
identifier                          Node:  = '.EventCreateRequest = ''
.Node: '
Node: const_builtin          type_identifierNode:  = 'factory = ' = '          '
factoryNode: '
.                     = 'Node: constintidentifier'
'
Node:                 identifier          Node:  = 'nullable_typefromJson = ''
? = ''
          Node: Node:                   formal_parameter_listNode: .? = ' = 'factory?(Map<String, dynamic> json)'
 = 'factory'
'
'
                      Node: Node: PaymentResultidentifier'
(                 = ' = 'fromJson(          '
Node:           identifierNode:           '
. = '             = 'Node: .formal_parameter'
 = 'Node:           Map<String, dynamic> jsonNode: '
identifierPaymentResult = ''
              Node: cancelledNode: '
type_identifier           = 'formal_parameter_listMap           = 'Node: '
formal_parameter_list(Map<String, dynamic> json) = '              ()Node: '
type_argumentsNode:  = '            <String, dynamic>identifier'
'
.                            Node: Node: Node: ( = ' = '<. = ''
<capacity          '
Node:  = '                identifierNode:  = 'type_identifiercancelled = ''
'
(          '
Node: Stringformal_parameter_list                           = 'Node: ()Node: '
formal_parameter'
,(             = ' = 'Node: ,('
                 = 'Node: (,'
               = '             = 'Node: ()'
 = 'Map<String, dynamic> json)            '
Node: Node:           '
Node: )formal_parameter = '=) = ''
 = '=,                        Node: '
Node: =type_identifier = ' = '=                Map'
'
                        int? price'
Node: '
          type_argumentsNode:  = 'type_identifierNode:  = '                _CancelledNode: Node: type_identifiertype_identifier'
 = '       = 'type_identifierdynamic = 'Node: _Cancelled;'
<String, dynamic> = '      ;Node: '
;       = ''
;int'
Node: '
      }Node:                 Node: <} = ' = ' = '                }}'
'
'
Node:                   Node: Node: class_definitionnullable_type> = '  ?Node: '
class_definition = ' = '                  @freezed
class PaymentState with _$PaymentState {
  const factory PaymentState.initial() = _StateInitial;
  const factory PaymentState.loading() = _StateLoading;
  const factory PaymentState.success(Payment payment) = _StateSuccess;
  const factory PaymentState.failed(String errorMessage) = _StateFailed;
}Node: '
?     = ' = '?Node: '
<annotation                 = 'Node: '
@freezedidentifier'
 = '                price      '
Node: @freezed
class PaymentState with _$PaymentState {
  const factory PaymentState.initial() = _StateInitial;
  const factory PaymentState.loading() = _StateLoading;
  const factory PaymentState.success(Payment payment) = _StateSuccess;
  const factory PaymentState.failed(String errorMessage) = _StateFailed;
}>              '
Node: Node: ,'
 = 'type_identifier,              '
 = 'Node:               @    Node: StringNode: formal_parameterannotation = ' = 'String? imageUrl = ''
'
@freezed                @Node: identifiertype_identifier                 = ' = 'StringNode: '
'
json      '
'
                                  Node: Node: @Node: Node: ,identifier) = ' = 'nullable_typefreezed) = ''
? = ''
    '
                  Node: Node:       ?classNode:  = ' = 'function_body = '@?'
'
 = '                      Node: ,Node: identifierclass = 'identifierimageUrl = ''
freezed'
    '
              =>
      _$EventCreateRequestFromJson(json);Node:                 ,Node:  = 'type_identifier, = ''
'
dynamic'
'
                        Node: Node: =>> = '    Node:  = '              >Node: Node: formal_parameter'
classidentifier              => = 'Node: PaymentStateidentifier'
'
 = '    List<String>? tagsNode:  = ''
superclassclass                 = 'Node:         type_identifierwith _$PaymentState = 'Node: '
 = ''
identifier    jsonNode:       '
Node:  = 'mixins_$EventCreateRequestFromJson             = 'Listwith _$PaymentStateNode: '
)identifier         = ' = 'Node: '
PaymentStatewith'
 = '            Node: withselectorNode: '
 = '        superclassNode: )type_identifier'
 = ''
_$PaymentState      '
Node: (json)    function_bodyNode: '
 = ' = '          =>
      _$EventCreateRequestFromJson(json);                '
with _$PaymentStateNode:         type_arguments'
class_bodyNode:  = 'argument_part<String> = ''
Node: (json)                  '
Node:  = '            <Node:  = 'arguments< = '      =>(json)'
Node: {
  const factory PaymentState.initial() = _StateInitial;
  const factory PaymentState.loading() = _StateLoading;
  const factory PaymentState.success(Payment payment) = _StateSuccess;
  const factory PaymentState.failed(String errorMessage) = _StateFailed;
}                   = ''
Node: =>      '
type_identifiermixins         = ' = 'Node: String'
Node: with _$PaymentState'
              {                  '
 = 'Node: Node: {        >'
Node:  = '      >with'
Node:  = '                declarationwith = 'Node: const factory PaymentState.initial() = _StateInitialidentifier'
( = '         = 'nullable_type('
'
 = '                      Node: Node: type_identifierNode: argument = 'redirecting_factory_constructor_signature_$PaymentState_$EventCreateRequestFromJson'
 = ''
    ?        Node: Node: class_bodyselector = 'json = ''
{
  const factory PaymentState.initial() = _StateInitial;
  const factory PaymentState.loading() = _StateLoading;
  const factory PaymentState.success(Payment payment) = _StateSuccess;
  const factory PaymentState.failed(String errorMessage) = _StateFailed;
}const factory PaymentState.initial() = _StateInitial                  '
Node: '
? = '       = 'Node: ?(json)'
'
                          Node: {const_builtin = 'Node: { = ''
const'
      '
                          Node:           declarationNode:  = 'Node: const factory PaymentState.initial() = _StateInitialfactoryargument_partNode: identifier'
 = 'identifier         = 'Node: tags(json)'
redirecting_factory_constructor_signature'
 = ' = 'const factory PaymentState.initial() = _StateInitial              '
Node:                       ,Node:  = 'Node: const_builtin, = ''
jsonconst              '
Node: '
formal_parameterarguments           = 'Node: String? statusfactory               = ' = ''
 = 'factoryNode: (json)                '
'
)                        Node: Node:  = '(Node:  = 'type_identifier() = ''
Stringidentifier'
'
factory                 = 'Node: PaymentState        nullable_type'
'
 = '                    ?Node: Node: '
.               = '                  .Node: '
?identifierNode:  = 'Node: ?          ;'
Node:  = '                identifier = 'argument; = ' = ''
jsonPaymentState      '
Node: '
                }Node:  = 'identifier           = '}json'
Node: initial'
  .              Node: Node: class_definitionNode: ) = ' = 'identifier@freezed
class EventUpdateRequest with _$EventUpdateRequest {
  const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest;

  factory EventUpdateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventUpdateRequestFromJson(json);
} = ''
)status    '
 = 'Node:           annotationNode:  = 'formal_parameter_list@freezed'
 = ''
        .      '
Node: '
@              () = 'Node: @          '
Node: ;       = 'Node: ;identifier'
identifierNode: '
 = ', = ' = '      ,freezedNode: initial'
}'
 = '              Node: '
}            } = '          '
}Node: '
  formal_parameter_list            Node: Node: class_definition) = ' = '() = 'Node: @freezed
class EventUpdateRequest with _$EventUpdateRequest {
  const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest;

  factory EventUpdateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventUpdateRequestFromJson(json);
})'
( = '    '
(                '
Node: Node: (class           = ''
class = '            '
Node: Node: )(    annotation = ''
Node: )identifier            '
Node:  = 'Node: EventUpdateRequest)'
 = '=     = '           = '=@freezed'
'
)          '
      Node: Node: Node: @           = '=@Node: Node: '
=       = 'superclasstype_identifier= = ''
= = ''
          with _$EventUpdateRequest          Node: Node: identifiertype_identifier = ' = 'freezed'
'
Node:  = '      type_identifierNode: _EventUpdateRequest    mixinsNode:  = 'class'
_StateInitial = ' = 'classwith _$EventUpdateRequest      '
'
        Node: ;    Node:  = 'with'
; = '      withNode: _StateInitial'
'
identifier        '
Node:  = '      EventUpdateRequesttype_identifier'
 = 'Node: _$EventUpdateRequest;'
 = '    ;'
Node:       Node:       superclassNode:  = 'declarationNode: with _$EventUpdateRequest = ''
method_signatureconst factory PaymentState.loading() = _StateLoading      '
Node:  = ';mixins = ' = ';factory EventUpdateRequest.fromJson(Map<String, dynamic> json)with _$EventUpdateRequest'
                  Node: Node: class_bodydeclaration'
 = 'Node: {
  const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest;

  factory EventUpdateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventUpdateRequestFromJson(json);
}         = ''
const factory PaymentState.loading() = _StateLoadingredirecting_factory_constructor_signature'
Node:               Node: Node: {factory_constructor_signature'
 = ' = ' = 'redirecting_factory_constructor_signature        const factory PaymentState.loading() = _StateLoadingfactory EventUpdateRequest.fromJson(Map<String, dynamic> json) = 'Node: '
const factory PaymentState.loading() = _StateLoadingwith          '
Node:  = 'const_builtin{          '
 = 'Node: '
const_builtinconst = ''
          const          Node: '
withfactory      Node: '
Node: factorydeclaration = '                   = 'Node:  = 'factoryfactory'
'
type_identifier                    Node: Node: identifieridentifier = 'const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequestPaymentState = 'Node: '
 = 'EventUpdateRequest          '
Node:           ._$EventUpdateRequestNode: factory. = ' = 'factory.'
'
'
'
           = '              Node: Node: class_bodyidentifier = 'Node: {
  const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest;

  factory EventUpdateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventUpdateRequestFromJson(json);
} = ''
fromJsonidentifier.      '
 = 'Node: PaymentState'
          '
        Node: Node:           redirecting_factory_constructor_signatureformal_parameter_list = ' = 'Node: (Map<String, dynamic> json)const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest'
'
                                Node: Node: (const_builtin = 'identifier( = 'Node: '
const.            '
Node:  = 'formal_parameter{           = 'Node: Map<String, dynamic> json = ''
factory.              {Node: '
type_identifier'
 = '                 = ' = 'MapNode: '
loadingfactory              '
Node: '
          identifier          type_argumentsNode: Node:  = 'formal_parameter_list<String, dynamic> = ''
 = 'identifier()Node:                  = 'Node: EventUpdateRequest<'
declarationloading'
 = ''
             = '<const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequestNode: '
('
                 = '          Node: (type_identifier'
Node:  = '                              Node: Node: )Node:  = 'formal_parameter_list)redirecting_factory_constructor_signature'
 = 'formal_parameter_list          const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest = 'StringNode: '
=()                 = 'Node: =, = ''
 = ''
          ,Node: '
type_identifier'
 = '                          _StateLoadingNode: ({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  })type_identifier'
 = ''
      Node:             Node:             ;const_builtinNode: Node: ( = ' = '; = ''
(const'
(dynamic                   = ''
Node: Node: )( = ''
)declaration                            '
Node: Node: >optional_formal_parameters          '
 = ' = ' = '{
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }const factory PaymentState.success(Payment payment) = _StateSuccess'
>              Node: Node: factory{ = ' = 'factory'
'
          '
                        Node: Node: identifier         = 'Node: EventUpdateRequest={'
Node:  = '          identifierNode:  = '=json'
formal_parameter_list'
redirecting_factory_constructor_signature = '           = 'Node: ({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  })const factory PaymentState.success(Payment payment) = _StateSuccess'
'
type_identifier                       = 'Node: Node: const_builtin_StateLoading'
              ('
 = 'Node: (formal_parameter'
 = '            String? title                  '
Node: Node: )                 = 'Node: Node: type_identifieroptional_formal_parameters) = ''
; = '      const = ''
Node: ;function_body'
 = 'String = '{
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }=>
      _$EventUpdateRequestFromJson(json);      '
          Node:         Node: Node: '
=>declaration'
 = '               = 'Node:                 =>Node: '
{factory        const factory PaymentState.success(Payment payment) = _StateSuccessNode: nullable_type'
identifier         = ' = ' = ' = '{factory_$EventUpdateRequestFromJson'
'
Node:           ?Node: '
              identifier'
 = '                  PaymentStateNode: '
?        redirecting_factory_constructor_signatureNode:            = 'Node: formal_parameter.const factory PaymentState.success(Payment payment) = _StateSuccess = 'Node:  = ' = 'selector'
 = 'String? title(json).'
'
          '
          Node:                           Node: Node: argument_partidentifier = 'Node: ? = 'const_builtintype_identifiersuccess = ' = ''
String'
          (json)Node:                 '
formal_parameter_list            Node: constidentifier'
 = ''
Node: title          '
Node: arguments              factoryNode:  = ' = 'factory,(json) = '                 = '(Payment payment),Node: '
nullable_type'
 = ''
              '
          ?            Node: Node: '
(identifier                   = 'Node:               (?'
Node:  = '            (Node:  = 'formal_parameter = 'Node:  = '(Payment payment?'
'
PaymentState'
              '
                              Node: Node: type_identifier           = 'Node: argumentidentifierPayment = ''
 = 'formal_parameterNode: title = '.json'
String? description = ''
              .Node:                 ,'
 = 'Node:           ,Node: '
identifiertype_identifier = ''
success              '
                Node:                          = 'Node: Node: Stringformal_parameter_list'
formal_parameter = 'Node: identifier(Payment payment) = 'identifierString? description'
 = ' = 'jsonpayment'
            '
              Node: Node: () = ' = '()'
'
                                    Node: Node: Node:             ;nullable_typeNode:  = ');formal_parameter = ''
) = ' = '      '
Payment paymentNode:                 }Node: '
type_identifier? = ''
 = '              String          '
}Node: '
                Node: Node:   nullable_typetype_identifier = 'Node:  = '?'
'
=Paymentclass_definition = ''
= = '              @freezed
class EventListState with _$EventListState {
  const factory EventListState.initial() = _Initial;
  const factory EventListState.loading() = _Loading;
  const factory EventListState.loaded(List<Event> events) = _Loaded;
  const factory EventListState.error(String message) = _Error;
}'
'
                                        Node: Node: ?annotationNode:  = ' = '@freezedidentifier'
?       = 'Node: Node: payment          '
@? = '            @ = ''
Node: Node: )       = 'Node: )'
?type_identifieridentifier                 = ''
freezed = ''
                _StateSuccess'
Node: Node: identifier           = 'identifierdescription = ''
description'
'
                  Node: Node: Node: =, = 'class = '=,'
'
                              Node: Node: type_identifierformal_parameter = ' = '_StateSuccessDateTime? startDateNode: '
'
 = '                      Node: Node: ;type_identifier = ' = ';;              DateTime'
'
Node:                       , = 'classNode: '
 = 'declaration, = '    const factory PaymentState.failed(String errorMessage) = _StateFailedNode: '
identifier'
 = '                      EventListStateNode: '
redirecting_factory_constructor_signature;     = 'Node: const factory PaymentState.failed(String errorMessage) = _StateFailedNode: '
'
Node: superclass                Node:  = 'const_builtinwith _$EventListStateNode: formal_parameterdeclaration = ''
 = 'nullable_type      const factory PaymentState.failed(String errorMessage) = _StateFailedNode: const'
 = ' = '?DateTime? startDate'
'
                                          mixinsNode: '
type_identifier = 'Node: Node: with _$EventListState = 'redirecting_factory_constructor_signature           = ''
const factory PaymentState.failed(String errorMessage) = _StateFailedDateTimeNode: '
factory         = '                Node: ?'
Node:  = '          nullable_type? = 'Node: '
const_builtin?                 = 'Node: constidentifier'
withfactory'
 = '                  '
          Node: Node: withfactory?           = 'Node: factory = ''
identifier?'
           = 'Node:         identifier'
 = 'startDate                PaymentState'
Node:  = '              '
Node: PaymentState          ,'
 = 'identifier,Node: '
 = '.              startDateNode:  = '          type_identifier.Node:  = ''
_$EventListState'
'
Node:                   formal_parameterNode: Node: ., = 'class_body = ' = ' = ',{
  const factory EventListState.initial() = _Initial;
  const factory EventListState.loading() = _Loading;
  const factory EventListState.loaded(List<Event> events) = _Loaded;
  const factory EventListState.error(String message) = _Error;
}'
          '
DateTime? endDate.'
              '
Node:                           formal_parameterNode:  = 'DateTime? endDateNode: '
      type_identifierNode:                 {Node:  = ' = 'type_identifierDateTimeNode:  = ''
DateTime{identifieridentifier'
 = '                failed = ''
      failed          Node: '
Node: Node: formal_parameter_list          declaration = 'Node:  = '(String errorMessage)formal_parameter_listnullable_type'
 = ' = '            '
Node: (String errorMessage)('
?                 = '            (Node: '
Node:             (nullable_type'
Node: const factory EventListState.initial() = _Initial = 'formal_parameter'
?                   = ''
        String errorMessageNode: '
                  redirecting_factory_constructor_signature = '              Node: Node: ?type_identifier = ' = '?String'
Node:  = '                '
Node: const factory EventListState.initial() = _Initialidentifier               = ''
(endDate?'
'
                                    Node: Node: ,formal_parameter = ' = ' = ',Node: String errorMessage'
Node: '
              const_builtinNode:               formal_parameterNode: identifiertype_identifier = ' = ' = ' = 'String? locationString?'
'
'
                              Node:                 type_identifierNode:  = 'identifierStringerrorMessageNode: const'
'
identifier                          Node:  = 'nullable_typeNode: '
factory = ' = 'factory = ''
errorMessage?          '
'
Node:                   endDateidentifierNode:  = '?EventListState = ''
?'
'
                      Node:                 .Node: Node: ) = 'identifier. = ' = ''
            location          '
Node:                             Node: identifier,Node:  = '),'
'
          Node: Node: ) = '=               = ' = ')Node: initialformal_parameter= = ''
int? capacity'
          '
'
                          Node: Node: type_identifiertype_identifier = ' = 'Node:           _StateFailedformal_parameter_listNode: ,'
= = ' = '      ,int = '='
()'
'
              '
          Node: Node:             formal_parametertype_identifierNode:                  = 'Node: _StateFailednullable_type'
 = '      ?Node: '
 = '                  (String? locationNode:  = 'Node: (?'
 = ';            ;Node:  = ' = '); = ''
'
)'
                Node: type_identifier; = ''
String      '
?                '
Node: nullable_type                 = 'Node: identifier = 'Node: capacity'
?'
                  Node: ? = '?'
              Node: , = ','
              Node: formal_parameter = 'int? price'
                Node: type_identifier = 'int'
                Node: nullable_type = '?'
                  Node: ? = '?'
                Node: identifier = 'price'
              Node: , = ','
              Node: formal_parameter = 'String? imageUrl'
                Node: type_identifier = 'String'
                Node: nullable_type = '?'
                  Node:       ?Node:  = '?'
                Node: identifier = 'imageUrl'
}                         = 'Node: }='
 = '}=== End AST ===
Node:  = ',} = ''

=== Processing class: ,=== End AST ===
Payment'
 ===
              
=== Processing class: 
=== Processing class: PaymentPaymentCreateRequestNode:  ===
formal_parameter ===
 = 'List<String>? tags'
                Node: type_identifier = 'List'
                Node: type_arguments = '<String>'
                  Node: < = '<'
                  Node: type_identifier
=== Processing class:  = 'PaymentResultString ===
'
                  
=== Processing class: Node: PaymentState> ===
 = '>'
                Node: nullable_type = '?'
                  Node: ? = '?'
                Node: 
=== Processing class: identifierPaymentCreateRequest = ' ===
tags'

=== Processing class:               PaymentResultNode:  ===
, = '
=== Processing class: ,PaymentState'
 ===
              Node: formal_parameter = 'String? status'
                Node: type_identifier = 'String'
                Node: nullable_type = '?'
                  Node: ? = '?'
                Node: identifier = 'status'
              Node: , = ','
              Node: } = '}'
            =Node: '
) = '          )Node: '
type_identifier           = 'Node: _Initial='
 = '='
                Node: Node: ;type_identifier = ' = ';_EventUpdateRequest'
'
            Node: Node: declaration; = ' = 'const factory EventListState.loading() = _Loading;'
'
              Node: Node: redirecting_factory_constructor_signaturemethod_signature = ' = 'const factory EventListState.loading() = _Loadingfactory EventUpdateRequest.fromJson(Map<String, dynamic> json)'
'
                  Node: Node: const_builtinfactory_constructor_signature = ' = 'constfactory EventUpdateRequest.fromJson(Map<String, dynamic> json)'
'
                    Node: Node: factoryfactory = ' = 'factoryfactory'
'
                    Node: Node: identifieridentifier = ' = 'EventListStateEventUpdateRequest'
'
                    Node: Node: .. = ' = '..'
'
                    Node:                 identifierNode: Node: identifieridentifier = ' = 'fromJsonlocation'
'
                        Node: Node: formal_parameter_list, = ' = '(Map<String, dynamic> json),'
'
                          Node: Node: (formal_parameter = ' = '( = 'loadingint? capacity'
'
'
                                      Node: Node: type_identifierNode:  = 'formal_parameterintformal_parameter_list = ''
Map<String, dynamic> json = ''
()'
                          Node: Node: type_identifier( = ' = 'Map('
'
                          Node: Node: type_arguments) = ' = '<String, dynamic>)'
'
                          Node: Node: <= = ' = '<='
'
                          Node: Node: type_identifiertype_identifier = ' = 'String_Loading'
'
                      Node: Node: ,; = ' = ',;'
'
                Node: type_identifier = 'dynamic'
                Node: >       = 'Node: >declaration'
 = '              const factory EventListState.loaded(List<Event> events) = _LoadedNode: '
identifier         = 'Node: jsonredirecting_factory_constructor_signature                 = 'Node: const factory EventListState.loaded(List<Event> events) = _Loaded'
'
                      nullable_typeNode:  = 'Node: ?const_builtin'
 = ')                  const = ''
)Node:           ?Node: '
factory = '      ? = ''
factoryNode:                 '
Node: function_body           = 'identifierNode: =>
      _$EventUpdateRequestFromJson(json); = ''
identifiercapacity        '
 = 'Node:               EventListState=>'
Node:  = '          ,Node:  = '=>.'
 = ',        '
.Node: '
identifier                        Node: Node: formal_parameter = 'identifier = ' = '_$EventUpdateRequestFromJsonloadedint? price'
'
'
                                  Node: Node: formal_parameter_listtype_identifier = ' = '(List<Event> events)int'
'
Node:                             Node: Node: (nullable_type = ' = '(?'
selector'
             = '                  Node: Node: (json)formal_parameter'
? = '           = 'List<Event> eventsNode: ?'
'
argument_part                              Node:  = 'type_identifierNode: (json) = 'identifierList = ''
price'
'
                                        Node: Node: Node: type_arguments,arguments = ' = ' = '<Event>,'
'
(json)                              '
Node: Node:               <formal_parameter = ' = '<Node: '
String? imageUrl(                '
Node:  = '                type_identifierNode:  = 'type_identifier(Event = ''
String'
                '
Node:                               >Node:  = 'Node: argument>nullable_type'
 = ' = '              ?jsonNode: '
'
identifier                                   = 'Node: events?'
Node:  = '            ?Node: '
)identifier                 = 'Node: )identifier = ''
 = 'jsonimageUrl          '
Node: '
              =               = 'Node: Node: =),'
 = ' = '          ,Node: '
)type_identifier               = 'Node: _Loadedformal_parameter'
 = 'List<String>? tags'
      '
Node:         ;                 = 'Node: ;type_identifierNode:  = ''
;List      '
 = 'Node:                 ;declarationNode: '
 = 'type_arguments      const factory EventListState.error(String message) = _Error = ''
Node: <String>}        '
Node:  = '                  redirecting_factory_constructor_signatureNode:  = '}const factory EventListState.error(String message) = _Error'
<'
 = '  <          '
Node: Node:                   const_builtinNode:  = 'class_definitionconsttype_identifier'
 = ' = '          StringNode: '
@freezed
class EventListState with _$EventListState {
  const factory EventListState.initial() = _Initial;
  const factory EventListState.loading() = _Loading;
  const factory EventListState.loaded(List<Event> events) = _Loaded;
  const factory EventListState.error(String message) = _Error;
}factory                  '
Node:  = '    >factory = 'Node: '
>annotation          '
Node:  = '                identifier@freezed = 'Node: '
nullable_typeEventListState = ''
?                Node: '
Node: @.                   = 'Node: . = ''
?@           = 'Node: ?'
identifier'
 = '                      errorNode: Node: identifier'
identifier = ' = '          freezedtags'
Node: '
    formal_parameter_list               = 'Node: Node: ,(String message) = ''
class,            '
Node:  = '              (Node: class = 'formal_parameter('
'
 = '                String? statusNode: '
Node: formal_parameter                 = 'Node: String messagetype_identifier'
 = 'identifierString = '              '
EventListStateNode: '
                type_identifierNode:      = 'nullable_typeString = 'Node: '
?superclass              '
 = 'Node:                   with _$EventListStateNode: '
?identifier = '       = '?Node: message'
mixins'
                 = 'Node: with _$EventListStateidentifier'
 = '                    statusNode: '
withNode:               ) = 'Node: with,'
 = ' = '        ,)Node: '
type_identifier'
 = '              _$EventListStateNode: '
          }     = 'Node: }class_body'
 = 'Node: {
  const factory EventListState.initial() = _Initial;
  const factory EventListState.loading() = _Loading;
  const factory EventListState.loaded(List<Event> events) = _Loaded;
  const factory EventListState.error(String message) = _Error;
}            '
Node: =      )Node:  = '{) = ''
{ = '          ='
Node: '
      =          Node:  = 'declaration= = ''
const factory EventListState.initial() = _Initial          '
Node: Node:         type_identifierNode:  = 'type_identifier_EventUpdateRequest = 'redirecting_factory_constructor_signature'
 = '_Errorconst factory EventListState.initial() = _Initial      '
Node: '
          ;      Node:  = 'const_builtin;Node:  = ''
const;'
 = '                Node: Node: method_signaturefactory = ' = 'factory EventUpdateRequest.fromJson(Map<String, dynamic> json)factory'
'
;                  Node: Node: factory_constructor_signature'
identifier = '       = 'factory EventUpdateRequest.fromJson(Map<String, dynamic> json)EventListState'
'
Node:                     Node: Node: factory}. = ' = ' = 'factory.'
}'
          '
          Node: Node: identifier  identifier = ' = 'Node: initialEventUpdateRequest'
'
class_definition                    Node: Node: formal_parameter_list. = ' = ' = '@freezed
class EventDetailState with _$EventDetailState {
  const factory EventDetailState.initial() = _DetailInitial;
  const factory EventDetailState.loading() = _DetailLoading;
  const factory EventDetailState.loaded(Event event) = _DetailLoaded;
  const factory EventDetailState.error(String message) = _DetailError;
}().'
'
'
                Node:           (Node:  = 'Node: identifier( = 'annotation'
fromJson = '            '
Node: @freezed          )Node: '
 = 'formal_parameter_list)       = ''
(Map<String, dynamic> json)Node:           '
Node: @             = '=Node:  = '(=@ = ''
('
          '
Node:                   Node: type_identifierNode: identifier = 'formal_parameter = '_Initial = ''
freezedMap<String, dynamic> json      '
Node: '
;               = '    Node: ;type_identifier'
 = 'Node:       MapNode: '
classdeclaration               = ' = 'Node: const factory EventListState.loading() = _Loadingtype_arguments'
 = 'class<String, dynamic>        '
Node: '
redirecting_factory_constructor_signature                     = 'Node: const factory EventListState.loading() = _LoadingNode: '
identifier<           = 'Node:  = 'const_builtin<EventDetailState = ''
const'
                '
Node:               type_identifierNode:  = 'factoryString = ''
factoryNode:                 '
superclassNode:           ,Node:  = ' = 'identifierwith _$EventDetailState, = ''
EventListState'
                '
Node:       type_identifier          Node:  = 'Node: dynamic.mixins = ''
 = '.with _$EventDetailState                '
'
Node:                   >Node:  = 'Node: identifierwith> = ''
loading = '              '
Node: with          identifierNode:  = ''
formal_parameter_listjson         = ''
()Node:             '
Node: type_identifier            )Node:  = ' = '() = '_$EventDetailState'
('
      '
Node:                 function_bodyNode:  = 'Node: )=>
      _$EventUpdateRequestFromJson(json); = 'class_body'
) = ''
        {
  const factory EventDetailState.initial() = _DetailInitial;
  const factory EventDetailState.loading() = _DetailLoading;
  const factory EventDetailState.loaded(Event event) = _DetailLoaded;
  const factory EventDetailState.error(String message) = _DetailError;
}          Node: Node: =>='
 = ' = '      ==>'
Node: '
          {        Node: Node: type_identifier = 'identifier = ' = '{_Loading_$EventUpdateRequestFromJson'
'
'
                    Node: Node: ;Node: selector = ' = 'declaration; = ''
(json)const factory EventDetailState.initial() = _DetailInitial'
      '
          Node: Node:         declarationargument_part = 'Node:  = 'const factory EventListState.loaded(List<Event> events) = _Loaded(json)redirecting_factory_constructor_signature'
 = ''
        const factory EventDetailState.initial() = _DetailInitialNode:             '
Node: redirecting_factory_constructor_signature          arguments = ' = 'Node: const factory EventListState.loaded(List<Event> events) = _Loaded(json)'
const_builtin'
           = '              Node: Node: const_builtinconst( = ' = ''
const(          '
'
Node:                         Node: factoryNode: factory = ' = 'argumentfactoryfactory'
 = ''
          json          '
Node: Node:                 identifieridentifierNode:  = 'identifier = 'EventListState = ''
EventDetailStatejson'
'
                    Node:               Node: .Node:  = '.) = '. = ''
).          '
Node: '
        identifierNode:  = '          ;loaded = 'Node: '
;identifier          '
Node:  = 'formal_parameter_list       = 'Node: initial(List<Event> events)}'
'
 = '            }Node:           '
(Node:  = '  (Node: formal_parameter_listclass_definition'
 = ' = '            @freezed
class EventListState with _$EventListState {
  const factory EventListState.initial() = _Initial;
  const factory EventListState.loading() = _Loading;
  const factory EventListState.loaded(List<Event> events) = _Loaded;
  const factory EventListState.error(String message) = _Error;
}Node: ()'
formal_parameter'
     = '            List<Event> eventsNode: '
annotationNode:  = '              @freezedNode: (type_identifier'
 = ' = '(      ListNode: '
@'
 = '              @Node:             type_arguments'
Node:  = ')      <Event>Node: '
identifier = ' = ')                freezed'
Node: '
          <     = 'Node: Node: class<= = ''
class = '                '
Node:     =type_identifierNode: '
 = 'identifier          Event = ''
EventListState                Node: Node: '
type_identifier>     = ' = 'Node: >superclass_DetailInitial'
 = ''
              with _$EventListState      Node: '
Node: identifier      ; = 'Node: events = 'mixins'
 = ';            with _$EventListStateNode: '
)'
 = '              Node: )withNode: '
 = 'declaration          withNode: '
 = '=         = 'Node: const factory EventDetailState.loading() = _DetailLoadingtype_identifier='
 = ''
_$EventListState                  '
Node: Node:     type_identifierNode:  = 'redirecting_factory_constructor_signatureclass_body_Loaded = ' = ''
{
  const factory EventListState.initial() = _Initial;
  const factory EventListState.loading() = _Loading;
  const factory EventListState.loaded(List<Event> events) = _Loaded;
  const factory EventListState.error(String message) = _Error;
}const factory EventDetailState.loading() = _DetailLoading      '
Node: '
      ;           = 'Node: ;{'
 = 'Node: {      const_builtin'
Node:  = '      declarationNode:  = 'constdeclarationconst factory EventListState.error(String message) = _Error'
 = ''
          const factory EventListState.initial() = _Initial        '
Node: Node:         redirecting_factory_constructor_signatureNode: factory = 'redirecting_factory_constructor_signatureconst factory EventListState.error(String message) = _Error = ' = ''
const factory EventListState.initial() = _Initialfactory          '
Node: '
          const_builtin          Node:  = 'const_builtinconst = 'Node: '
constidentifier          '
Node:  = '          factoryNode:  = 'EventDetailStatefactoryfactory = ''
factory'
'
                              Node: Node: Node: identifieridentifier. = ' = 'EventListState = ''
EventListState.          '
Node: '
          .Node:  = '          ..'
Node:  = 'identifier.          '
Node:  = '          identifierNode:  = 'loadinginitial'
identifier'
           = '          errorNode: Node: '
formal_parameter_listformal_parameter_list = '           = '()()Node: '
'
formal_parameter_list                         = 'Node: (String message)(Node: '
 = '(            (Node: '
( = ' = '            ((Node: '
'
)             = '            Node: Node: )formal_parameter'
 = ')          String messageNode: '
 = '=)               = 'Node: =type_identifier'
'
 = '                    StringNode: '
Node: type_identifier               = 'Node: =_Initialidentifier = ''
 = '=      messageNode: '
;'
 = '                      ;Node: '
Node: type_identifier      )Node:  = 'declaration) = ' = ''
const factory EventListState.loading() = _Loading_DetailLoading          '
Node:         '
Node: =      redirecting_factory_constructor_signature = ' = '=Node: const factory EventListState.loading() = _Loading'
;'
           = '          Node: Node: type_identifierconst_builtin; = ' = '_Error'
const'
      '
      Node:           Node: declarationNode: ;factory = ' = '; = 'factory'
'
const factory EventDetailState.loaded(Event event) = _DetailLoaded                Node: '
Node: }identifier         = ' = '}Node: EventListStateredirecting_factory_constructor_signature'
'
 = '            Node: const factory EventDetailState.loaded(Event event) = _DetailLoadedNode: class_definition'
. = '           = '@freezed
class EventDetailState with _$EventDetailState {
  const factory EventDetailState.initial() = _DetailInitial;
  const factory EventDetailState.loading() = _DetailLoading;
  const factory EventDetailState.loaded(Event event) = _DetailLoaded;
  const factory EventDetailState.error(String message) = _DetailError;
}.'
Node: '
    const_builtin          Node: Node: annotation = 'identifierconst = ' = 'loading@freezed'
'
'
                          Node: Node: formal_parameter_listNode: @ = ' = 'factory()@'
 = ''
            factory      Node: Node: (identifier'
 = ' = '          freezed('
'
Node:                 Node: identifierNode: class) = ' = ' = 'classEventDetailState'
)'
    '
Node:                     identifierNode: Node:  = '=EventDetailState. = ''
=    '
Node:  = '          superclassNode:  = '.type_identifierwith _$EventDetailState = ''
'
_Loading          '
      Node:       identifierNode: Node: mixins; = ' = 'loaded = 'with _$EventDetailState;'
'
'
              Node: Node: withdeclaration           = ' = 'withNode: const factory EventListState.loaded(List<Event> events) = _Loaded'
'
formal_parameter_list                Node:  = 'Node: (Event event)type_identifierredirecting_factory_constructor_signature'
 = ' = '            _$EventDetailStateconst factory EventListState.loaded(List<Event> events) = _Loaded'
Node: '
    (          Node: Node: class_bodyconst_builtin = ' = ' = '({
  const factory EventDetailState.initial() = _DetailInitial;
  const factory EventDetailState.loading() = _DetailLoading;
  const factory EventDetailState.loaded(Event event) = _DetailLoaded;
  const factory EventDetailState.error(String message) = _DetailError;
}const'
'
'
                            Node: Node: Node: {formal_parameterfactory = ' = ' = '{factory'
'
Event event                Node: '
declarationNode:  = '              const factory EventDetailState.initial() = _DetailInitialidentifierNode:  = ''
EventListStatetype_identifier'
         = 'Node: Event          redirecting_factory_constructor_signatureNode:  = ''
const factory EventDetailState.initial() = _DetailInitial.              '
 = 'Node:           .Node: identifier'
const_builtin = '           = 'Node: constidentifierevent = ''
'
loaded                      '
Node: Node: factory          ) = 'Node:  = 'factory)'
formal_parameter_list'
           = '          Node: (List<Event> events)identifier'
Node:  = '            EventDetailStateNode: '
(= = '          (Node:  = '.'
= = '            .Node: '
'
formal_parameter                     = 'Node: List<Event> eventsidentifier'
 = 'initial              '
Node: Node:           type_identifierNode: type_identifier = ' = 'formal_parameter_listList = ''
()_DetailLoaded'
              '
            Node:       type_argumentsNode: Node:  = '(;<Event> = ' = ''
(;                '
Node: '
            <       = 'Node: Node: <)declaration'
 = ' = '                const factory EventDetailState.error(String message) = _DetailError)Node: '
'
type_identifier                   = 'Node: Node: Event='
 = '                =Node: '
redirecting_factory_constructor_signature>           = ' = '>Node: '
const factory EventDetailState.error(String message) = _DetailErrortype_identifier               = 'Node: '
_DetailInitialidentifier          '
 = 'Node:       const_builtineventsNode: '
; = '             = 'Node: const;)'
'
 = '                )Node: '
declarationNode:            = 'Node: factoryconst factory EventDetailState.loading() = _DetailLoading = '='
factory         = ''
Node: =redirecting_factory_constructor_signature          '
Node:  = '          const factory EventDetailState.loading() = _DetailLoadingNode: '
identifiertype_identifier           = 'Node: _Loadedconst_builtin'
 = ' = 'const      '
Node: EventDetailState          ;Node:  = ''
factory; = '          '
Node: factory      '
Node: .          declarationNode:  = ' = 'identifier. = 'const factory EventListState.error(String message) = _Error'
EventDetailState'
          '
        Node:           Node: Node: redirecting_factory_constructor_signatureidentifier. = ' = ' = 'const factory EventListState.error(String message) = _Errorerror.'
'
'
                              Node: Node: const_builtinNode: identifier = ' = 'formal_parameter_listconstloading'
 = ''
          (String message)          Node: Node: factory'
formal_parameter_list = ' = '            factoryNode: ()'
'
(                       = 'Node: Node: identifier( = ' = '(EventListState('
'
'
                                  Node: Node: Node: .) = 'formal_parameter = '.) = ''
'
String message                    Node: Node: '
=identifier = '               = '=Node: error'
type_identifier'
           = '          Node: Node: type_identifierStringformal_parameter_list = ' = ''
_DetailLoading(String message)              '
Node: '
      identifier            Node: Node: ;( = ' = ' = ';(message'
'
'
                  Node: Node:             declarationformal_parameter = 'Node: const factory EventDetailState.loaded(Event event) = _DetailLoaded) = ''
String message = '        '
Node: )redirecting_factory_constructor_signature               = 'Node: '
const factory EventDetailState.loaded(Event event) = _DetailLoadedtype_identifier          '
Node:  = '          StringNode: '
=const_builtin               = ' = 'constNode: '
=identifier           = ''
Node: message          '
factoryNode:              = 'Node: factory)type_identifier = ''
) = '          '
Node: _DetailError          '
identifierNode:  = '=EventDetailState       = ''
=Node:           '
Node: ;          .Node:  = 'type_identifier = ' = ';._Error'
'
'
                      Node: Node: identifierNode: ; = ' = '}loaded = ''
;}          '
'
      Node: Node: formal_parameter_list} = ' = '(Event event)}'
'
=== End AST ===
              Node: Node: (class_definition = '
=== Processing class:  = 'Event(@freezed
class EventDetailState with _$EventDetailState {
  const factory EventDetailState.initial() = _DetailInitial;
  const factory EventDetailState.loading() = _DetailLoading;
  const factory EventDetailState.loaded(Event event) = _DetailLoaded;
  const factory EventDetailState.error(String message) = _DetailError;
}'
'
 ===
                Node: 
=== Processing class: Node: formal_parameterannotation = 'EventCreateRequest = 'Event event@freezed ===
'
'

=== Processing class:                     Node: Node: EventUpdateRequesttype_identifier@ = ' ===
 = 'Event@'
'
                    Node: Node: identifieridentifier = ' = 'eventfreezed'
'
                Node: Node: )class = ' = ')class'
'
              Node: Node: =identifier = ' = '=EventDetailState'
'
              Node: Node: type_identifiersuperclass = ' = '
=== Processing class: with _$EventDetailState_DetailLoaded'
'
EventListState            Node: Node: mixins ===
; = ' = 'with _$EventDetailState;'
'

=== Processing class:               Node: Node: withEventDetailStatedeclaration = ' ===
 = 'withconst factory EventDetailState.error(String message) = _DetailError'
'
                Node: Node: type_identifierredirecting_factory_constructor_signature = ' = '_$EventDetailStateconst factory EventDetailState.error(String message) = _DetailError'
'
              Node: Node: class_bodyconst_builtin = ' = '{
  const factory EventDetailState.initial() = _DetailInitial;
  const factory EventDetailState.loading() = _DetailLoading;
  const factory EventDetailState.loaded(Event event) = _DetailLoaded;
  const factory EventDetailState.error(String message) = _DetailError;
}const'
'
                Node: Node: {factory = ' = '{factory'
'
                Node: Node: declarationidentifier = ' = 'const factory EventDetailState.initial() = _DetailInitialEventDetailState'
'
                  Node: Node: redirecting_factory_constructor_signature. = ' = 'const factory EventDetailState.initial() = _DetailInitial.'
'
                    Node: Node: const_builtinidentifier = ' = 'consterror'
'
                    Node: Node: factoryformal_parameter_list = ' = 'factory(String message)'
'
                      Node: Node: identifier( = ' = 'EventDetailState('
'
                      Node: Node: .formal_parameter = ' = '.String message'
'
          Node:               identifierNode:  = 'type_identifierinitial = ''
String          '
Node:               formal_parameter_listNode:  = 'identifier() = ''
message            '
Node:             (Node:  = ')( = ''
)            '
Node:           )Node:  = '=) = ''
=          '
Node:           =Node:  = 'type_identifier= = ''
_DetailError          '
Node:       type_identifierNode:  = ';_DetailInitial = ''
;      '
Node:       ;Node:  = '}; = ''
}      '
Node: === End AST ===
declaration = 'const factory EventDetailState.loading() = _DetailLoading'

=== Processing class:         EventNode:  ===
redirecting_factory_constructor_signature = '
=== Processing class: const factory EventDetailState.loading() = _DetailLoadingEventCreateRequest'
 ===
          Node: const_builtin = 'const'
          Node: factory = 'factory'
          Node: identifier = 'EventDetailState'
          Node: . = '.'
          Node: identifier = 'loading'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: 
=== Processing class: )EventUpdateRequest = ' ===
)'

=== Processing class:           EventListStateNode:  ===
= = '
=== Processing class: =EventDetailState'
 ===
          Node: type_identifier = '_DetailLoading'
      Node: ; = ';'
      Node: declaration = 'const factory EventDetailState.loaded(Event event) = _DetailLoaded'
        Node: redirecting_factory_constructor_signature = 'const factory EventDetailState.loaded(Event event) = _DetailLoaded'
          Node: const_builtin = 'const'
          Node: factory = 'factory'
          Node: identifier = 'EventDetailState'
          Node: . = '.'
          Node: identifier = 'loaded'
          Node: formal_parameter_list = '(Event event)'
            Node: ( = '('
            Node: formal_parameter = 'Event event'
              Node: type_identifier = 'Event'
              Node: identifier = 'event'
            Node: ) = ')'
          Node: = = '='
          Node: type_identifier = '_DetailLoaded'
      Node: ; = ';'
      Node: declaration = 'const factory EventDetailState.error(String message) = _DetailError'
        Node: redirecting_factory_constructor_signature = 'const factory EventDetailState.error(String message) = _DetailError'
          Node: const_builtin = 'const'
          Node: factory = 'factory'
          Node: identifier = 'EventDetailState'
          Node: . = '.'
          Node: identifier = 'error'
          Node: formal_parameter_list = '(String message)'
            Node: ( = '('
            Node: formal_parameter = 'String message'
              Node: type_identifier = 'String'
              Node: identifier = 'message'
            Node: ) = ')'
          Node: = = '='
          Node: type_identifier = '_DetailError'
      Node: ; = ';'
      Node: } = '}'
=== End AST ===

=== Processing class: Event ===

=== Processing class: EventCreateRequest ===

=== Processing class: EventUpdateRequest ===

=== Processing class: EventListState ===

=== Processing class: EventDetailState ===

=== Complete AST for source ===

=== Complete AST for source ===

=== Complete AST for source ===
Node: Node: programprogram = ' = 'import 'package:freezed_annotation/freezed_annotation.dart';

part 'event.freezed.dart';
part 'event.g.dart';

@freezed
class Event with _$Event {
  const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event;

  factory Event.fromJson(Map<String, dynamic> json) => _$EventFromJson(json);
}

@freezed
class EventCreateRequest with _$EventCreateRequest {
  const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest;

  factory EventCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventCreateRequestFromJson(json);
}

@freezed
class EventUpdateRequest with _$EventUpdateRequest {
  const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest;

  factory EventUpdateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventUpdateRequestFromJson(json);
}

@freezed
class EventListState with _$EventListState {
  const factory EventListState.initial() = _Initial;
  const factory EventListState.loading() = _Loading;
  const factory EventListState.loaded(List<Event> events) = _Loaded;
  const factory EventListState.error(String message) = _Error;
}

@freezed
class EventDetailState with _$EventDetailState {
  const factory EventDetailState.initial() = _DetailInitial;
  const factory EventDetailState.loading() = _DetailLoading;
  const factory EventDetailState.loaded(Event event) = _DetailLoaded;
  const factory EventDetailState.error(String message) = _DetailError;
}
import 'package:freezed_annotation/freezed_annotation.dart';

part 'payment.freezed.dart';
part 'payment.g.dart';

@freezed
class Payment with _$Payment {
  const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Payment;

  factory Payment.fromJson(Map<String, dynamic> json) =>
      _$PaymentFromJson(json);
}

@freezed
class PaymentCreateRequest with _$PaymentCreateRequest {
  const factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequest;

  factory PaymentCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$PaymentCreateRequestFromJson(json);
}

@freezed
class PaymentResult with _$PaymentResult {
  const factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _Success;

  const factory PaymentResult.failed({
    required String errorMessage,
  }) = _Failed;

  const factory PaymentResult.cancelled() = _Cancelled;
}

@freezed
class PaymentState with _$PaymentState {
  const factory PaymentState.initial() = _StateInitial;
  const factory PaymentState.loading() = _StateLoading;
  const factory PaymentState.success(Payment payment) = _StateSuccess;
  const factory PaymentState.failed(String errorMessage) = _StateFailed;
}
'
'
  Node: import_or_export = 'import 'package:freezed_annotation/freezed_annotation.dart';'
    Node: library_import = 'import 'package:freezed_annotation/freezed_annotation.dart';
=== Complete AST for source ===
'
Node:       programNode:  = 'import_specification   = 'import 'package:freezed_annotation/freezed_annotation.dart';

part 'payment.freezed.dart';
part 'payment.g.dart';

@freezed
class Payment with _$Payment {
  const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Payment;

  factory Payment.fromJson(Map<String, dynamic> json) =>
      _$PaymentFromJson(json);
}

@freezed
class PaymentCreateRequest with _$PaymentCreateRequest {
  const factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequest;

  factory PaymentCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$PaymentCreateRequestFromJson(json);
}

@freezed
class PaymentResult with _$PaymentResult {
  const factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _Success;

  const factory PaymentResult.failed({
    required String errorMessage,
  }) = _Failed;

  const factory PaymentResult.cancelled() = _Cancelled;
}

@freezed
class PaymentState with _$PaymentState {
  const factory PaymentState.initial() = _StateInitial;
  const factory PaymentState.loading() = _StateLoading;
  const factory PaymentState.success(Payment payment) = _StateSuccess;
  const factory PaymentState.failed(String errorMessage) = _StateFailed;
}
import 'package:freezed_annotation/freezed_annotation.dart';'

=== Complete AST for source ===

=== Complete AST for source ===
'
Node:   import_or_exportNode:  = 'import_or_exportimport 'package:freezed_annotation/freezed_annotation.dart';Node: '
programNode:      = 'Node: import 'package:freezed_annotation/freezed_annotation.dart';

part 'event.freezed.dart';
part 'event.g.dart';

@freezed
class Event with _$Event {
  const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event;

  factory Event.fromJson(Map<String, dynamic> json) => _$EventFromJson(json);
}

@freezed
class EventCreateRequest with _$EventCreateRequest {
  const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest;

  factory EventCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventCreateRequestFromJson(json);
}

@freezed
class EventUpdateRequest with _$EventUpdateRequest {
  const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest;

  factory EventUpdateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventUpdateRequestFromJson(json);
}

@freezed
class EventListState with _$EventListState {
  const factory EventListState.initial() = _Initial;
  const factory EventListState.loading() = _Loading;
  const factory EventListState.loaded(List<Event> events) = _Loaded;
  const factory EventListState.error(String message) = _Error;
}

@freezed
class EventDetailState with _$EventDetailState {
  const factory EventDetailState.initial() = _DetailInitial;
  const factory EventDetailState.loading() = _DetailLoading;
  const factory EventDetailState.loaded(Event event) = _DetailLoaded;
  const factory EventDetailState.error(String message) = _DetailError;
}
library_import'
 = 'programimport 'package:freezed_annotation/freezed_annotation.dart';
=== Complete AST for source ===
 = '        import 'package:freezed_annotation/freezed_annotation.dart';

part 'user.freezed.dart';
part 'user.g.dart';

@freezed
class AppUser with _$AppUser {
  const factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUser;

  factory AppUser.fromJson(Map<String, dynamic> json) =>
      _$AppUserFromJson(json);
}

@freezed
class UserProfile with _$UserProfile {
  const factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfile;

  factory UserProfile.fromJson(Map<String, dynamic> json) =>
      _$UserProfileFromJson(json);
}

@freezed
class AuthState with _$AuthState {
  const factory AuthState.initial() = _Initial;
  const factory AuthState.loading() = _Loading;
  const factory AuthState.authenticated(AppUser user) = _Authenticated;
  const factory AuthState.unauthenticated() = _Unauthenticated;
  const factory AuthState.error(String message) = _Error;
}
Node: '
importNode:   Node: Node: '
 = ' = '  import 'package:freezed_annotation/freezed_annotation.dart';program'
 = '    import 'package:freezed_annotation/freezed_annotation.dart';

part 'event.freezed.dart';
part 'event.g.dart';

@freezed
class Event with _$Event {
  const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event;

  factory Event.fromJson(Map<String, dynamic> json) => _$EventFromJson(json);
}

@freezed
class EventCreateRequest with _$EventCreateRequest {
  const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest;

  factory EventCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventCreateRequestFromJson(json);
}

@freezed
class EventUpdateRequest with _$EventUpdateRequest {
  const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest;

  factory EventUpdateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventUpdateRequestFromJson(json);
}

@freezed
class EventListState with _$EventListState {
  const factory EventListState.initial() = _Initial;
  const factory EventListState.loading() = _Loading;
  const factory EventListState.loaded(List<Event> events) = _Loaded;
  const factory EventListState.error(String message) = _Error;
}

@freezed
class EventDetailState with _$EventDetailState {
  const factory EventDetailState.initial() = _DetailInitial;
  const factory EventDetailState.loading() = _DetailLoading;
  const factory EventDetailState.loaded(Event event) = _DetailLoaded;
  const factory EventDetailState.error(String message) = _DetailError;
}
Node:       programNode: library_import'
 = 'import_or_export  import 'package:freezed_annotation/freezed_annotation.dart'; = ''
import_or_exportimport 'package:freezed_annotation/freezed_annotation.dart';

part 'user.freezed.dart';
part 'user.g.dart';

@freezed
class AppUser with _$AppUser {
  const factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUser;

  factory AppUser.fromJson(Map<String, dynamic> json) =>
      _$AppUserFromJson(json);
}

@freezed
class UserProfile with _$UserProfile {
  const factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfile;

  factory UserProfile.fromJson(Map<String, dynamic> json) =>
      _$UserProfileFromJson(json);
}

@freezed
class AuthState with _$AuthState {
  const factory AuthState.initial() = _Initial;
  const factory AuthState.loading() = _Loading;
  const factory AuthState.authenticated(AppUser user) = _Authenticated;
  const factory AuthState.unauthenticated() = _Unauthenticated;
  const factory AuthState.error(String message) = _Error;
}
 = 'importimport 'package:freezed_annotation/freezed_annotation.dart';'
Node: '
'
    Node:   library_importNode:  = 'import_or_exportimport 'package:freezed_annotation/freezed_annotation.dart'; = ''
import 'package:freezed_annotation/freezed_annotation.dart';      '
Node:     import_specificationNode:  = 'library_import         = 'Node: import 'package:freezed_annotation/freezed_annotation.dart';configurable_uriimport_specificationNode:  = ' = ''package:freezed_annotation/freezed_annotation.dart'import 'package:freezed_annotation/freezed_annotation.dart';'
'
      import_or_export'
 = '                import 'package:freezed_annotation/freezed_annotation.dart';Node: '
import 'package:freezed_annotation/freezed_annotation.dart';Node:      = '    import 'package:freezed_annotation/freezed_annotation.dart';Node: urilibrary_import'
 = ' = 'import 'package:freezed_annotation/freezed_annotation.dart';import_specificationNode: Node: 'package:freezed_annotation/freezed_annotation.dart'import_specification'
library_import         = ''
 = '        Node: Node: import 'package:freezed_annotation/freezed_annotation.dart';import'
 = 'importimport       = 'Node: importimport_specification'
'
 = ' = 'import 'package:freezed_annotation/freezed_annotation.dart';        '
Node:                     configurable_uriNode:  = 'importimport 'package:freezed_annotation/freezed_annotation.dart'; = 'import 'package:freezed_annotation/freezed_annotation.dart';'
Node: '
'
import        '
      'package:freezed_annotation/freezed_annotation.dart'string_literal        '
Node:           configurable_uriNode:  = '                Node: Node: importNode:  = 'import'
        Node: configurable_uri = ''package:freezed_annotation/freezed_annotation.dart''
import_specification           = 'Node:  = 'Node: 'package:freezed_annotation/freezed_annotation.dart'uriimport 'package:freezed_annotation/freezed_annotation.dart';uri'
 = '          'package:freezed_annotation/freezed_annotation.dart'Node: '
uri             = 'Node: 'package:freezed_annotation/freezed_annotation.dart'string_literal'
 = '            'package:freezed_annotation/freezed_annotation.dart'import = 'import'
'package:freezed_annotation/freezed_annotation.dart'        '
Node:               configurable_uri = ''
'package:freezed_annotation/freezed_annotation.dart'configurable_uri = ''
'package:freezed_annotation/freezed_annotation.dart'           = '              Node: '
'           = 'Node: ''package:freezed_annotation/freezed_annotation.dart''
'
uri'
 = '              Node: Node: Node: 'uri = '        ''package:freezed_annotation/freezed_annotation.dart''
'
Node:                           Node: Node: string_literal'             = 'Node: 'string_literalstring_literal = ' = ''package:freezed_annotation/freezed_annotation.dart' = ''
Node: '
'package:freezed_annotation/freezed_annotation.dart''              'package:freezed_annotation/freezed_annotation.dart' = ''
importNode:  = '        ' = '              ''
'package:freezed_annotation/freezed_annotation.dart''
'
                          Node: Node: Node: Node: import;' = ' = '; = ''
'          '
Node: string_literal' = ' = ''package:freezed_annotation/freezed_annotation.dart'''
'
Node:                             Node: Node: '' = ' = '''part_directive'
 = '                            part 'event.freezed.dart';Node: '
' = '    ''
'
              ;         = 'Node: Node: configurable_uriNode: '''
 = 'Node: '
';part'
 = '  part = 'Node: 'package:freezed_annotation/freezed_annotation.dart'        '
Node:           ;Node:  = 'uri         = 'Node: 'package:freezed_annotation/freezed_annotation.dart';''
'
'
              Node: Node: string_literal'
 = '        ;'Node: '
 = ';; = ''
;              Node: Node: uripart_directive = ' = ''event.freezed.dart''
      Node:  = 'string_literalpart_directive = ' = ''event.freezed.dart'part 'user.freezed.dart';'package:freezed_annotation/freezed_annotation.dart''
'
    '
Node:         partNode: '
'part_directive = ' = ''part 'payment.freezed.dart';  '
'
            Node: partNode: Node: part_directive' = ' = ' = 'partpart 'payment.freezed.dart';Node: '
    Node: part 'event.freezed.dart';'
    Node: part = '              part = ''
part    '
Node:     uriNode: uri = ''payment.freezed.dart''
 = '      ''
'
    ;Node:  = 'part;'
    Node: ; = ';'
  Node: part_directive = 'part 'event.g.dart';'
    Node: part = ' = 'partpart'
'
    Node: uriuri = ' = ''payment.freezed.dart''
'user.freezed.dart''
      Node: Node: 'string_literal = '''
              Node: ' = '''
        Node: ; = ';'
  Node: part_directive = 'part 'event.freezed.dart';'
    Node: part = 'part'
    Node: uri = ''event.freezed.dart''
      Node: string_literal = ''event.freezed.dart''
        Node:  = ''user.freezed.dart''
        Node: ' = '''
        Node: ' = '''
    Node: ; = ';'
  Node: part_directive'event.freezed.dart''
      Node: string_literal = 'Node: 'event.freezed.dart'string_literal = ''
        Node: ' = '''
        Node: ' = '''
    'payment.freezed.dart'      Node: uri = ''event.g.dart''
      Node: string_literal = ''event.g.dart''
        Node: ' = '''
        Node: ' = '''
    Node: ; = ';'
        Node: Node: string_literalclass_definition = ' = ''payment.freezed.dart'@freezed
class Event with _$Event {
  const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event;

  factory Event.fromJson(Map<String, dynamic> json) => _$EventFromJson(json);
}'
'
            Node: Node: 'annotation = '@freezed'
 = '      ''
' = '''
        Node: ' = '        'Node: ' = '''
'
 = '        Node: Node: '
'part 'user.g.dart';Node:         Node: ;Node: part_directive@'
 = ' = '@part 'user.freezed.dart'; = ' = ';;'
    '
Node:   Node: ;part_directive = ' = ';part 'event.g.dart'; = '      '
;Node: '
    Node: '
'    '
Node: identifierpart_directiveNode: '
         = 'part_directivefreezed = '    Node: Node: ' = 'Node: partpartpart 'payment.g.dart'; = 'part'
 = ' = 'partpart    '
Node:  = 'partpart 'event.g.dart';'
'
class        Node: '
uri    Node: Node:  = ''
uri     = 'Node: 'user.freezed.dart'part'part = ''
part'
 = '    part'
'
'event.g.dart' = '          Node: Node: string_literalclass     = '    uriNode:  = 'uri'user.g.dart'Node: '
uriNode:  = ''
 = ''
'event.g.dart''payment.g.dart';'user.freezed.dart'      '
'
            Node: '
identifierNode:  = 'string_literalEvent = ''event.g.dart'      '
       = 'Node: Node:         Node:       '
Node:     string_literalstring_literal;Node: string_literalsuperclass = ' = ''payment.g.dart'with _$Event'
'
              Node: Node: ''
' = 'Node:  = 'mixins   = ''user.g.dart'' = ''
'
        'Node:  = ''' = ''event.g.dart'' = ''
Node:         '
with _$Event    '
'
'                part_directiveNode: Node:         Node:  = ''Node: with'part 'payment.g.dart'; = ' = 'Node: ;'
''
'
 = '         = ''' = ''
'    '
Node:         ;Node: ;with'
'
          'Node:  = 'Node: ;'
    'Node:  = 'part         = '  Node: part''
 = 'type_identifierNode:  = ' = ''_$Event'
'
part_directive        Node: Node:  = 'Node: ;    class_definitionNode: ' = 'uri = ''
;part 'user.g.dart';'@freezed
class Event with _$Event {
  const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event;

  factory Event.fromJson(Map<String, dynamic> json) => _$EventFromJson(json);
}'
 = '    class_body'
 = '    {
  const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event;

  factory Event.fromJson(Map<String, dynamic> json) => _$EventFromJson(json);
}'
'
Node: Node:   '
Node: ;    class_definitionNode:  = '    'payment.g.dart';Node: '
'
            Node:   {Node:  = 'Node: ;{ = ' = ';@freezed
class Payment with _$Payment {
  const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Payment;

  factory Payment.fromJson(Map<String, dynamic> json) =>
      _$PaymentFromJson(json);
}'
'
string_literal  part = 'annotation'
class_definition'payment.g.dart' = ''
@freezed
class AppUser with _$AppUser {
  const factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUser;

  factory AppUser.fromJson(Map<String, dynamic> json) =>
      _$AppUserFromJson(json);
}    Node: '
 = '          Node: Node: @freezedannotation'
 = 'Node: @freezedclass_definition       = '        annotation = 'Node: @freezed
class Event with _$Event {
  const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event;

  factory Event.fromJson(Map<String, dynamic> json) => _$EventFromJson(json);
} = '@part@freezed'
'
declaration       = ''
          Node: Node: '@Node:  = ''
 = ''    @Node:  = 'const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event@annotation'
 = '@'
'
            Node: Node: identifieruri = ' = 'freezedNode: '
        identifier    '
Node:  = ' = ''user.g.dart'class@freezed         = 'Node: class''
 = '@'
'
    freezedNode:       'Node: identifier      '
 = 'Node: Event    string_literal'
'
     = 'Node: Node: redirecting_factory_constructor_signatureidentifierNode: '
superclass'user.g.dart'     = 'Node: '
      class         = 'Node: with _$Event''
 = 'Node: const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Eventfreezed@'
'
     = '          Node: Node: ;classconst_builtin = ' = '@ = ';'
'
' = 'class        class'
'
                   = 'Node: '
Node: identifier     = 'Node: constNode: '
Node: Node: identifiermixinsfreezed = ''
with _$Event' = ''
    identifier           = 'Node: PaymentAppUser'
Node:     class = ''
class_definition' = ''
    @freezed
class Payment with _$Payment {
  const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Payment;

  factory Payment.fromJson(Map<String, dynamic> json) =>
      _$PaymentFromJson(json);
}Node: superclass = 'Node: classfactory'
 = '        factorysuperclass    Node:     Node: with'
Node:  = ';with = ''
     = ''
with _$AppUser;Node: '
annotation           = 'identifier = 'Node:   @freezedwith _$Payment'
'
 = '              EventNode:       '
Node: '
@Node:  = '    @Node: '
superclass       = 'Node: mixinsNode: class_definition = ' = 'with _$Payment      @freezed
class AppUser with _$AppUser {
  const factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUser;

  factory AppUser.fromJson(Map<String, dynamic> json) =>
      _$AppUserFromJson(json);
}identifiertype_identifiermixins = ' = '_$Event = ''
Eventwith _$AppUser    with _$Event'
Node: '
Node: '
class_body'
identifier = '              {
  const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event;

  factory Event.fromJson(Map<String, dynamic> json) => _$EventFromJson(json);
}'
        '
Node:               Node: Node:       annotation = ' = 'freezed@freezedNode: formal_parameter_listNode: withNode:  = 'with{ = '({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  })'
with'
mixins     = '            with _$Event'
'
 = 'Node:       (Node:  = 'Node: { = '('
'
@                    Node: Node: optional_formal_parameterswith = 'with{
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }'
'
        '
Node:               type_identifierNode:  = ' = '{       = 'Node: {classwithdeclaration = ' = '        class = '@const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event'
'
'
'
'
      _$AppUser              Node: Node: '
required             = 'Node: requiredtype_identifieridentifierNode: Node:  = ''
type_identifier_$Payment = ''
_$Event         = 'Node:               redirecting_factory_constructor_signatureNode: identifier'
 = '    const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Eventfreezedformal_parameter'
 = '    Payment    Node: '
class_body = '          Node: '
Node: class_bodyclass_body         = 'String id = ''
{
  const factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUser;

  factory AppUser.fromJson(Map<String, dynamic> json) =>
      _$AppUserFromJson(json);
}Node: '
                superclassNode:        = 'const_builtinNode: Node: {
  const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Payment;

  factory Payment.fromJson(Map<String, dynamic> json) =>
      _$PaymentFromJson(json);
}Node: type_identifier'
 = '      StringNode: '
 = 'class{
  const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event;

  factory Event.fromJson(Map<String, dynamic> json) => _$EventFromJson(json);
} = '{                '
{      Node: Node:  = 'with _$Paymentidentifier{ = ' = '{id'
const = '{class = ''
'
{                          '
Node: '
'
mixins       = 'Node: with _$PaymentNode:           ,Node:  = 'factory,'
'
 = ''
factory            Node: Node: declarationNode: '
 = 'identifierconst factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Payment              declaration                Node:  = 'declaration = 'Node:  = ''
with        const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _EventNode:  = 'Node: with'
const factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUserredirecting_factory_constructor_signature         = 'Node: requiredAppUser = 'const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Payment'
redirecting_factory_constructor_signatureidentifier'
 = ''
 = '          requiredEvent'
'
'
const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event                                  Node: Node: formal_parameter'
superclass = ' = 'Node: String title          Node: with _$AppUserconst_builtin'
 = '      constNode: '
redirecting_factory_constructor_signatureNode:                     Node: Node: type_identifierconst_builtin'
 = ' = 'const                '
mixinsNode:  = 'type_identifierformal_parameter_list          with _$AppUser = 'Node: ({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  })'
'
 = '            Node:  = 'Node: _$Payment        const factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUser'
'
factoryNode: String    factory( = ' = 'factorywith          ('
Node:                  = 'Node: class_body'
 = 'identifierNode: '
factory = '            {
  const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Payment;

  factory Payment.fromJson(Map<String, dynamic> json) =>
      _$PaymentFromJson(json);
}'
'
                Node: Node: Node: {withidentifierconst_builtin          optional_formal_parametersNode:  = 'identifier'
 = ' = ' = '{
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }titleEvent'
'
'
 = '              const        '
Node:            = '          type_identifier              Node: Node: Paymentformal_parameter_list'
,Node:  = '          {Node:  = ' = '{_$AppUser,'
 = '({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  })Node: {    '
factory'
 = 'Node:             '
factoryformal_parameter_list'
 = '      Node: Node:           class_body'
 = 'Node:               {
  const factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUser;

  factory AppUser.fromJson(Map<String, dynamic> json) =>
      _$AppUserFromJson(json);
}identifier              '
({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  })Node: (Node:       declarationNode: required = 'required = '( = ''
'
AppUser = ' = '                        requiredNode: '
('
Node:  = 'optional_formal_parameters( = 'required{
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }'
'
const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Payment                          {Node: Node: '
{ = ''
          {              '
Node:        = 'Node: Node:         declaration{formal_parameter = ''
formal_parameter_listconst factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUser              Node: '
redirecting_factory_constructor_signatureNode:                = 'Node: optional_formal_parameters = ' = 'formal_parameter{
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Payment'
 = '({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = '              requiredNode:  = '{String description = '        '
String id'
{                            Node: '
Node: '
          required'
redirecting_factory_constructor_signature('
Node:  = 'type_identifier(Node:  = '                            String = 'Node: const factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUserrequired                '
'
'
                          Node:             const_builtinconst_builtinNode: Node:  = ' = ' = 'constconst'
formal_parameterNode: optional_formal_parameterstype_identifierNode:  = ' = 'requiredString{
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }'
'
                          '
              Node:               identifierfactoryNode:  = 'formal_parameter = ' = 'descriptionString idNode: '
'
Node:                = 'factoryString idNode: {'
identifier           = '           = 'Node: ididentifier = ''
Payment'
'
                                        Node: '
Node: Node: ,formal_parameter_listNode:  = ', = ' = '({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }){factory,,'
                type_identifier'
 = 'Node:               Stringtype_identifier = ' = ''
'
Node:               factoryString'
Node:           required              Node:  = 'Node: '
required            identifier = 'required'
requiredNode: '
                (Node:                 identifierNode:  = 'identifier = ' = 'id(               = 'Node:  = 'formal_parameterrequiredrequiredid'
'
 = '                            String idNode: Node: ,'
'
'
, = ' = '              '
              Node: ,formal_parameter                , = 'AppUserString title'
'
Node: '
              Node:           formal_parameterNode:             type_identifier              formal_parameter_list = ' = 'DateTime startDate({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  })'
Node: '
requiredNode:                  = 'Node: requiredString'
 = 'type_identifier             = 'Node: '
DateTimerequired'
                                Node: '
Node:  = 'identifier                (Node:               required = ''
(Node:               identifieroptional_formal_parameters = ' = 'type_identifier'
Node: Node: id{
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  } = 'formal_parameter = 'startDate = 'StringString eventId'
            '
                            Node: Node: '
,{'
formal_parameter'
              Node: Node:  = '                ,Node:  = ' = ' = 'optional_formal_parametersidentifierString title                 = '{, = ''
'
,                              '
'
Node: Node: titletype_identifier'
Node: {
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }               = 'required                            Node: Node: Node: requiredrequiredString = ''
 = 'required                '
Node:  = 'identifierrequiredtype_identifier'
 = ','
                                          Node: Node: formal_parameter{ = 'required = 'Node: eventIdformal_parameterString id'
'
 = '              DateTime endDateString'
 = ''
 = 'Node: '
                              Node: Node: formal_parameter, = ' = 'String displayName                ,,                {Node: '
type_identifier               = 'Node: '
Node: '
type_identifier                required               = 'Node: Node: type_identifierrequired = ' = 'String = 'identifier'
requiredrequired              StringNode: '
'
DateTime                required'
 = 'Node: '
                 = 'identifier'
 = 'title              Node: id'
requiredidentifier'
                                            Node: Node: identifier = '              Node: displayNameNode: '
formal_parameterformal_parameter               = 'Node: String userIdNode: '
 = ',              String id = ''
,Node: ,endDate'
 = ' = ',formal_parameter'
,'
'
                                          Node: Node:                  = ',formal_parameter = 'String description                '
Node:  = 'type_identifier                Node: Node: ,,Node:  = 'type_identifierString? email = ''
String'
'
required = 'type_identifier = ' = 'StringString                required              '
Node: Node:               '
requiredNode: '
                              formal_parameterNode:  = ''
 = '                String eventIdrequiredNode: '
'
identifieridentifiertype_identifier = ' = '                idNode: '
identifier               = 'userIdNode: descriptionNode:                 '
required               = 'Node: Node: type_identifierString = '              ,,Node:  = ' = ',formal_parameter'
 = ',required'
'
'
                              Node: Node:               nullable_type               = ' = 'Node: ?,String description'
formal_parameterNode: '
 = 'String'
                  Node:               ?Node:  = 'required'
?required = ' = 'String locationrequired = ''
,required'
                              '
Node:                 required'
 = 'Node: required                              '
type_identifier'
 = '                              Node: Stringformal_parameter'
 = 'Node: Node: Node: identifierint amount = ''
formal_parameteremail                '
Node:  = 'type_identifierNode:               DateTime startDate              identifier'
 = '                String                Node: Node: '
Node: type_identifierformal_parameter = ' = 'int = 'Node:                 eventId,type_identifierString displayNameidentifier = ' = ''
DateTimelocation                '
Node: '
Node:  = ''
,              '
Node:                 identifier'
type_identifier                              Node: Node: formal_parameterNode:  = ' = 'StringString? photoURL'
'
 = '                identifier                 = 'Node: startDateNode: ,identifier              identifiertype_identifier = 'Node: displayName,'
description = ''
 = ',              '
String               = ''
 = '              ,              Node: Node: '
Node: amount,              '
'
Node: ,required, = 'Node:  = '                requiredNode:                = 'Node: requirednullable_type'
 = ',              ,,'
'
 = ' = '               = ',              Node: ?requiredformal_parameterNode: ,'
'
'
'
 = 'formal_parameter              Node:                   Node: requiredformal_parameter = ' = 'required                            Node: Node:  = 'int capacityNode: '
requiredString? email'
String userId?'
                 = '                requiredNode: Node: type_identifier'
 = ' = 'requiredint = ''
required                '
?'
type_identifier               = 'Node: '
formal_parameter               = 'Node: DateTime startDateNode: String                '
identifierformal_parameter                 = 'Node: capacity              type_identifier'
 = '              DateTimeNode: Node:                  = ''
Node:                 DateTime endDate,'
Node: '
type_identifier                Node:  = 'Node: Stringidentifier'
type_identifier = '                 = 'formal_parameter,Node: '
                photoURLNode: '
identifier                            nullable_type = ' = 'DateTimeNode: identifier = ' = '?String currencyrequired'
'
 = 'startDate = ''
'
userId              '
Node:                                 ,Node:                   ,Node:  = ' = '              ,Node: required,'
Node:               ,type_identifierNode: '
 = ' = ''
?              Node:  = 'identifier? = ''
,              '
StringNode:                               formal_parameterNode: endDateidentifier = ''
String? statusMessageNode:                 '
formal_parameter'
                 = 'Node:  = '              requiredint price = 'Node: requiredemailNode: type_identifieridentifier = ' = 'Node: currency'
'
'
              '
Node:               ,Node:  = 'required              Stringformal_parameterNode:  = ',int amount,, = ' = ' = ',required'
'
'
'
                            Node: Node: formal_parameterformal_parameter, = ' = 'DateTime endDate                                              String? photoURLNode: '
'
requiredNode: Node:                 '
'
Node:               type_identifiernullable_type = '                type_identifierNode:  = 'Node: type_identifier = 'requiredrequiredString                 = ''
required = ''
 = '              Node: intNode: type_identifier                '
formal_parameterNode:  = 'nullable_typeString location? = ''
              '
                                Node: type_identifier'
 = 'Node:                   formal_parameterNode: Node: ? = '? = 'intStringString statusDateTime = ''
identifier'
                 = 'Node:                   '
'
Node: identifier                ? = ''
endDateprice'
'
Node:                                                 Node: '
identifierNode: ?Node: type_identifier = ' = 'identifier? = ''
 = 'identifier              amount = ''
              statusMessageNode: Node: ,'
, = ' = ',,String              '
                locationNode: Node: '
'
,'
              identifier               = '               = 'Node: photoURLNode: '
,                              ,'
required              Node:  = 'Node: identifierrequired = ''
 = 'Node: Node: status              ,'
,'
requiredNode:  = '                            ,Node: '
annotation              , = 'Node: Node: @Default('line'),required = '               = ' = 'Node: ,required'
 = '              requiredNode:  = ',formal_parameterformal_parameter'
required'
'
                              Node: Node:               required = ''
String location@'
Node: formal_parameter = ''
 = 'String? statusMessage              @ = ''
'
String createdBy                                              '
formal_parameterNode: Node: identifier = ' = '                DefaultNode: '
type_identifierNode:  = '                StringNode: int capacity'
type_identifier                type_identifierformal_parameter = 'Node:  = ''
identifierString'
                StringNode: Node: '
arguments                 = 'Node: comment                 = ' = ' = 'createdBy// pending, succeeded, failed, cancelled'
('line')'
String currency                '
                Node:                 Node: nullable_typeNode: // = 'type_identifierNode: type_identifier              identifier = 'Node:  = ''
,String = ''
,int'
? = '                                  Node: Node: //('
 = '                ('
Node: '
identifier                   = 'identifier = ' = 'locationcurrency'
                                Node: Node: ?Node: argument = ''
required = '              ?Node: '
annotation               = '                 = ''line'capacity@Default('draft')'
'
'
                    Node: '
                identifier              Node: Node: Node: Node: , = '              required@string_literal = ''
 = 'Node: statusMessage, = ''
'line',@              '
 = '                Node: Node: '
              ,'
 = 'Node: ,formal_parameter'
               = ',Node: String paymentMethodrequiredidentifier'
,               = 'Node: ,required'
 = ' = '               = '                                    Node: '
requiredNode:  = ''requiredDefaultrequired = '                requiredNode: '
'type_identifier              '
'
Node: '
 = '                      Stringannotation'
 = '                                            Node: Node: formal_parameter@Default('line')Node: '
 = 'Node: formal_parameter                '
Node:  = '                '@Node:  = 'String statusformal_parameter'
 = 'identifierNode:  = '@int price                '
Node:                 type_identifier'
arguments                int capacityNode:  = 'identifier' = ''
Default'
                 = ''
 = 'Node: Stringtype_identifierNode: paymentMethod('draft')                                  '
Node: Node:                   arguments'
 = ')int = ''
)'
                              '
 = 'Node: type_identifierNode: ('line')              '
identifierNode:                 ( = 'Node: int                  '
 = 'formal_parameter( = ''
statusNode:                   identifier'
 = ' = ',Node:               capacity                '
String provider(Node:  = 'Node:  = ',,argument               = ' = ''
(Node: '
,,'
 = '                                '
Node: Node: identifiercomment = ''draft' = '              Node: ,                argument'
 = '              'line'Node: priceNode: // pending, succeeded, failed, cancelledtype_identifier'
 = ''
Node: '
requiredStringformal_parameter                                  Node: Node: ,'
string_literal = '                 = 'Node: ,//'
              '
 = '                    'draft' = ' = 'Node:                 string_literalNode:  = 'Node: required'line''
'
String? stripeSessionId'
                                    '
//Node: identifierrequiredNode:                 formal_parameterNode:                       '
Node:                = 'Node:  = ''type_identifierprovider''
 = ' = ''String = ''
              int price = 'required'
'
'
Node: required,                                 = '                      ,Node: ''
' = '              Node:               Node: nullable_typeannotationNode:  = 'formal_parameter@Default(false) = 'required'
'
'
                'Node:  = ' = '@? = 'String createdBy'
'
@Node: '
                                                      '
Node:                   Node: type_identifierNode: type_identifieridentifier' = ' = 'int                                 = 'Node: '
Node: Node: )Defaultformal_parameter? = '                 = ''
 = '')'
String paymentMethod'
                                  Node: StringNode:  = ''
arguments?Node: '
 = 'identifier               = ''
priceNode: '
                formal_parameter                )Node:  = 'type_identifier(false) = ')                String provider'
'
Node:                               '
Node: Node: formal_parameter               = 'type_identifier                  Node: String statusidentifierNode: '
 = '( = ' = '                StringStringNode:  = 'identifier'
 = 'createdBystripeSessionId,'
'
'
 = '(Node: '
                type_identifierNode:  = 'identifierString                ,                   = 'Node:               '
Node: paymentMethod                identifier'
Node:  = '              identifierargument              providerNode: '
Node:  = ',false, = ''
,'
'
 = ' = 'status              '
Node: Node:                                                 ,,'
 = 'Node: ,,'
              Node:  = ',               = ',,false'
Node: Node:                = 'Node: falseformal_parameter'
requiredNode: '
annotation = ' = 'formal_parameter@Default(false)required = '              '
                      Node:                             annotationString? stripeSessionId'
Node: Node: false                Node: commentNode:  = ' = 'false = 'formal_parameter@String? stripePaymentIntentId'
 = '// draft, published, cancelled, completed'
@Default('draft') = '                '
Node: String createdBy = '                '
'
                                  Node: Node: )'
type_identifiertype_identifier = ' = '@StringNode: '
String//                 = '                '
                '
Node:                                 //Node: Node:  = 'Node: Node: @nullable_type = 'type_identifier = ' = '@String'
nullable_typeidentifier = '?              ?'
)'
'
'
                  '
                                  Node:  = 'Node: Default?'
                Node:               ?Node:  = 'Node:  = 'formal_parameter?'
identifier                                Node: Node:  = ' = 'Node: identifierformal_parameter = ' = 'createdByDefault'
bool isEmailVerified?'
identifier'
arguments = ' = 'stripePaymentIntentId(false)'
'
                '
              Node: Node: type_identifier,              String? imageUrl = '                '
Node: boolidentifier                 = 'Node:                                   type_identifierNode: Node:  = 'arguments(, = ''
 = '              '
Node:  = '                ('draft')Node: Node: '
annotation(,stripeSessionIdidentifier'
 = ' = '              isEmailVerifiedNode:  = 'String,                   = ',,'
'
@Default('draft')                            Node: '
'
'
                                                Node: '
formal_parameterNode: Node: Node: (argumentNode:                  = 'Node: ,false = ''
 = 'formal_parameter = ',String? errorMessage'
 = ''
@nullable_type = ' = '                @String? stripePaymentIntentId'
                    Node:                               ?('
Node: type_identifier'
'
Node: Node: formal_parameteridentifier = ' = 'false                DateTime? createdAt = ''
String                  Node:  = '                  '
                falseNode: Node:                 type_identifier?Node:  = 'Default?type_identifier'
'
argument                                 = ' = 'Node: Node:  = 'nullable_type'
StringDateTime                      identifier = ''
'
 = '                ?                Node: Node: nullable_type'draft'nullable_typeNode: Node: argumentsfalse'
 = ' = ' = 'imageUrl'
 = ''
?                    '
Node:                   string_literal               = 'Node: ('draft')'draft''
'
falseNode:                   '
Node: ,                  ?Node:  = ') = '                      ?                  ?Node: '
(? = ''
? = ' = ',)'
'
                                  Node:               'Node: '
(Node: Node: '
?identifierformal_parameter = ' = '?'                '
 = '                                  createdAt              '
Node:               identifier'
 = '                      Node: Node:  = 'Node: argument = 'List<String>? tags'draft''
'
identifierNode: 'stripePaymentIntentId = 'Node:                      = ''
'errorMessage'
                                Node: Node:                 )'
 = 'Node: ,string_literal = ' = ')              ,'
type_identifier              'draft'formal_parameterNode: Node: Node: ,'
, = '                      formal_parameter,Node: '
'
' = '               = ' = 'String status,'
'
               = 'Node:               'Node: '
formal_parameterNode: formal_parameter                      formal_parameter = '                 = 'Node: DateTime? updatedAttype_identifier'
 = ' = 'bool isEmailVerifiedStringList = ''
DateTime? createdAt                '
String? errorMessage                '
                Node: '
'
Node:                                 type_argumentsNode: Node:                 identifierNode:  = 'type_identifierNode:  = 'type_identifier = 'boolstatus'
'
Node: type_identifiertype_identifier               = 'Node:                 ' = ', = ' = '',<String>DateTime'
'
'
                  '
Node:                                    = 'Node: Stringnullable_type'
               = 'Node: DateTime?'
'
                                  <Node: Node: ? = ' = 'Node: ?identifier< = ''
)commentNode:                 nullable_typeNode:  = ''
 = '                                  Node: )isEmailVerified'
type_identifier'
               = 'Node: nullable_typeformal_parameterNode:  = 'identifierString status = ' = ' = ''
??                '
Node:               type_identifierNode:  = 'createdAtStringString'
'
              '
                // draft, published, cancelled, completed                  '
                  Node: ,identifierNode:  = ',status = ''
 = '              Node:                   '
,                 = 'Node: ,Node: //Node: '
? = 'Node: ,>'
               = 'Node: >comment'
                              Node:  = 'formal_parameterNode:  = '// draft, published, cancelled, completedDateTime? createdAtnullable_type'
'
 = '                                Node: ?type_identifier'
Node: ,//'
 = '              Node: formal_parameter = 'DateTime? updatedAt'
                 = '// = ''
//?                  DateTime = 'Node: '
?'
'
              Node:                 Node:                 ?Node: ?nullable_type = ' = '?'
'
                              Node: formal_parameteridentifiertype_identifier = ' = 'updatedAtDateTime = 'Node: String? imageUrlidentifier'
 = 'errorMessage'
?                '
Node:               '
'
                formal_parameterNode:                 Node:                   Node:  = 'Node: type_identifierNode: identifier,              Node: , = ','
              Node: } = '}'
            Node: ) = ')'
 = '          Node: =? = 'nullable_type = ' = '? = ''
=String? imageUrl = ''
'
String          '
Node:                 type_identifier,?tags                '
                Node: '
'
Node: Node: nullable_typeidentifier = ' = '                                type_identifier?Node:                = 'Node: String,Node:  = 'formal_parameter?'
 = ' = '?                  '
DateTime? createdAtNode:  = 'createdAt'
                ?,Node: '
 = 'identifier              '
Node:                 '
annotationNode:                = 'Node: nullable_type? = ''
updatedAt@Default([])'
                 = ''
_AppUser?'
'
                                                    Node: Node: ;identifier = '                  Node: ; = ',Node: Node: imageUrl, = ' = ''
Node: ,              ,type_identifier'
'
 = '@?'
                            Node: Node: Node: formal_parameter = ' = ' = '      DateTime? updatedAtNode: '
method_signature?DateTime'
@                '
Node: }                '
,type_identifier = '                 = ', = ' = 'DateTimeNode: Node: '
nullable_type} = '?                factory AppUser.fromJson(Map<String, dynamic> json)'
identifier'
Node: '
                                   = 'Node: Node: ?nullable_type                          identifier'
Default = ''
 = '        ?Node: Node: imageUrlNode: '
factory_constructor_signature'
                                 = 'Node:  = 'identifier? = ''
              createdAt)factory AppUser.fromJson(Map<String, dynamic> json)formal_parameter'
Node: Node:                    = ' = ''
argumentsList<String>? tags = ',Node: ([])          '
)                                '
Node: '
factory = '                           = 'Node: ?factoryNode: ,'
Node: type_identifier, = '= = '?,'
'
Node:  = '              Node:                           Node: '
Node: (formal_parameter = 'identifier              identifierNode:  = 'formal_parameterListAppUser = ''
updatedAt('
'
 = ' = '              '
                          =List<String>? tagsNode: Node: '
,                   = 'Node: '
 = '.DateTime? updatedAt                 = 'Node: '
type_identifier.type_arguments                 = 'Node:  = 'type_identifier          <String>'
ListNode: type_identifier           = 'Node: Node: ,DateTimeidentifierargument = ''
fromJson = '              '
'
Node:  = '          '
}[]                Node: '
_Payment = '                  }Node: <'
formal_parameter_list'
 = '                  (Map<String, dynamic> json)Node: Node: '
                ;'
 = ' = '                    <Node: Node: Node: ;type_arguments'
'
 = '                  <String>nullable_typeNode: '
list_literalNode:  = ') = '                   = '[]Node: )'
                                        Node: type_identifier<method_signatureNode: ?[ = ''
 = ' = '( = ' = 'factory Payment.fromJson(Map<String, dynamic> json)<('
String          '
Node:                   ['
'
=                              '
'
Node:                    = 'Node: Node:                   ]type_identifier=            '
? = ' = ' = 'Node: ]String?'
                            '
Node: '
                Node: Node: Node: >identifiertype_identifierfactory_constructor_signature                   = ' = ' = 'Node: factory Payment.fromJson(Map<String, dynamic> json)formal_parameter>Node:  = '> = '_AppUser'
'
)          Map<String, dynamic> json       = 'Node: updatedAtNode: '
 = '>;'
 = ');'
factory                '
              Node: '
                              Node: '
Node:  = 'formal_parameterfactory = 'Node: List<String> attendeesnullable_type'
              '
Node:           ,                 = 'Node: type_identifierNode: nullable_typeidentifier = ' = '?Payment'
,                   = 'Node:  = '?      Map = 'type_identifier?'
'
?'
                            Node:  = 'method_signatureListNode: '
}                '
Node:  = ' = ''
Node:                 factory AppUser.fromJson(Map<String, dynamic> json)Node: '
type_arguments}                  Node: '
identifier                   = '            Node: tagsNode:  = 'Node: .type_arguments = ' = ')<String, dynamic> = '.factory_constructor_signature?<String>'
                  Node: < = '<'
                  Node: type_identifier = 'factory AppUser.fromJson(Map<String, dynamic> json) = ''
?          '
Node:                 factoryNode: '
)'
'
'
 = '                factory              Node:            = 'identifier<String = ''
 = '                  tagsNode: <>'
 = ''
>Node: '
          '
Node: =                identifier              Node: Node: , = 'Node: fromJson = '          '
Node:                 identifier          Node: type_identifieridentifier, = ''
attendees = ''
AppUser = ',String = ''
              Node:  = 'Node: formal_parameter_listannotation= = ' = '@Default([])'
'
              '
                                                    Node: Node: (Map<String, dynamic> json)Node: ,,'
'
 = 'Node:                           Node: .@, = ''
@Node: Node: type_identifier,                 = '( = 'annotation = ' = '(Node: _Payment'
'
@Default([]).'
'
type_identifier                 = 'Node: ,             = 'identifierNode:  = ''
fromJson;                '
dynamic           = ''
Node: '
identifier                 = ';              DefaultNode: '
formal_parameter'
Node: Node:                 formal_parameterNode: Node: >       = 'arguments = '> = ''
Node:                 formal_parameter_listmethod_signatureNode:  = ' = 'factory Payment.fromJson(Map<String, dynamic> json)DateTime? createdAt = 'Map<String, dynamic> json@'
 = '              @'
(Map<String, dynamic> json)'
'
                                    Node: Node: ([])(Node:  = ''
(              factory_constructor_signature'
 = 'Node:                   Node: type_identifierNode: type_identifier = ''
                             = 'Node: factory Payment.fromJson(Map<String, dynamic> json)('
identifier = ' = '(identifier'
Map = 'Default          Node: Node: formal_parameterfactoryjson = ' = 'factory'
                  DateTimeMap<String, dynamic> json'
'
'
                              '
Node:                 argumentNode:  = 'arguments          '
              Node: Node:             identifierNode:  = ') = 'Node: type_arguments([]) = ''
<String, dynamic>[]                  '
Node: '
type_identifierNode:  = ' = '                    Payment)Node: '
nullable_type                ('
list_literalMap      '
Node:  = '              []Node: Node: '
function_body<type_arguments = ' = ' = '                      =>
      _$AppUserFromJson(json); = ''
Node:  = '[                  <String, dynamic>Node: '
.? = '(                '
Node: << = '[.Node: '
=>           = ' = ''
'
                                    Node:                 Node: =>Node: identifier = ''
<'
'
                                              Node: Node: identifier? = 'Node: argument_$AppUserFromJsonfromJson'
 = ''
                  ? = 'Node: Node: type_identifierNode:  = 'type_identifierformal_parameter_listString = ''
 = '                String(Map<String, dynamic> json)Node: '
'
selector                []Node: '
identifier, = '] = 'createdAt(json)'
 = '                    '
Node: '
                list_literal = 'Node:  = '          ,,                          '
 = '][]Node: Node: ,argument_part'
 = '('
                                   = '                Node: Node: Node: type_identifier) = ' = ',(json)'
'
                      (Node: '
)dynamic = ''
Node:             type_identifier,                '
            [Node:                = 'Node:  = ''
[formal_parameter = '              Node: Node: >formal_parameterNode: arguments'
Map<String, dynamic> json = '                       = ''
dynamic(json)'
'
                 = '              Node: formal_parameter>               = 'Node: >List<String> attendees]'
Node: > = ''
DateTime? updatedAtNode:                             type_identifierNode: '
 = ' = 'Map]'
'
Node: '
                  identifier                identifierNode:  = ')              json = ''
Node:  = 'Node: (type_argumentstype_identifier                            Node:  = ')( = ''
 = ''
)Node:                = 'jsonNode: argument)List'
<String, dynamic>'
'
       = '                            type_identifierNode: jsonNode:  = 'Node: <'
'
function_bodyDateTime) = ' = '=>
      _$PaymentFromJson(json);)'
               = 'Node: <formal_parameter                '
'
 = '                                Node: Node:                 Node: type_identifiertype_arguments       = ' = '<String>StringList<String> attendeesidentifier'
'
'
                                          Node: Node: function_bodyNode:  = ''
nullable_type = ' = '=>Node:  = '<Node: => = ''
                json<        ?Node: '
identifierNode: '
, = ' = '_$PaymentFromJson,'
'
=>
      _$AppUserFromJson(json);                          Node: '
selectorNode:  = 'type_identifiertype_identifier'
                           = 'Node: List              =>Node:  = '                 = 'Node: Node: '
?type_identifier = ' = '?dynamic                '
=>(json)'
'
)                String'
 = '          )Node: '
'
Node:                           type_argumentsNode:  = 'Node: ;><String> = ''
;'
                Node:  = '        >argument_part                  '
 = '                (json)Node: '
identifieridentifierNode:  = '                  Node: Node: identifierNode: } = 'arguments = 'Node: > = 'updatedAt = 'attendees< = ' = ''
'
(json)_$AppUserFromJson'
'
                                          Node: },'
 = '        <,'
>'
                                Node: Node: }Node: Node: ,(  '
Node:  = 'selector} = ''
Node: (json) = '            '
              type_identifierNode:  = 'identifierString = 'class_definitionjson          '
, = ''
('
Node:                    = 'Node: '
Node:               )            >Node: @freezed
class UserProfile with _$UserProfile {
  const factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfile;

  factory UserProfile.fromJson(Map<String, dynamic> json) =>
      _$UserProfileFromJson(json);
} = 'formal_parameter'
argument_part     = 'Node:                = ' = '>Node: '
)(json))                 = 'Node: )identifier'
 = '      attendeesNode: '
function_body               = ''
=>
      _$PaymentFromJson(json);annotationNode:             '
,Node:  = '        ,arguments'
 = 'Node: DateTime? createdAtNode: argument'
=>@freezed          '
Node:  = '='
 = '                              jsonNode:  = '      (json)=>'
Node: '
 = '@'
Node: formal_parameter                 = '              @Node: '
(         = 'Node:  = 'type_identifier= = ''
      (DateTime? createdAtDateTimeNode:           '
identifierNode:                  = 'Node: _$PaymentFromJsonnullable_type'
'
type_identifier'
Node: identifier         = 'Node:                 identifierNode:  = 'selectorfreezedtype_identifier = ' = ''
 = 'json               = ''
Node: ?(json)    _Event'
'
                        Node: DateTimeargumentNode: '
?                              Node:  = ''
Node: nullable_type          classNode:  = 'argument_part = '?) = 'Node: json;class = ''
?)'
                '
'
        Node:                 Node: Node: ;                  '
identifier     = 'identifiercreatedAtNode: '
 = ' = '(json)identifier'
 = '            UserProfile; = ' = 'json;'
Node: '
              ?'
       = 'Node: ?      '
}Node:  = 'Node: Node:                 method_signature}              '
Node: '
 = ',  argumentsfactory Event.fromJson(Map<String, dynamic> json)Node:  = '     = 'Node: ,superclass'
 = ')with _$UserProfileNode: (json)'
'
class_definitionidentifier = '               = ' = 'createdAt'
)@freezed
class PaymentCreateRequest with _$PaymentCreateRequest {
  const factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequest;

  factory PaymentCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$PaymentCreateRequestFromJson(json);
}'
                              Node: Node: '
('
;Node:  = '    ;factory_constructor_signature      Node:  = ' = 'factory Event.fromJson(Map<String, dynamic> json)              (Node: '
'
Node: ,annotationformal_parameterNode:  = '      '
           = ' = 'Node: mixins@freezedfactory'
DateTime? updatedAt = '      '
Node: Node: with _$UserProfile,'
}'
                       = '              Node:  = '@Node: formal_parameter} = 'Node:                  = 'Node: withtype_identifierDateTime? updatedAt = 'factory@'
with'
                Node: Node: identifier'
 = 'argumentEvent = ''
json = '  DateTime'
Node:                 class_definitionNode:  = 'identifier'
identifier = '                 = 'jsonfreezed'
'
                  Node: Node: '
          Node:         nullable_typeNode: Node:  = '.?type_identifier'
 = ' = ''
_$UserProfile.'
                '
    Node: @freezed
class UserProfile with _$UserProfile {
  const factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfile;

  factory UserProfile.fromJson(Map<String, dynamic> json) =>
      _$UserProfileFromJson(json);
}type_identifier) = 'class                   = 'Node: DateTimeNode:  = 'class          '
Node:     identifierNode: )identifier'
? = '        '
 = 'Node:     ;Node:  = 'fromJson'
'
;class_body'
           = '?{
  const factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfile;

  factory UserProfile.fromJson(Map<String, dynamic> json) =>
      _$UserProfileFromJson(json);
} = ''
      '
                annotationNode:                 } = 'Node:  = 'Node: PaymentCreateRequestNode: }identifier'
@freezednullable_type = '      '
updatedAtNode:     { = ''
Node: formal_parameter_listsuperclass   = ' = ''
 = '              with _$PaymentCreateRequestNode: ?(Map<String, dynamic> json)'
                        '
Node: {'
Node:       '
Node:             class_definitionmixins@Node:       ?(Node:  = ' = 'Node:  = ' = '@freezed
class PaymentCreateRequest with _$PaymentCreateRequest {
  const factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequest;

  factory PaymentCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$PaymentCreateRequestFromJson(json);
}?@'
declaration,    '
Node:  = '                annotation,with _$PaymentCreateRequest = ' = ''
'
@freezedNode:         identifierNode:  = '      with'
 = ''
              updatedAtNode:       '
Node: const factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfile( = 'Node: '
with}identifier            @Node:  = 'formal_parameter@'
 = '              Map<String, dynamic> json        '
Node: '
Node:  = ' = ''
}              '
Node: ,freezed = 'type_identifierNode:             ,redirecting_factory_constructor_signatureNode: identifier) = ' = ''
const factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfile              '
 = '                  ) = 'Node: Node: Node: '
class}           = ' = 'Node: }freezedclassconst_builtin_$PaymentCreateRequesttype_identifier = ''
const'
'
'
'
 = '                      MapNode: Node: '
    )                            Node: Node: Node: Node: '
classfactory     = 'Node: =classidentifier'
 = 'class_bodytype_arguments = ' = '{
  const factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequest;

  factory PaymentCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$PaymentCreateRequestFromJson(json);
} = ''
= = ''
 = 'UserProfile          '
<String, dynamic>        Node: '
Node: identifierNode: factory      ) = '                PaymentCreateRequestNode: '
'
Node: '
{< = '    {          Node: type_identifier = 'Node:  = '<='
 = ''
superclasssuperclass= = ' = ''
with _$UserProfile      Node: with _$PaymentCreateRequest          '
Node:       identifierdeclaration                _Event = 'Node:           Node:  = ''
UserProfile      Node: '
Node: type_identifier          '
const factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequest = 'Node: mixins_Eventformal_parameter_list'
 = '      ({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  })'
type_identifierNode:  = ' = 'with _$UserProfile      StringNode: '
'
;                        Node: Node: ,mixins'
 = ' = ',with _$PaymentCreateRequest            '
with'
; = ' = ';Node:         (         = 'Node:  = 'redirecting_factory_constructor_signatureNode: ( = ''
const factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequest'
'
                  Node:                           withwith'
; = 'Node: with'
'
              Node: optional_formal_parametersNode:  = 'const_builtin        {
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  } = ''
Node: constmethod_signatureNode: '
type_identifier = 'Node: factory Event.fromJson(Map<String, dynamic> json) = '              type_identifierNode:           '
type_identifier = '{ = 'Node:         dynamicfactoryNode: _$UserProfile_$PaymentCreateRequest'
 = 'method_signature'
                factory_constructor_signature     = ''
{Node:     '
Node: factory              class_bodyNode:  = 'required = '{
  const factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfile;

  factory UserProfile.fromJson(Map<String, dynamic> json) =>
      _$UserProfileFromJson(json);
} = ' = 'Node: factory Event.fromJson(Map<String, dynamic> json)'
'
class_body                    requiredNode: factory Event.fromJson(Map<String, dynamic> json)'
>Node:  = ''
'
factory                       = 'Node: Node: formal_parameter       = '{
  const factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequest;

  factory PaymentCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$PaymentCreateRequestFromJson(json);
}factory_constructor_signature = 'factory>identifier'
String userId              '
Node: '
 = '           = ''
identifierNode:        = 'Node: {PaymentCreateRequest = 'Node: json{                 = 'Node: {type_identifier{'
'
            factory Event.fromJson(Map<String, dynamic> json)Node: identifier'
'
           = '      )Node:  = 'Stringdeclaration) = ''
 = 'const factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequest'
'
'
                        Node: Node: declarationEventredirecting_factory_constructor_signatureNode: Node:                       '
Node:  = '          function_bodyNode: formal_parameter_list. = ' = 'const factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequest.factory'
'
Node:                     Node:  = ' = 'Node: identifierconst factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfile=> _$EventFromJson(json); = '({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  })const_builtinfactory = ''
'
        '
'
Node: const            =>           = 'identifier         = 'Node: Node: (identifier = ' = '(=>userIdNode: Eventredirecting_factory_constructor_signature'
 = ''
        fromJson'
'
                        Node: '
'
                                Node: Node:  = 'optional_formal_parametersconst factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfileNode:  = 'formal_parameter_listNode: identifier.Node:  = ' = '.,'
 = '{
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }'
          '
Node:           const_builtinfactory,              _$EventFromJson = ''
 = 'Node: '
const(Map<String, dynamic> json) = 'Node: '
factoryidentifier            '
Node:           ({ = ' = '                      (Node: Node: Node:  = 'identifier{ = ''
PaymentCreateRequestrequired'
'
          fromJsonNode: '
 = ''
formal_parameter_list              selectorNode: requiredrequired = ''
 = '(json)                      '
 = 'Node:           ({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  })formal_parameter_list'
Node:               required            Node: Node: formal_parameter( = ''
          Map<String, dynamic> jsonfactory               = ' = 'Node: (Map<String, dynamic> json)factoryformal_parameter = ''
 = '(Node: '
String eventId'
argument_partNode:  = '            (json)formal_parameter'
'
 = '              String displayName            Node:                 Node: '
optional_formal_parametersNode:             (Node:  = 'arguments{
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }type_identifier          '
 = 'Node: '
(type_identifier'
 = '            StringNode:  = 'identifier                              '
 = 'Node: Mapformal_parameter(json)Node: '
 = '                 = 'Node: '
UserProfiletype_identifier              '
 = 'Node: String(           = '{(Node: '
 = '              {'
'
formal_parameter_listNode:  = 'argument                              Node:               identifier = 'Node:  = 'jsonrequiredeventId({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  })'
'
Node: Map<String, dynamic> json              '
Node: Node: identifiertype_arguments'
 = ' = 'displayName                           = '                <String, dynamic>required'
Node: '
identifier,'
                 = 'Node: , = ''
json              Node:               type_identifierNode:  = 'Node:               ,<Node: '
Node:               (Map = ' = ''
(formal_parameter               = 'Node: String eventIdtype_argumentsNode: required = ''
 = ''
<'
,<String, dynamic>                 = ')required = ''
)                          Node: Node: '
                optional_formal_parametersNode:  = 'type_identifierNode:  = 'type_identifierString{
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }'
'
'
'
formal_parameter                       = '              Node: int amount = '                '
Node: Node:                 ;,Node:  = 'formal_parameterString; = ''
String? pictureUrl = '                {Node:                  = '<Node: {type_identifier'
'
, = ''
Node: intidentifier'
              '
       = '                eventIdNode:                 Node: type_identifierNode: '
 = '                type_identifierNode: required} = '< = '              dynamic = 'Node: '
required'
,}Node:  = ''
,                '
                            Node: identifierNode:  = 'required = ''
 = 'StringNode: formal_parameter> = ''
                String userIdamountNode: required = 'type_identifier'
 = '>                '
                  String'
'
Node: Node:               '
              Node: Node:               ,identifier = ' = 'Node: ,Node: nullable_typeformal_parameter                 = 'class_definitionNode: int amount = ''
type_identifier? = '                ,'
json = ''
'
@freezed
class EventCreateRequest with _$EventCreateRequest {
  const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest;

  factory EventCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventCreateRequestFromJson(json);
}            String                                 = 'Node: ,Node: ?'
annotationNode: '
type_identifierNode:  = '     = ')int'
 = ''
)                                '
Node: Node:                 identifier = 'Node: Node: @Default('jpy')type_identifieridentifier'
 = '?annotation'
 = '       = 'amountNode: @freezedfunction_body'
                '
 = 'dynamic              => _$EventFromJson(json);Node: '
'
, = '        Node:                 Node:       Node: =>>Node:  = 'userId=>@                 = ' = '>,'
'
Node: identifier'
 = ' = '@@'
              pictureUrl        '
Node:  = '              '
              Node:       annotationNode: identifierNode:  = '              _$EventFromJsonidentifier'
 = 'Node: Node: ,freezed = ',identifier         = 'Node:  = ''
, = 'json,selector'
'
'
@@Default('jpy')              '
Node:  = ''
                    (json)Node: required            Node:               classNode:  = 'formal_parameterclass'
                '
Node:     identifier           = ' = 'Node: Node: @Node: identifier) = ' = 'Default)argument_part = 'required@ = ''
'
(json) = ''
                '
Node: '
String? statusMessage                  EventCreateRequestarguments'
                Node: Node: arguments'
 = '                Node: Node:               function_body('jpy')'
identifier = ' = '(json)Default = ''
                  '
Node: type_identifier                              formal_parameterNode: Node:  = '(=> _$EventFromJson(json);String displayNameNode:  = ' = ''
'
(            Stringarguments(Node: '
'
=>                               = '                 = 'Node:  = 'Node: Node: Node: nullable_type(superclassargument=> = '('jpy') = 'with _$EventCreateRequest?'
'
 = 'type_identifier'
        '
                  Node: '
                         = 'identifier                  StringNode:  = 'json'
_$EventFromJsonNode: ?Node:  = 'mixins?                Node: '
argument                '
'
Node:         ( = 'Node: with _$EventCreateRequestselector = ''
 = 'Node: (identifier                 = 'Node: displayName(json)'
        identifier = 'identifier'jpy' = ''
 = ''
                  statusMessage'
                    jsonNode:               '
          Node: Node: '
argument              Node:  = 'withNode: argument_part) = 'Node: , = 'string_literal(json)with = '               = 'Node: )'jpy''
 = ''
'
        ,        '
'jpy',Node: Node: '
type_identifier = ' = ',            '
;Node:                     _$EventCreateRequestNode: arguments'
string_literal                                     = 'Node:  = 'Node: ''jpy'    formal_parameter(json)Node: class_body = ''
 = ' = ' = ''
'
{
  const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest;

  factory EventCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventCreateRequestFromJson(json);
}                            ;'
'
String? pictureUrl'Node: '
                                      '
Node: (annotationNode:  = '      Node: Node: ('       = '{ = 'Node: @Default('line') = 'type_identifier{' = ''
String                      '
'
      Node: Node:                               ''
} = ' = '                      '
Node: }Node: Node: declaration                'Node: '
 = 'nullable_type'                  argumentconst factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest = 'Node: '
)'
@json  '
Node:                          = 'Node:  = ''@ = ''
)Node: redirecting_factory_constructor_signatureclass_definition = ''
'
 = '?                  const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequestNode: '
)           = 'Node: )const_builtin'
 = '              constNode: '
identifier                        '
 = 'formal_parameter = '                Node:                   Node: Node:  = 'formal_parameterNode:  = 'identifierfactoryjson = ''
 = '@freezed
class EventCreateRequest with _$EventCreateRequest {
  const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest;

  factory EventCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventCreateRequestFromJson(json);
}String currencyfactoryString currency'
'
'
          ?Default'
Node:                                 Node: Node:     type_identifierNode: identifier              annotation = ' = ''
@freezed'
 = ' = '?Stringtype_identifier'
EventCreateRequestNode: '
                      )                 = 'Node: )arguments = ''
 = ''
Node: Node: String@'
                                Node: ('line')Node:                   Node: Node: formal_parameter_listidentifier = ';'
 = '                  ;({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  })'
identifier = 'identifier@ = ''
currency = ' = 'Node: '
('
pictureUrl      '
Node:                     Node: Node:                           identifiercurrency} = ''
 = ' = '              Node: (Node: freezed'
,,, = ' = ', = ',,Node: '
}('
                  '
                            Node: Node: annotation'
'
 = '              Node:  = 'argumentformal_parameter( = '     = 'Node:   annotation'line' = ''
@Default('stripe')@Default('stripe')'
'
Node: String? statusMessageNode: '
                    class_definition                Node: '
                classNode:  = '            Node: optional_formal_parameters = '{
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }'
              Node: string_literal{                Node: Node: @@freezed
class EventCreateRequest with _$EventCreateRequest {
  const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest;

  factory EventCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventCreateRequestFromJson(json);
} = 'class'
'
 = '        @ = ' = 'type_identifierNode: Node:  = '@'line'{@annotation = ' = 'String@freezed'
'
                '
      Node: '
'
'
                              identifierNode: Node: identifier = 'Default'
                Node: arguments = '('stripe')'
                  Node: ( = '('
                                        Node: ' = '''
                      Node: ' = '''
                  Node: ) = ')'
              Node: Node: formal_parameter@ = ' = 'String provider@nullable_type'
 = '      ?Node: '
identifier                                   = ''
Node: ?                 = 'Node: ?type_identifier'
 = '                StringNode: identifierrequired = 'Node: freezedrequiredidentifier'
 = ''
Default    Node:  = 'argument = ' = 'statusMessage              '
'
EventCreateRequestNode: 'stripe'class'
 = ''
classNode:               '
                                        '
Node: Node: formal_parameter                Node: string_literal, = 'Node: Node: argumentsidentifier = ' = ' = '     = 'Node: identifier'stripe'superclass'
 = ',with _$EventCreateRequest                      '
'
Node:                     Node: Node: ('stripe')String title'
''
 = 'mixinsprovider                  'annotation                '
Node:  = '                      type_identifier@Default('line') = ' = ''
StringEventCreateRequest                '
 = 'Node: '
with _$EventCreateRequest(    Node: '
'              Node:  = ''
 = '                Node: Node: (superclassNode:  = ''
with _$EventCreateRequest@        ' = ''
identifier'
                   = '      Node: ,titlewith'
 = '                  Node: @Node: '
with = 'mixins'
Node:         )Node: argumenttype_identifier = ' = ',with _$EventCreateRequest'
               = ')                              Node: '
identifierNode: 'stripe'              '
} = ' = '_$EventCreateRequest}Node:  = 'formal_parameter'
 = ''
'
                                String paymentMethod            '
Node: Node: Default,)                Node: Node: string_literal'
type_identifier = 'Node:                  = ' = 'Node: Stringwith'
'stripe'Node: '
 = '), = ''
'
                                withNode:                 Node: Node:               =argumentsclass_body = ' = ' = '('line')'
'
identifier={
  const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest;

  factory EventCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventCreateRequestFromJson(json);
} = 'Node: '
paymentMethod                        '
Node:         (          Node:  = 'Node: requiredtype_identifier = '(Node: type_identifier{ = ''
_UserProfile'required = ''
_$EventCreateRequest              '
 = '                  '
 = 'Node: '
{argument'
 = '''line'Node: '
,                     = 'Node:     '
                    Node: Node: ;formal_parameter                            Node:  = ',String description'
'
Node:               class_bodyNode:  = '}' = ' = '                {
  const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest;

  factory EventCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventCreateRequestFromJson(json);
}; = 'Node: string_literalNode: '
''
} = ''
type_identifier'line' = '      declaration                  Node: '
)Node:                   StringNode: method_signature) = ' = ' = '))'
'
          const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequestNode: Node: '
'
 = '=factory UserProfile.fromJson(Map<String, dynamic> json) = '                      '
{'
                              Node:                 Node: identifierNode: factory_constructor_signature = 'Node: Node: formal_parameterredirecting_factory_constructor_signature= = ' = 'descriptionfactory UserProfile.fromJson(Map<String, dynamic> json)'
 = ''{const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest'
'
 = '          '
              '
String paymentMethod                '
 = 'Node: Node: '                '
declaration                      Node: Node: , = 'Node:           type_identifiertype_identifierNode:  = ''const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest = ''
 = '_PaymentCreateRequest         = 'Node: 'factory,String = 'const_builtin'
 = ''
Node: '
redirecting_factory_constructor_signature                      factoryNode: const; = ''
'
const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest                        Node: '
identifier                             = 'Node:  = ''
Node: ;          '
Node: Node: Node: required       = 'identifier)requiredpaymentMethod = ''
factoryNode:  = 'const_builtin'
               = 'factoryUserProfile'
'
)method_signatureNode:               formal_parameterNode:            = '          ,const = ''
Node:  = ',Node:  = '          identifierNode:  = 'DateTime startDatefactoryEventCreateRequest'
'
.'
'
 = '                              . = '              '
Node:           Node: Node:           }Node: Node:  = 'type_identifierfactory PaymentCreateRequest.fromJson(Map<String, dynamic> json)formal_parameter_listfactory} = ''
({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  })identifier'
'
 = '            DateTime        Node:  = '          '
formal_parameterfromJson)'
'
                                      Node: Node: Node: Node:  = 'Node: identifierString providerfactory_constructor_signatureformal_parameter_list( = 'identifier(Map<String, dynamic> json) = ' = '('
 = 'factory PaymentCreateRequest.fromJson(Map<String, dynamic> json)'
 = ' = ')EventCreateRequest'
'
                startDate'
            Node: '
type_identifier          '
          Node: Node: formal_parameter_list( = ' = '({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  })(            '
              Node: Node: optional_formal_parameters= = 'Node: '
,           = ' = 'Node: =String'
factory'
           = '                                        {
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }Node: Node: '
type_identifierNode:  = 'Node: factoryidentifier'
( = ' = ',formal_parameter = ''
 = '              (Node: Map<String, dynamic> json              _PaymentCreateRequestNode: '
'
          provider            Node: Node: identifier'
optional_formal_parameters = ' = 'PaymentCreateRequest{
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }'
required              {'
'
                                            Node: Node: Node: , = '.Node: required = ' = 'Node:  = '{,{'
 = '              {'
Node: }type_identifier.;'
 = ''
          '
Node: Map              identifierNode: '
 = ' = 'required               = 'Node:               required} = 'Node:               formal_parameterrequired;fromJson'
'
'
'
Node:  = '              type_argumentsNode:  = '      <String, dynamic>            '
required          formal_parameter'
                Node:  = 'method_signatureNode:  = 'formal_parameter_listfactory PaymentCreateRequest.fromJson(Map<String, dynamic> json) = ''
Node: Node: )         = '<) = '              (Map<String, dynamic> json)'
<          '
Node:  = 'Node: =DateTime endDate = '                formal_parameterNode: Node: type_identifier='
'
 = '            String titleNode:  = 'String titlefactory_constructor_signature( = ' = 'factory PaymentCreateRequest.fromJson(Map<String, dynamic> json)('
'
'
'
                          '
                            Node:           factoryNode:  = 'type_identifierfactoryString                '
Node: Node: type_identifier = 'Node: Node: _UserProfile                formal_parameterNode:  = ',Map<String, dynamic> json = ''
,'
 = ''
'
type_identifier                       = 'type_identifier              Node:            = 'Node: Stringtype_identifierDateTime;'
 = '                ;Node: Node: identifiertype_identifier = 'Node: Stringdynamic = ''
 = 'endDate'
'
                '
              identifierMap       = '                Node: Node: '
PaymentCreateRequestNode: >'
               = ',method_signature                 = 'Node: Node: '
identifier           = 'Node: title. = '>identifierNode: '
type_arguments = ' = '.'
,              '
<String, dynamic>factory UserProfile.fromJson(Map<String, dynamic> json) = 'title'
'
                      '
Node:                 Node:               factory_constructor_signatureNode:  = 'identifierNode: Node:  = ','
factory UserProfile.fromJson(Map<String, dynamic> json)          '
Node:           identifier               = 'Node:  = 'fromJson,'
<,          jsonrequiredNode: Node: '
 = ''
              formal_parameter_listfactory = ' = ','
               = '<requiredNode:  = 'Node: '
(Map<String, dynamic> json)            factory                '
Node:           type_identifierrequiredrequired'
'
               = ' = 'requiredString'
'
Node:                           Node:  = 'Node: )                formal_parameteridentifierNode:  = 'required = 'Node: '
)UserProfile(Node:  = ''
'
                              (,formal_parameter = ''
Node: Node: . = 'String description = ' = '            '
function_bodyNode: .String locationNode: '
,                '
Node:                  = 'Node: type_identifier=>
      _$UserProfileFromJson(json); = 'String'
                formal_parameter'
                          Node: Node: identifieridentifierNode:  = 'type_identifierfromJson = ''
formal_parameterString = ' = 'String description'
'
Map<String, dynamic> json = ''
                              locationNode: Node: '
                          Node: Node: formal_parameter_list = '              (Map<String, dynamic> json)Node: '
,type_identifiertype_identifier = ' = ' = ',Mapidentifier'
'
            dynamic'
type_identifier         = 'Node:                = '              '
Node: Stringrequired'
Node:  = 'Node:                 =>description('
required                              Node:  = ''
 = '              (type_argumentsNode: => = 'formal_parameter<String, dynamic>'
'
>                '
Node: Node: <Node:              = ' = 'int capacity<        '
identifier'
Node:                 identifierNode: ,type_identifier = ' = 'Node:  = 'formal_parameter_$UserProfileFromJson = '> = ' = ''
descriptionMap<String, dynamic> json'
                        Node: '
int'
,'
Node:                               selectorNode: type_identifieridentifier                             = 'Node: '
 = 'Node: capacitytype_identifier'
 = ',(json)               = ' = 'Node: Mapidentifier'
 = 'String,Node: json'
'
                                        requiredNode: '
) = 'Node:                         required = ''
Node: Node: type_arguments, = ' = 'required,Node:  = ')<String, dynamic>'
'
                              '
argument_part      '
                Node: requiredNode: , = 'Node: (json)<'
              Node: function_bodyformal_parameterNode:  = ' = 'DateTime startDate,'
'
 = '                '
<             = 'Node: =>
      _$PaymentCreateRequestFromJson(json);argumentsrequired'
                 = ''
required                 = 'Node: Node:               type_identifierNode: (json)Node: type_identifier = ' = 'DateTimeString'
formal_parameter'
'
 = '                              Node: DateTime startDateformal_parameterNode:         , = ''
              Node: '
=>Node:  = '                =>Node: '
type_identifierint pricetype_identifier = ' = ',dynamic = ''
        '
Node: '
                (                Node: Node:                                 identifieridentifier = 'type_identifierDateTime = 'Node: inttype_identifier'
'
 = '                                Node: dynamicidentifier'
 = 'Node:  = '                _$PaymentCreateRequestFromJsonNode: startDate>'
identifier'
(Node:  = '         = 'Node: pricestartDateselector>'
 = '              >'
Node: '
,               = ''
 = 'Node: ,>'
 = ''
                                          Node: Node: ,identifier              , = '(json)              Node:  = 'argumentjson = ',Node:  = ''
json'
            '
Node: ,                required)               = 'Node: required'
Node:  = '          )Node: identifierargument_partNode: '
formal_parameter               = 'Node: requiredString? imageUrl = 'required = ''
(json)              '
Node:             formal_parameterNode:  = ''
 = ''
arguments'
               = 'Node: (json)DateTime endDate                '
formal_parameterjson = '              DateTime endDateNode: '
(                 = 'Node: (type_identifier'
 = '              DateTimeNode:       Node: '
Node:                 argumenttype_identifier'
identifierfunction_bodyNode:  = '                 = 'Node:  = 'type_identifierString = ''
json             = '=>
      _$UserProfileFromJson(json);'
DateTimeNode: jsonidentifier) = ' = 'endDate)'
'
'
'
                                      '
Node: Node: )=> = ''
 = ')      Node:                               nullable_typeNode:                 '
identifier = ' = '?Node: Node: =>,'
 = 'identifier'
Node:                                   Node:  = 'identifierfunction_bodyNode: , = ''
;              =>
      _$PaymentCreateRequestFromJson(json);Node:  = ''
requiredjson = ' = ';Node: '
_$UserProfileFromJson?      '
Node:         '
                      Node: endDate}selectorNode: '
required=> = 'Node: (json)) = ' = ''
                        Node: '
 = 'Node:  = '?},'
argument_part) = '=>              (json)'
 = ''
Node:         ,'
formal_parameter'
 = '            String locationNode: '
  argumentsNode:                 ;Node:         identifier = ' = ''
imageUrl; = '                              Node: Node: identifiertype_identifier = ''
_$PaymentCreateRequestFromJson               = '(json)Node: Node: '
class_definitionNode: '
 = ',String@freezed
class AuthState with _$AuthState {
  const factory AuthState.initial() = _Initial;
  const factory AuthState.loading() = _Loading;
  const factory AuthState.authenticated(AppUser user) = _Authenticated;
  const factory AuthState.unauthenticated() = _Unauthenticated;
  const factory AuthState.error(String message) = _Error;
} = ''
'
        '
      Node: requiredselector, = '    Node: (json)}'
 = '                              Node:               Node: annotationNode: Node: }identifier = ''
required = ''
'
location              (          Node: formal_parameter  formal_parameter = ' = 'Node:  = ' = 'argument_partList<String>? tags = '('
(json)                String locationNode: '
Node: '
'
                type_identifierNode: class_definition'
@freezed               = ' = '            '
              List      Node: type_identifierNode: @freezed
class PaymentResult with _$PaymentResult {
  const factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _Success;

  const factory PaymentResult.failed({
    required String errorMessage,
  }) = _Failed;

  const factory PaymentResult.cancelled() = _Cancelled;
},'
argument = '    '
Node: Node: annotationString                 = 'Node:  = 'type_arguments, = 'Node: json<String>@'
'
 = 'arguments'
 = '@freezed(json)                '
'
 = '                                                Node:               <Node:  = '(<@ = 'Node: '
Node: '
      Node: Node:                   (identifierNode: required'
identifiertype_identifier       = 'Node:  = ''
 = ' = 'freezed              requiredNode: '
argument'
     = 'Node: jsonclass'
                              Node: jsonformal_parameterNode: '
identifieridentifier = ' = 'class              @Node:  = ')@String'
'
 = ' = 'int capacity = ''
)json                '
Node: locationtype_identifier    '
'
'
Node:                           Node:       ;              Node:  = '              Node: identifier>Node: int = ''
>                '
,Node:  = 'AuthState = ''
identifier    ;Node:  = ' = 'superclass                Node: ,'
freezed'
'
                        Node: Node: classrequiredNode: ) = ' = '})required'
'
identifier = '                      }Node: '
formal_parameter = 'Node: int capacity  '
 = ' = 'capacity = ''
with _$AuthStateclassNode: '
'
Node: ;      class_definition = 'Node: ;mixins'
nullable_type           = ' = 'Node: ?}'
 = '                  }Node: '
                  Node: Node:               class_definitionNode:  = '?, = '@freezed
class PaymentResult with _$PaymentResult {
  const factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _Success;

  const factory PaymentResult.failed({
    required String errorMessage,
  }) = _Failed;

  const factory PaymentResult.cancelled() = _Cancelled;
}@freezed
class AuthState with _$AuthState {
  const factory AuthState.initial() = _Initial;
  const factory AuthState.loading() = _Loading;
  const factory AuthState.authenticated(AppUser user) = _Authenticated;
  const factory AuthState.unauthenticated() = _Unauthenticated;
  const factory AuthState.error(String message) = _Error;
}type_identifier'
 = ' = 'intNode:     identifier = '?with _$AuthState'
'
,                        '
Node: Node: with     = 'Node: with'
'
 = '                              Node: PaymentResultNode: requiredidentifier = 'annotationNode: annotationidentifier = ' = ' = 'tags@freezed'
 = '@freezed'
'
      '
requiredcapacity'
                    '
        Node:     Node: Node: @type_identifier'
               = 'Node: Node:               @Node:  = 'superclassformal_parameter,@ = '@Node: _$AuthState = ' = ' = ',,'
with _$PaymentResult              '
Node: '
      '
int price    }       = 'Node: }Node: '
'
'
 = '                ,Node: '
type_identifier       = 'Node: identifierint = 'mixinsfreezed'
'
    Node:                             class_bodyNode:  = 'classwith _$PaymentResult = ''
class              '
        identifier = ' = '{
  const factory AuthState.initial() = _Initial;
  const factory AuthState.loading() = _Loading;
  const factory AuthState.authenticated(AppUser user) = _Authenticated;
  const factory AuthState.unauthenticated() = _Unauthenticated;
  const factory AuthState.error(String message) = _Error;
}Node: '
    Node: Node: withrequired) = ' = 'Node: requiredidentifier      Node: '
 = 'freezedwith'
'
    PaymentResult = '        )Node: '
Node:           identifier'
Node: type_identifier    {               = ' = 'Node: {Node: '
=Node: formal_parameter = ' = '=price_$PaymentResult'
'
                        Node: Node: superclass       = 'classNode: int pricedeclaration = ' = ' = ''
classtype_identifier'
 = ',with _$PaymentResult = ''
          Node: Node:                 mixins_EventCreateRequestconst factory AuthState.initial() = _Initial,class_bodyNode: '
 = 'type_identifier'
'
 = ' = 'int'
    {
  const factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _Success;

  const factory PaymentResult.failed({
    required String errorMessage,
  }) = _Failed;

  const factory PaymentResult.cancelled() = _Cancelled;
}      '
Node:                     Node: Node: Node: ;identifier'
formal_parameterwith _$PaymentResult = ''
                                Node: Node: with = ' = ';Node:  = '{identifierredirecting_factory_constructor_signature = ' = ' = 'priceconst factory AuthState.initial() = _Initial'
{'
withString? imageUrl              '
'
'
                                Node: Node: type_identifier'
 = 'AuthStatedeclarationNode:  = 'Node:         '
Node: const_builtin,String    const factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _Success'
type_identifier                 = ' = 'Node: ,'
nullable_type_$PaymentResult = ''
Node:     superclassNode: constclass_body'
      '
Node:            = '        Node:               Node: method_signature{
  const factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _Success;

  const factory PaymentResult.failed({
    required String errorMessage,
  }) = _Failed;

  const factory PaymentResult.cancelled() = _Cancelled;
} = 'factory EventCreateRequest.fromJson(Map<String, dynamic> json) = ''
Node: redirecting_factory_constructor_signature         = 'formal_parameterconst factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _Success = 'factory? = 'String? imageUrl'
'
Node:           factory_constructor_signatureNode:  = ' = 'factory EventCreateRequest.fromJson(Map<String, dynamic> json)factory'
          '
with _$AuthState      '
                  '
Node: Node: ?          '
Node:  = 'identifier       = 'const_builtinAuthStateNode: ? = 'Node: const'
factory'
mixins = '                factoryNode: '
{type_identifier                 = ' = 'Stringwith _$AuthState = ''
                    '
Node: {identifier         = 'Node: imageUrlNode: '
identifier          '
Node:                        = ''
EventCreateRequestwithNode:  = '.Node: with = 'factorydeclaration. = ''
 = 'factoryNode: '
nullable_type          const factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _Success              '
 = ''
          ?'
'
Node: Node:           identifier                          Node:         ?,Node: Node:  = 'identifierPaymentResult = ''
Node:  = '.redirecting_factory_constructor_signature = ' = '. = 'const factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _Success'
initial,          '
Node: '
identifier               = ''
          Node: fromJsontype_identifierNode: '
 = '          _$AuthStateNode: '
Node: ?formal_parameter'
formal_parameter_list                         = ' = '.List<String>? tags = ''
Node: (Map<String, dynamic> json).formal_parameter_list                Node: Node:  = ''
identifierclass_body                 = 'Node: {
  const factory AuthState.initial() = _Initial;
  const factory AuthState.loading() = _Loading;
  const factory AuthState.authenticated(AppUser user) = _Authenticated;
  const factory AuthState.unauthenticated() = _Unauthenticated;
  const factory AuthState.error(String message) = _Error;
}'
'
()            Node: Node:           (Node:  = ''
      ('
const_builtinidentifier             = 'Node: success(             = 'Node: type_identifierformal_parameter = ' = 'constNode: '
Map<String, dynamic> json{'
          '
                         = 'imageUrl = ' = '{'
'
Node: (                    '
Node:             Node: type_identifier,Node:  = 'Node: Node: formal_parameter_listList)'
 = ' = '                Map) = 'declaration'
Node: factory = ' = 'const factory AuthState.initial() = _Initialfactory({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  })'
'
type_arguments           = ''
Node: <String>=                          '
,Node:                   type_argumentsNode: Node:  = 'redirecting_factory_constructor_signature'
 = '              const factory AuthState.initial() = _Initial'
identifier = ' = '=PaymentResult'
'
          '
Node: Node: type_identifier(          <String, dynamic>Node: Node:                   .Node:  = '<formal_parameter'
 = ' = 'List<String>? tags_Initial = '           = ''
                .Node:       const_builtinNode: <;'
 = '                  ;'
'
( = 'Node: '
<constNode: '
 = 'type_identifier<             = 'Node: String                    Node: '
identifierNode: '
                                        optional_formal_parameters = ' = 'success{
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }factoryNode:  = 'type_identifierNode: '
Node: factorydeclaration'
'
 = '          '
> = '          ListNode: Node: '
const factory AuthState.loading() = _Loading                 = 'identifier               = '                '
Node: Node: formal_parameter_listtype_identifiertype_arguments = ' = 'AuthStateNode: >({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  })'
        {<String> = 'Node: {redirecting_factory_constructor_signature = ''
String'
 = ''
                  '
Node:           <                                const factory AuthState.loading() = _Loading'
Node:             Node: nullable_typeNode: , = '. = ' = ' = ''
Node: ?(,'
 = '                  '
<Node:               (Node: .required           = '?required'
'
                            Node: Node:  = ''
?          '
                  Node:                 optional_formal_parameters'
 = 'Node: {
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }identifier'
const_builtin               = 'type_identifier              constNode: '
Node: identifier           = 'formal_parameter = 'Node: initial = ''
Node: Node: factory = '          dynamicNode: {String paymentId = ''
formal_parameter_list                {Node: '
>              tags = ' = '>'
'
type_identifier                              Node: Node: identifiertype_identifier = ''
 = 'String = 'String'
 = '                                jsonNode: '
>Node: factory = '()>Node: '
required'
'
                                       = ''
requiredNode:                             '
Node: Node: ,Node: identifier = ')nullable_type,('
 = '               = 'Node:  = ')}'
 = '      }Node:               '
?function_body = 'Node:             (AuthState'
formal_parameter = 'Node: '
 = '          =>
      _$EventCreateRequestFromJson(json);Node: Node: String paymentId            '
'
Node: identifier                )Node:  = ''
type_identifierpaymentId                   = 'Node: String?        '
)'
                               = 'Node: ) = 'Node:  = '.'
Node:           =>Node: identifier = '),paymentId = ''
=, = ' = '              .='
?Node:  = ','
 = '          Node: '
,=>'
'
                                '
'
Node: Node:               identifierNode:  = 'type_identifier          Node: required=required = '_$EventCreateRequestFromJson                 = ' = ' = '_EventCreateRequestrequired'
'
Node: requiredidentifier'
 = '='
                                    Node: Node: Node: selectorformal_parameter      '
formal_parameter = ' = '(json)String sessionId'
'
Node:                           Node: Node:  = 'argument_partloading = ''
identifierString sessionId          Node: (json)type_identifier'
 = 'Node:                 String = ''
'
          formal_parameter_listNode: tagsNode: type_identifier'
; = '            type_identifier()Node:  = ' = '              ;arguments_Initial = 'String'
 = '                '
'
Node:             (json)Node: Node:       (identifier = '      Node:  = ','
sessionId = ','
('
'
'
                          method_signatureNode: Node:  = ',              ;                Node: factory EventCreateRequest.fromJson(Map<String, dynamic> json) = 'Node: (              Node: Node:  = ' = ',)'
}('
 = ''
)                      ;identifierNode:                = 'argumentsessionId = ''
json = ''
}          '
Node: Node:             formal_parameterNode:  = ')String? paymentIntentId = 'factory_constructor_signature) = 'factory EventCreateRequest.fromJson(Map<String, dynamic> json)'
'
                        Node: Node: ,factory       = 'Node: factorydeclaration'
 = '          const factory AuthState.loading() = _LoadingNode: '
identifier         = 'Node: EventCreateRequest = ''
,          '
Node:               .Node:  = 'formal_parameter. = ''
          Node: identifier'
 = '                fromJsonNode: '
Node: identifier          = = 'Node:  = 'formal_parameter_list= = ''
(Map<String, dynamic> json)          '
Node:             type_identifierNode:  = '(_Loading = ''
(json      '
'
                          Node: Node: formal_parameter) = ' = 'Map<String, dynamic> json)Node: '
;         = 'Node: ;;'
 = '      ;Node: '
declaration       = 'Node: const factory AuthState.authenticated(AppUser user) = _Authenticated}'
 = '        }Node: '
'
                  Node: Node: class_definitiontype_identifier = ' = '@freezed
class EventUpdateRequest with _$EventUpdateRequest {
  const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest;

  factory EventUpdateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventUpdateRequestFromJson(json);
}String'
'
                    Node: Node: annotationnullable_type = ' = '@freezed?'
'
                        Node: Node: @? = ''
redirecting_factory_constructor_signature?          '
Node: = = ' = 'String? paymentIntentId='
'
                const factory AuthState.loading() = _LoadingNode: '
type_identifier                    Node: const_builtin = 'String'
                 = 'Node: nullable_type = 'Node: ?'
type_identifier = '_EventCreateRequest'
      Node: '
              Node: type_identifier = 'Map'
              Node: type_arguments = '<String, dynamic>'
                redirecting_factory_constructor_signature = '                const factory AuthState.authenticated(AppUser user) = _AuthenticatedNode: '
identifier           = 'Node: paymentIntentIdconst_builtin'
 = '              constNode: '
 = '          @Node: '
      Node: identifierconst = ''
freezed          '
Node:                       Node: classfactory = ' = 'classfactory'
'
              Node: Node: identifieridentifier = ' = 'EventUpdateRequest'
Node: ?; = ' = '?;'
'
                Node: Node:       identifierNode:  = 'method_signaturepaymentIntentId = ''
factory EventCreateRequest.fromJson(Map<String, dynamic> json)AuthState'
'
                      Node: Node: factory_constructor_signature, = ' = ','
<               = 'Node: <}'
 = '                }Node: '
type_identifier             = 'Node: String    factory'
,                 = 'Node: ,,'
 = '              ,Node: '
}                 = 'Node: }type_identifier'
 = '            dynamicNode: factory EventCreateRequest.fromJson(Map<String, dynamic> json) = ')factory = ''
)'
                    Node: Node: .identifier'
Node:           '
                 = ') = ' = 'AuthState)'
'
                    superclassNode:           .=Node:  = '== = ' = 'Node: Node: >factory = 'with _$EventUpdateRequest'
'
          Node: >Node: '
type_identifier=              .Node: '
identifier = ' = '          jsonNode: '
identifier'
            Node:  = ')factory = ').'
'
                      Node: Node: type_identifiermixins = ' = '_Successwith _$EventUpdateRequest'
'
              Node: Node: ;with = ' = ';with'
'
              Node: Node: declaration = ' = ' = 'const factory PaymentResult.failed({
    required String errorMessage,
  }) = _Failedloading'
'
                  Node: Node: redirecting_factory_constructor_signatureformal_parameter_list = ' = 'const factory PaymentResult.failed({
    required String errorMessage,
  }) = _Failed()'
'
                      Node: Node: const_builtin( = ' = 'const('
'
            Node: ) = ')'
          Node: '
= = 'Node: =          '
Node:           function_body          factoryNode:  = '_Successfactory'
 = 'Node: identifier      type_identifier           = ''
_$EventUpdateRequestNode: =>
      _$EventCreateRequestFromJson(json); = 'identifier          '
 = 'Node: authenticatedEventCreateRequesttype_identifier'
    '
'
 = '        _Loading          ;Node:  = 'Node: Node: .=>'
 = 'identifier = '          Node:       Node: ;;'
 = '=> = ';'
      .Node: '
formal_parameter_list          class_body = ' = '(AppUser user)Node: '
declaration             = 'Node: {
  const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest;

  factory EventUpdateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventUpdateRequestFromJson(json);
}      Node: PaymentResult('
 = 'Node: '
'
identifier               = 'Node: fromJsonidentifierconst factory AuthState.authenticated(AppUser user) = _AuthenticatedNode: ('
'
{declaration = '          {'
 = 'Node:          = '          Node:       redirecting_factory_constructor_signature = '.const factory PaymentResult.failed({
    required String errorMessage,
  }) = _FailedNode: _$EventCreateRequestFromJson'
Node: declarationconst factory AuthState.authenticated(AppUser user) = _Authenticated'
'
'
         = 'Node: redirecting_factory_constructor_signature             = 'formal_parameter_list           = 'Node:  = '        const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest(Map<String, dynamic> json)const factory PaymentResult.failed({
    required String errorMessage,
  }) = _Failed'
.Node: '
                  formal_parameterNode:  = 'identifierconst_builtinNode:  = 'redirecting_factory_constructor_signatureNode:  = 'selectorconst factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest = ''
(json)AppUser user'
           = 'Node:             failedconst_builtin'
 = ''
const'
const'
                        Node:           '
                    Node: '
Node: Node: factoryconst_builtinNode: Node: (formal_parameter_list           = 'argument_part({
    required String errorMessage,
  })Node:  = ' = ' = 'type_identifierfactory = ''
(AppUser          (json)Node: '
identifier             = 'Node:  = ''
factoryAuthState = 'constarguments'
 = 'factory(json)              '
Node:             '
'
'
'
            identifier          Node:           formal_parameterNode:  = 'identifieruser = ' = 'PaymentResult              '
Node:                     Node: Node: '
.factoryNode: ((Node: Map<String, dynamic> json            '
Node: .) = ' = ' = '               = ' = '(('
. = ''
Node: '
factory)              '
.          type_identifierNode:                       '
 = '          MapNode: Node: optional_formal_parametersNode: Node: '
identifier           = ''
identifieridentifier = ' = 'authenticated = 'EventUpdateRequest'
'
Node: argument                     = '              failedNode: json{
    required String errorMessage,
  }'
Node: type_arguments           = 'formal_parameter_listNode: <String, dynamic> = 'Node: '
'
formal_parameter_list=(AppUser user) = ''
='
               = 'Node: '
({
    required String errorMessage,
  })formal_parameter_list                { = 'Node:  = '({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }){'
'
                <                      '
Node:             Node:  = 'Node: <type_identifier             = 'Node:               identifier_Authenticated('
'
Node:  = '(Node: json = ''
(               = 'Node: ( = 'required(      '
Node:             ;                 = ')(required = ''
 = ')Node: '
'
'
                    Node: ;;Node: '
Node: optional_formal_parameters                     = ' = 'Node:             ;Node: declaration{
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }Node: optional_formal_parameterstype_identifierformal_parameter = ' = '{
    required String errorMessage,
  }formal_parameter'
'
 = '              const factory AuthState.unauthenticated() = _Unauthenticated = 'Node: '
{ = 'String errorMessage'
'
String                      Node: Node: type_identifier         = ' = 'AppUser userString'
'
'
{}'
                                            Node: Node: { = 'Node:                               }redirecting_factory_constructor_signatureNode:  = 'Node: const factory AuthState.unauthenticated() = _Unauthenticated,Node:  = ''
,type_identifieridentifier          required = 'Node: '
const_builtin                '
{Node: '
 = ' = '              errorMessage = 'AppUser = 'type_identifier'
 = 'constdynamic'
Node:                 Node: Node: class_definitionrequired = ''
@freezed
class EventUpdateRequest with _$EventUpdateRequest {
  const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest;

  factory EventUpdateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventUpdateRequestFromJson(json);
}'
'
              '
                formal_parameterNode:      = '>Node:  = 'annotation>Node: String? titleformal_parameter           = 'Node:               '
'
String errorMessage              '
Node: factory                Node: , = 'identifierNode:                 type_identifierNode:  = ' = 'String = ''
factoryjson = ''
,@freezedtype_identifier'
identifier'
 = '      '
                               = 'Node: StringNode:                       @Node: '
user                Node: } = ' = 'Node: @})nullable_type = 'identifier) = 'Node: AuthState'
 = ''
?'
'
            '
          Node: Node: ). = '                  )Node: '
'
identifier           = 'Node:       = = ' = '      .            =errorMessage'
Node: Node: function_body'
           = 'Node: Node: identifieridentifier = ' = 'unauthenticatedfreezed'
              '
Node: =>
      _$EventCreateRequestFromJson(json);'
        Node: =>?), = ' = '          ?'
,Node: '
     = '                Node: =>classNode:  = ''
 = '          classformal_parameter_list'
 = ''
()        identifier'
 = ')              titleNode: '
Node:               identifier            Node:  = ''
Node: _$EventCreateRequestFromJsontype_identifierNode:  = ''
Node:               =Node:  = '_Failed,}identifier = ' = '         = 'EventUpdateRequest(}'
, = 'Node: ('
selector'
= = ''
                      (json)Node: '
'
;                         = ''
;            '
Node: Node: Node:       argument_partNode:           Node:  = 'formal_parameter(json)Node: Node: )declarationsuperclass = ''
type_identifier) = ' = ' = ' = ') = '_AuthenticatedString? description)            const factory PaymentResult.cancelled() = _CancelledNode: '
argumentswith _$EventUpdateRequest'
'
'
                        Node: '
           = ''
Node:       redirecting_factory_constructor_signatureNode:  = '=Node: Node: mixins; = ' = 'with _$EventUpdateRequest='
 = '        =Node: '
(json);'
with                              const factory PaymentResult.cancelled() = _CancelledNode: Node: '
( = 'type_identifier = ''
=       = ' = ''
          (          with'
Node: Node:           '
Node: Node: type_identifierString = 'type_identifier         = 'declarationconst_builtin               = 'Node:  = 'argumentconst factory AuthState.unauthenticated() = _Unauthenticated = '_FailedjsonNode: '
'
'
                const        Node: Node: _Unauthenticatedidentifierredirecting_factory_constructor_signature = 'const factory AuthState.unauthenticated() = _Unauthenticated'
'
'
                type_identifier          Node:       nullable_type = ' = 'Node:  = '?Node:       ;'
 = ''
factory;json'
'
Node: _$EventUpdateRequest                                                Node: Node: Node: )declaration = ';'
 = 'Node:  = '?factory = ''
const_builtin? = '    ;Node: '
class_body = 'const factory AuthState.error(String message) = _Error          const)'
'
'
          Node:         Node:        = '                Node: Node: declarationfactoryidentifier = 'Node: '
 = 'redirecting_factory_constructor_signature{
  const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest;

  factory EventUpdateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventUpdateRequestFromJson(json);
}identifier = 'factory = 'PaymentResult = 'const factory PaymentResult.cancelled() = _Cancelleddescriptionconst factory AuthState.error(String message) = _Error'
'
'
        '
Node: '
'
                                ;           = 'Node: Node:           redirecting_factory_constructor_signatureNode:  = 'const factory PaymentResult.cancelled() = _CancelledidentifierNode:  = '.      AuthStateNode: '
,'
 = 'Node:  = ',;const_builtin'
 = '{               = 'Node:           '
formal_parameterconst = '      DateTime? startDateNode:           '
'
          Node: {Node: factory.} = ''
factoryNode: '
.           = '                      const_builtin.'
Node: Node: declarationidentifier = ' = 'const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequestAuthStateNode:  = '          '
type_identifier = '}const'
 = ''
'
'
                              Node: DateTimeNode: identifierfactory = '          '
Node:                 .Node:  = ' = 'factoryNode: '
identifierNode:            = 'Node: redirecting_factory_constructor_signatureunauthenticated = ''
class_definitioncancelledidentifier'
 = '                     = 'Node: Node: .nullable_typeNode:  = 'const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequestPaymentResult'
'
formal_parameter_list@freezed
class EventUpdateRequest with _$EventUpdateRequest {
  const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest;

  factory EventUpdateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventUpdateRequestFromJson(json);
}?'
 = '    ()Node: '
          '
Node:                               Node: annotation'
identifier          ? = ' = ' = 'Node:           ?Node: '
.formal_parameter_listconst_builtin                 = ' = '()Node: const('
 = '          '
Node: factory = 'errorfactory'
'
( = '          '
.            Node:                       @freezed'
Node: Node: Node: '
formal_parameter_listidentifier) = 'Node:  = '      identifier(String message)Node:  = ''
@          EventUpdateRequeststartDate = ' = '(@) = ''
            '
('
Node: '
identifier             = 'Node: Node: '
cancelled                        (Node: Node: =,'
)       = 'Node:  = 'identifier           = '=freezed = ''
'
(              '
Node:             classNode:  = 'formal_parameterNode:  = '          classNode: Node: '
formal_parameter_list    formal_parameter_listNode:  = 'identifier, = ''
EventUpdateRequest = 'String message'
 = '    '
Node: ()superclass'
 = '            with _$EventUpdateRequesttype_identifierNode:               (({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = '               = ''
)      _Unauthenticated'
(          Node: Node: formal_parameter'
 = 'mixinsDateTime? endDate      '
 = ''
'
Node: Node: type_identifier= = 'with _$EventUpdateRequestString'
'
        Node:                         ;Node:  = ' = ';=Node: Node: '
                with           = 'Node: '
              Node:       type_identifierNode:  = '(declarationNode: )identifier = ' = 'const factory AuthState.error(String message) = _Errorwithtype_identifier = ''
 = ')        '
_CancelledNode: messagetype_identifier'
 = ''
DateTime(        '
'
 = ''
Node:                       Node: redirecting_factory_constructor_signatureNode:  = ';const factory AuthState.error(String message) = _Error = ''
                      _$EventUpdateRequest            Node: '
Node: )Node: ;              Node: Node: const_builtin'
nullable_typeclass_body = ' = '?optional_formal_parameters       = 'Node: {
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }}'
 = '{
  const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest;

  factory EventUpdateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventUpdateRequestFromJson(json);
}              const='
 = '}'
 = ' = '                  )Node: Node: =?'
 = '          '
'
      ?'
Node:                 '
{                      Node: Node: { = 'Node: Node: type_identifier{ = 'Node: _Cancelledfactory = 'identifier = ''
'
factory= = '      '
class_definitionendDate           = 'Node: {'
Node:               identifierNode:  = 'formal_parameterAuthState = '              ;'
 = '      ;String? title = 'Node: @freezed
class PaymentState with _$PaymentState {
  const factory PaymentState.initial() = _StateInitial;
  const factory PaymentState.loading() = _StateLoading;
  const factory PaymentState.success(Payment payment) = _StateSuccess;
  const factory PaymentState.failed(String errorMessage) = _StateFailed;
}'
,'
 = ''
Node:           '
,Node:     .'
                              declarationNode: Node:       =type_identifierNode: Node: }annotation = ' = '}@freezed'
 = '   = 'Node: .class_definition'
 = 'formal_parameter@freezed
class PaymentState with _$PaymentState {
  const factory PaymentState.initial() = _StateInitial;
  const factory PaymentState.loading() = _StateLoading;
  const factory PaymentState.success(Payment payment) = _StateSuccess;
  const factory PaymentState.failed(String errorMessage) = _StateFailed;
} = ''
String'
const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest = ''
          '
Node:                         '
identifierString? location                 = ''
Node: errorNode:                 type_identifier'
 = 'Node: _Error    '
Node: Node: type_identifier@       = ' = 'Node: String@;'
'
nullable_type = 'Node:           redirecting_factory_constructor_signature       = ';annotation = ''
                Node: Node: formal_parameter_listconst factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequestNode: nullable_type? = 'identifier = ''
      '
(String message)          '
Node: @freezedNode:              = 'Node:  = '(? = ''
(                  '
Node:                   ?freezed = ''
const_builtin}'
     = '       = 'Node: ?class             = 'Node: }constNode: Node: '
formal_parameterclass                 = ''
Node: ?'
 = '@    String message?Node: '
identifieridentifier'
'
 = '=== End AST ===
location              '
 = '               = '@                
=== Processing class: Node: AppUser          Node: '
PaymentState      '
 ===
Node: Node: Node: ,type_identifieridentifierfactoryidentifier     = ' = 'Node: factorysuperclass = '
=== Processing class: '
 = ',           = 'Node: StringidentifierUserProfilefreezed = ''
title = ' ===
'
'
with _$PaymentState                            Node: Node: EventUpdateRequest'
'
              formal_parameter       = 'Node:     int? capacityNode: Node: classmixins = 'identifier = 'class,with _$PaymentState'
'
 = ''
 = ',message'
'
'
                                              Node:         Node: Node: )          type_identifier = 'with)Node: '
 = 'Node:           identifierwith = 'Node:  = '=formal_parameter'
Node:  = '        formal_parameter_listNode: 
=== Processing class:  = 'String? description = '({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  })PaymentState'
'
                int            Node: Node: type_identifier'
(                type_identifier = ' = 'Node: _$PaymentStateString'
AuthState=nullable_type'
              Node: Node: superclass ===
 = ' = '?with _$PaymentState'
'
                        Node: Node: ?mixins = ' = ''
 = 'with _$PaymentState'
'
(                '
Node:             type_identifier         = 'nullable_type_ErrorNode: '
?with      '
Node:  = ';                 = 'with;'
'
         = 'Node: type_identifier    Node: ?optional_formal_parameters'
 = ' = '{
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }_$PaymentState'
'
                      Node:               ?Node:  = 'Node: {      Node: Node: identifier} = ' = 'Node: }class_body'
 = 'class_body=== End AST ===
{ = ''

=== Processing class: {
  const factory PaymentState.initial() = _StateInitial;
  const factory PaymentState.loading() = _StateLoading;
  const factory PaymentState.success(Payment payment) = _StateSuccess;
  const factory PaymentState.failed(String errorMessage) = _StateFailed;
}AppUser'
               ===
Node:       formal_parameterNode:  = '{String? title = ''
{                '
Node:       type_identifierNode:  = 'declarationString = ''
const factory PaymentState.initial() = _StateInitial                '
Node:         nullable_typeNode: 
=== Processing class:  = 'UserProfile? ===
redirecting_factory_constructor_signature'

=== Processing class:  = '                  const factory PaymentState.initial() = _StateInitialNode: '
?           = 'Node: ?const_builtin'
 = '                constNode: ?identifier'
 = '                titleNode: '
identifier               = 'Node: description,'
 = '              ,Node: '
              Node: ,formal_parameter = ' = ',String? description'
'
                        Node: capacityNode: '
factory = 'formal_parameterfactory               = ''
Node: DateTime? startDate          ,Node:  = 'identifier,'
'
 = '                              Node: {
  const factory PaymentState.initial() = _StateInitial;
  const factory PaymentState.loading() = _StateLoading;
  const factory PaymentState.success(Payment payment) = _StateSuccess;
  const factory PaymentState.failed(String errorMessage) = _StateFailed;
}type_identifierNode:  = ''
formal_parameterDateTime = ''
                      int? priceNode: '
nullable_type                 = 'Node: ?{'
AuthState = ' = '{PaymentState'
'
                          '
 ===
                  Node: Node: type_identifier? = 'Node:        = 'Node: Node: ?declaration'
type_identifier                 = 'Node: .int = ' = ''
.                '
Node:           nullable_typeStringNode: '
 = 'identifier                 = 'Node: initialnullable_type'
          Node: formal_parameter_list = '()const factory PaymentState.initial() = _StateInitial'
'
            Node: ( = '(        '
Node:             Node: )redirecting_factory_constructor_signature = ' = ')const factory PaymentState.initial() = _StateInitial'
'
                    Node: Node: =const_builtin = ' = '=const'
'
                    Node: Node: type_identifierfactory = ' = '_StateInitialfactory'
'
                Node: Node: ;identifier = ' = ';PaymentState'
'
                Node: Node: declaration. = ' = 'const factory PaymentState.loading() = _StateLoading.'
'
                  Node: identifierredirecting_factory_constructor_signatureNode:  = ' = 'const factory PaymentState.loading() = _StateLoading'
startDate          '
Node:               const_builtinNode:  = ' = '?identifier'
 = '                  initialNode: ,?'
'
                            Node: Node: formal_parameter_list = ' = '??()const = ''
?            '
'
Node:            = '(Node: ?factory'
                , = ' = 'factory('
Node:           '
                '
                          Node: identifierNode:  = 'Node: priceidentifierNode: )'
 = '              )Node: '
identifier          ,Node:  = '=PaymentState = 'formal_parameter = ''
, = ''
                        descriptionNode: Node: formal_parameter. = '='
 = '              '
. = 'Node:           String? imageUrl,Node:  = 'DateTime? endDatetype_identifier'
'
 = '          _StateInitialNode: '
identifier                ,'
'
Node:                      = 'Node: loading'
                Node:           Node: Node: type_identifierformal_parameter_list = 'formal_parameter; = ' = 'DateTime? startDate;'
'
 = '      type_identifierDateTime                '
 = 'Node:                 StringNode: ()nullable_type'
 = '                ?Node: '
nullable_type                   = 'Node: ??'
 = 'Node:                   declarationNode: '
?type_identifier = '? = ''
DateTime                '
Node: const factory PaymentState.loading() = _StateLoading = 'identifier?'
 = ''
endDate                        '
Node:                                           identifierNode:  = 'Node: ,imageUrl = 'redirecting_factory_constructor_signatureNode: ,( = ' = ''
(const factory PaymentState.loading() = _StateLoading'
Node:             '
nullable_typeNode:  = ')? = ''
'
                            Node:               ?Node:  = 'const_builtin) = 'constNode:               '
,?          Node:  = 'Node: ,formal_parameter='
'
                          Node:  = 'identifier = 'String? location'
'
Node:                 factory = 'Node:  = 'type_identifierfactory = ''
startDate='
                        Node: identifierNode:  = 'StringPaymentState,'
              '
Node:                 formal_parameter'
 = '          Node:            = 'Node: Node: nullable_typetype_identifier = ' = '?,._StateLoading'
 = ''
.              '
Node:                 formal_parameter'
Node: List<String>? tagsidentifier = ''
 = '                DateTime? endDate                  loadingNode: '
?Node:  = ';Node: ? = 'type_identifier; = ''
List                '
'
'
                                                Node: Node: identifiertype_identifierNode: Node: Node: declarationtype_argumentsformal_parameter_list = ' = '<String> = '()'
'
 = '                              const factory PaymentState.success(Payment payment) = _StateSuccessNode: Node: (location'
 = ''
( = ''
                    <Node:  = ')< = 'Node: )redirecting_factory_constructor_signatureDateTime'
'
 = '                                        Node: Node: ,const factory PaymentState.success(Payment payment) = _StateSuccess = ''
Node:           ,nullable_type'
 = '                  Node: ?const_builtin'
Node:               =Node:  = 'formal_parameter= = ''
type_identifier = '          constNode: '
'
           = 'Node: String                  '
Node: int? capacity?                  '
 = '                Node: type_identifier>Node: factory?type_identifier = ' = 'factoryint'
'
           = '                '
Node: >                nullable_typeNode:  = ' = 'identifier? = ''
'
Node:                   endDate                Node: '
?               = 'Node: _StateLoading?,'
identifierNode:  = 'nullable_type = ', = ''
?'
              '
PaymentStateNode:                   formal_parameterNode: '
 = '?String? location          '
                                      Node: Node: Node: identifiertype_identifier = ' = 'capacity;'
StringNode:               '
Node: . = ' = '?                '
Node: .                nullable_typeNode: '
identifier = ' = '?tags'
'
,           = 'Node: ;'
               = 'identifier, = ''
                  Node: success,'
 = '                Node: ,formal_parameter_list              '
Node:  = '              (Payment payment)Node: Node: ?'
Node: formal_parameterformal_parameter = ' = ' = '?int? priceString? status            '
declarationNode:                 '
(Node:                  = 'Node: type_identifieridentifier( = ' = 'intlocation'
'
'
'
                              Node: Node: ,            type_identifier = ' = '                Node:  = ',formal_parameterconst factory PaymentState.success(Payment payment) = _StateSuccess'
String'
 = '              Payment payment                Node: '
formal_parameterNode:  = 'Node: int? capacitynullable_typenullable_type'
 = ' = '                ?Node: '
type_identifier                   = 'Node: ?              int'
'
Node:                         Node: Node: redirecting_factory_constructor_signature?nullable_typetype_identifier = ' = '?const factory PaymentState.success(Payment payment) = _StateSuccess'
 = ''
 = '                  PaymentNode: '
?'
                   = '          ??'
'
Node:                                 Node: Node: ?identifieridentifier = ' = 'Node: price = ''
const_builtincapacity = '?              '
constNode:                 identifier'
Node:  = 'identifierpayment = ''
status'
            '
Node:               ) = '          )Node: '
Node: factory           = ',Node:               =Node:                = ',Node: = = ''
,, = ''
,factory                        '
 = '          '
Node: Node: ,Node: '
formal_parameter               = 'identifierNode:  = '}               = 'Node: int? pricetype_identifierformal_parameter'
 = ' = '_StateSuccessPaymentState'
'
                          }      Node: Node: String? imageUrl;'
 = 'Node: ;'
'
.       = 'type_identifierNode: . = ''
int                                      Node: '
)Node:  = '                identifier)Node: '
nullable_type           = 'declaration?'
 = ' = 'const factory PaymentState.failed(String errorMessage) = _StateFailedNode: '
successtype_identifier = 'Node:                           Node: =redirecting_factory_constructor_signature = 'Node: = = ''
const factory PaymentState.failed(String errorMessage) = _StateFailedString'
'
?           = '          ?Node: '
const_builtin                 = 'Node: '
const          identifierNode:  = 'type_identifierprice                '
'
Node:                         nullable_typeNode: Node: factory = ' = ' = 'factory_EventUpdateRequest'
'
?      Node: Node: ,formal_parameter_list; = ' = '(Payment payment)          '
 = ''
            ,Node: '
(Node:  = ';identifier'
 = '(                                PaymentStateNode: Node: ?'
 = 'formal_parameter      ?'
Node: '
            method_signature                 = 'Node: factory EventUpdateRequest.fromJson(Map<String, dynamic> json) = 'identifier'
String? imageUrl                  Node: Node: factory_constructor_signature.Node:  = ''
.'
           = 'Node:  = 'identifierimageUrl = 'factory EventUpdateRequest.fromJson(Map<String, dynamic> json)failed'
'
formal_parameter                        Node:  = 'Node:                 Payment payment,Node: '
'
formal_parameter_list                         = ' = '(String errorMessage),'
Node: '
            type_identifier              type_identifier = 'Node:  = 'formal_parameterNode: PaymentStringNode: '
'
factory                 = 'Node: List<String>? tagsnullable_type'
 = ' = '              (Node:  = 'identifier('
 = '?paymentfactory'
'
                            '
Node:             type_identifier           = 'Node: Listidentifier'
 = 'Node:                 EventUpdateRequestNode: '
type_argumentsNode:            = 'Node: <String>.'
 = ')formal_parameter.                   = ''
 = 'Node:                             String errorMessageNode: Node: identifier? = ')fromJson'
'
<                        '
Node: Node:            = ' = '<Node: '
?= = ''
formal_parameter_listtype_identifier=                   = 'Node: Stringtype_identifier'
'
               = '                 = 'String(Map<String, dynamic> json)Node: '
'
identifier                               = 'Node: imageUrl(Node: '
Node: identifier               = '>Node:  = ',> = 'errorMessage,'
'
 = '            (              Node: Node: )formal_parameter = ' = ''
)List<String>? tags'
'
'
                          Node:                 Node: type_identifier= = 'List            '
Node:                 Node: Node: nullable_typeformal_parametertype_arguments = ' = ' = '<String>Map<String, dynamic> json'
          '
Node:                                 Node: type_identifierNode: < = ' = 'type_identifier<_StateSuccess'
'
 = '      Map = ''
=              Node: Node: ;type_arguments = '; = ''
<String, dynamic>      '
?Node: declaration = 'const factory PaymentState.failed(String errorMessage) = _StateFailed'
'
                          Node: Node: redirecting_factory_constructor_signature = 'const factory PaymentState.failed(String errorMessage) = _StateFailed'
          Node: const_builtin = 'const'
          Node: factory = ''
factory          '
Node: type_identifier = '                  Node: type_identifier = '                StringNode: <'
                  Node: > = '>'
                ?Node:  = 'nullable_type? = ''
<                '
Node: identifier                           = 'Node: ?type_identifierNode: _StateFailedidentifier'
      Node:  = ';PaymentState = ''
;'
      Node: } = '}'
=== End AST ===

=== Processing class: Payment ===

=== Processing class: PaymentCreateRequest ===

=== Processing class: PaymentResult ===

=== Processing class: PaymentState ===
'
           = 'String'
                Node: , = ', = ''
tags                '
                  Node: ? = '?'
                Node: identifier = 'tags'
              Node: Node: , = '.Node:  = 'type_identifier. = ',dynamic'
'
                              Node: Node: >formal_parameter = 'String? status'
                '
Node:           type_identifier = 'StringNode: '
identifier = ' = 'failed>'
'
                        Node: Node: formal_parameter_listidentifier = ' = '(String errorMessage)json'
'
                        Node: Node: () = ' = '()'
'
                  Node: Node: formal_parameterfunction_body = '=>
      _$EventUpdateRequestFromJson(json);               = ''
String errorMessage        '
Node: Node:               =>Node:  = 'type_identifier=> = 'String'
'
                        Node: Node: identifiernullable_type = ' = '              _$EventUpdateRequestFromJson,'
 = 'Node: ,        identifier'
 = '?errorMessage              '
Node:             formal_parameter = 'Node: '
String? status                  '
Node: selector?                 = ' = 'Node: ?type_identifier'
Node:                 )(json)Node:  = ''
identifier) = '          status = ''
Node: Stringargument_part              '
Node:                 , = 'Node: (json) = 'nullable_type,'
 = ''
          ?Node:               '
Node: =                   = '}= = ''
}Node:           '
Node: ?type_identifier = ' = '?_StateFailed            '
'
'
                      Node: Node: ;identifier = ' = ';status'
Node:             '
                    Node: Node: arguments,Node:  = ' = ',}'
 = '              }(json)'
Node: === End AST ===
)} = ' = '
=== Processing class: }Payment'
)'
              '
                      Node: Node: )= = ' = 'Node: =)('
'
           = 'Node:           type_identifierNode:  = '=_EventUpdateRequest('
 ===
      '
Node:               ;Node:  = 'argument; = ' = ''
json=      '
Node:                 method_signature'
Node:           identifierNode:  = 'type_identifierjson = ''
_EventUpdateRequest = '              '
factory EventUpdateRequest.fromJson(Map<String, dynamic> json)Node:       )'
Node:  = ';        )Node: '
factory_constructor_signature         = 'factory EventUpdateRequest.fromJson(Map<String, dynamic> json)'
           = 'Node: 
=== Processing class: Node: ;PaymentCreateRequest = ' ===
;factory
=== Processing class:  = 'PaymentResult;'
'
 ===
      factory
=== Processing class: Node: PaymentState} ===
 = '}      '
Node:   method_signatureNode:  = 'class_definitionfactory EventUpdateRequest.fromJson(Map<String, dynamic> json) = ''
@freezed
class EventListState with _$EventListState {
  const factory EventListState.initial() = _Initial;
  const factory EventListState.loading() = _Loading;
  const factory EventListState.loaded(List<Event> events) = _Loaded;
  const factory EventListState.error(String message) = _Error;
}        '
Node:     factory_constructor_signature = 'factory EventUpdateRequest.fromJson(Map<String, dynamic> json)'
Node: annotation          '
 = '          @freezedNode: '
identifier       = 'Node: EventUpdateRequest@ = '@'
      Node: Node: identifierfactory = ' = 'freezedfactory'
'
              Node: Node: class = ''
class'
              Node: Node: .identifier = ' = '.EventListState'
'
              Node: identifiersuperclass = ' = 'EventUpdateRequestwith _$EventListState'
'
Node:                 Node: Node: . = '.identifier'
 = 'mixins          fromJsonNode: '
           = 'identifierNode: with _$EventListStateformal_parameter_list'
 = '        (Map<String, dynamic> json)'
 = '            fromJsonNode: '
Node:           withNode:  = 'formal_parameter_listwith = '((Map<String, dynamic> json)'
'
 = '                    Node: Node: type_identifier( = ' = '_$EventListState('
'
(                Node: Node: class_bodyformal_parameter = ' = '{
  const factory EventListState.initial() = _Initial;
  const factory EventListState.loading() = _Loading;
  const factory EventListState.loaded(List<Event> events) = _Loaded;
  const factory EventListState.error(String message) = _Error;
}Map<String, dynamic> json'
'
'
                  Node: Node: formal_parameter{ = ' = '              Map<String, dynamic> json{Node: '
type_identifier'
 = '              MapNode: '
type_identifier       = 'Node: Mapdeclaration'
               = '              Node: const factory EventListState.initial() = _InitialNode: '
type_argumentstype_arguments         = 'Node: <String, dynamic>redirecting_factory_constructor_signature'
 = ' = 'const factory EventListState.initial() = _Initial                '
Node: <<String, dynamic> = ''
<'
                          Node: Node: const_builtintype_identifier = '                constNode: '
<           = 'Node: <factory'
 = 'factory = '                '
Node:           type_identifierNode:  = 'Stringidentifier'
String = ''
EventListState                Node: '
,                           = 'Node: ,Node: '
. = ',. = ''
,                          '
Node: Node: type_identifieridentifier = ' = 'dynamic                '
Node:                 type_identifierNode:  = '>dynamic = 'initial>'
'
'
                                        Node: Node: Node: formal_parameter_listidentifier = ' = '()>'
 = '            >Node: json('
            '
Node:  = '              )Node:  = 'identifier) = ''
json      (Node: '
function_body            Node: '
)             = 'Node: ))'
          Node:  = ' = '==>
      _$EventUpdateRequestFromJson(json);)'
'
              Node: Node: function_body=> = ' = '=>
      _$EventUpdateRequestFromJson(json);=>'
'
                Node: Node: =>identifier = ' = '=_$EventUpdateRequestFromJson'
'
                  Node: Node: type_identifier = ' = 'selector=> = '_Initial(json)'
'
                '
Node: Node: ;argument_part = ' = ';(json)'
'
                          Node: Node: argumentsdeclaration = ' = '(json)const factory EventListState.loading() = _LoadingNode: '
identifier              '
Node:  = '(_$EventUpdateRequestFromJson = '(        '
'
                      Node: Node: argumentselector = ' = 'jsonNode: '
redirecting_factory_constructor_signature                 = 'Node: const factory EventListState.loading() = _Loadingidentifier'
 = 'json'
(json)                        '
          Node: Node: Node: const_builtinargument_part = ') = ' = 'const)'
'
                  Node: Node: (json)factory'
 = '            factoryNode: '
arguments           = 'Node: (json)identifier;'
 = '               = 'EventListStateNode: '
(           = 'Node: (.'
 = '              .Node: '
argument           = 'Node: jsonidentifier;'
'
                Node: identifier       = 'Node: json}'
 = '              loadingNode: '
)           = 'Node: ) = ''
formal_parameter_list        } = 'Node: ();'
'
 = '            ;Node: '
( = '        Node: Node: class_definition} = ' = '@freezed
class EventListState with _$EventListState {
  const factory EventListState.initial() = _Initial;
  const factory EventListState.loading() = _Loading;
  const factory EventListState.loaded(List<Event> events) = _Loaded;
  const factory EventListState.error(String message) = _Error;
}}'
'
(      Node: '
Node: annotationclass_definition = '             = '@freezedNode: @freezed
class EventListState with _$EventListState {
  const factory EventListState.initial() = _Initial;
  const factory EventListState.loading() = _Loading;
  const factory EventListState.loaded(List<Event> events) = _Loaded;
  const factory EventListState.error(String message) = _Error;
}'
'
          Node: Node: @annotation = ' = '@@freezed'
'
            Node: Node: @identifier = ')@ = ' = ''
freezed)      '
'
Node:               Node: identifierclass = ' = 'freezedNode: '
class='
 = '    =Node:     class'
 = 'Node: class          '
Node:     type_identifierNode: identifieridentifier = ' = 'EventListStateEventListState'
'
 = '        Node: Node: superclass = '_Loadingwith _$EventListStatesuperclass'
'
       = 'Node:       mixinswith _$EventListState = 'Node: with _$EventListState'
'
;       = '        ;Node: '
Node: with       = 'Node: with'
declaration        mixinsNode:  = 'type_identifierconst factory EventListState.loaded(List<Event> events) = _Loaded = '_$EventListState'
'
 = '            Node: Node: class_body = 'redirecting_factory_constructor_signature{
  const factory EventListState.initial() = _Initial;
  const factory EventListState.loading() = _Loading;
  const factory EventListState.loaded(List<Event> events) = _Loaded;
  const factory EventListState.error(String message) = _Error;
}with _$EventListState'
 = ''
const factory EventListState.loaded(List<Event> events) = _Loaded      '
Node:         {           = 'Node: {withNode:  = 'const_builtin'
with       = 'Node: '
declarationconst = ''
const factory EventListState.initial() = _Initial          '
Node:                 Node: factoryredirecting_factory_constructor_signature = ' = 'factoryconst factory EventListState.initial() = _InitialNode: '
'
                    Node: Node: const_builtintype_identifieridentifier = ' = 'const_$EventListState'
 = '          '
Node: EventListState    factoryNode:  = 'class_bodyfactory = ''
{
  const factory EventListState.initial() = _Initial;
  const factory EventListState.loading() = _Loading;
  const factory EventListState.loaded(List<Event> events) = _Loaded;
  const factory EventListState.error(String message) = _Error;
}          '
Node: '
identifier       = 'Node:           {EventListState = ''
{'
                Node: Node: declaration. = 'Node: const factory EventListState.initial() = _Initial = ''
.        .Node:  = 'redirecting_factory_constructor_signature'
 = '.const factory EventListState.initial() = _Initial'
'
                              Node: Node: Node: const_builtinidentifier = 'identifierconst = ''
 = 'loaded          initialNode: '
factory'
 = '          factory          '
Node: Node:           formal_parameter_listNode: formal_parameter_listidentifier = ' = ' = 'EventListState()'
(List<Event> events)'
          '
Node:             .Node:  = '(.            '
 = '          Node: Node: (identifier( = ''
initial = ''
                      Node: Node: formal_parameter_list) = ' = '())'
'
(                      Node: Node: (= = ' = '(='
'
                      Node: Node: )type_identifier = ' = ')'
'
            _InitialNode: formal_parameter = 'List<Event> events          Node: '
='
               = '      Node: Node: =;type_identifier = ''
 = '          ListNode: '
              ;'
Node: type_argumentstype_identifier = ' = '<Event>_Initial'
'
                      Node: Node:       declaration< = ' = 'const factory EventListState.loading() = _Loading<'
Node:                 ;Node:  = 'type_identifier; = ''
Event      '
Node:                 declarationNode: '
> = '        const factory EventListState.loading() = _LoadingNode: '
redirecting_factory_constructor_signature         = 'Node: const factory EventListState.loading() = _Loadingredirecting_factory_constructor_signature = ' = ''
>          '
Node:               const_builtinNode:  = 'identifierconst = ''
events          '
Node:             factoryNode:  = ')factory = ''
)          '
Node:           identifierNode:  = '=EventListState = ''
=          '
Node: const factory EventListState.loading() = _Loading.'
 = '.'
                              Node: Node: identifierNode:  = 'type_identifierloadingconst_builtin = ''
_Loaded           = 'Node: '
formal_parameter_listconst = '      ()'
'
                      Node: Node: Node: ;(factory = ' = '(factory'
'
                      Node: Node: )identifier = ' = ' = ')EventListState'
;          '
'
Node:       =Node:           declaration = ' = '=const factory EventListState.error(String message) = _Error'
Node:         .Node:  = 'redirecting_factory_constructor_signature.'
'
                    Node: Node: type_identifieridentifier = ' = '_Loadingloading'
'
 = '                Node: Node: const factory EventListState.error(String message) = _Error;formal_parameter_list = ''
; = ''
()                '
Node: Node: declaration             = 'Node: const factory EventListState.loaded(List<Event> events) = _Loaded'
(        const_builtinNode:  = ' = 'redirecting_factory_constructor_signatureconst( = ''
const factory EventListState.loaded(List<Event> events) = _Loaded'
                      Node: Node: )const_builtin'
 = ' = 'const)'
'
          Node:           factoryNode:  = '          factoryNode: '
=           = 'factory=Node:  = 'identifierfactory = 'EventListState'
'
'
                    Node: Node: .type_identifier = '          .Node: '
 = '          _LoadingNode: '
identifier       = 'identifierloaded = ''
Node:           EventListStateNode: '
;formal_parameter_list           = ' = 'Node: (List<Event> events);.'
 = ''
                  Node: .('
 = '(          '
Node:             declarationNode:  = 'formal_parameterNode:  = 'const factory EventListState.loaded(List<Event> events) = _LoadedList<Event> eventsidentifier'
'
 = '                      errorNode: Node: '
redirecting_factory_constructor_signaturetype_identifier = ' = '          Listconst factory EventListState.loaded(List<Event> events) = _Loaded'
Node: '
              formal_parameter_listNode:            = 'type_arguments(String message)Node:  = 'const_builtin'
 = '<Event>            '
Node:                 Node: (const< = ' = '(<'
'
'
                            Node: Node: type_identifierformal_parameter = ' = 'Event          String message'
'
Node:                 factory              Node: Node: >type_identifier = ' = '> = 'String'
'
              factoryNode:               identifier'
Node:  = '          identifierevents = ''
message'
            Node:             Node: identifier) = ' = ')EventListState'
'
          Node: Node: =          ) = ' = 'Node: =).'
'
 = '          .          Node: Node: =type_identifier = ''
 = '_Loaded=          '
Node: '
      identifierNode:  = '          loaded;'
 = '          Node: formal_parameter_listNode:  = 'type_identifier(List<Event> events) = ''
_Error;            '
Node: '
(       = 'Node: (;'
 = '            ;Node: '
            Node: Node: formal_parameterdeclaration} = ' = ' = '}const factory EventListState.error(String message) = _Error'
List<Event> events'
'
          Node:               class_definitionNode:  = 'redirecting_factory_constructor_signature@freezed
class EventDetailState with _$EventDetailState {
  const factory EventDetailState.initial() = _DetailInitial;
  const factory EventDetailState.loading() = _DetailLoading;
  const factory EventDetailState.loaded(Event event) = _DetailLoaded;
  const factory EventDetailState.error(String message) = _DetailError;
} = ''
const factory EventListState.error(String message) = _Error'
              Node: Node: Node: annotationconst_builtintype_identifier = ' = '@freezedList'
'
                     = 'Node: Node: @type_arguments = 'const = ''
<Event>          '
Node: factory = '                factory@'
'
Node:                 Node: Node: identifieridentifier< = ' = 'freezedEventListState'
 = '    '
<Node:           '
classNode:  = '                .classNode:  = ''
type_identifier.     = ''
Node: Event          identifierNode:  = 'identifierEventDetailState'
 = ''
                errorNode:     >'
Node:           superclassNode:  = 'formal_parameter_listwith _$EventDetailState = ''
(String message)      '
Node: mixins             = 'Node: with _$EventDetailState('
 = '        ('
Node:             withNode: formal_parameter = ' = 'withString message'
'
 = '                      Node: Node: type_identifiertype_identifier> = ' = ''
_$EventDetailStateString'
'
    Node:               class_bodyNode:  = '{
  const factory EventDetailState.initial() = _DetailInitial;
  const factory EventDetailState.loading() = _DetailLoading;
  const factory EventDetailState.loaded(Event event) = _DetailLoaded;
  const factory EventDetailState.error(String message) = _DetailError;
}identifier'
 = '      Node: message              {'
 = '            {Node: '
) = '      )Node: '
identifier           = 'Node: eventsNode: '
declaration             = '=const factory EventDetailState.initial() = _DetailInitial = ''
Node: =        )'
Node:  = '          redirecting_factory_constructor_signature)Node:  = ''
type_identifierconst factory EventDetailState.initial() = _DetailInitial          '
Node:  = '=_Error = ''
=      '
          Node:           ;Node:  = 'type_identifierNode: ; = 'const_builtin'
_Loaded      '
Node: } = ' = '      }const'
Node: '
  ;Node:  = 'class_definition; = '          @freezed
class EventDetailState with _$EventDetailState {
  const factory EventDetailState.initial() = _DetailInitial;
  const factory EventDetailState.loading() = _DetailLoading;
  const factory EventDetailState.loaded(Event event) = _DetailLoaded;
  const factory EventDetailState.error(String message) = _DetailError;
}Node: '
'
factory          Node:  = 'annotationNode:  = 'factory@freezed'
'
declaration                Node:  = '@Node:  = 'const factory EventListState.error(String message) = _Error@identifier'
'
       = 'Node: EventDetailState        identifier'
 = 'Node: freezed          '
redirecting_factory_constructor_signatureNode:  = '    .Node: const factory EventListState.error(String message) = _Errorclass = ' = ''
class.'
'
              Node:           identifierNode:  = 'identifierEventDetailState'
 = '    initialNode: '
superclassNode:  = '          with _$EventDetailStateNode: '
const_builtin       = 'Node: constmixinsformal_parameter_list = ''
with _$EventDetailState = ''
()                  '
Node: Node: withfactory = ' = 'withfactory'
'
                              Node: Node: identifierNode: type_identifier = ' = '(_$EventDetailState = ''
EventListState    (Node: '
class_body'
 = '          {
  const factory EventDetailState.initial() = _DetailInitial;
  const factory EventDetailState.loading() = _DetailLoading;
  const factory EventDetailState.loaded(Event event) = _DetailLoaded;
  const factory EventDetailState.error(String message) = _DetailError;
}            '
Node:       Node: Node: {) = '.{ = ''
 = '      )Node: '
declaration = '.const factory EventDetailState.initial() = _DetailInitial'
'
                  Node: Node: =redirecting_factory_constructor_signature           = ' = 'const factory EventDetailState.initial() = _DetailInitialNode: '
identifier          Node: =const_builtin'
 = 'const = ''
                    errorNode: Node: factory'
 = 'type_identifierfactory          '
 = '          Node: Node: _DetailInitialidentifier'
 = '      EventDetailStateNode: '
;formal_parameter_list = '          ;Node:  = '.'
 = '(String message)      .Node: '
'
declaration                       = 'Node: const factory EventDetailState.loading() = _DetailLoadingidentifierNode:  = '('
 = '        initial('
Node:           '
Node: redirecting_factory_constructor_signatureformal_parameter_list             = ' = '()Node: '
const factory EventDetailState.loading() = _DetailLoadingformal_parameter            '
Node:  = '(           = 'Node: ('
String message            const_builtinNode: '
) = ' = '              )const'
'
Node:           type_identifier          Node:  = '=Node: String = 'factory= = ''
'
factory                        '
Node: Node:           type_identifieridentifier = 'Node:  = '_DetailInitialidentifiermessage'
 = ''
      EventDetailStateNode:             ;'
 = '          ;'
Node:       Node: Node: .declaration = ') = '. = 'const factory EventDetailState.loading() = _DetailLoading'
)'
'
                  Node: Node:           redirecting_factory_constructor_signatureNode:  = 'identifierconst factory EventDetailState.loading() = _DetailLoading = ''
loading=          '
Node:           const_builtin = ' = 'constNode: '
=formal_parameter_list          '
Node:  = '          factory() = 'Node: factory'
'
                      Node: Node: type_identifieridentifier( = ' = 'EventDetailState('
 = '          '
Node:             .Node:  = '.)'
_Error           = 'Node: '
identifier) = '      loading'
'
Node:           ;          Node:  = 'formal_parameter_listNode: ; = '='
()       = ''
Node: =            }'
Node:  = '(           = 'Node: (type_identifier'
} = '            '
_DetailLoadingNode:   )'
Node:  = 'class_definition) = ''
@freezed
class EventDetailState with _$EventDetailState {
  const factory EventDetailState.initial() = _DetailInitial;
  const factory EventDetailState.loading() = _DetailLoading;
  const factory EventDetailState.loaded(Event event) = _DetailLoaded;
  const factory EventDetailState.error(String message) = _DetailError;
}                '
Node: Node: =; = ' = '=    '
Node:           ;Node: annotationtype_identifier'
 = ' = '      _DetailLoading@freezedNode: '
declaration'
       = 'Node:       ;const factory EventDetailState.loaded(Event event) = _DetailLoaded = 'Node: ;'
'
              @Node: Node:  = 'declarationredirecting_factory_constructor_signature = ' = 'const factory EventDetailState.loaded(Event event) = _DetailLoaded@'
const factory EventDetailState.loaded(Event event) = _DetailLoaded        '
'
Node:                 redirecting_factory_constructor_signatureNode: Node:  = 'const_builtinidentifierconst factory EventDetailState.loaded(Event event) = _DetailLoaded = ''
 = '          constNode: freezedconst_builtin'
 = '          constNode: '
'
factory               = 'Node: factoryfactory = 'Node: factory'
'
class           = 'Node: classidentifier          '
 = 'Node: EventDetailStateidentifier    '
 = '          Node: Node: identifier. = 'EventDetailState = '.'
'
                    EventDetailStateNode: Node: '
identifier. = ' = 'loaded.'
'
              Node:           formal_parameter_listNode: Node:  = 'identifier(Event event) = ''
loaded            '
Node:           (superclass = 'Node: ( = ''
formal_parameter_listwith _$EventDetailState = ''
            (Event event)Node:       formal_parameter'
 = '            Event eventNode: '
(Node:                = 'Node: (type_identifier = 'mixinsEvent = ''
with _$EventDetailState'
              '
Node:             identifier         = 'Node: eventformal_parameter'
 = 'Node:             withNode:  = ')Event event = ''
)with'
'
                                Node: Node: Node: =type_identifier = 'type_identifier= = ''
_$EventDetailState           = 'Node: '
type_identifierEvent = ''
_DetailLoaded              '
Node:           Node: identifier; = ' = 'event;Node: '
'
class_body                  Node:  = 'declarationNode:  = ')const factory EventDetailState.error(String message) = _DetailError{
  const factory EventDetailState.initial() = _DetailInitial;
  const factory EventDetailState.loading() = _DetailLoading;
  const factory EventDetailState.loaded(Event event) = _DetailLoaded;
  const factory EventDetailState.error(String message) = _DetailError;
}'
 = '        '
Node:       redirecting_factory_constructor_signature) = 'Node: const factory EventDetailState.error(String message) = _DetailError'
'
{                    Node: Node: const_builtin = ' = '{const'
'
=                Node:  = 'factory= = ''
factory          '
Node:           declarationNode:  = 'identifierNode:  = 'type_identifierEventDetailState = ''
const factory EventDetailState.initial() = _DetailInitial          _DetailLoadedNode: '
.'
 = '      .Node: '
        ;           = 'Node: ;identifierNode:  = ''
error      '
redirecting_factory_constructor_signatureNode:           declaration = 'Node:  = 'const factory EventDetailState.initial() = _DetailInitialformal_parameter_listconst factory EventDetailState.error(String message) = _DetailError'
 = ''
(String message)          '
        Node:             Node: Node: const_builtin(redirecting_factory_constructor_signature = ' = '( = ''
const factory EventDetailState.error(String message) = _DetailError            Node: '
formal_parameterconst = ''
String message'
                        Node: Node: const_builtintype_identifier = ' = '          StringNode: '
factory               = 'Node: factoryidentifier'
 = 'constmessage          '
'
Node:             identifierNode:  = ')EventDetailState = '          )Node: '
'
factory           = 'Node:           =Node:  = '.factory= = ''
.          '
'
Node:           type_identifierNode:  = 'identifier_DetailError = ''
initial          '
                Node: Node: Node: identifier;formal_parameter_list = ' = ';()'
'
 = '                  EventDetailStateNode: Node: ('
} = '           = '(Node: '
}            .Node:  = ') = '.)'
'
                    '
Node: Node: identifier= = ' = '=== End AST ===
=error'
'
                    Node: Node: type_identifierformal_parameter_list = ' = '_DetailInitial'
(String message)      '
Node: 
=== Processing class:             ;Node:  = '(; = ''
('
      EventNode:  ===
declaration             = 'Node: const factory EventDetailState.loading() = _DetailLoadingformal_parameter'
 = '        String messageNode: '
redirecting_factory_constructor_signature               = 'Node: const factory EventDetailState.loading() = _DetailLoadingtype_identifier'
 = '          StringNode: '
const_builtin = '              constNode: '
identifier           = 'Node: messagefactory'
 = '            factoryNode: '

=== Processing class:           EventCreateRequestNode:  ===
identifier) = '
=== Processing class: EventDetailStateEventUpdateRequest'
 = '           ===
Node: ).
=== Processing class:  = 'EventListState'
 ===
.          
=== Processing class: '
EventDetailState           ===
Node: Node: =identifier = ' = '=loading'
'
                    Node: Node: type_identifierformal_parameter_list = ' = '_DetailError()'
'
                  Node: Node: ;( = ' = ';('
'
                  Node: Node: }) = ' = '})'
'
=== End AST ===
          Node: =
=== Processing class:  = 'Event= ===
'

=== Processing class:           EventCreateRequestNode:  ===
type_identifier = '_DetailLoading'
      Node: ; = ';'
      Node: declaration = 'const factory EventDetailState.loaded(Event event) = _DetailLoaded'
        Node: redirecting_factory_constructor_signature = 'const factory EventDetailState.loaded(Event event) = _DetailLoaded'
          Node: const_builtin = 'const'
          Node: factory = '
=== Processing class: factoryEventUpdateRequest'
 ===
          Node: 
=== Processing class: identifierEventListState = ' ===
EventDetailState
=== Processing class: '
EventDetailState           ===
Node: . = '.'
          Node: identifier = 'loaded'
          Node: formal_parameter_list = '(Event event)'
            Node: ( = '('
            Node: formal_parameter = 'Event event'
              Node: type_identifier = 'Event'
              Node: identifier = 'event'
            Node: ) = ')'
          Node: = = '='
          Node: type_identifier = '_DetailLoaded'
      Node: ; = ';'
      Node: declaration = 'const factory EventDetailState.error(String message) = _DetailError'
        Node: redirecting_factory_constructor_signature = 'const factory EventDetailState.error(String message) = _DetailError'
          Node: const_builtin = 'const'
          Node: factory = 'factory'
          Node: identifier = 'EventDetailState'
          Node: . = '.'
          Node: identifier = 'error'
          Node: formal_parameter_list = '(String message)'
            Node: ( = '('
            Node: formal_parameter = 'String message'
              Node: type_identifier = 'String'
              Node: identifier = 'message'
            Node: ) = ')'
          Node: = = '='
          Node: type_identifier = '_DetailError'
      Node: ; = ';'
      Node: } = '}'
=== End AST ===

=== Processing class: Event ===

=== Processing class: EventCreateRequest ===

=== Processing class: EventUpdateRequest ===

=== Processing class: EventListState ===

=== Processing class: EventDetailState ===

=== Complete AST for test_flutter_app/aminomi/lib/providers/auth_provider.dart ===
Node: program = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;
import 'package:riverpod/riverpod.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import '../models/user.dart';
import '../services/line_auth_service.dart';

part 'auth_provider.g.dart';

@riverpod
class AuthNotifier extends _$AuthNotifier {
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}

/// 認証状態プロバイダー
@riverpod
AuthState authState(Ref ref) {
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}

/// 現在のユーザープロバイダー
@riverpod
AppUser? currentUser(Ref ref) {
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}

/// 認証済みかどうかのプロバイダー
@riverpod
bool isAuthenticated(Ref ref) {
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}
'
  Node: import_or_export = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
    Node: library_import = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
      Node: import_specification = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
        Node: import = 'import'
        Node: configurable_uri = ''package:firebase_auth/firebase_auth.dart''
          Node: uri = ''package:firebase_auth/firebase_auth.dart''
            Node: string_literal = ''package:firebase_auth/firebase_auth.dart''
              Node: ' = '''
              Node: ' = '''
        Node: as = 'as'
        Node: identifier = 'firebase_auth'
        Node: ; = ';'
  Node: import_or_export = 'import 'package:riverpod/riverpod.dart';'
    Node: library_import = 'import 'package:riverpod/riverpod.dart';'
      Node: import_specification = 'import 'package:riverpod/riverpod.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:riverpod/riverpod.dart''
          Node: uri = ''package:riverpod/riverpod.dart''
            Node: string_literal = ''package:riverpod/riverpod.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
    Node: library_import = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
      Node: import_specification = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:riverpod_annotation/riverpod_annotation.dart''
          Node: uri = ''package:riverpod_annotation/riverpod_annotation.dart''
            Node: string_literal = ''package:riverpod_annotation/riverpod_annotation.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import '../models/user.dart';'
    Node: library_import = 'import '../models/user.dart';'
      Node: import_specification = 'import '../models/user.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''../models/user.dart''
          Node: uri = ''../models/user.dart''
            Node: string_literal = ''../models/user.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import '../services/line_auth_service.dart';'
    Node: library_import = 'import '../services/line_auth_service.dart';'
      Node: import_specification = 'import '../services/line_auth_service.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''../services/line_auth_service.dart''
          Node: uri = ''../services/line_auth_service.dart''
            Node: string_literal = ''../services/line_auth_service.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: part_directive = 'part 'auth_provider.g.dart';'
    Node: part = 'part'
    Node: uri = ''auth_provider.g.dart''
      Node: string_literal = ''auth_provider.g.dart''
        Node: ' = '''
        Node: ' = '''
    Node: ; = ';'
  Node: class_definition = '@riverpod
class AuthNotifier extends _$AuthNotifier {
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}'
    Node: annotation = '@riverpod'
      Node: @ = '@'
      Node: identifier = 'riverpod'
    Node: class = 'class'
    Node: identifier = 'AuthNotifier'
    Node: superclass = 'extends _$AuthNotifier'
      Node: extends = 'extends'
      Node: type_identifier = '_$AuthNotifier'
    Node: class_body = '{
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}'
      Node: { = '{'
      Node: annotation = '@override'
        Node: @ = '@'
        Node: identifier = 'override'
      Node: method_signature = 'AuthState build()'
        Node: function_signature = 'AuthState build()'
          Node: type_identifier = 'AuthState'
          Node: identifier = 'build'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = '{
    return const AuthState.initial();
  }'
        Node: block = '{
    return const AuthState.initial();
  }'
          Node: { = '{'
          Node: return_statement = 'return const AuthState.initial();'
            Node: return = 'return'
            Node: const_object_expression = 'const AuthState.initial()'
              Node: const_builtin = 'const'
              Node: type_identifier = 'AuthState'
              Node: . = '.'
              Node: identifier = 'initial'
              Node: arguments = '()'
                Node: ( = '('
                Node: ) = ')'
            Node: ; = ';'
          Node: } = '}'
      Node: documentation_comment = '/// LINEログイン'
        Node: /// = '///'
      Node: method_signature = 'Future<void> signInWithLine()'
        Node: function_signature = 'Future<void> signInWithLine()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'signInWithLine'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: expression_statement = 'state = const AuthState.loading();'
            Node: assignment_expression = 'state = const AuthState.loading()'
              Node: assignable_expression = 'state'
                Node: identifier = 'state'
              Node: = = '='
              Node: const_object_expression = 'const AuthState.loading()'
                Node: const_builtin = 'const'
                Node: type_identifier = 'AuthState'
                Node: . = '.'
                Node: identifier = 'loading'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: ; = ';'
          Node: try_statement = 'try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    }'
              Node: { = '{'
              Node: local_variable_declaration = 'final result = await LineAuthService.login();'
                Node: initialized_variable_definition = 'final result = await LineAuthService.login()'
                  Node: final_builtin = 'final'
                    Node: final = 'final'
                  Node: identifier = 'result'
                  Node: = = '='
                  Node: unary_expression = 'await LineAuthService.login()'
                    Node: await_expression = 'await LineAuthService.login()'
                      Node: await = 'await'
                      Node: identifier = 'LineAuthService'
                      Node: selector = '.login'
                        Node: unconditional_assignable_selector = '.login'
                          Node: . = '.'
                          Node: identifier = 'login'
                      Node: selector = '()'
                        Node: argument_part = '()'
                          Node: arguments = '()'
                            Node: ( = '('
                            Node: ) = ')'
                Node: ; = ';'
              Node: if_statement = 'if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }'
                Node: if = 'if'
                Node: ( = '('
                Node: equality_expression = 'result != null'
                  Node: identifier = 'result'
                  Node: equality_operator = '!='
                  Node: null_literal = 'null'
                    Node: null = 'null'
                Node: ) = ')'
                Node: block = '{
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      }'
                  Node: { = '{'
                  Node: comment = '// Firebaseカスタムトークンでサインイン'
                    Node: // = '//'
                  Node: local_variable_declaration = 'final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );'
                    Node: initialized_variable_definition = 'final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                      Node: final_builtin = 'final'
                        Node: final = 'final'
                      Node: identifier = 'userCredential'
                      Node: = = '='
                      Node: unary_expression = 'await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                        Node: await_expression = 'await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                          Node: await = 'await'
                          Node: identifier = 'firebase_auth'
                          Node: selector = '.FirebaseAuth'
                            Node: unconditional_assignable_selector = '.FirebaseAuth'
                              Node: . = '.'
                              Node: identifier = 'FirebaseAuth'
                          Node: selector = '.instance'
                            Node: unconditional_assignable_selector = '.instance'
                              Node: . = '.'
                              Node: identifier = 'instance'
                          Node: selector = '.signInWithCustomToken'
                            Node: unconditional_assignable_selector = '.signInWithCustomToken'
                              Node: . = '.'
                              Node: identifier = 'signInWithCustomToken'
                          Node: selector = '(
          result.accessToken,
        )'
                            Node: argument_part = '(
          result.accessToken,
        )'
                              Node: arguments = '(
          result.accessToken,
        )'
                                Node: ( = '('
                                Node: argument = 'result.accessToken'
                                  Node: identifier = 'result'
                                  Node: selector = '.accessToken'
                                    Node: unconditional_assignable_selector = '.accessToken'
                                      Node: . = '.'
                                      Node: identifier = 'accessToken'
                                Node: , = ','
                                Node: ) = ')'
                    Node: ; = ';'
                  Node: if_statement = 'if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }'
                    Node: if = 'if'
                    Node: ( = '('
                    Node: equality_expression = 'userCredential.user != null'
                      Node: identifier = 'userCredential'
                      Node: selector = '.user'
                        Node: unconditional_assignable_selector = '.user'
                          Node: . = '.'
                          Node: identifier = 'user'
                      Node: equality_operator = '!='
                      Node: null_literal = 'null'
                        Node: null = 'null'
                    Node: ) = ')'
                    Node: block = '{
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        }'
                      Node: { = '{'
                      Node: local_variable_declaration = 'final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );'
                        Node: initialized_variable_definition = 'final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                          Node: final_builtin = 'final'
                            Node: final = 'final'
                          Node: identifier = 'user'
                          Node: = = '='
                          Node: identifier = 'AppUser'
                          Node: selector = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                            Node: argument_part = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                              Node: arguments = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                                Node: ( = '('
                                Node: named_argument = 'id: userCredential.user!.uid'
                                  Node: label = 'id:'
                                    Node: identifier = 'id'
                                    Node: : = ':'
                                  Node: identifier = 'userCredential'
                                  Node: selector = '.user'
                                    Node: unconditional_assignable_selector = '.user'
                                      Node: . = '.'
                                      Node: identifier = 'user'
                                  Node: selector = '!'
                                    Node: ! = '!'
                                  Node: selector = '.uid'
                                    Node: unconditional_assignable_selector = '.uid'
                                      Node: . = '.'
                                      Node: identifier = 'uid'
                                Node: , = ','
                                Node: named_argument = 'displayName: result.profile.displayName'
                                  Node: label = 'displayName:'
                                    Node: identifier = 'displayName'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.displayName'
                                    Node: unconditional_assignable_selector = '.displayName'
                                      Node: . = '.'
                                      Node: identifier = 'displayName'
                                Node: , = ','
                                Node: named_argument = 'photoURL: result.profile.pictureUrl'
                                  Node: label = 'photoURL:'
                                    Node: identifier = 'photoURL'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.pictureUrl'
                                    Node: unconditional_assignable_selector = '.pictureUrl'
                                      Node: . = '.'
                                      Node: identifier = 'pictureUrl'
                                Node: , = ','
                                Node: named_argument = 'statusMessage: result.profile.statusMessage'
                                  Node: label = 'statusMessage:'
                                    Node: identifier = 'statusMessage'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.statusMessage'
                                    Node: unconditional_assignable_selector = '.statusMessage'
                                      Node: . = '.'
                                      Node: identifier = 'statusMessage'
                                Node: , = ','
                                Node: named_argument = 'provider: 'line''
                                  Node: label = 'provider:'
                                    Node: identifier = 'provider'
                                    Node: : = ':'
                                  Node: string_literal = ''line''
                                    Node: ' = '''
                                    Node: ' = '''
                                Node: , = ','
                                Node: named_argument = 'createdAt: DateTime.now()'
                                  Node: label = 'createdAt:'
                                    Node: identifier = 'createdAt'
                                    Node: : = ':'
                                  Node: identifier = 'DateTime'
                                  Node: selector = '.now'
                                    Node: unconditional_assignable_selector = '.now'
                                      Node: . = '.'
                                      Node: identifier = 'now'
                                  Node: selector = '()'
                                    Node: argument_part = '()'
                                      Node: arguments = '()'
                                        Node: ( = '('
                                        Node: ) = ')'
                                Node: , = ','
                                Node: ) = ')'
                        Node: ; = ';'
                      Node: expression_statement = 'state = AuthState.authenticated(user);'
                        Node: assignment_expression = 'state = AuthState.authenticated(user)'
                          Node: assignable_expression = 'state'
                            Node: identifier = 'state'
                          Node: = = '='
                          Node: identifier = 'AuthState'
                          Node: selector = '.authenticated'
                            Node: unconditional_assignable_selector = '.authenticated'
                              Node: . = '.'
                              Node: identifier = 'authenticated'
                          Node: selector = '(user)'
                            Node: argument_part = '(user)'
                              Node: arguments = '(user)'
                                Node: ( = '('
                                Node: argument = 'user'
                                  Node: identifier = 'user'
                                Node: ) = ')'
                        Node: ; = ';'
                      Node: } = '}'
                    Node: else = 'else'
                    Node: block = '{
          state = const AuthState.error('Failed to sign in with custom token');
        }'
                      Node: { = '{'
                      Node: expression_statement = 'state = const AuthState.error('Failed to sign in with custom token');'
                        Node: assignment_expression = 'state = const AuthState.error('Failed to sign in with custom token')'
                          Node: assignable_expression = 'state'
                            Node: identifier = 'state'
                          Node: = = '='
                          Node: const_object_expression = 'const AuthState.error('Failed to sign in with custom token')'
                            Node: const_builtin = 'const'
                            Node: type_identifier = 'AuthState'
                            Node: . = '.'
                            Node: identifier = 'error'
                            Node: arguments = '('Failed to sign in with custom token')'
                              Node: ( = '('
                              Node: argument = ''Failed to sign in with custom token''
                                Node: string_literal = ''Failed to sign in with custom token''
                                  Node: ' = '''
                                  Node: ' = '''
                              Node: ) = ')'
                        Node: ; = ';'
                      Node: } = '}'
                  Node: } = '}'
                Node: else = 'else'
                Node: block = '{
        state = const AuthState.error('LINE login failed');
      }'
                  Node: { = '{'
                  Node: expression_statement = 'state = const AuthState.error('LINE login failed');'
                    Node: assignment_expression = 'state = const AuthState.error('LINE login failed')'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: const_object_expression = 'const AuthState.error('LINE login failed')'
                        Node: const_builtin = 'const'
                        Node: type_identifier = 'AuthState'
                        Node: . = '.'
                        Node: identifier = 'error'
                        Node: arguments = '('LINE login failed')'
                          Node: ( = '('
                          Node: argument = ''LINE login failed''
                            Node: string_literal = ''LINE login failed''
                              Node: ' = '''
                              Node: ' = '''
                          Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// ログアウト'
        Node: /// = '///'
      Node: method_signature = 'Future<void> signOut()'
        Node: function_signature = 'Future<void> signOut()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'signOut'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: try_statement = 'try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    }'
              Node: { = '{'
              Node: expression_statement = 'await firebase_auth.FirebaseAuth.instance.signOut();'
                Node: unary_expression = 'await firebase_auth.FirebaseAuth.instance.signOut()'
                  Node: await_expression = 'await firebase_auth.FirebaseAuth.instance.signOut()'
                    Node: await = 'await'
                    Node: identifier = 'firebase_auth'
                    Node: selector = '.FirebaseAuth'
                      Node: unconditional_assignable_selector = '.FirebaseAuth'
                        Node: . = '.'
                        Node: identifier = 'FirebaseAuth'
                    Node: selector = '.instance'
                      Node: unconditional_assignable_selector = '.instance'
                        Node: . = '.'
                        Node: identifier = 'instance'
                    Node: selector = '.signOut'
                      Node: unconditional_assignable_selector = '.signOut'
                        Node: . = '.'
                        Node: identifier = 'signOut'
                    Node: selector = '()'
                      Node: argument_part = '()'
                        Node: arguments = '()'
                          Node: ( = '('
                          Node: ) = ')'
                Node: ; = ';'
              Node: expression_statement = 'state = const AuthState.unauthenticated();'
                Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: const_object_expression = 'const AuthState.unauthenticated()'
                    Node: const_builtin = 'const'
                    Node: type_identifier = 'AuthState'
                    Node: . = '.'
                    Node: identifier = 'unauthenticated'
                    Node: arguments = '()'
                      Node: ( = '('
                      Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// 現在のユーザーを取得'
        Node: /// = '///'
      Node: method_signature = 'Future<void> getCurrentUser()'
        Node: function_signature = 'Future<void> getCurrentUser()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'getCurrentUser'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: expression_statement = 'state = const AuthState.loading();'
            Node: assignment_expression = 'state = const AuthState.loading()'
              Node: assignable_expression = 'state'
                Node: identifier = 'state'
              Node: = = '='
              Node: const_object_expression = 'const AuthState.loading()'
                Node: const_builtin = 'const'
                Node: type_identifier = 'AuthState'
                Node: . = '.'
                Node: identifier = 'loading'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: ; = ';'
          Node: try_statement = 'try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    }'
              Node: { = '{'
              Node: local_variable_declaration = 'final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;'
                Node: initialized_variable_definition = 'final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser'
                  Node: final_builtin = 'final'
                    Node: final = 'final'
                  Node: identifier = 'firebaseUser'
                  Node: = = '='
                  Node: identifier = 'firebase_auth'
                  Node: selector = '.FirebaseAuth'
                    Node: unconditional_assignable_selector = '.FirebaseAuth'
                      Node: . = '.'
                      Node: identifier = 'FirebaseAuth'
                  Node: selector = '.instance'
                    Node: unconditional_assignable_selector = '.instance'
                      Node: . = '.'
                      Node: identifier = 'instance'
                  Node: selector = '.currentUser'
                    Node: unconditional_assignable_selector = '.currentUser'
                      Node: . = '.'
                      Node: identifier = 'currentUser'
                Node: ; = ';'
              Node: if_statement = 'if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }'
                Node: if = 'if'
                Node: ( = '('
                Node: equality_expression = 'firebaseUser != null'
                  Node: identifier = 'firebaseUser'
                  Node: equality_operator = '!='
                  Node: null_literal = 'null'
                    Node: null = 'null'
                Node: ) = ')'
                Node: block = '{
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      }'
                  Node: { = '{'
                  Node: comment = '// Firestoreからユーザー情報を取得'
                    Node: // = '//'
                  Node: comment = '// TODO: FirestoreServiceを使用してユーザー情報を取得'
                    Node: // = '//'
                  Node: local_variable_declaration = 'final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );'
                    Node: initialized_variable_definition = 'final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                      Node: final_builtin = 'final'
                        Node: final = 'final'
                      Node: identifier = 'user'
                      Node: = = '='
                      Node: identifier = 'AppUser'
                      Node: selector = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                        Node: argument_part = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                          Node: arguments = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                            Node: ( = '('
                            Node: named_argument = 'id: firebaseUser.uid'
                              Node: label = 'id:'
                                Node: identifier = 'id'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.uid'
                                Node: unconditional_assignable_selector = '.uid'
                                  Node: . = '.'
                                  Node: identifier = 'uid'
                            Node: , = ','
                            Node: named_argument = 'displayName: firebaseUser.displayName ?? 'Unknown User''
                              Node: label = 'displayName:'
                                Node: identifier = 'displayName'
                                Node: : = ':'
                              Node: if_null_expression = 'firebaseUser.displayName ?? 'Unknown User''
                                Node: identifier = 'firebaseUser'
                                Node: selector = '.displayName'
                                  Node: unconditional_assignable_selector = '.displayName'
                                    Node: . = '.'
                                    Node: identifier = 'displayName'
                                Node: ?? = '??'
                                Node: string_literal = ''Unknown User''
                                  Node: ' = '''
                                  Node: ' = '''
                            Node: , = ','
                            Node: named_argument = 'email: firebaseUser.email'
                              Node: label = 'email:'
                                Node: identifier = 'email'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.email'
                                Node: unconditional_assignable_selector = '.email'
                                  Node: . = '.'
                                  Node: identifier = 'email'
                            Node: , = ','
                            Node: named_argument = 'photoURL: firebaseUser.photoURL'
                              Node: label = 'photoURL:'
                                Node: identifier = 'photoURL'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.photoURL'
                                Node: unconditional_assignable_selector = '.photoURL'
                                  Node: . = '.'
                                  Node: identifier = 'photoURL'
                            Node: , = ','
                            Node: named_argument = 'provider: 'line''
                              Node: label = 'provider:'
                                Node: identifier = 'provider'
                                Node: : = ':'
                              Node: string_literal = ''line''
                                Node: ' = '''
                                Node: ' = '''
                            Node: , = ','
                            Node: ) = ')'
                    Node: ; = ';'
                  Node: expression_statement = 'state = AuthState.authenticated(user);'
                    Node: assignment_expression = 'state = AuthState.authenticated(user)'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: identifier = 'AuthState'
                      Node: selector = '.authenticated'
                        Node: unconditional_assignable_selector = '.authenticated'
                          Node: . = '.'
                          Node: identifier = 'authenticated'
                      Node: selector = '(user)'
                        Node: argument_part = '(user)'
                          Node: arguments = '(user)'
                            Node: ( = '('
                            Node: argument = 'user'
                              Node: identifier = 'user'
                            Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
                Node: else = 'else'
                Node: block = '{
        state = const AuthState.unauthenticated();
      }'
                  Node: { = '{'
                  Node: expression_statement = 'state = const AuthState.unauthenticated();'
                    Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: const_object_expression = 'const AuthState.unauthenticated()'
                        Node: const_builtin = 'const'
                        Node: type_identifier = 'AuthState'
                        Node: . = '.'
                        Node: identifier = 'unauthenticated'
                        Node: arguments = '()'
                          Node: ( = '('
                          Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// 認証状態の監視'
        Node: /// = '///'
      Node: method_signature = 'void listenToAuthChanges()'
        Node: function_signature = 'void listenToAuthChanges()'
          Node: void_type = 'void'
          Node: identifier = 'listenToAuthChanges'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = '{
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }'
        Node: block = '{
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }'
          Node: { = '{'
          Node: expression_statement = 'firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });'
            Node: identifier = 'firebase_auth'
            Node: selector = '.FirebaseAuth'
              Node: unconditional_assignable_selector = '.FirebaseAuth'
                Node: . = '.'
                Node: identifier = 'FirebaseAuth'
            Node: selector = '.instance'
              Node: unconditional_assignable_selector = '.instance'
                Node: . = '.'
                Node: identifier = 'instance'
            Node: selector = '.authStateChanges'
              Node: unconditional_assignable_selector = '.authStateChanges'
                Node: . = '.'
                Node: identifier = 'authStateChanges'
            Node: selector = '()'
              Node: argument_part = '()'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: selector = '.listen'
              Node: unconditional_assignable_selector = '.listen'
                Node: . = '.'
                Node: identifier = 'listen'
            Node: selector = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
              Node: argument_part = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
                Node: arguments = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
                  Node: ( = '('
                  Node: argument = '(firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                    Node: function_expression = '(firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                      Node: formal_parameter_list = '(firebaseUser)'
                        Node: ( = '('
                        Node: formal_parameter = 'firebaseUser'
                          Node: identifier = 'firebaseUser'
                        Node: ) = ')'
                      Node: function_expression_body = '{
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                        Node: block = '{
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                          Node: { = '{'
                          Node: if_statement = 'if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }'
                            Node: if = 'if'
                            Node: ( = '('
                            Node: equality_expression = 'firebaseUser != null'
                              Node: identifier = 'firebaseUser'
                              Node: equality_operator = '!='
                              Node: null_literal = 'null'
                                Node: null = 'null'
                            Node: ) = ')'
                            Node: block = '{
        // ユーザーがログインしている場合
        getCurrentUser();
      }'
                              Node: { = '{'
                              Node: comment = '// ユーザーがログインしている場合'
                                Node: // = '//'
                              Node: expression_statement = 'getCurrentUser();'
                                Node: identifier = 'getCurrentUser'
                                Node: selector = '()'
                                  Node: argument_part = '()'
                                    Node: arguments = '()'
                                      Node: ( = '('
                                      Node: ) = ')'
                                Node: ; = ';'
                              Node: } = '}'
                            Node: else = 'else'
                            Node: block = '{
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }'
                              Node: { = '{'
                              Node: comment = '// ユーザーがログアウトしている場合'
                                Node: // = '//'
                              Node: expression_statement = 'state = const AuthState.unauthenticated();'
                                Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                                  Node: assignable_expression = 'state'
                                    Node: identifier = 'state'
                                  Node: = = '='
                                  Node: const_object_expression = 'const AuthState.unauthenticated()'
                                    Node: const_builtin = 'const'
                                    Node: type_identifier = 'AuthState'
                                    Node: . = '.'
                                    Node: identifier = 'unauthenticated'
                                    Node: arguments = '()'
                                      Node: ( = '('
                                      Node: ) = ')'
                                Node: ; = ';'
                              Node: } = '}'
                          Node: } = '}'
                  Node: ) = ')'
            Node: ; = ';'
          Node: } = '}'
      Node: } = '}'
  Node: documentation_comment = '/// 認証状態プロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'AuthState authState(Ref ref)'
    Node: type_identifier = 'AuthState'
    Node: identifier = 'authState'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}'
    Node: block = '{
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}'
      Node: { = '{'
      Node: comment = '// 初回起動時に認証状態を監視開始'
        Node: // = '//'
      Node: expression_statement = 'ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });'
        Node: identifier = 'ref'
        Node: selector = '.listen'
          Node: unconditional_assignable_selector = '.listen'
            Node: . = '.'
            Node: identifier = 'listen'
        Node: selector = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
          Node: argument_part = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
            Node: arguments = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
              Node: ( = '('
              Node: argument = 'authNotifierProvider'
                Node: identifier = 'authNotifierProvider'
              Node: , = ','
              Node: argument = '(previous, next) {
    // 認証状態が変更された時の処理
  }'
                Node: function_expression = '(previous, next) {
    // 認証状態が変更された時の処理
  }'
                  Node: formal_parameter_list = '(previous, next)'
                    Node: ( = '('
                    Node: formal_parameter = 'previous'
                      Node: identifier = 'previous'
                    Node: , = ','
                    Node: formal_parameter = 'next'
                      Node: identifier = 'next'
                    Node: ) = ')'
                  Node: function_expression_body = '{
    // 認証状態が変更された時の処理
  }'
                    Node: block = '{
    // 認証状態が変更された時の処理
  }'
                      Node: { = '{'
                      Node: comment = '// 認証状態が変更された時の処理'
                        Node: // = '//'
                      Node: } = '}'
              Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return ref.watch(authNotifierProvider);'
        Node: return = 'return'
        Node: identifier = 'ref'
        Node: selector = '.watch'
          Node: unconditional_assignable_selector = '.watch'
            Node: . = '.'
            Node: identifier = 'watch'
        Node: selector = '(authNotifierProvider)'
          Node: argument_part = '(authNotifierProvider)'
            Node: arguments = '(authNotifierProvider)'
              Node: ( = '('
              Node: argument = 'authNotifierProvider'
                Node: identifier = 'authNotifierProvider'
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
  Node: documentation_comment = '/// 現在のユーザープロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'AppUser? currentUser(Ref ref)'
    Node: type_identifier = 'AppUser'
    Node: nullable_type = '?'
      Node: ? = '?'
    Node: identifier = 'currentUser'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}'
    Node: block = '{
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}'
      Node: { = '{'
      Node: local_variable_declaration = 'final authState = ref.watch(authStateProvider);'
        Node: initialized_variable_definition = 'final authState = ref.watch(authStateProvider)'
          Node: final_builtin = 'final'
            Node: final = 'final'
          Node: identifier = 'authState'
          Node: = = '='
          Node: identifier = 'ref'
          Node: selector = '.watch'
            Node: unconditional_assignable_selector = '.watch'
              Node: . = '.'
              Node: identifier = 'watch'
          Node: selector = '(authStateProvider)'
            Node: argument_part = '(authStateProvider)'
              Node: arguments = '(authStateProvider)'
                Node: ( = '('
                Node: argument = 'authStateProvider'
                  Node: identifier = 'authStateProvider'
                Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );'
        Node: return = 'return'
        Node: identifier = 'authState'
        Node: selector = '.when'
          Node: unconditional_assignable_selector = '.when'
            Node: . = '.'
            Node: identifier = 'when'
        Node: selector = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
          Node: argument_part = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
            Node: arguments = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
              Node: ( = '('
              Node: named_argument = 'authenticated: (user) => user'
                Node: label = 'authenticated:'
                  Node: identifier = 'authenticated'
                  Node: : = ':'
                Node: function_expression = '(user) => user'
                  Node: formal_parameter_list = '(user)'
                    Node: ( = '('
                    Node: formal_parameter = 'user'
                      Node: identifier = 'user'
                    Node: ) = ')'
                  Node: function_expression_body = '=> user'
                    Node: => = '=>'
                    Node: identifier = 'user'
              Node: , = ','
              Node: named_argument = 'initial: () => null'
                Node: label = 'initial:'
                  Node: identifier = 'initial'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'loading: () => null'
                Node: label = 'loading:'
                  Node: identifier = 'loading'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'unauthenticated: () => null'
                Node: label = 'unauthenticated:'
                  Node: identifier = 'unauthenticated'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'error: (_) => null'
                Node: label = 'error:'
                  Node: identifier = 'error'
                  Node: : = ':'
                Node: function_expression = '(_) => null'
                  Node: formal_parameter_list = '(_)'
                    Node: ( = '('
                    Node: formal_parameter = '_'
                      Node: identifier = '_'
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
  Node: documentation_comment = '/// 認証済みかどうかのプロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'bool isAuthenticated(Ref ref)'
    Node: type_identifier = 'bool'
    Node: identifier = 'isAuthenticated'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}'
    Node: block = '{
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}'
      Node: { = '{'
      Node: local_variable_declaration = 'final authState = ref.watch(authStateProvider);'
        Node: initialized_variable_definition = 'final authState = ref.watch(authStateProvider)'
          Node: final_builtin = 'final'
            Node: final = 'final'
          Node: identifier = 'authState'
          Node: = = '='
          Node: identifier = 'ref'
          Node: selector = '.watch'
            Node: unconditional_assignable_selector = '.watch'
              Node: . = '.'
              Node: identifier = 'watch'
          Node: selector = '(authStateProvider)'
            Node: argument_part = '(authStateProvider)'
              Node: arguments = '(authStateProvider)'
                Node: ( = '('
                Node: argument = 'authStateProvider'
                  Node: identifier = 'authStateProvider'
                Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );'
        Node: return = 'return'
        Node: identifier = 'authState'
        Node: selector = '.maybeWhen'
          Node: unconditional_assignable_selector = '.maybeWhen'
            Node: . = '.'
            Node: identifier = 'maybeWhen'
        Node: selector = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
          Node: argument_part = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
            Node: arguments = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
              Node: ( = '('
              Node: named_argument = 'authenticated: (_) => true'
                Node: label = 'authenticated:'
                  Node: identifier = 'authenticated'
                  Node: : = ':'
                Node: function_expression = '(_) => true'
                  Node: formal_parameter_list = '(_)'
                    Node: ( = '('
                    Node: formal_parameter = '_'
                      Node: identifier = '_'
                    Node: ) = ')'
                  Node: function_expression_body = '=> true'
                    Node: => = '=>'
                    Node: true = 'true'
                      Node: true = 'true'
              Node: , = ','
              Node: named_argument = 'orElse: () => false'
                Node: label = 'orElse:'
                  Node: identifier = 'orElse'
                  Node: : = ':'
                Node: function_expression = '() => false'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> false'
                    Node: => = '=>'
                    Node: false = 'false'
                      Node: false = 'false'
              Node: , = ','
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
=== End AST ===

=== Complete AST for source ===

=== Complete AST for source ===
Node: program = 'import 'package:freezed_annotation/freezed_annotation.dart';

part 'payment.freezed.dart';
part 'payment.g.dart';

@freezed
class Payment with _$Payment {
  const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Payment;

  factory Payment.fromJson(Map<String, dynamic> json) =>
      _$PaymentFromJson(json);
}

@freezed
class PaymentCreateRequest with _$PaymentCreateRequest {
  const factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequest;

  factory PaymentCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$PaymentCreateRequestFromJson(json);
}

@freezed
class PaymentResult with _$PaymentResult {
  const factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _Success;

  const factory PaymentResult.failed({
    required String errorMessage,
  }) = _Failed;

  const factory PaymentResult.cancelled() = _Cancelled;
}

@freezed
class PaymentState with _$PaymentState {
  const factory PaymentState.initial() = _StateInitial;
  const factory PaymentState.loading() = _StateLoading;
  const factory PaymentState.success(Payment payment) = _StateSuccess;
  const factory PaymentState.failed(String errorMessage) = _StateFailed;
}
'
  Node: import_or_export = 'import 'package:freezed_annotation/freezed_annotation.dart';'
    Node: library_import = 'import 'package:freezed_annotation/freezed_annotation.dart';'
      Node: import_specification = 'import 'package:freezed_annotation/freezed_annotation.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:freezed_annotation/freezed_annotation.dart''
          Node: uri = ''package:freezed_annotation/freezed_annotation.dart''
            Node: string_literal = ''package:freezed_annotation/freezed_annotation.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: part_directive = 'part 'payment.freezed.dart';'
    Node: part = 'part'
    Node: uri = ''payment.freezed.dart''
      Node: string_literal = ''payment.freezed.dart''
        Node: ' = '''
        Node: ' = '''
Node: program = 'import 'package:freezed_annotation/freezed_annotation.dart';

part 'user.freezed.dart';
part 'user.g.dart';

@freezed
class AppUser with _$AppUser {
  const factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUser;

  factory AppUser.fromJson(Map<String, dynamic> json) =>
      _$AppUserFromJson(json);
}

@freezed
class UserProfile with _$UserProfile {
  const factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfile;

  factory UserProfile.fromJson(Map<String, dynamic> json) =>
      _$UserProfileFromJson(json);
}

@freezed
class AuthState with _$AuthState {
  const factory AuthState.initial() = _Initial;
  const factory AuthState.loading() = _Loading;
  const factory AuthState.authenticated(AppUser user) = _Authenticated;
  const factory AuthState.unauthenticated() = _Unauthenticated;
  const factory AuthState.error(String message) = _Error;
}
'
  Node: import_or_export = 'import 'package:freezed_annotation/freezed_annotation.dart';'
    Node: library_import = 'import 'package:freezed_annotation/freezed_annotation.dart';'
      Node: import_specification = 'import 'package:freezed_annotation/freezed_annotation.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:freezed_annotation/freezed_annotation.dart''
          Node: uri = ''package:freezed_annotation/freezed_annotation.dart''
            Node: string_literal
=== Complete AST for source ===
 = 'Node: 'package:freezed_annotation/freezed_annotation.dart'program'
 = '              import 'package:freezed_annotation/freezed_annotation.dart';

part 'user.freezed.dart';
part 'user.g.dart';

@freezed
class AppUser with _$AppUser {
  const factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUser;

  factory AppUser.fromJson(Map<String, dynamic> json) =>
      _$AppUserFromJson(json);
}

@freezed
class UserProfile with _$UserProfile {
  const factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfile;

  factory UserProfile.fromJson(Map<String, dynamic> json) =>
      _$UserProfileFromJson(json);
}

@freezed
class AuthState with _$AuthState {
  const factory AuthState.initial() = _Initial;
  const factory AuthState.loading() = _Loading;
  const factory AuthState.authenticated(AppUser user) = _Authenticated;
  const factory AuthState.unauthenticated() = _Unauthenticated;
  const factory AuthState.error(String message) = _Error;
}
Node: '
'   = 'Node: 'import_or_export'
 = '              import 'package:freezed_annotation/freezed_annotation.dart';Node: '
'     = 'Node: 'library_import'
 = '        import 'package:freezed_annotation/freezed_annotation.dart';Node: '
;       = 'Node: ;import_specification'
 = '  import 'package:freezed_annotation/freezed_annotation.dart';Node: '
part_directive         = 'Node: part 'user.freezed.dart';import'
 = '    importNode: '
part         = 'Node: partconfigurable_uri
=== Complete AST for source ===
    Node: Node: '
; = 'program = ' = ';import 'package:freezed_annotation/freezed_annotation.dart';

part 'payment.freezed.dart';
part 'payment.g.dart';

@freezed
class Payment with _$Payment {
  const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Payment;

  factory Payment.fromJson(Map<String, dynamic> json) =>
      _$PaymentFromJson(json);
}

@freezed
class PaymentCreateRequest with _$PaymentCreateRequest {
  const factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequest;

  factory PaymentCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$PaymentCreateRequestFromJson(json);
}

@freezed
class PaymentResult with _$PaymentResult {
  const factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _Success;

  const factory PaymentResult.failed({
    required String errorMessage,
  }) = _Failed;

  const factory PaymentResult.cancelled() = _Cancelled;
}

@freezed
class PaymentState with _$PaymentState {
  const factory PaymentState.initial() = _StateInitial;
  const factory PaymentState.loading() = _StateLoading;
  const factory PaymentState.success(Payment payment) = _StateSuccess;
  const factory PaymentState.failed(String errorMessage) = _StateFailed;
}
'
'
    Node: Node: part_directiveimport_or_export = '    part 'payment.g.dart';Node: '
uri     = 'Node: 'user.freezed.dart'part'
 = '      partNode: '
string_literal     = 'Node: 'user.freezed.dart'uri'
 = '        'payment.g.dart'Node: '
'       = 'Node: 'string_literal'
 = '        'payment.g.dart'Node: '
'         = 'Node: '''
 = '    'Node: '
;         = 'Node: ;''
 = ''  '
Node:     part_directiveNode:  = ';part 'user.g.dart'; = ''
;    '
Node:   partNode:  = 'class_definitionpart = ''
@freezed
class Payment with _$Payment {
  const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Payment;

  factory Payment.fromJson(Map<String, dynamic> json) =>
      _$PaymentFromJson(json);
}    '
Node:     uriNode:  = 'annotation'user.g.dart' = ''
@freezed      '
Node:       string_literalNode:  = '@'user.g.dart' = ''
@'
              Node: Node: 'identifier = ' = ''freezed'
'
            Node: 'package:freezed_annotation/freezed_annotation.dart'''
 = ''Node: '
              classNode: Node: uri; = ''package:freezed_annotation/freezed_annotation.dart''
 = ' = 'class;'
'
 = '  import 'package:freezed_annotation/freezed_annotation.dart';Node: '
class_definition     = 'Node: @freezed
class AppUser with _$AppUser {
  const factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUser;

  factory AppUser.fromJson(Map<String, dynamic> json) =>
      _$AppUserFromJson(json);
}library_import            '
 = 'Node: import 'package:freezed_annotation/freezed_annotation.dart';string_literal'
 = '      'package:freezed_annotation/freezed_annotation.dart'    '
Node:               annotationNode:  = ''@freezed     = 'Node: 'import_specification'
'
Node:       identifierNode:  = '@Payment = ''
@    '
Node:       superclassNode:  = 'identifierwith _$Payment = ''
freezed      '
Node:     mixinsNode:  = 'classwith _$Payment = ''
        Node: with = 'with'
        Node: type_identifier = '_$Payment'
    Node: class_body = '{
  const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Payment;

  factory Payment.fromJson(Map<String, dynamic> json) =>
      _$PaymentFromJson(json);
}'
      Node: { = '{'
      Node: declaration = 'const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Payment'
        Node: redirecting_factory_constructor_signature = 'const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Payment'
          Node: const_builtin = 'const'
          Node: factory = 'factory'
          Node: identifier = 'Payment'
          Node: formal_parameter_list = '({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  })'
            Node: ( = '('
            Node: optional_formal_parameters = '{
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }'
              Node: { = '{'
              Node: required = 'required'
              Node: formal_parameter = 'String id'
                Node: type_identifier = 'String'
                Node: identifier = 'id'
              Node: , = ','
              Node: required = 'required'
              Node: formal_parameter = 'String eventId'
                Node: type_identifier = 'String'
                Node: identifier = 'eventId'
              Node: , = ','
              Node: required = 'required'
              Node: formal_parameter = 'String userId'
                Node: type_identifier = 'String'
                Node: identifier = 'userId'
              Node: , = ','
              Node: required = 'required'
              Node: formal_parameter = 'int amount'
                Node: type_identifier = 'int'
                Node: identifier = 'amount'
              Node: , = ','
              Node: required = 'required'
              Node: formal_parameter = 'String currency'
                Node: type_identifier = 'String'
                Node: identifier = 'currency'
              Node: , = ','
              Node:  = 'requiredimport 'package:freezed_annotation/freezed_annotation.dart'; = ''
              required        '
Node: Node:               classNode: '
formal_parameter     = ''Node: String statusimport = ' = ''importidentifier'
'
 = '                        Node: Node: ;type_identifier = 'AppUser;'
'
    Node: superclass = 'with _$AppUser = ''
String      '
Node: '
mixins                 = 'with _$AppUserNode: '
                Node:   configurable_uriNode:  = 'with'package:freezed_annotation/freezed_annotation.dart' = ''
withNode: '
part_directive         = 'Node: part 'user.freezed.dart';type_identifier'
 = '    _$AppUserNode: '
part     = 'Node: partclass_body'
 = '    {
  const factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUser;

  factory AppUser.fromJson(Map<String, dynamic> json) =>
      _$AppUserFromJson(json);
}Node: '
uri       = 'Node: 'user.freezed.dart'{'
 = '      {Node: '
string_literal       = 'Node: 'user.freezed.dart'declaration'
 = '        const factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUserNode: '
'         = 'Node: 'redirecting_factory_constructor_signature'
 = '        const factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUserNode: '
'           = 'Node: 'const_builtin'
 = '    constNode: '
;           = 'Node: ;factory'
 = '  factoryNode: '
part_directive           = 'Node: part 'user.g.dart';identifier'
 = '    AppUserNode: '
part           = 'Node: partformal_parameter_list'
 = '    ({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  })Node: '
uri             = 'Node: 'user.g.dart'('
 = '      (Node: '
string_literal             = 'Node: 'user.g.dart'optional_formal_parameters'
 = '        {
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }Node: '
'               = 'Node: '{'
 = '        {Node: '
'               = 'Node: 'required'
 = '    requiredNode: '
;               = 'Node: ;formal_parameter'
 = '  String idNode: '
class_definition                 = 'Node: @freezed
class AppUser with _$AppUser {
  const factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUser;

  factory AppUser.fromJson(Map<String, dynamic> json) =>
      _$AppUserFromJson(json);
}type_identifier'
 = '    StringNode: '
annotation                 = 'Node: @freezedidentifier'
 = '      idNode: '
@               = 'Node: @,'
 = '      ,Node: '
identifier               = 'Node: freezedrequired'
 = '    requiredNode: '
class               = 'Node: classformal_parameter'
 = '    String displayNameNode: '
identifier                 = 'Node: AppUsertype_identifier'
 = '    StringNode: '
superclass                 = 'Node: with _$AppUseridentifier'
 = '      displayNameNode: '
mixins               = 'Node: with _$AppUser,'
 = '        ,Node: '
with               = 'Node: withformal_parameter = ''
identifier                  
=== Complete AST for source ===
String? emailNode: '
 = 'uriNode:  = 'status'package:freezed_annotation/freezed_annotation.dart''
Node: programtype_identifier = ' = 'import 'package:freezed_annotation/freezed_annotation.dart';

part 'event.freezed.dart';
part 'event.g.dart';

@freezed
class Event with _$Event {
  const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event;

  factory Event.fromJson(Map<String, dynamic> json) => _$EventFromJson(json);
}

@freezed
class EventCreateRequest with _$EventCreateRequest {
  const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest;

  factory EventCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventCreateRequestFromJson(json);
}

@freezed
class EventUpdateRequest with _$EventUpdateRequest {
  const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest;

  factory EventUpdateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventUpdateRequestFromJson(json);
}

@freezed
class EventListState with _$EventListState {
  const factory EventListState.initial() = _Initial;
  const factory EventListState.loading() = _Loading;
  const factory EventListState.loaded(List<Event> events) = _Loaded;
  const factory EventListState.error(String message) = _Error;
}

@freezed
class EventDetailState with _$EventDetailState {
  const factory EventDetailState.initial() = _DetailInitial;
  const factory EventDetailState.loading() = _DetailLoading;
  const factory EventDetailState.loaded(Event event) = _DetailLoaded;
  const factory EventDetailState.error(String message) = _DetailError;
}
_$AppUser'
'
      Node: Node: import_or_exportclass_body = ' = 'import 'package:freezed_annotation/freezed_annotation.dart';{
  const factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUser;

  factory AppUser.fromJson(Map<String, dynamic> json) =>
      _$AppUserFromJson(json);
}'
'
          Node: Node: library_import{ = ' = 'import 'package:freezed_annotation/freezed_annotation.dart';{'
'
            Node: Node: import_specificationdeclaration = ' = 'import 'package:freezed_annotation/freezed_annotation.dart';const factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUser'
'
                Node: Node: importredirecting_factory_constructor_signature = ' = 'importconst factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUser'
'
                  Node: Node: configurable_uriconst_builtin = ' = ''package:freezed_annotation/freezed_annotation.dart'const'
'
                    Node: Node: urifactory = ' = ''package:freezed_annotation/freezed_annotation.dart'factory'
'
                      Node: Node: string_literalidentifier = ' = ''package:freezed_annotation/freezed_annotation.dart'AppUser'
'
                        Node: Node: 'formal_parameter_list = ' = ''({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  })'
'
                          Node: Node: '( = ' = '''
        Node: ; = '(                ;Node: '
'
type_identifier             = '  StringNode: '
Node:                 optional_formal_parametersNode: part_directivenullable_type = ' = ' = '?part 'event.freezed.dart';{
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }'
'
                  '
    Node: Node: ?               = 'part?Node:  = ''
part                {Node: '
identifier = ' = '    email{'
Node:               uriNode:  = ''
'event.freezed.dart'              '
Node:       requiredNode:  = 'string_literalrequired = ''
'event.freezed.dart'              '
Node:         formal_parameterNode:  = ''String id = ''
'                '
Node:         type_identifierNode:  = ''String = ''
''
'
              ,Node:  = ',, = '                ,Node: '
identifier               = '
=== Complete AST for source ===
    idNode: Node: '
;program = ''
            Node:  = 'commentimport 'package:freezed_annotation/freezed_annotation.dart';

part 'event.freezed.dart';
part 'event.g.dart';

@freezed
class Event with _$Event {
  const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event;

  factory Event.fromJson(Map<String, dynamic> json) => _$EventFromJson(json);
}

@freezed
class EventCreateRequest with _$EventCreateRequest {
  const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest;

  factory EventCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventCreateRequestFromJson(json);
}

@freezed
class EventUpdateRequest with _$EventUpdateRequest {
  const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest;

  factory EventUpdateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventUpdateRequestFromJson(json);
}

@freezed
class EventListState with _$EventListState {
  const factory EventListState.initial() = _Initial;
  const factory EventListState.loading() = _Loading;
  const factory EventListState.loaded(List<Event> events) = _Loaded;
  const factory EventListState.error(String message) = _Error;
}

@freezed
class EventDetailState with _$EventDetailState {
  const factory EventDetailState.initial() = _DetailInitial;
  const factory EventDetailState.loading() = _DetailLoading;
  const factory EventDetailState.loaded(Event event) = _DetailLoaded;
  const factory EventDetailState.error(String message) = _DetailError;
}
 = ';'
              Node:               Node: Node: string_literalformal_parameter = ' = ''package:freezed_annotation/freezed_annotation.dart','
 = ''
,// pending, succeeded, failed, cancelledString? photoURL'
                '
              '
                  Node: Node: Node: part_directive' = 'Node: part 'event.g.dart'; = ''
required    'Node: '
 = 'Node: requiredpart'
 = '                part'
Node: //type_identifier = ' = '//Stringimport_or_export               = 'Node: import 'package:freezed_annotation/freezed_annotation.dart';formal_parameter'
 = '    String displayName              '
Node: '
                '
Node:     type_identifierNode:                               Node: Node: nullable_typerequired = ''uri = 'Node:  = ' = 'Stringlibrary_importrequired'
'
 = ''event.g.dart'?import 'package:freezed_annotation/freezed_annotation.dart';'
'
                        Node: Node:                               '
Node: Node:       formal_parameteridentifierNode:  = ' = 'import_specificationdisplayName = ''
String paymentMethodimport 'package:freezed_annotation/freezed_annotation.dart';'
              '
Node:         , = '                ? = 'Node: ?import'
 = '                string_literal' = ''
'event.g.dart'Node: '
importNode:                  = 'type_identifier, = ''
'
String        '
                              identifierNode: identifierNode:  = ''paymentMethodNode: '
;Node:  = 'configurable_uri               = 'Node: 'package:freezed_annotation/freezed_annotation.dart',Node: '
formal_parameter = ' = ',;'
'
 = '                String? emailNode: Node: '
 = 'formal_parameterphotoURL                '
 = 'Node: String? stripeSessionId              'Node: '
,'
 = '                ,          '
Node:               Node: Node: type_identifierformal_parameteruri = ' = 'String? statusMessage = ''
String'package:freezed_annotation/freezed_annotation.dart'                '
'
Node:                 type_identifier         = 'Node: StringNode: '
nullable_type'                 = 'Node:  = 'nullable_type? = ''?'
'
'
                                    Node:     ?Node:  = ';?Node: '
?part_directive                 = 'Node:  = 'identifier? = 'part 'payment.freezed.dart';statusMessage'
'
'
                              Node:     ,Node:  = 'identifier, = ''
Node:               partNode:  = 'annotationpart = ' = '@Default('line')type_identifier'
stripeSessionId'
                ;Node: Node: string_literal'
 = 'uri  String = ''
Node:                 '
                              'payment.freezed.dart'class_definition = ' = ''package:freezed_annotation/freezed_annotation.dart''
Node: Node: @freezed
class Event with _$Event {
  const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event;

  factory Event.fromJson(Map<String, dynamic> json) => _$EventFromJson(json);
}nullable_type'
 = ''
?      Node: '
Node: @                  ,Node:  = '? = '@              '
Node:                 ',    Node: Node: string_literalannotation'
 = ' = 'identifier'payment.freezed.dart'              '
 = ' = ''?'
               = '@freezedDefaultNode:         Node: ''
 = 'formal_parameter'
 = '      '
Node: Node: @String? stripePaymentIntentId                '
                ''Node:  = ' = ''
@        '
arguments      Node:                 Node: Node: identifiertype_identifier' = 'identifier = ' = 'freezed = ''
emailNode:     '
Node: ;class               = 'StringclassNode: '
'
    ,Node:                 identifier = ' = ',Event = 'Node: '
('line')nullable_type'
              '
'
; = 'Node: ?                  '
'
  
=== Complete AST for source ===
                          Node: formal_parameterNode: Node: Node: part_directive     = 'programpart 'event.freezed.dart'; = ''
     = 'import 'package:freezed_annotation/freezed_annotation.dart';

part 'event.freezed.dart';
part 'event.g.dart';

@freezed
class Event with _$Event {
  const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event;

  factory Event.fromJson(Map<String, dynamic> json) => _$EventFromJson(json);
}

@freezed
class EventCreateRequest with _$EventCreateRequest {
  const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest;

  factory EventCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventCreateRequestFromJson(json);
}

@freezed
class EventUpdateRequest with _$EventUpdateRequest {
  const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest;

  factory EventUpdateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventUpdateRequestFromJson(json);
}

@freezed
class EventListState with _$EventListState {
  const factory EventListState.initial() = _Initial;
  const factory EventListState.loading() = _Loading;
  const factory EventListState.loaded(List<Event> events) = _Loaded;
  const factory EventListState.error(String message) = _Error;
}

@freezed
class EventDetailState with _$EventDetailState {
  const factory EventDetailState.initial() = _DetailInitial;
  const factory EventDetailState.loading() = _DetailLoading;
  const factory EventDetailState.loaded(Event event) = _DetailLoaded;
  const factory EventDetailState.error(String message) = _DetailError;
}
Node: (' = 'Node:  = 'superclass''
?( = ''
with _$Event                  Node:     partString? photoURL = 'Node: part'
'
'
    '
Node:         ;argumentNode:  = '                 = ''line'?Node: '
Node: '
mixins = '                     = 'import_or_exportNode:  = 'string_literalimport 'package:freezed_annotation/freezed_annotation.dart'; = ''
Node: ;'line''
uri'
   = 'Node:                 part_directiveNode:                       with _$EventNode: identifier''
 = 'type_identifierstripePaymentIntentId         = ''
String              Node: '
Node: 'event.freezed.dart','
 = ' = 'with = '                , = '    with'part 'payment.g.dart';      '
'
Node: '
Node:                       '
    Node:         Node: Node: 'parttype_identifier = ' = ' = 'part_$EventNode: '
string_literalnullable_type = ' = ''event.freezed.dart'              ''
library_import        '
Node: ?Node:      = 'Node:                   class_bodyNode:  = '){
  const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event;

  factory Event.fromJson(Map<String, dynamic> json) => _$EventFromJson(json);
}'
formal_parameter'
'                   = 'Node: '?'
 = '        ?Node: '
' = ' = ' = ''
    )import 'package:freezed_annotation/freezed_annotation.dart';'                '
'
Node:       String? errorMessageNode: '
import_specificationidentifier'
 = '      photoURLNode: '
{               = 'Node: {              '
,      Node: Node:  = 'declarationformal_parameter = ', = 'const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _EventString provider'
'
                        Node: Node: redirecting_factory_constructor_signaturetype_identifier = 'const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event'
 = 'Node:               uriNode:  = 'formal_parameter = 'StringString? statusMessage    '
Node:                 ;Node:  = 'type_identifierimport 'package:freezed_annotation/freezed_annotation.dart'; = ''
String'
                        Node: Node: importtype_identifier = ' = ''payment.g.dart' = '                '
'
String                          Node: '
'
      const_builtinNode:  = 'string_literalconst                '
Node: Node:           nullable_typeNode: ;'
  nullable_typefactory = ' = '?factory'
          Node: identifier = 'Event'
          Node: formal_parameter_list = '({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  })'
            Node: ( = '('
            Node: optional_formal_parameters = '{
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }'
              Node: { = '{'
              Node: required = 'required'
              Node: formal_parameter = 'String id'
                Node: type_identifier = 'StringimportNode: '
identifier                 = 'Node: '
identifier         = 'Node: idconfigurable_uri'
 = '              'package:freezed_annotation/freezed_annotation.dart'Node: '
,           = 'Node: ,uri'
 = '              'package:freezed_annotation/freezed_annotation.dart'Node: '
required             = 'Node: requiredstring_literal'
 = '              'package:freezed_annotation/freezed_annotation.dart'Node: '
formal_parameter               = 'Node: String title''
 = '                'Node: '
type_identifier               = 'Node: String''
 = '                'Node: '
identifier         = 'Node: title;'
 = '              ;Node: '
,   = 'Node: ,part_directive'
 = '              part 'event.freezed.dart';Node: '
required     = 'Node: requiredpart'
 = '              partNode: '
formal_parameter     = 'Node: String descriptionuri'
 = '                'event.freezed.dart'Node: '
type_identifier       = 'Node: Stringstring_literal'
 = '                'event.freezed.dart'Node: identifier = 'description'
'
              Node: , = ','
provider = ''
'payment.g.dart''
Node:  = '                                '
                      Node: Node: ,'Node:          = '?'?'
'
                          Node: Node: '? = ' = ''?'
'
                    Node: part_directive;Node:  = ' = 'Node: part 'event.g.dart';required'
 = '     = 'Node: ,identifier'
 = 'part              ? = 'Node: '
partNode:                 '
Node: 'identifier = ' = ''errorMessage'
'
    ;        Node: Node: uri' = ' = ''event.g.dart'''
       = 'annotationrequired'
'
                  Node: statusMessageformal_parameterNode:  = ''
DateTime startDate;'
               = 'Node:                 ,Node:  = 'type_identifier, = ''
DateTime;               = 'Node: '
,'
              '
   = 'Node: Node: part_directivestring_literal = ' = '                  ,Node: '
identifier = 'startDate'
                            Node: Node: ,formal_parameterNode: part 'event.g.dart';@Default(false)Node:  = ''event.g.dart' = 'annotation = ''
'
class_definition, = 'DateTime? createdAt@freezed
class Payment with _$Payment {
  const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Payment;

  factory Payment.fromJson(Map<String, dynamic> json) =>
      _$PaymentFromJson(json);
}@Default('line')'
                    '
'
'
'
Node:     @Node:  = 'annotation@ = ''
@freezed                '
Node: identifier = 'Default      '
Node:                 @                      Node: Node:                                 Node: requiredpartNode:  = ' = 'requiredpartNode: 'arguments'
Node: type_identifier'
 = '     = 'Node: @@ = ' = 'DateTime              '
Node:  = 'formal_parameter@' = ''
DateTime endDate'
uri        '
 = 'Node: 'event.g.dart'                      '                Node:  = 'Node: identifier(false) = ''
Node: ''
      '
Node:                   string_literal                Node: Node: identifiernullable_type = 'Default'event.g.dart''
 = ''
?(                '
 = 'Node: '
type_identifierarguments = ' = '    DateTimeNode: '
 = 'freezed(        ;Node:  = '('line');''
'
                                  '
  Node:                   argumentNode:  = '?false'
Node:  = ''
    class_definition                     = 'Node: Node:                   falseNode:  = ' = '?identifier = '@freezed
class Event with _$Event {
  const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event;

  factory Event.fromJson(Map<String, dynamic> json) => _$EventFromJson(json);
}endDate'
'
                  Node: 'false'
'
                      ,Node:  = ','
class'
 = '                Node: class              '
Node: annotationNode: (Node:     required = ' = 'identifier@freezed = 'createdAt'
              Node: Node: '@ = ' = ''@'
false     = 'Node: false;'
 = ';                  '
Node:   '
)Node: '
 = '              (Node: ,       = 'Node: , = 'Node: requiredclass_definition'
 = '@freezed
class Event with _$Event {
  const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event;

  factory Event.fromJson(Map<String, dynamic> json) => _$EventFromJson(json);
}identifieridentifier) = ''
freezed'
'
                  Node:                   '
Node: Node: argument'
 = '                  'line' = ''
Payment                    '
Node:     string_literalNode:               superclassNode:  = 'formal_parameterclass = ' = 'bool isEmailVerifiedclass'
'
formal_parameter    Node:  = 'Node: String locationformal_parameter'
                 = ' = 'DateTime? updatedAt'line''
'
                with _$PaymentNode:                 annotationNode:  = '@freezedNode: '
type_identifier       = 'Node: boolmixins'
 = '                with _$PaymentNode: '
identifier         = 'identifierisEmailVerifiedNode: '
Node:                       withNode:  = ''with = '               = '''
'
type_identifier'
                      type_identifier      Node: Event = 'String'
                Node: identifier = 'locationNode: '
                      Node: , = ' = 'Node: ,Node: DateTime,@'
'
 = '              @Node: '     = 'Node: 'superclass'
'
 = ''
required                  type_identifier                Node:  = 'Node: )nullable_type_$Payment = ' = '? = ')'
'
required                                '
Node: Node: ?              formal_parameter = ' = '?String provider      Node: ,formal_parameter'
 = ''
int capacityNode: '
                identifierNode:                  = 'identifierNode:  = 'type_identifierupdatedAt = 'freezed = ''
int    '
Node:                 classNode: '
'
     = ''
class              identifierwith _$Event = ''
capacity                Node:       '
Node: Node: mixins'
Node: formal_parameterclass_body = ' = ' = '              DateTime? createdAt    '
                              Node: Node: Node: ,type_identifier{
  const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Payment;

  factory Payment.fromJson(Map<String, dynamic> json) =>
      _$PaymentFromJson(json);
}identifier = ' = 'with _$EventEvent,'
'
'
                           = 'Node: Node: requiredsuperclass = 'type_identifierrequired = ''
'
              Node: DateTimeNode: ,formal_parameter'
 = '                 = 'Node: int priceNode: '
Stringnullable_type      withNode:  = '{with = ' = ''
with _$Event?'
'
'
                                                        Node: ,Node: identifier?'
 = ' = 'provider?'
'
 = 'Node:                 type_identifierNode: {identifier         = 'Node:  = 'type_identifiercreatedAt = ''
_$Event              '
'
                            Node: Node:       Node: intNode: }     = 'Node: mixins,'
 = 'declaration                ,Node:  = ',const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Payment = ' = 'with _$Eventclass_body'
'
} = '        Node: Node: identifierwith = ' = '              ,'
with'
{
  const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event;

  factory Event.fromJson(Map<String, dynamic> json) => _$EventFromJson(json);
}price'
        Node: '
        Node: '
'
Node:               redirecting_factory_constructor_signature = '      const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _PaymentNode: '
{ = '{'
formal_parameter       = '            DateTime? updatedAt              Node: type_identifierdeclaration = ''
Node: Node:  = 'Node:                 ,Node: annotation) = ' = '@Default(false))'
'
                          Node: Node: @const_builtin = ' = '_$Eventconst'
'
 = 'const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event,          '
Node:               '
Node: type_identifierrequired = ' = '@factory           = 'factoryNode: '
        DateTimeNode:           redirecting_factory_constructor_signaturerequiredNode: '
 = ''
identifier     = '                PaymentNode: class_body                 = '=const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event = ''
=          '
Node:               const_builtinNode: Node: '
identifierNode: '
{
  const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event;

  factory Event.fromJson(Map<String, dynamic> json) => _$EventFromJson(json);
} = '          Default'
Node: nullable_typeformal_parameter_list = ' = '?({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  })'
'
                      Node: Node:       (formal_parametertype_identifier = ' = '_Paymentconst'
Node:  = '{'
String createdBy      '
Node: ;                                                  Node: Node:  = 'arguments( = ''
(false) = '            '
Node:                   optional_formal_parametersNode: '
 = '          ;Node: '
factory       = 'Node: factoryNode: '
{          '
Node:       identifierNode:  = 'declarationEvent = ''
const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event          '
Node:         formal_parameter_listNode:  = 'redirecting_factory_constructor_signature({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = ''
const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event            '
Node:           (Node:  = 'const_builtin( = ''
const            '
? = 'type_identifier(method_signature = ' = '           = '({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }'
Node: String'
 = 'Node: '
                                                factory?Node: '
identifierNode:                 factory Payment.fromJson(Map<String, dynamic> json)optional_formal_parameters'
 = 'Node: Node:         { = ' = 'factory{Node: '
factory_constructor_signature               = ''
 = 'Node: argumentfactory Payment.fromJson(Map<String, dynamic> json) = ''
required                    {
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }identifierNode: Node: '
factorycreatedByfalse = ''
'
 = 'requiredfactory'
'
identifier               = 'Node: Event              '
                              Node: Node: false = '          updatedAtNode: '
identifierNode: formal_parameter_list = '              ,Payment               = ''
Node: {formal_parameter           = ' = 'falseNode: '
.                      String id = ' = '({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }).'
'
            '
Node: ,(Node:                 Node:  = 'false           = ' = ''
,Node:  = '{,Node:               type_identifier( = 'Node: String'
'
annotation                            Node:  = 'identifierNode:  = '@Default('draft')idoptional_formal_parameters'
 = '              {
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }identifierfalse'
Node:  = ''
fromJson,                              '
Node: '
@           = 'Node:  = '              formal_parameter_listNode:  = ''
}(Map<String, dynamic> json)              '
Node:             {Node:  = '({ = ' = ''
}('
              '
            @Node:             )Node:  = ','
'
                formal_parameter                  Node:  = 'identifierMap<String, dynamic> jsonNode: Node: '
required'
Node:  = '              Default = ')required'
'
              Node: Node: )type_identifier = 'required = ''
 = 'Maprequired'
'
                            Node: Node: )type_arguments'
 = '              <String, dynamic>Node: '
formal_parameter                 = 'Node: bool isEmailVerified<'
 = '              requiredNode: <                                Node: formal_parameter          '
Node:  = '                formal_parameterNode: type_identifier = ' = 'String idNode: '
type_identifier = ' = '=boolStringargumentsString id = '                ('draft')'
'
Node:                   requiredNode: type_identifier('
 = ' = '              (StringNode: '
'
formal_parameter                   = 'Node: String eventIdargument'
                '
Node:                                                 Node: Node: Node: type_identifier,'
 = '                 = 'Node: type_identifier = ' = ''draft' = ',identifierString'
identifier                 = ''
String='
'
                          Node: Node: identifierNode: '
idtype_identifier                     = ' = 'eventIdisEmailVerified'
'
              '
type_identifierNode: Node:  = ' = 'dynamicstring_literal              '
,Node: _AppUser,                 = ' = ',              '
Node:  = ','draft' = ''
                      '
Node:               ;Node: Node:  = ',;Node:                       identifierrequired, = ''
Node: '
              'Node: '
> = 'requiredid = ''
'
>               = '              ''
      Node:               Node: Node: ,identifier = ' = ',formal_parametermethod_signature'
 = '              factory AppUser.fromJson(Map<String, dynamic> json)'
'
Node:         formal_parameterNode:  = 'Node:                                      = 'Node: requiredDateTime? createdAt''
 = '                'Node: jsontype_identifierNode:  = ' = 'DateTimerequired'
 = 'factory_constructor_signaturerequiredString title                 = ''
factory AppUser.fromJson(Map<String, dynamic> json)'
'
              '
requiredNode: '
'
                                          Node: Node: factorynullable_type = ' = 'factory?'
'
                            Node: Node: identifier? = 'formal_parameter            AppUser = 'Node: ?formal_parameter'
Node:  = '                Node:  = 'Node: String userIdidentifier'
                 = 'Node: createdAt)'
 = ')              '
type_identifier'
 = '          String      '
Node:                 Node: .Node: function_bodyidentifier = ' = ' = '.=>
      _$PaymentFromJson(json);title'
'
'
                        Node:         ,Node: =>String titleNode: )Node:  = ' = 'identifier, = ''
 = ')                '
'
,Node: =>               = '                              fromJsonNode: Node: formal_parametertype_identifier = ' = 'type_identifierString statusNode:  = ''
requiredString                 = 'Node: '
required'
type_identifier           = ''
,StringNode: String                '
formal_parameter_listNode: '
 = '                        Node: identifier'
                '
identifierNode:  = 'identifiertitle = '              userId              '
Node: Node:               formal_parameterNode:  = 'formal_parameter(Map<String, dynamic> json)String description = ''
DateTime? updatedAt            '
Node: Node:                 '
Node:                 type_identifier(identifier = ' = 'Node: _$PaymentFromJson('
'
                    type_identifierNode:  = ' = 'formal_parameter = ''
,status = '              ,'
Node: '
,               = 'Node: ,,              DateTimeNode: Node: '
requiredselector = '                requiredNode: '
String = ''
(json) = ''
nullable_typeMap<String, dynamic> json          '
Node:  = 'argument_part              ? = 'Node: '
(json)type_identifier'
 = '                              MapNode: Node: arguments'
 = '?(json)               = 'Node: '
type_arguments? = ''
                              <String, dynamic>Node: '
Node: identifier(                 = 'Node: ('
 = '              <Node: updatedAtargument = ' = ''
json<'
                '
                Node: Node:                 identifierNode:  = 'identifier = 'type_identifier, = ''
String'
              '
Node:                               formal_parameterNode: Node:  = 'required, = 'int amount = 'required,'
'
'
                              Node: Node:                 formal_parameterNode:  = 'type_identifiertype_identifierString description = ''
dynamic = ''
int              '
                Node: Node: ,                 = 'Node: ,identifierjson = ''
amount>              '
 = 'Node: >)               = ''
Node:               )Node: '
}identifier         = 'Node:  = ';json = ''
}            '
Node:             )Node:  = ')) = ''
)      '
Node:           function_bodyNode:  = '==>
      _$AppUserFromJson(json); = '='
'
          Node:               type_identifierNode:  = '_AppUser'
      Node: ; = ';comment'
'
 = '                 = '        description                    Node: Node: type_identifiermethod_signatureNode: Node: '
 = '; = 'factory AppUser.fromJson(Map<String, dynamic> json)// draft, published, cancelled, completed'
'
                        Node: Node: factory_constructor_signature//,=> = ' = '//=>'
 = '              ,StringNode: '
 = ''
'
factory AppUser.fromJson(Map<String, dynamic> json)'
      '
Node:                 }Node:            = 'identifier} = ''
Node: descriptionfactory  '
                      Node:  = ',factory = '              identifierNode:  = '_$AppUserFromJson'
,                        Node: formal_parameter'
'
Node:               Node: Node: required = 'class_definition,Node:         required = 'Node:  = ',selectorrequired = ''
'
(json)              '
              Node:           formal_parameterNode:  = 'Node: DateTime startDaterequired'
argument_part = '                 = 'Node: (json)type_identifier'
required = ''
                          Node: Node: @freezed
class PaymentCreateRequest with _$PaymentCreateRequest {
  const factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequest;

  factory PaymentCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$PaymentCreateRequestFromJson(json);
}formal_parameterarguments = ''
DateTime startDate = ''
(json)                    '
Node: Node: type_identifierannotation               = ' = 'DateTimeNode: '
@freezed                (Node: '
identifier       = ' = ' = 'String? imageUrlrequired'
'
                 = 'Node: DateTimeNode: '
@                type_identifierNode:  = 'identifier = ' = '@startDate'
'
startDate      identifierStringNode:  = 'identifier'
 = '                freezedAppUser'
Node: '
    nullable_typeNode:            = 'class?Node:  = ''
class'
              .'
 = '                                Node:     (Node: .identifier'
 = 'Node: PaymentCreateRequest              ,'
 = 'Node: Node: ?,formal_parameter = ' = ' = '?'
String currency'
          '
Node:                 identifier                 = ',Node: fromJsontype_identifier'
 = 'String'
                            '
Node: Node: ,                '
                  Node:           argumentrequiredNode: Node:  = 'superclassrequiredidentifier = 'Node: with _$PaymentCreateRequestformal_parameter_list'
 = 'required      (Map<String, dynamic> json)Node: Node: '
mixinsidentifier = ' = 'with _$PaymentCreateRequestcurrency = ''
             = ''
required'
              '
 = 'Node:               jsonNode: formal_parameterimageUrl        '
              Node: Node: ( = ' = 'Node: (formal_parameter,'
'
with               = ' = 'DateTime endDate = ''
DateTime endDate                '
with                Node: ,,Node:  = 'type_identifier,Node: '
 = ''
DateTime        '
Node:               type_identifier                 = 'Node: identifierNode: _$PaymentCreateRequest'
'
                 = '            Node: Node: jsontype_identifierrequired'
identifierformal_parameter = '              endDateNode: '
    ) = ' = 'Map<String, dynamic> json) = 'Node:  = ''
class_bodyDateTime = '        '
Node:                             Node: {
  const factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequest;

  factory PaymentCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$PaymentCreateRequestFromJson(json);
}formal_parameter'
 = '      List<String>? tags'
Node: ;                 = 'Node: Node: ,identifier = ' = ''
endDate;'
'
                            {                Node: Node: requiredtype_identifier,,      '
Node:  = '              , = ''
Node: }'
               = '              MapNode: Node: '
requiredformal_parameter              Node:  = 'String statustype_identifier{Node:  = 'type_argumentsList = '<String, dynamic> = 'required'
 = ''
}      '
Node:                 declarationNode:  = 'type_argumentsrequired = ''
<String> = 'const factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequest              '
Node: '
required  '
                        Node: formal_parameterredirecting_factory_constructor_signature'
 = ' = 'const factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequest'
'
String locationNode: '
class_definition              Node:                  = 'Node: @freezed
class UserProfile with _$UserProfile {
  const factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfile;

  factory UserProfile.fromJson(Map<String, dynamic> json) =>
      _$UserProfileFromJson(json);
}type_identifierNode:           <formal_parameter = ' = '<String location'
                                Node: '
const_builtin     = 'Node: constannotation'
 = '                  Node: '
Node: @freezed = ''
                Node:           type_identifiertype_identifierNode: String      Node: factorytype_identifier = ' = 'factoryString = ''
 = '<Node:  = 'String'
'
String                                Node: '
Node: '
          identifier@                 = '<@Node: '
'
identifier      identifierNode:  = 'identifierlocation = ' = '                statusNode: Node:                   ,'
 = '              identifier = ''
Node:               freezedtype_identifier'
, = 'locationNode:  = ',Node:  = 'String    '
'
,Node: PaymentCreateRequestclass'
 = '                        classNode: Node:                 ,'
 = ''
,                  Node: Node: '
'
formal_parameter_list, = '    ({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = ''
Node: type_identifier            identifier = '                             = 'Node: >Node: UserProfilecomment'
 = ',Node:     (required = ' = 'Node: '
>superclass'
 = '               = '// pending, succeeded, failed, cancelledwith _$UserProfileNode:                 '
required                Node: (nullable_typerequiredNode: '
dynamic//       = 'Node: // = ''
requiredmixins'
 = ''
              '
            with _$UserProfile = 'Node: '
?              '
'
Node:                 formal_parameterNode:  = '                  optional_formal_parametersNode:         int capacity = ''
{
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }Node: '
Node:                               Node: >formal_parameterwithNode:  = '{with = ' = ' = 'type_identifier{ = '>int capacity'
int'
'
?                               = 'Node: Node: ?required'
 = ''
                              Node: Node: type_identifieridentifierrequired = '        '
required              '
Node:                  = '              tagsNode: '
formal_parameterNode:  = 'Node:  = 'identifierString paymentMethod = ''
capacityidentifier'
 = 'required              intjsontype_identifier                Node: '
Node: '
 = '                '
Node:             identifierNode: ,type_identifier               = ' = 'String              )_$UserProfileNode: '
,Node:  = '     = '),'
'
 = '              ,      '
formal_parameter              Node:  = 'function_bodyNode: '
class_bodyNode: String eventIdNode:  = 'annotation{
  const factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfile;

  factory UserProfile.fromJson(Map<String, dynamic> json) =>
      _$UserProfileFromJson(json);
}                 = ''
required@Default([]) = '      capacityNode: '
'
identifier                              =>
      _$AppUserFromJson(json);Node:  = ', = ' = 'paymentMethod,'
'
'
'
                            Node:         Node: Node: {required = 'type_identifier                 = 'Node: {=>'
'
                    StringrequiredNode:  = ' = 'Node: =>requiredformal_parameterNode: Node: @declaration = ' = ' = 'const factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfile@'
'
'
                      Node: ,'
                '
int price        Node: '
Node: formal_parameterredirecting_factory_constructor_signature = 'identifier = '                , = ''
Node: _$AppUserFromJson              '
Node: Node: int priceformal_parametertype_identifier                        '
Node: identifier = ' = '                 = 'Node:  = 'type_identifierconst factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfileeventIdString? stripeSessionIdNode:  = 'identifierselectorint = ''
int'
Default = ''
(json)                '
Node: '
                                    Node: Node: type_identifier'
argument_part'
                 = 'Node:                               identifierNode:  = ',price(json)Node:  = 'Node: arguments = 'String,'
 = ''
'
identifier([]) = '              price'
'
                                            Node: const_builtinNode: argumentsNode: Node: (                required = ' = ','
(Node: required'
 = '                  '
(json)nullable_type = 'Node:  = 'argumentconst = ''
                                      '
Node: Node:  = 'factory               = 'Node: ,?formal_parameterfactoryNode:  = ''
,          int amount[]'
Node: '
identifier               = 'Node: UserProfilerequired('
'
'
 = '                                      Node: Node: ?list_literal = ',?'
'
 = ' = '              required                '
(               = 'Node: []          formal_parameterNode:  = ''
'
String createdByformal_parameter_list'
 = '                      Node: ({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  })type_identifier'
 = '            Node:                 Node:                 [intrequired = '              Node: Node: identifierNode: '
 = '[required'
Node:  = 'type_identifier                                      (Node: Node: identifier] = ' = 'amount = ''
 = 'argument'
stripeSessionId(              '
'
String]Node: '
               = 'Node: json,formal_parameter'
                                              Node: Node: Node: identifier'
 = ' = '            jsonString createdBy = ''
'
              identifier                Node:                   Node:  = 'Node: createdBytype_identifier,'
Node: optional_formal_parameters), = ' = 'String'
 = '))'
'
                        Node: {
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  };               = '              Node: Node: annotation,'
, = ''
              Node:  = 'identifier = '@Default('jpy') = ''
createdBy;) = ''
'
,                                            '
Node: Node:       {Node: Node: '
}              Node:  = '              formal_parameterNode:  = '@List<String> attendeesNode: '
, = ' = ' = '},{'
'
                annotation'
@Node:   type_identifierformal_parameter = '              @Default('draft')'
'
 = '                String? stripePaymentIntentIdNode: '
                                              Node: Node: requiredNode:  = 'Node: identifierrequiredannotation = ''
 = '@Node: class_definitiontype_identifier = ' = 'List@freezed
class UserProfile with _$UserProfile {
  const factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfile;

  factory UserProfile.fromJson(Map<String, dynamic> json) =>
      _$UserProfileFromJson(json);
}Default'
 = ''
@Default('draft')@                              '
Node: Node:     formal_parameter = ''
'
arguments                 = ' = 'String userId                ('jpy')'
'
Node: Node: String                                  '
Node: @                annotation                Node:  = 'Node: Node: type_arguments@freezed = 'identifier = '<String>'
type_identifier = 'Node: (Defaultnullable_type'
@'
'
 = '                                (Node: '
                  arguments = ' = '?Node: String'
'
                                                    Node:       ?Node: identifier = 'Node: Node: <identifier = 'Node: ? = ''
('draft')                '
Node:  = 'argumentDefault = ''jpy'                  @'
Node:  = ''
                <( = ''
userId = '                  Node: '
identifier@                    '
arguments(               = ''
stripePaymentIntentIdNode: '
Node:        = 'Node:                   identifierNode:  = ',argumentstring_literal = '('draft')Node: ,'
freezed = ''
 = ''jpy'    'draft'Node: '
'
                                        class'
Node:  = '                    (Node:               string_literal = ' = '(              type_identifierNode: class'Node: '
 = ''draft',Node:      = ''
Node: Stringidentifier'
 = ' = ''
'                                        '
Node: UserProfile                                        requiredNode:  = ','
requiredNode: '
argument              '>'
 = 'Node:  = 'formal_parameter              > = ' = 'Node: '
'draft'String displayName                '
'
                'Node:      = 'identifier                     = 'Node: Node: 'formal_parameterNode:  = ''
attendeesString? errorMessagestring_literal'
Node:                = 'type_identifier'superclass'
'draft'Node:                  = ' = 'with _$UserProfile'
                  ,Node:  = 'Node: ,type_identifierString                      '
Node:                 '
 = ''Node: '
)identifier                       = ' = 'displayNameString              '
'
              '
Node: ) = ''
Node: Node: ,      formal_parameterNode:  = 'mixins                 = '              with _$UserProfileDateTime? createdAt'''
 = ''
                'Node:  = '                      Node: '
Node: formal_parameter        '
Node: type_identifier' = ' = 'DateTimeString currency'
Node: '
 = '                                Node: 'nullable_typenullable_type'
,                  '
Node:  = 'Node: with                  type_identifier = 'Node:  = ')? = '              String)?'
 = ''
                  Node:  = ')with'
'
'
        )                  '
?Node:                = 'Node: ?Node: Node: ?                formal_parameter = ' = 'type_identifierString? pictureUrlNode: formal_parameter'
identifier                              '
? = 'Node:  = 'identifier_$UserProfile'
currency = ' = 'Node: errorMessageString status'
'
formal_parameter                            Node: Node:                                 Node:  = 'type_identifierString statusNode: '
 = ''
identifier,String'
'
 = '                ,,'
Node:     nullable_type                Node:                = 'Node:  = 'formal_parameter? = ''
DateTime? createdAt                createdAtclass_bodyNode:  = '                  type_identifier'
{
  const factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfile;

  factory UserProfile.fromJson(Map<String, dynamic> json) =>
      _$UserProfileFromJson(json);
} = ''
'
,                      Node: '
Node:               type_identifierNode:               Node:  = ' = 'Node: ?type_identifierDateTime = ''
StringString                 = 'Node: '
,?{ = 'annotation'
 = ''
                @Default('stripe')Node:                 '
                 = 'Node:                 Node: Node: Node: ,nullable_type'
@ = ' = 'identifieridentifier{identifier              ?@'
Node:  = ''
'
                        Node:                 Node:  = ' = 'pictureUrlstatusNode: '
'
formal_parameter              statusNode: '
declaration = ' = '              const factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfileDateTime? updatedAt?'
'
              Node: , = 'identifier? = ''
                Node:  = '        Node: ,Default                type_identifierNode:  = 'redirecting_factory_constructor_signatureNode: DateTime = 'identifier'
const factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfile,, = ' = ' = ',                '
Node: '
'
nullable_type, = ''
?              '
Node: '
              createdAtNode: '
formal_parametercomment                              Node:               Node: commentNode:                    = '          , = 'argumentsNode:  = 'String? statusMessageconst_builtin'
 = '// draft, published, cancelled, completed = '// draft, published, cancelled, completedNode: ,'
?                ('stripe')'
 = 'Node:                 constNode: '
//'
 = ' = ''
type_identifier              ?Node:                 '
formal_parameter           = 'Node: String//'
 = '                  ////'
'
              Node: Node: Node: formal_parameter( = ' = 'String? imageUrl( = ''
'
DateTime? updatedAt                  Node:                               Node:                 nullable_typeNode:  = 'Node: ?                factoryargumentNode: '
formal_parametertype_identifier                   = ' = 'Node:  = ''
identifier                String = 'factoryupdatedAt'
String? imageUrl'
'
? = 'Node: 'stripe'           = ''
Node: ?type_identifier'
'
 = '                                DateTime                Node: Node: '
                    nullable_typetype_identifieridentifier               = ' = 'UserProfileNode:                 identifierNode:  = 'nullable_typeString'
 = ''
          Node: Node: string_literal = ' = 'formal_parameter_list'stripe' = '?Node: statusMessage'
'
                ?Node: '
nullable_type                   = 'Node: '
({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  })              ?                                        ? = ''
,Node: Node: '
Node: ?'                   = '? = ',,'
                            'Node: '
Node:  = 'Node: (??'
 = ' = '                ?Node: '
identifier = '(imageUrl = ''
              '
identifier                 = ',Node:                       '
'
            updatedAtNode: }'
Node: Node: 'optional_formal_parameters               = '               = '              identifier'Node:  = 'annotation}'
{
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }Node:                   Node:  = ''
,'
 = '               = 'Node: Node: ,'
{,             = '              { = 'Node: '
Node: @Default('line')imageUrl'
'
                Node: }              )              )Node:  = ',}Node:  = 'required,) = ''
'
) = '          '
Node: ,'
            @               = 'Node: @Node: '
formal_parameter'
)= = ' = ' = 'List<String>? tags              '
Node: required = '                              '
Node: Node: formal_parameter               = 'type_identifier)formal_parameterNode: String paymentMethodformal_parameter'
 = ' = '                Node:  = 'List<String>? tags=String userIdList'
type_identifier'
'
'
                                          Node:           Node: type_identifiertype_identifier = 'Node: Stringidentifier'
Node:                 = = 'Node:  = 'type_arguments'
 = '                <String>                '
 = 'DefaultListNode: =identifier'
                                   = ''
_Event'
'
                Node: Node: Node: type_identifier; = '                 = 'paymentMethodNode: _Payment = 'Node: '
'
type_arguments                     = '<String>Node: Node: type_identifier<; = 'arguments< = ''
('line')                  '
Node:                   type_identifierNode:  = '(String = ''
 = ';                  '
 = '                  StringNode: '
, = '(,                Node: Node: >'
identifier = ' = '>userId'
'
'
;                Node:       <'
 = 'Node: '
Node:                                               nullable_typeNode:       Node: Node: Node: <method_signature = 'method_signature,}'
 = ' = 'argument = ' = ','
?'line''
'
                                    Node:  = '                    factory Event.fromJson(Map<String, dynamic> json)Node: '
string_literal        Node: Node: type_identifier = 'Stringfactory_constructor_signature}factory Payment.fromJson(Map<String, dynamic> json) = ' = ''
'line'factory Event.fromJson(Map<String, dynamic> json)'
'
                                Node: Node: '                   = 'factory'Node: '
 = '                      >Node: factory''
 = '          Node:  = '?              identifierNode:  = 'required?'
'
'
             = 'Node:         )Node:  = ') = 'required'factory_constructor_signature'
'
>                  '
Node:                 )Node:  = ''
)nullable_type'
 = '                          ?Node: '
identifier = ' = '                  tagsEvent'
                            Node:               '
Node:           =Node: formal_parameter. = ' = ' = '.String displayName'
Node:           ?Node:  = ''
?'
                =Node: '
Node:                 Node: type_identifierfactory Payment.fromJson(Map<String, dynamic> json) = ''
String                    Node: Node: factorytype_identifier = 'identifier'
 = ' = 'fromJson                _PaymentCreateRequestfactoryNode: '
,formal_parameter'
 = ' = 'String provideridentifierNode:  = '          tags      '
,'
'
'
                                                      Node: Node: identifieridentifier = ' = 'Node: displayNameNode: Node: Paymentannotationtype_identifierNode:  = 'formal_parameter_list@Default([]) = ';'
'
String = '              (Map<String, dynamic> json)Node: '
,                      '
Node: Node:                 (Node:  = ' = '.,('
 = ''
                 = '            Node: Node: @identifier = ','
, = 'formal_parameter'
 = '              ;Node: provider              .Node: '
 = ''
'
Map<String, dynamic> json          '
Node:               annotationidentifierNode:       type_identifier               = 'Node: Mapmethod_signatureformal_parameter'
 = ' = '@factory PaymentCreateRequest.fromJson(Map<String, dynamic> json)String? pictureUrl'
 = '               = 'Node:                 '
Node: Node: ,'
        identifier                @Default([])Node: Node: type_identifier'
fromJson = ''
String = '          '
Node:  = 'factory_constructor_signature                DefaultNode: '
nullable_typeformal_parameter_list,                '
type_arguments = '               = 'Node: ? = '}'
Node: factory PaymentCreateRequest.fromJson(Map<String, dynamic> json)                  @Node:  = '?@                '
Node:                 argumentsNode:  = 'identifier([]) = ' = 'Default(Map<String, dynamic> json)'
'
                '
 = 'Node: '
arguments                             = 'Node: ([])}'
 = '            <String, dynamic>('
Node: Node:                 (Node: factory< = '                   = '? = ' = 'factory<'
(          '
'
'
Node:                 Node: Node: identifieridentifier = ''
                (            Node: '
Node:  = 'formal_parameter            pictureUrl(PaymentCreateRequestNode: type_identifier'
 = ')          '
String               = 'Node:                    = ' = ',Map<String, dynamic> json = ''
,'
Node: )argumentNode: '
 = ''
.[] = ''
.                    (              Node: Node: list_literal               = 'type_identifier[]                 = ''
Map'
'
Node:                   formal_parameter'
 = 'Node: String? statusMessage              '
Node:                           ,Node: Node: =type_identifier = ' = '=StringNode: argument'
'
 = '                type_argumentsNode:                       nullable_type = ' = '<String, dynamic>?          Node:            = ''
Node: []                identifier, = 'Node: [fromJson'
'
 = '                ['
                  Node: '
Node: type_identifier                    <? = 'Node: < = ''
Node: '
                 = 'Node:           type_identifiertype_identifier_UserProfileNode: '
list_literal? = '      []'
formal_parameter_list = ''
 = 'Node:                       dynamic;'
                                      Node: Node:  = ']> = 'String]Node: ;[                 = ''
Node: '
      identifier = ' = 'Node:  = '[statusMessage'
'
'
                >method_signature'
 = '(Map<String, dynamic> json)factory UserProfile.fromJson(Map<String, dynamic> json)              '
                                            Node: Node: Node: identifier                       = '(jsonNode: '
]'
            Node:         Node: Node: ,factory_constructor_signature) = 'Node:  = ' = '])'
 = '(,'
) = ''
 = ',              '
)factory UserProfile.fromJson(Map<String, dynamic> json) = ''
'
,              '
                                  Node: Node: Node: factoryfunction_body = 'Node: Node:             )annotationNode:  = 'factory                 = ')=> _$EventFromJson(json);formal_parameterformal_parameter'
 = ''
 = '        '
              Node: Node: Node: =>List<String> attendeestype_identifier@Default('line') = ' = ''
'
dynamic = '                =>Map<String, dynamic> jsonNode: '
type_identifier          '
                formal_parameter'
              Node:                  = ' = 'List@'
 = 'Node: @Node: List<String> attendeesNode:                 >'
type_identifier = ' = '>                        MapNode: Node: '
'
identifierNode: type_arguments                 = 'Node: UserProfiletype_identifier'
 = 'identifier'
 = '<String>Default              '
'
identifier                 = 'Node: _$EventFromJsonNode:  = '                  '
arguments                      Node: identifier = 'ListNode:  = '<'
 = '                Node: jsonselectorNode: ('line')type_arguments'
 = '          '
<                  Node: Node: . = ''
            type_arguments( = ' = '(json)Node: <String>)                  ('
 = ' = ''
.'
Node:           '
)                  Node:           argument_partNode: Node:  = '<String, dynamic>(json)identifiertype_identifier                  '
Node:  = ''
            < = 'Node:       String'
Node: argument = 'arguments                '
 = '                  Node: <function_body(json) = ' = ''
=>
      _$PaymentFromJson(json);'
'
                                        Node: Node: 'line'Node: fromJson'
Node: type_identifier                     = 'Node: String>string_literal('
'
=>           = '<=> = ''
< = ' = ' = '>        'line'Node: '
'
(Node:                   identifierNode:                       '
'
formal_parameter_listNode:  = '                _$PaymentFromJsonNode:  = ''identifier                '
                      Node: Node: Node:  = 'selector = ' = '>(Map<String, dynamic> json) = ''
attendees>            '
Node:               ('
 = '(type_identifier'Node:                  = 'Node: identifier'
Stringargument             = ''
(json)attendees                      , = ' = 'Node: '
'
'
Node:               'Node:  = '                'Node: '
formal_parameterjson                            '
Node: Node:  = ',,)'
                 = ',Node:               argument_partidentifierNode:  = 'formal_parameterjsonMap<String, dynamic> json = ' = 'DateTime? createdAt = ' = ','
'
'
,)'
(json)              '
                '
Node:                                             '
Node: Node:             formal_parametertype_identifierNode: Node: Node:  = 'argumentsDateTime? createdAt)type_identifier = 'type_identifier)               = ' = '(json)Node: '
DateTime = ''
'
formal_parameter = ''
                                         = 'Node: dynamicString providerNode: Node: Map              type_identifier'
'
'
;nullable_type               = 'Node:  = 'type_arguments                 = 'Node: >Node:  = '<String, dynamic>DateTime'
 = '                '
(Node: >                ?                 = ';'
Node: Node: '
nullable_type              ('
'
 = '<                  Node: type_identifier = '       = 'Node:               <Node: '
String?Node: identifierargument = ' = ''
}?'
 = '                ? = 'Node:                 jsonjson'
}Node: '
identifier'
 = '                                  providerNode: '
identifierNode: type_identifier?             = ''
? = ''
 = '              Node: String                  createdAt                '
Node: Node: identifier              Node: Node: ,, = ' = 'Node: class_definition'
 = ' = '                identifier),,Node: '
 = ' = 'json)'
              ,'
'
@freezed
class EventCreateRequest with _$EventCreateRequest {
  const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest;

  factory EventCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventCreateRequestFromJson(json);
}createdAt                            Node: '
 = 'Node: '
}Node:            = ',formal_parameter              Node: Node: )'
annotation = ', = 'Node: }) = ' = ''
                function_bodyNode: '
DateTime? updatedAt,type_identifier'
                       = 'Node: =>
      _$PaymentCreateRequestFromJson(json);Node:  = '            '
Node:                 )'
@freezed         = 'Node: )=>'
 = 'formal_parameter;dynamic=>Node:           type_identifier'
 = ' = '      DateTimeNode: Node: @; = ''
@'
'
                =Node:  = ''
       = '        Node: nullable_type='
'
 = '      ?Node: '
}                   = 'Node: }?'
identifier = ' = 'freezed?'
'
    Node:                           DateTime? updatedAtNode: identifier                Node: Node:   type_identifierNode:  = 'class_definition_UserProfileclass = ' = '_$PaymentCreateRequestFromJsonclassNode: '
'
>                 = 'Node: >type_identifier'
 = '              identifierDateTime = ''
updatedAt                '
Node:               nullable_typeNode:  = ',? = ' = ''
Node: ,@freezed
class PaymentCreateRequest with _$PaymentCreateRequest {
  const factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequest;

  factory PaymentCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$PaymentCreateRequestFromJson(json);
}'
'
'
      '
    Node:     ;Node: identifierNode: identifier                      Node: annotationNode:  = ' = '                  @freezedNode: '
 = ' = 'jsonEventCreateRequest'
'
selector}      ? = 'Node: } = ''
 = '                @?Node: '
Node:  = '            @Node: '
;)(json))                 = '      superclass = ''
'
           = 'Node: with _$EventCreateRequestargument_part'
            Node: Node: method_signaturemixins = ' = 'Node: )(json) = 'identifierfactory UserProfile.fromJson(Map<String, dynamic> json))'
 = 'with _$EventCreateRequest'
'
'
'
                  Node: Node:         freezed          '
        Node: arguments     = 'Node: Node: =function_body = 'Node: (json)identifier'
 = 'Node: updatedAtwith'
 = ' = 'classwith=>
      _$UserProfileFromJson(json);                            =factory_constructor_signature'
Node:  = 'Node:            = 'class'
factory UserProfile.fromJson(Map<String, dynamic> json),'
        '
( = 'Node: ,type_identifier'
 = '                        '
(            Node: Node: Node: Node: '
} = ' = 'identifierNode: =>factorytype_identifier = ' = ' = '               = 'PaymentCreateRequest_Event'
_$EventCreateRequestfactory'
=>'
                }Node: '
'
            Node:     identifier'
Node: Node: superclass         = 'with _$PaymentCreateRequest    argument = 'Node: Node: ;'
Node:       class_bodyUserProfile = ')identifier = 'Node: jsonmixins = ' = ''
 = '_$UserProfileFromJson                '
Node:  = ''
        )Node: '
          identifier;with _$PaymentCreateRequest'
'
{
  const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest;

  factory EventCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventCreateRequestFromJson(json);
} = '        json          '
Node: Node: '
selector               = 'Node: ).      =       = 'Node: (json) = ''
.          =Node: Node: '
withNode:  = ' = 'argument_part)'
'
 = '                  Node: Node: (json);'
 = 'identifiermethod_signaturewith{ = ' = 'fromJsonfactory Event.fromJson(Map<String, dynamic> json)'
'
;          '
          '
                                  Node:  = 'Node: {factory_constructor_signature = ''
Node: Node:       Node: argumentsfactory Event.fromJson(Map<String, dynamic> json)Node: }declaration = ' = 'Node: formal_parameter_listtype_identifier = ' = '(Map<String, dynamic> json)type_identifier'
'
 = '                      Node: }(json)const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest'
 = 'Node: '
_$PaymentCreateRequest(factory_Event = ''
  '
'
Node:             class_definitionNode:  = 'Node: redirecting_factory_constructor_signature@freezed
class PaymentResult with _$PaymentResult {
  const factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _Success;

  const factory PaymentResult.failed({
    required String errorMessage,
  }) = _Failed;

  const factory PaymentResult.cancelled() = _Cancelled;
}              '
 = ' = 'Node: (      factory(Node: '
 = ';('
'
 = '            const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest          Node: '
formal_parameter               = 'class_body;Map<String, dynamic> json'
'
Node:                = 'Node: Node: annotationconst_builtin = ' = 'Node: argument      identifier = ' = 'Node: jsonmethod_signature'
              Eventconst = ''
factory Event.fromJson(Map<String, dynamic> json)          {
  const factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequest;

  factory PaymentCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$PaymentCreateRequestFromJson(json);
}'
Node: .'
'
@freezed      '
                          Node: Node:       Node: identifiertype_identifier = ' = 'jsonNode: '
Node:               @Node:  = 'Map'
{) = ' = '.              '
        factory)@ = '          Node: Node: type_arguments'
'
{      identifierNode:          = ' = 'Node: fromJson = ';'
 = '      ;'
Node: Node: factory_constructor_signaturedeclarationfactory          identifier<String, dynamic>Node: '
 = ' = ' = 'formal_parameter_list'
const factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequest = ''
(Map<String, dynamic> json)'
factory Event.fromJson(Map<String, dynamic> json)'
                            '
freezedNode: Node: (                Node: '
}<     = 'Node: Node: }         = 'factoryNode:  = 'class( = ''
'
<redirecting_factory_constructor_signature = ' = 'factoryconst factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequest'
'
class            '
              Node: Node:   formal_parameteridentifier          '
 = 'Node: Node: Node: class_definition          PaymentResult                '
Node:     type_identifierNode:  = 'identifierNode: String = ' = ' = 'const_builtin@freezed
class AuthState with _$AuthState {
  const factory AuthState.initial() = _Initial;
  const factory AuthState.loading() = _Loading;
  const factory AuthState.authenticated(AppUser user) = _Authenticated;
  const factory AuthState.unauthenticated() = _Unauthenticated;
  const factory AuthState.error(String message) = _Error;
} = ''
constMap<String, dynamic> json'
Eventsuperclass'
          '
Node: '
factory     = 'Node: with _$PaymentResult          identifier                 = '              factoryNode: annotation'
type_identifier = ' = '@freezedMap'
'
Node:                               '
Node: Node:       type_arguments. = 'Node: EventCreateRequestNode: mixins'
identifier           = ' = ',Node: Node:  = ' = 'PaymentCreateRequest = 'formal_parameter_list<String, dynamic>. = 'with _$PaymentResult({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }),@'
'
'
'
'
                '
            Node: Node:         type_identifier( = 'Node:  = 'dynamic = '                '
Node:                 <with = '@('
          <Node: Node: >'
       = ' = 'Node: formal_parameter_list          identifier = ' = '({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  })                '
Node: '
Node: type_identifier             = 'Node:             >(identifierNode:  = 'freezedString'
with'
    '
                      Node: Node: optional_formal_parameters = ' = 'type_identifierfromJson{
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  } = '('
class'
'
_$PaymentResult = '                '
class    Node: Node: '
Node:               identifier,    '
                      Node: Node: Node: optional_formal_parametersformal_parameter_listidentifier = ' = ' = '(Map<String, dynamic> json) = 'Node: AuthState{
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }class_body'
'
 = '              ,'
    {Node:  = ' = '{            {
  const factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _Success;

  const factory PaymentResult.failed({
    required String errorMessage,
  }) = _Failed;

  const factory PaymentResult.cancelled() = _Cancelled;
}Node: '
Node: (                 = 'jsonNode: '
superclass{       = ''
 = ''
{type_identifierwith _$AuthState(Node: '
{             = '      {Node: Node:  = ''
)              '
Node:  = 'required      mixinsNode:  = 'declaration)'
 = ''
const factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _Success = '            '
Node:         formal_parameter = 'requireddynamic'
                            Node: Node: with _$AuthState'
requiredMap<String, dynamic> jsonNode:  = 'formal_parameter                      '
Node: Node: '
              function_body         = 'Node: =>
      _$UserProfileFromJson(json);redirecting_factory_constructor_signature>type_identifierNode:  = 'requiredMapwith'
 = ' = 'with        '
const factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _Success        '
          Node: '
Node:  = '=>type_identifier = 'String title=>'
'
              Node: Node:  = ' = '        type_arguments'
> = '              '
Node: Node: formal_parameter_$AuthStateconst_builtin                <String, dynamic> = ''
identifier = ''
Node:                     Node: Node: <class_bodytype_identifier = ' = ' = '{
  const factory AuthState.initial() = _Initial;
  const factory AuthState.loading() = _Loading;
  const factory AuthState.authenticated(AppUser user) = _Authenticated;
  const factory AuthState.unauthenticated() = _Unauthenticated;
  const factory AuthState.error(String message) = _Error;
}String eventId              String = ''
'
'
Node: _$UserProfileFromJsonidentifier                '
<      '
const        '
                 = 'Node: Node: Node: identifier{ = ' = 'json{                '
type_identifier'
       = 'title          Node: Node: '
type_identifierselector              StringNode:             Node: Node: , = ' = 'declaration'
Node: )factory                 = 'Node:  = '(json),factory = 'identifier = ') = ''
'
'
          const factory AuthState.initial() = _InitialNode: '
          identifierNode:  = ''
        StringNode:       redirecting_factory_constructor_signatureNode:  = ''
const factory AuthState.initial() = _Initial              PaymentResulteventIdNode: '
argument_partrequired = ' = '(json)function_body          '
'
Node:           .                               = 'Node: Node: .Node: '
const_builtinrequired = ''
const,'
             = '          '
Node: => _$EventFromJson(json);factory = 'Node: '
, = '         = 'Node: ,,=>'
'
               = 'Node: =>formal_parameter'
                                Node:                 Node: argumentsrequired = 'factory(json) = 'Node: identifierrequired'
'
           = 'Node: '
              Node:  = 'type_identifier_$EventFromJson = ''
Node: String descriptionidentifier'
 = '                Node: identifierformal_parameter = '              success = '        Node: '
type_identifierAuthState = 'int amount          dynamic'
StringNode:           selectorNode:  = '.('
(json)Node: '
formal_parameter_list'
 = '                          Node: '
({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = '.'
                          Node: Node: identifieridentifier = 'Node: argument_part = 'description                ( = 'Node: (json)type_identifier'
> = '            Node:  = 'arguments'
'
int                          '
 = '>'
 = ''
                                            (json)Node: Node: '
Node: identifierinitial = '              '
Node: json('
 = ',            Node: Node: Node: )identifier = ' = ' = 'amount          (argument = ' = 'Node: (,)'
(json              formal_parameter_list'
'
'
                              Node: '
Node: '
                                Node: Node:  = 'identifierNode: ()Node: argument'
 = 'optional_formal_parameters, = 'json = ''
            function_body{
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  } = 'Node: '
=> _$EventFromJson(json);                               = 'Node: Node: jsonrequired'
,{               = ''
{'
Node:  = '              '
)(Node:  = 'annotation = 'required@Default('jpy')'
'
                        identifier              Node:                = 'Node: @required) = ''
(Node:  = ''
Node:  = '            => = 'required=>'
'
                Node: jsonNode: @;'
 = ')'
;               = 'Node: '
))      '
 = 'Node:           formal_parameter} = 'Node:  = '=} = ''
                )=DateTime startDate                '
'
Node: Node: Node: Node: identifier          formal_parameter = 'class_definition'
_$EventFromJson = ''
        @freezed
class AuthState with _$AuthState {
  const factory AuthState.initial() = _Initial;
  const factory AuthState.loading() = _Loading;
  const factory AuthState.authenticated(AppUser user) = _Authenticated;
  const factory AuthState.unauthenticated() = _Unauthenticated;
  const factory AuthState.error(String message) = _Error;
}                        Node: Node: selectortype_identifier = ' = 'Node: Node: type_identifier'
 = ';    String paymentId(json)identifier'
 = '          '
_Initial = 'Default = ''
;'
Node:                                 annotationNode:  = '      @freezedNode: Node: '
argument_partDateTimetype_identifierNode: '
'
arguments             = ';Node:  = '@                 = '('jpy') = ' = '(json)Node: '
;'
'
Node: identifier                  String@'
                  '
Node: Node: (arguments = ' = '((json) = ''
                                        Node: Node: }identifieridentifier = 'Node: startDate = ''
Node: freezed              paymentIdargument = ''
declaration'
 = '              const factory AuthState.loading() = _LoadingNode: '
('
 = 'Node:      = '}'jpy'Node: '
'
,class = '                         = 'Node: Node: class                    '
Node: ,(,    '
class_definitionNode:               Node: string_literal = ' = ' = 'redirecting_factory_constructor_signature,'
Node:  = '@freezed
class EventCreateRequest with _$EventCreateRequest {
  const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest;

  factory EventCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventCreateRequestFromJson(json);
}const factory AuthState.loading() = _Loading'
identifier'
'
required               = 'Node: Node:  = '              AuthState              'jpy'Node: annotationconst_builtinrequiredNode:  = 'requiredrequired'
'
'
 = ''
@freezed = '    '
constargument       = 'Node: json                      '
Node: '
                                        Node: Node: identifierNode: Node:               formal_parameterfactory = 'Node: String sessionId@'
formal_parameter = ' = '                DateTime endDateNode: superclass'
 = ''@ = '                '
type_identifierjson       = 'Node:  = 'StringNode: '
with _$AuthStateidentifier = 'factory'
'
 = '                    freezedNode:                 ''
'
Node:                                 Node: '
type_identifieridentifierNode: Node: ) = '    AuthState = ''
Node: mixinsDateTime = ' = ''
with _$AuthStateclass''
 = '                  Node: Node: classidentifier                with'
 = ' = ') = ''
'    '
.Node: sessionIdidentifier = ''
                          with. = ''
Node: endDate;              Node: Node: '
)identifier = '        ) = ' = 'Node: '
;          ,Node: EventCreateRequest = ''
,                            '
Node: '
'
formal_parameter       = 'Node:     }type_identifierNode:  = 'String currency_$AuthState'
'
                                  Node: Node: identifiersuperclassclass_bodyNode:  = 'Node: }, = 'formal_parameter = ' = ''
{
  const factory AuthState.initial() = _Initial;
  const factory AuthState.loading() = _Loading;
  const factory AuthState.authenticated(AppUser user) = _Authenticated;
  const factory AuthState.unauthenticated() = _Unauthenticated;
  const factory AuthState.error(String message) = _Error;
} = '  '
Node: with _$EventCreateRequest,loading      '
 = 'Node: class_definitionNode:  = ''
@freezed
class EventCreateRequest with _$EventCreateRequest {
  const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest;

  factory EventCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventCreateRequestFromJson(json);
}type_identifier'
{ = '                  Node: Node: annotationStringrequired = ' = '          {@freezedNode: '
'
formal_parameter_list'
 = ''
String? paymentIntentId = ''
()required                '
            Node:               Node: mixinsNode: '
declarationformal_parameter      Node: Node: identifier                            @ = 'Node:  = '(const factory AuthState.initial() = _Initial = ' = ''
@('
 = '              Node: Node: identifierredirecting_factory_constructor_signatureString location = 'with _$EventCreateRequest = ' = 'Node: currencyconst factory AuthState.initial() = _Initialfreezedtype_identifier'
'
'
'
'
'
                                                  Node:  = ')    Node:  = '          Node: )Node: type_identifierNode:  = ''
classNode:           const_builtinNode:  = '=String = ' = '=,'
class          '
Node: Stringconstwith'
 = 'type_identifier'
          with    '
Node: identifier = 'Node:  = 'factory'
 = ',factory                '
'
        Node:           _Loadingidentifier                Node: Node: type_identifiernullable_type = ' = '              Node:  = 'location'
Node:  = 'annotation?EventCreateRequest'
'
'
_$EventCreateRequest          identifier                  Node: Node:  = 'Node: superclass'
               = 'Node:  = 'AuthStatewith _$EventCreateRequest;'
 = '      ;'
'
,       = 'Node: ,declaration'
 = '@Default('stripe')'
              ?    Node: const factory AuthState.authenticated(AppUser user) = _AuthenticatedNode: '
 = 'class_body           = '                {
  const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest;

  factory EventCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventCreateRequestFromJson(json);
}        '
Node: Node:       redirecting_factory_constructor_signatureNode: mixins{ = ' = ' = '{const factory AuthState.authenticated(AppUser user) = _Authenticated'
'
      Node: with _$EventCreateRequest          '
declarationNode:         const_builtin = 'const'
Node: withNode:  = '.withrequired'
 = 'required = '?        '
Node: '
type_identifier               = '                _$EventCreateRequestNode: '
Node: formal_parameter     = 'Node: identifierclass_bodyint capacity = ' = '{
  const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest;

  factory EventCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventCreateRequestFromJson(json);
}paymentIntentId'
Node: '
'
@ = '              @'
          Node: factory = 'const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest'
        .                                Node: Node: identifierNode: '
Node:           type_identifierNode:  = '      redirecting_factory_constructor_signatureNode: Default = '{ = ',const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequestint = ''
'
 = 'identifier                 = ' = 'factory                ,Node: {identifierinitial'
 = ''
'
Node:               '
          Node: Node:           Node: capacityidentifier      '
const_builtin} = ' = 'AuthStateNode: '
declaration          '
 = ' = '}const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest          '
'
Node:                     Node: Node: ).redirecting_factory_constructor_signaturearguments = ' = ' = '('stripe').const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest'
'
'
                            Node:           Node: const_builtinNode:  = 'identifierconst'
(           = 'Node: authenticatedfactory'
 = '          factoryNode: '
 = 'const = '              Node: Node: ,formal_parameter_list          formal_parameter_listNode: )identifier = ' = '((AppUser user)'
,'
'
 = ''
          '
            () = '          '
Node:               factory             = 'Node: Node: Node: factoryNode:                   '
(Node:            = 'argument(Node:  = ''
identifier'stripe' = '            EventCreateRequest'
'
Node: required                     = ')requiredNode: EventCreateRequest('
           = 'Node:  = 'formal_parameter_list)string_literal=          '
Node: '
formal_parameter_list           = ' = '=Node: ({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  })= = ' = '(='
'
'
                       = '            Node: formal_parameter               = 'Node: Node: AppUser user'
Node: type_identifier'
          ({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  })Node:  = '('stripe'type_identifierformal_parameter = ''
 = '_Successint price'
'
       = '                                    Node: Node: type_identifier'                '
Node:  = 'Node: _InitialAppUser; = 'type_identifier'
;'
 = '              'Node:  = ''
(            '
                  Node: Node: Node: optional_formal_parametersint'
identifier(       = ' = '                      ('
Node: '
                Node:             user = ''
{
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  };declaration'Node: '
 = 'identifier             = '               = 'const factory PaymentResult.failed({
    required String errorMessage,
  }) = _FailedNode:  = ''
Node: priceoptional_formal_parameters'
'        '
Node: {                  ;              Node:  = ' = '){
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }Node: '
 = 'Node: )              redirecting_factory_constructor_signature'
 = 'Node:       const factory PaymentResult.failed({
    required String errorMessage,
  }) = _FailedNode: '
{          declarationNode:  = 'const_builtinconst factory AuthState.loading() = _Loading = ''
const{ = ' = '){'
'
'
,               = 'Node: ,)'
'
                                              Node: Node: formal_parameterrequired = ' = 'Node: required'
redirecting_factory_constructor_signature                        Node: Node: =factory = 'required= = ''
 = ' = 'required'
'
String? imageUrlNode:           formal_parameterconst factory AuthState.loading() = _Loading = ''
factory              '
          Node: String paymentMethodformal_parameter'
                        Node:                 Node: Node:  = 'Node: String titleconst_builtin'
type_identifier = ''
identifier                                 = 'Node: Node: type_identifierNode: _Authenticatedtype_identifier'
 = 'formal_parameter = ' = 'StringPaymentResult'
'
consttype_identifierString title                 = ''
Node:       nullable_type          Node: Node:  = 'String? = ''
'
;                  '
Stringfactory                '
 = '                factoryNode: '
identifier                    Node: identifier = ' = 'Node: title?'
 = '                ?;Node:                = 'Node: AuthState'
'
'
type_identifier           = 'Node: String.'
                Node: Node: identifier                .Node: identifieridentifier = 'Node:  = ' = ' = '.      title'
paymentMethod'
          ,Node: . = ''
declaration               = ' = 'Node: imageUrl              identifierNode: ,'
,'
const factory AuthState.unauthenticated() = _Unauthenticated = '          '
Node: '
Node:               ,        failedNode:               redirecting_factory_constructor_signature = ' = 'identifier,'
Node:           , = ' = 'Node: ,Node: const factory AuthState.unauthenticated() = _Unauthenticated'
,              requiredformal_parameter_list = ' = 'required'
Node: '
'
'
 = '({
    required String errorMessage,
  })              loadingNode: '
                            formal_parameter'
                    Node: Node: Node: formal_parameter_listconst_builtin}             = 'requiredNode:  = 'List<String>? tags( = ' = 'required'
}Node:                 formal_parameterNode:  = 'type_identifier'
 = ' = '            ( = 'Node: const()'
String description'
              '
            '
Node: )ListNode:  = 'formal_parameter)'
('
 = '                String description            '
Node:                                 optional_formal_parametersNode:  = 'type_identifier = '{
    required String errorMessage,
  }Node: '
'
type_identifier               = '          Node: String          Node: (type_arguments'
 = ' = '<String>String            {'
Node:  = 'Node: '
'
)Node:  = 'factory) = '{factory                  '
Node: =<           = ' = '<'
Node:           identifier'
=                '
Node: Node: identifier = ''
AuthState='
               = 'Node: =                '
          required = ' = 'descriptionNode:           '
                  required              Node: '
identifierNode: Node: Node:  = 'type_identifier. = ' = 'String              .          ,description'
type_identifierNode: '
                             = 'Node: Node: Node: '
 = 'type_identifier              _PaymentCreateRequestNode:  = ',formal_parameter_Loading,'
>identifier'
 = ' = 'unauthenticated      >'
 = '                    Node: '
 = ''
String errorMessage;'
Node: ,                 = '          Node: Node: nullable_typeformal_parameter_listNode: ;;'
 = '      () = 'Node: required?'
'
'
                                             = ' = '                requiredmethod_signature'
Node: ;              Node: Node: Node: required'
( = ' = 'type_identifier = '(factory PaymentCreateRequest.fromJson(Map<String, dynamic> json)      Node: Node: '
declaration? = '         = 'requiredformal_parameter'
 = 'const factory AuthState.authenticated(AppUser user) = _Authenticated              Node: Node: formal_parameterDateTime startDate = '? = ''
'
factory_constructor_signature'
'
                                Node:  = 'identifier        DateTime startDatefactory PaymentCreateRequest.fromJson(Map<String, dynamic> json) = ''
tags                      StringNode: '
factory'
Node:  = 'Node: factory                '
Node:                 )redirecting_factory_constructor_signatureidentifier'
 = '          errorMessage              Node: Node: Node: identifier = ' = ' = 'type_identifierPaymentCreateRequestNode: )'
'
'
const factory AuthState.authenticated(AppUser user) = _Authenticated = ''
DateTime,          '
Node:           const_builtin                 = 'Node: Node: identifiertype_identifier = '           = 'startDateDateTime'
 = '              constNode: '
,              Node:           .Node:  = ',='
 = '              =factoryNode: '
'
Node:                 .Node: ,identifier = '          '
, = 'Node: '
          type_identifierNode:  = '}_Unauthenticated = '              , = 'Node: '
factory} = '               = 'Node: identifier'
'
           = 'Node: }identifier'
requiredfromJsonstartDate      '
Node: '
            }Node: '
               = ')            requiredNode: '
 = 'Node: ;,AuthState = ' = ')              '
          ;          '
 = 'Node:  = '      Node: )Node: formal_parameter_list.,Node:  = ''
(Map<String, dynamic> json)formal_parameter)declaration'
               = ''
 = '          const factory AuthState.error(String message) = _ErrorNode: '
 = 'Node: '
.=            '
 = 'Node: =          '
(Node: required           = 'DateTime endDate          '
identifierNode:  = '                type_identifierNode:  = 'authenticated_EventCreateRequest        required'
'
'
 = '                              Node: Node: (;Node: Node: '
formal_parameter_list             = '=formal_parameter = ' = ' = '=DateTime endDateNode: redirecting_factory_constructor_signature'
type_identifier = ' = ';Node: const factory AuthState.error(String message) = _Error'
'
DateTimeformal_parameter(AppUser user) = ''
Map<String, dynamic> json                          '
Node: '
              const_builtinNode: '
type_identifier = ' = '                const                  Node: Node: (Map = ''
method_signatureNode:           Node: Node: type_identifier'
(              '
          Node:             Node: Node:  = 'formal_parameter = 'factoryidentifiertype_identifiertype_arguments_Failed = ''
 = '<String, dynamic>       = ''
 = '                Node: factory EventCreateRequest.fromJson(Map<String, dynamic> json)Node:  = ''
AppUser user;<'
factory = '              ;'
 = 'Node: endDate        type_identifier'
'
 = 'DateTimeNode: AppUser'
          '
                Node:               Node: identifierNode:               factory_constructor_signature<      identifier'
Node:  = ' = '                 = 'Node: Node: type_identifierAuthStatefactory EventCreateRequest.fromJson(Map<String, dynamic> json)declaration,identifier = ' = ''
String = ''
user,          '
'
              Node: Node: endDate            '
requiredfactory                 = ' = 'Node: Node: required          ,factory = ''
'
'
)           = 'Node: )'
 = 'identifierconst factory PaymentResult.cancelled() = _Cancelled                         = 'Node: ,EventCreateRequest'
                              Node: Node: '
Node: type_identifier'
           = 'formal_parameter        Node: =dynamic = ' = 'Node: Node: redirecting_factory_constructor_signature,'
 = '.const factory PaymentResult.cancelled() = _Cancelled. = ' = ''
=.String location'
'
           = '.                '
Node:           type_identifierNode:  = '                          Node: Node: ,identifier'
'
 = '          Node: Node: type_identifieridentifier = '>String_Authenticated'
              '
                const_builtinNode: Node:  = '      requiredfromJsonidentifier = ' = ' = ''
 = 'requirederror>'
'
location'
          constNode: '
                            formal_parameter_list'
 = '          (Map<String, dynamic> json)Node: '
                          ;Node: Node: (identifier = 'Node: Node: Node:           ,Node:  = 'factoryformal_parameter_list,formal_parameter = ' = 'jsonString location'
 = ''
(;            '
 = ' = '      (String message)Node: '
declaration                          factoryNode: '
'
(                Node:  = ''
Node: Node:             type_identifier          Node: requiredformal_parameterNode:  = ' = 'identifier = ')required(const factory AuthState.unauthenticated() = _Unauthenticated = ''
PaymentResult'
'
            '
 = '              String         = '          )Node: '
.Node: Node: Map<String, dynamic> json'
 = 'Node: '
redirecting_factory_constructor_signature.              formal_parameter'
                 = 'formal_parameterconst factory AuthState.unauthenticated() = _UnauthenticatedNode:  = ''
String messageNode: identifier'
       = 'Node:               function_bodyNode:  = '          =>
      _$PaymentCreateRequestFromJson(json);int capacity'
          '
type_identifierNode: Node: const_builtin = '         = 'Node: consttype_identifier                identifierlocationNode: =>'
type_identifier = ' = ' = '=>              '
MapNode: cancelled'
'
'
                                Node: Node: ,identifier = ' = 'type_argumentsString = 'Node:  = '_$PaymentCreateRequestFromJsonint'
<String, dynamic>'
factory = ''
 = '          factory                '
,Node: '
formal_parameter_list                  Node:               identifier               = ''
Node: Node: identifierNode:  = 'identifierAuthState() = 'requiredcapacity'
'
 = '              Node: requiredNode: selector,                 = '             = 'Node: '
message('
Node:  = '                          '
(json)<'
           = '          Node: Node: Node: argument_part,Node: .) = ' = '.) = ''
 = ''
(<'
(json)formal_parameter            '
Node:  = ')          '
                          Node: int capacity'
                Node: '
=arguments = '                =Node: Node:  = ' = ')          '
Node: Node:           identifiertype_identifiertype_identifier'
 = '(json)unauthenticated'
 = 'requiredNode:                         StringNode:  = 'Node: type_identifierrequired'
'
( = ' = '          intNode: = = ''
 = 'formal_parameter_list'
_Error=               = 'Node: '
                                ()          formal_parameter'
(Node: '
      '
              Node:  = 'Node: identifierargumentint price            '
Node: Node:                  = ',capacity; = ' = ',;Node: '
'
type_identifier = '                 = 'json_CancelledNode: (Node:  = '              '
'
'
type_identifier( = ''
      dynamic            Node: '
Node: type_identifier,                Node: Node:       ;>Node:  = ' = ';                }Node: '
) = ' = ' = '}int'
 = ',=== End AST ===
'
>                    Node: '
identifierNode:  = ')json}'
 = ''
required'
                
=== Processing class:  = '          Node:               }Node: identifieridentifier = '              priceNode: '
='
              AppUser  Node: required)Node: '
 = '              )Node:  = ' ===
, = ' = '
=== Processing class: ,='
Node:         class_definitionjson'
'
Node: '
formal_parameter;             = ' = 'Node: UserProfileint price = '          @freezed
class PaymentState with _$PaymentState {
  const factory PaymentState.initial() = _StateInitial;
  const factory PaymentState.loading() = _StateLoading;
  const factory PaymentState.success(Payment payment) = _StateSuccess;
  const factory PaymentState.failed(String errorMessage) = _StateFailed;
}'
              '
;                Node: Node: )    Node: Node:  ===
'
 = 'formal_parameter) = ''
annotationString? imageUrl      type_identifierNode: type_identifier} = ' = ''
 = '} = ''
_Unauthenticatedint  '
Node:       class_definition'
 = '                @freezed
class PaymentResult with _$PaymentResult {
  const factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _Success;

  const factory PaymentResult.failed({
    required String errorMessage,
  }) = _Failed;

  const factory PaymentResult.cancelled() = _Cancelled;
}@freezedNode: '
type_identifier'
                          Node: Node: annotationNode:  = 'identifier@freezed@ = ''
price      '
Node: Node:                = 'function_body = 'Node:       ,String@
=== Processing class: @'
'
 = 'AuthState = 'Node:  ===
;=>
      _$EventCreateRequestFromJson(json);                ,Node: '
nullable_type      '
               = 'Node:  = 'Node: formal_parameter        @ = 'Node: '
=> = '      ?;'
identifier'
 = ' = '=>                        Node: Node: String? imageUrlfreezedNode: '
declaration'
                 = 'Node: const factory AuthState.error(String message) = _Erroridentifier'
?             = 'Node: '
class         = 'Node:  = '?freezedclass'
'
    Node: Node:     classNode: type_identifieridentifieridentifier'
 = ' = '                PaymentState = ''
Node:  = '_$EventCreateRequestFromJsonclassString'
'
            redirecting_factory_constructor_signatureidentifier = 'Node:  = 'Node: const factory AuthState.error(String message) = _ErrorimageUrl'
'
selectorsuperclass = '                '
 = 'Node: with _$PaymentStatenullable_type'
 = '                        ?Node: '
                            const_builtinNode:  = 'identifierconst = 'Node: Node: Node: (json),'
PaymentResult = '?,'
mixins'
 = '          '
with _$PaymentState          '
                       = 'Node:     Node: Node: factorysuperclass? = 'argument_partwith _$PaymentResult = ''
(json)      '
Node:             mixinsNode: Node: '
Node:  = 'formal_parameterwith = ' = 'with _$PaymentResultwith                '
'
 = '        factoryNode: '
argumentstype_identifier                   = ' = '(json)Node: '
_$PaymentStateidentifierNode:                = ''
List<String>? tagsNode:     ('
Node:  = 'Node: (identifierimageUrl                with'
Node: '
type_identifier = ' = ' = '              ListNode: '
class_bodywith = 'AuthState'
'
                      Node: {
  const factory PaymentState.initial() = _StateInitial;
  const factory PaymentState.loading() = _StateLoading;
  const factory PaymentState.success(Payment payment) = _StateSuccess;
  const factory PaymentState.failed(String errorMessage) = _StateFailed;
},          '
type_identifier                       = 'Node: Node: {, = 'Node: {'
 = 'type_arguments_$PaymentResult = ''
'
<String>                    Node: '
formal_parameter                   = 'Node: argument<List<String>? tagsNode:     '
Node: Node: declaration                .Node:  = ' = 'class_bodytype_identifier = ' = '{
  const factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _Success;

  const factory PaymentResult.failed({
    required String errorMessage,
  }) = _Failed;

  const factory PaymentResult.cancelled() = _Cancelled;
}const factory PaymentState.initial() = _StateInitialList = ' = ''
<.'
      jsonNode: '
{ = ''
'
                                                  '
        Node: Node: identifiertype_arguments{ = ' = '<String>Node: '
          type_identifierNode:       identifier = ' = 'Node: errordeclaration'
jsonString = ''
'
Node:                                     '
Node:           redirecting_factory_constructor_signatureNode: const factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _Successformal_parameter_list = ' = ''
<(String message) = 'Node: const factory PaymentState.initial() = _StateInitial<>'
 = '                                >'
        '
          Node: Node: '
const_builtin)            Node: Node: Node:  = 'type_identifierredirecting_factory_constructor_signature = '(String = ''
 = '                  (Node: '
                const)'
>'
 = '                  >Node: Node:  = ''
Node:             nullable_type                const factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _Success;factoryNode:  = ' = 'formal_parameterfactory = ''
String messageNode: ;'
'
 = '                Node:           const_builtin'
?Node: '
              nullable_typeNode: Node: type_identifier = '} = 'const = 'String'
                   = ''
Node: ?              }?Node: '
identifier = ' = 'identifier            '
Node: ?class_definition'
 = ' = '                  messageNode:                 '
Node: factory             = 'PaymentState?factoryNode: '
 = 'Node: ?'
)@freezed
class EventUpdateRequest with _$EventUpdateRequest {
  const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest;

  factory EventUpdateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventUpdateRequestFromJson(json);
} = '          )Node: '
identifier'
identifier     = 'Node: tagsannotation'
 = ' = '@freezedPaymentResult'
                                        Node: Node: .identifier           = ''
'
tagsNode:           ,'
Node:  = '               = 'Node: .,'
 = '.,,'
'
                            Node:       } = 'Node: Node: @ = ' = '}@'
'
=       = 'Node: =            '
Node:           )Node:  = 'type_identifier) = ''
.identifier          Node: Node: _Erroridentifier} = ' = 'initial          '
} = 'Node: '
'
                      ='
           = '      Node: Node: =Node: freezed)'
'
          Node: formal_parameter_list = ' = 'identifier() = ''
successNode: ;type_identifier    )Node: '
class'
 = ' = '                     = 'Node: _EventCreateRequestformal_parameter_list'
            Node: Node:       ;Node: class = ''
=    ;'
({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  })('
                   = 'Node: Node: ((} = ' = ''
Node:  = 'identifier = ' = '}EventUpdateRequest'
            (=== End AST ===
='
'
Node:           
=== Processing class: )             = ';'
'
    Node: Node: )AppUsertype_identifier'
 = '          _EventCreateRequest      '
Node:        ===
=Node: Node: superclass;optional_formal_parameters = ' = 'Node: {
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }method_signature'
 = 'factory EventCreateRequest.fromJson(Map<String, dynamic> json);'
'
        Node:  = '              with _$EventUpdateRequestNode: '
{       = 'Node:  = '={      mixinsNode:  = ''
with _$EventUpdateRequestmethod_signature'
 = '          factory EventCreateRequest.fromJson(Map<String, dynamic> json)'
'
factory_constructor_signature                      Node:  = 'Node: factory_constructor_signature = '        Node: Node: type_identifierfactory EventCreateRequest.fromJson(Map<String, dynamic> json) = 'with_StateInitial = ''
factory EventCreateRequest.fromJson(Map<String, dynamic> json)'
'
required          with          '
Node:       factoryNode:  = 'Node: factory;         = 'Node: factoryrequired = ''
factorytype_identifier              '
Node:           formal_parameterNode:  = ' = ''
String paymentIdidentifier'
           = '                 = 'Node: EventCreateRequest_$EventUpdateRequesttype_identifierNode:  = '
=== Processing class: '
String;'
'
'
                                    identifierNode: Node:  = 'identifier.EventCreateRequest = 'Node: UserProfilepaymentId ===
'
class_body
=== Processing class:                = 'Node: AuthState, ===
 = 'Node: ,declaration'
 = '              const factory PaymentState.loading() = _StateLoadingNode: '
required = ''
 = '{
  const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest;

  factory EventUpdateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventUpdateRequestFromJson(json);
}'
        .      Node: '
redirecting_factory_constructor_signatureNode:            = 'Node: const factory PaymentState.loading() = _StateLoading{'
identifier                     = 'Node: fromJsonconst_builtin'
 = 'Node: required = '.'
 = '{              .Node: '
formal_parameter                    '
constNode:       identifier'
 = 'Node: fromJsondeclaration'
 = '                    Node: Node: formal_parameter_listfactory = 'Node: (Map<String, dynamic> json) = ''
formal_parameter_listfactory = '            (Map<String, dynamic> json)'
Node: '
(const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest           = 'Node: String sessionId'
'
identifier             = '         = '                (Node: '
redirecting_factory_constructor_signaturePaymentStateNode: Node: ('
 = 'type_identifier(             = 'Node: const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequestformal_parameter'
 = ' = '                    Map<String, dynamic> jsonNode: Node: '
const_builtin. = '               = 'Node: .type_identifierconst = ''
String'
'
'
                                Node: MapNode: '
Node:               identifierNode: formal_parameter
=== Complete AST for source ===
 = ' = 'Map<String, dynamic> jsonfactoryNode:  = ''
program               = 'Node: import 'package:freezed_annotation/freezed_annotation.dart';

part 'user.freezed.dart';
part 'user.g.dart';

@freezed
class AppUser with _$AppUser {
  const factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUser;

  factory AppUser.fromJson(Map<String, dynamic> json) =>
      _$AppUserFromJson(json);
}

@freezed
class UserProfile with _$UserProfile {
  const factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfile;

  factory UserProfile.fromJson(Map<String, dynamic> json) =>
      _$UserProfileFromJson(json);
}

@freezed
class AuthState with _$AuthState {
  const factory AuthState.initial() = _Initial;
  const factory AuthState.loading() = _Loading;
  const factory AuthState.authenticated(AppUser user) = _Authenticated;
  const factory AuthState.unauthenticated() = _Unauthenticated;
  const factory AuthState.error(String message) = _Error;
}
type_identifier                 = 'factoryMapNode: loadingidentifier'
 = ''
              sessionIdNode:   type_arguments'
'
 = ''
          <String, dynamic>Node: '
formal_parameter_listNode: type_arguments                          Node:  = '<Node:  = 'identifier = '              ()import_or_export<String, dynamic>< = ''
'
import 'package:freezed_annotation/freezed_annotation.dart';                Node:                 Node: ,type_identifier'
 = ''
Node:                 <Node:  = 'library_import<Node: '
 = '(                 = ',('
'
 = 'EventUpdateRequest                          Node: Node: )import 'package:freezed_annotation/freezed_annotation.dart';'
'
 = 'formal_parameter) = ''
String? paymentIntentIdNode: '
                 = 'type_identifier           = '                StringStringNode: Node: '
=import_specification = '                =Node:  = ''
import 'package:freezed_annotation/freezed_annotation.dart';          '
Node: ,        '
type_identifierNode:                 type_identifierNode:  = ', = ' = '_StateLoading,'
Node: Node: formal_parameter_list       = 'Node: ({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  });'
 = 'import            , = 'Node: import(String'
 = '                ;'
 = 'Node: (type_identifier'
'
'
 = ''
dynamic      '
Node:                 declarationNode:                 >             = 'Node:                 optional_formal_parameters> = 'Node: {
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }Node: '
type_identifier         = '              dynamicNode: '
{ = 'nullable_type'
const factory PaymentState.success(Payment payment) = _StateSuccess               = 'Node: ?identifier'
 = '                {Node: Node: '
>configurable_uri = ' = ''
>'package:freezed_annotation/freezed_annotation.dart' = ''
                  '
                      Node: Node:                         ?Node:  = 'jsonNode: '
?formal_parameter             = 'Node: identifier'
Node: )                String? title = ''
)Node: '
redirecting_factory_constructor_signatureidentifier      uriNode:  = ' = '                function_body = 'json = ''package:freezed_annotation/freezed_annotation.dart'=>
      _$EventCreateRequestFromJson(json);'
'
const factory PaymentState.success(Payment payment) = _StateSuccess = '            '
Node: Node: string_literal = 'type_identifier         = 'paymentIntentId'package:freezed_annotation/freezed_annotation.dart'String'
'
'
Node:                                         Node: Node: ,Node:  = ''
),=>'
                                        ' = ' = ' = ')''
Node: '
=>}              '
Node:         Node: 'Node: Node:  = 'identifier' = ' = ''
_$EventCreateRequestFromJson        '
const_builtinNode: nullable_type}       = 'Node: constfunction_body         = ''
Node: ;selector = '            ; = ''
'
  Node:            = 'Node: =>
      _$EventCreateRequestFromJson(json);factory? = '(json)'
part_directive'
        Node: Node:                   )=>Node:  = '?=>'
'
 = ' = ')          part 'user.freezed.dart'; = ''
factory        '
Node:                     ?Node: Node: identifieridentifierNode:  = ' = 'PaymentState'
'
'
              _$EventCreateRequestFromJsonargument_partNode: '
 = 'part(json)=         = 'Node:                 ='
Node: selector            .Node:  = 'argumentsNode: '
 = 'identifier = '(json) = '.title = ''
part          '
'
          Node:     type_identifier'
           = '              Node: Node: identifier = 'Node: _Success(json)'
,'
success      '
              Node: Node: argument_part( = 'uri(json) = ''
 = ',('
                                    Node: Node:  = 'argumentsNode: 'user.freezed.dart'formal_parameter_list = ' = ''
(Payment payment)'
'
Node: ;            formal_parameter = ' = 'Node: String? description('
 = '(json)                '
Node: type_identifier = '(;'
String              '
Node:             '
Node: (formal_parameter       = 'Node: (declaration = ' = 'Payment paymentconst factory PaymentResult.failed({
    required String errorMessage,
  }) = _Failed'
'
'
                      Node:               redirecting_factory_constructor_signatureNode:  = 'type_identifierconst factory PaymentResult.failed({
    required String errorMessage,
  }) = _Failed = '      Node: '
argument                        Node: Node: argument                Payment = ''
Node: jsonstring_literal = ''
jsonNode: '
nullable_type               = 'const_builtin? = '                '
const                  Node: identifier'
                Node: Node:           identifier = ' = 'identifierNode:  = '?json = ''user.freezed.dart'payment = ''
?json'
            Node:                 )Node:  = ''
)'
'
factoryNode: '
identifier = '           = 'factoryNode: description                      =Node: Node: ''
 = '                        Node: ')'
 = ')'
 = ''
=                      )'
Node: Node: ;,          Node:  = 'identifier, = ''
Node:  = '                      Node: Node: )'formal_parameter = ' = 'type_identifier = 'PaymentResult'
''
        DateTime? startDateNode:  = ';'
;_StateSuccess    '
Node: '
 = '          '
Node: ;.       = ' = '      ;
=== Complete AST for source ===
;.Node: '
;                 = 'Node: ;Node:   '
type_identifierprogram           = 'Node: DateTimeNode: identifierNode:  = ' = 'failedpart_directiveimport 'package:freezed_annotation/freezed_annotation.dart';

part 'user.freezed.dart';
part 'user.g.dart';

@freezed
class AppUser with _$AppUser {
  const factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUser;

  factory AppUser.fromJson(Map<String, dynamic> json) =>
      _$AppUserFromJson(json);
}

@freezed
class UserProfile with _$UserProfile {
  const factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfile;

  factory UserProfile.fromJson(Map<String, dynamic> json) =>
      _$UserProfileFromJson(json);
}

@freezed
class AuthState with _$AuthState {
  const factory AuthState.initial() = _Initial;
  const factory AuthState.loading() = _Loading;
  const factory AuthState.authenticated(AppUser user) = _Authenticated;
  const factory AuthState.unauthenticated() = _Unauthenticated;
  const factory AuthState.error(String message) = _Error;
}
'
'
 = 'part 'user.g.dart';'
          '
Node:       }formal_parameter_listNode:  = 'declaration                 = 'Node: '
 = 'const factory PaymentState.failed(String errorMessage) = _StateFailednullable_type      ({
    required String errorMessage,
  })  '
}'
'
            '
Node: Node: Node: redirecting_factory_constructor_signatureimport_or_export = ' = '            } = ' = 'Node: Node: }  '
Node: class_definition?  ('
Node:  = 'import 'package:freezed_annotation/freezed_annotation.dart';                  partNode:  = '? = '( = 'const factory PaymentState.failed(String errorMessage) = _StateFailed?'
part          '
'
class_definition                             = 'Node: '
Node: '
@freezed
class EventUpdateRequest with _$EventUpdateRequest {
  const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest;

  factory EventUpdateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventUpdateRequestFromJson(json);
}identifier     = 'Node: startDateNode: @freezed
class EventUpdateRequest with _$EventUpdateRequest {
  const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest;

  factory EventUpdateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventUpdateRequestFromJson(json);
}optional_formal_parameters'
'
uri     = ''
const_builtin{
    required String errorMessage,
  }Node:               '
                  Node:     Node:  = ', = ' = 'library_import,const'
Node: '
'user.g.dart' = '              annotation{ = 'Node: @freezedformal_parameterNode: '
                Node: factory'
 = 'import 'package:freezed_annotation/freezed_annotation.dart';Node: {@'
 = '       = ''
annotationDateTime? endDateNode: factory'
 = 'string_literal                    Node: '
@'
required = ' = '@freezedNode:  = '                                Node: required'
identifierNode: Node:  = 'type_identifier'
identifier'user.g.dart'      import_specification'
 = '        PaymentStateNode:  = 'Node: 'import 'package:freezed_annotation/freezed_annotation.dart'; = 'DateTime' = ''
@'
 = '          @'
'
                Node:                     '
Node: Node: formal_parameteridentifier        freezedNode: '
.    'Node:  = 'class = ' = ''class = ''
String errorMessage            '
Node:  = 'Node: Node: identifier. = ''
EventUpdateRequest          nullable_typeimportNode:  = ''
                importidentifier     = ''
Node:         ;Node:  = 'freezed;'
Node:   '
configurable_uri? = 'type_identifierNode:  = 'class_definition = ' = 'failed'
'
'package:freezed_annotation/freezed_annotation.dart'String'
'
'
          @freezed
class AppUser with _$AppUser {
  const factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUser;

  factory AppUser.fromJson(Map<String, dynamic> json) =>
      _$AppUserFromJson(json);
}Node:               '
Node:     superclassNode:                 annotation = 'formal_parameter_list = '                      with _$EventUpdateRequestNode:  = '@freezedidentifier(String errorMessage)Node: '
Node: Node: ? = ' = 'errorMessage?'
'
'
class                uri'
                        Node: Node:  = 'Node: mixinsidentifierNode:               @(Node:  = ' = ' = ','package:freezed_annotation/freezed_annotation.dart'( = ''
with _$EventUpdateRequest = ''
             = ''
,Node: classformal_parameter@ = ''
String errorMessage        '
'
    Node: endDate      Node: '
            withNode:                = 'identifierNode:  = 'withstring_literal}'
Node:  = '              '
'package:freezed_annotation/freezed_annotation.dart' = 'Node: '
identifierEventUpdateRequest = ''
                          Node: }              '
Node:             superclassNode: freezedNode: )'Node: '
, = ' = '),type_identifier = '     = 'type_identifierNode:  = ''Stringclass'
 = '          classNode:  = ''
=              '
'
with _$EventUpdateRequest'
'
_$EventUpdateRequest                    '
Node: Node:               Node:     'Node:  = '     = 'mixinsidentifierformal_parameter = ' = 'with _$EventUpdateRequestString? location'
'Node: Node:  = 'identifierclass_body = ' = ''
{
  const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest;

  factory EventUpdateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventUpdateRequestFromJson(json);
}                '
Node: =AppUser                '
Node: '
;Node:  = 'errorMessage;type_identifier'
'
 = '        '
                      withNode:     )Node:  = 'Node:  = 'Node: type_identifierStringsuperclass'
 = '                with _$AppUserNode: '
 = '      part_directiveNode: _FailedNode: mixins'
 = 'with = 'part 'user.freezed.dart';)nullable_type'
'
{        with _$AppUser    Node:        = ''
? = ''
'
Node: Node: part;         = ' = 'part          '
{Node: type_identifierwith'
 = ' = '      _$EventUpdateRequest                  Node: with;Node: Node:     declaration'
'
?Node: '
 = '        uri      ?='
    Node: Node:  = ' = 'declaration= = ''
const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest                 = 'Node: type_identifieridentifierconst factory PaymentResult.cancelled() = _CancelledNode:           class_body'
'user.freezed.dart' = ''
      '
 = '{
  const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest;

  factory EventUpdateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventUpdateRequestFromJson(json);
}'
      Node: { = '{'
_$AppUserNode:       Node: Node: type_identifier        '
 = '        locationNode:     '
redirecting_factory_constructor_signaturestring_literaldeclaration = '              'user.freezed.dart' = 'Node: const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest'
'
 = 'Node: _StateFailedredirecting_factory_constructor_signature'
class_body = ' = 'Node: const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest = ',                 = 'const factory PaymentResult.cancelled() = _Cancelled,      '
'
Node: '
                    Node: Node: const_builtin{
  const factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUser;

  factory AppUser.fromJson(Map<String, dynamic> json) =>
      _$AppUserFromJson(json);
} = ''
const              Node: Node: 'Node:  = 'formal_parameterredirecting_factory_constructor_signature; = ''
const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest = '          '
;Node:  = '          '
            Node: Node: {} = ' = '{}'
'
'const_builtinint? capacityfactoryNode: === End AST ===
 = ''
              '
Node: ' = '' = 'const_builtinfactory'
'
 = '                Node: const    
=== Processing class: constPayment          '
declarationNode: Node: Node: '
type_identifier ===
 = ';           = 'Node: ;factory'
 = '  factoryNode: '
 = '          intidentifier'
Node:  = '                          Node: Node: part_directivenullable_typeidentifierPaymentResultfactory = ''
 = '          ?part 'user.g.dart';Node: '
const factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUser                  '
 = 'Node: '
factory. = '    ?'
 = 'Node:  = '          .part'
 = 'EventUpdateRequest?'
Node:         '
          identifierNode: partidentifier = 'EventUpdateRequest'
                              Node: Node: Node: '
uriNode:  = '           = 'Node: cancelledformal_parameter_list'
 = 'redirecting_factory_constructor_signature({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  })           = ''
Node: const factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUser            formal_parameter_list'
 = 'formal_parameter_listidentifier() = 'Node: '
(             = 'Node: capacity({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  })
=== Processing class:           'user.g.dart' = ''
'
('
'
PaymentCreateRequest              Node: Node:             const_builtin, = ' ===
const = ''
Node:                 optional_formal_parametersNode:  = '
=== Processing class: Node: {
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  },factory'
'
 = 'PaymentResult(              factoryNode:             {'
 = '               = ' ===
Node: string_literalformal_parameterNode:  = ' = '(int? price'user.g.dart' = ''
'
(                        '
Node: {            Node:           type_identifierNode:  = 'Node: intidentifier'
optional_formal_parameters( = ''
AppUser = ''
            {
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }          'Node:  = 'formal_parameter_list''
'
                Node:  = ''
({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  })Node: 
=== Processing class:               PaymentStatenullable_type ===
'
              Node:             ) = 'Node:  = '?        formal_parameterNode:  = '{String? title()'
 = ''
                 = 'Node: '
'{ = ''
''
                                    Node: Node: Node: ;formal_parameter? = ' = '(String? title = 'Node: ?'
;                type_identifierNode:           '
'
Node:             =Node:                 optional_formal_parametersNode:  = 'type_identifier'
= = '  '
 = 'StringString           = ''
{
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }Node: type_identifier'
Node:                                 Node: Node: nullable_typenullable_type = ' = 'class_definition'
?              identifierNode: '
{ = ' = '                   = 'Node: {? = 'price@freezed
class AppUser with _$AppUser {
  const factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUser;

  factory AppUser.fromJson(Map<String, dynamic> json) =>
      _$AppUserFromJson(json);
}?_Cancelled'
'
                  '
Node:  = '??'
      Node: '
'
;                 = '    ;Node:               '
identifier = ' = '?Node: '
title              Node: '
annotation                      Node:  = '              required@freezedNode:  = ''
,, = 'Node: ,identifier'
                    required = 'Node:  = 'Node: @title}'
 = ''
 = 'Node:               }Node: formal_parameter'
formal_parameter   = 'Node: @class_definitionString id'
,                    '
'
 = '                              Node: @freezed
class PaymentState with _$PaymentState {
  const factory PaymentState.initial() = _StateInitial;
  const factory PaymentState.loading() = _StateLoading;
  const factory PaymentState.success(Payment payment) = _StateSuccess;
  const factory PaymentState.failed(String errorMessage) = _StateFailed;
}formal_parameterNode: type_identifierNode: '
identifier = ' = 'String? description    '
freezedNode:                 '
 = 'Node:     Node: Node: type_identifierannotationclass = ' = ' = 'classString? imageUrl'
String'
     = '                ,Node:  = '@freezedtype_identifierString = ''
String'
'
                Node:                 Node: Node: identifier,                '
Node: nullable_type              '
Node: identifier      formal_parameterNode:  = '@ = ' = 'String? descriptionid = ''
'
AppUser? = ''
@nullable_type'
 = '?                      Node: Node: identifiertype_identifier'
              '
Node:     , = 'Node: Stringsuperclass = '                   = 'Node: with _$AppUser                   = ''
freezedNode:                 '
?Node:      = 'nullable_type?Node: '
class                 = 'Node:  = 'identifier, = '?'
 = 'imageUrl?              '
Node: ?class'
                requiredNode:  = 'identifier'
 = ''
description'
'
                        requiredNode: '
Node: ?mixins     = ' = 'Node: with _$AppUseridentifier               = ''
                      Node: Node: ,Node:  = ',, = ''
,?PaymentState'
'
              withNode:  = '                  formal_parameter'
 = 'withDateTime? startDate                Node: '
superclass               = 'Node: Node: with _$PaymentStateidentifier'
 = '      descriptionNode: formal_parameter'
mixins'
Node:  = '                formal_parameterNode:  = '        String displayNametype_identifier'
               = '                List<String>? tagsNode: '
type_identifierNode:                  = 'Node: Stringtype_identifier = ''
 = 'DateTimeList'
'
,                                 = 'Node: Node: type_argumentsNode:  = 'with _$PaymentState,nullable_typetype_identifier = ''
? = ''
                                _$AppUser                '
'
Node: <String>        '
Node: withidentifier     = 'Node: displayName = ''
Node: Node:                   class_body?Node:  = 'with = 'formal_parameter               = '<DateTime? startDateNode: '
,'
 = '?{
  const factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUser;

  factory AppUser.fromJson(Map<String, dynamic> json) =>
      _$AppUserFromJson(json);
}'
 = '                <Node: '
'
        ,                      identifierNode:                   Node:  = 'Node: startDate{'
 = 'type_identifier{type_identifier'
 = 'Node: '
_$PaymentStatetype_identifier              '
Node:  = 'formal_parameter = '              DateTimeNode: ,          '
Node:  = 'declarationString? email = 'Stringconst factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUser'
                '
 = '        ,Node: Node: Node:                 nullable_type'
'
 = '                                Node: Node: >class_body?Node: redirecting_factory_constructor_signatureformal_parameter = ' = 'const factory AppUser({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _AppUser'
'
DateTime? endDate          '
 = '                > = ''
{
  const factory PaymentState.initial() = _StateInitial;
  const factory PaymentState.loading() = _StateLoading;
  const factory PaymentState.success(Payment payment) = _StateSuccess;
  const factory PaymentState.failed(String errorMessage) = _StateFailed;
}Node: '
Node:                                   type_identifierNode: Node: ?nullable_type       = 'Node:  = 'type_identifier{const_builtin = ' = ' = 'String{ = '?DateTime'
'
'
                '
const                      Node: Node: '
declarationnullable_type = '?const factory PaymentState.initial() = _StateInitial'
Node: '
identifier = '                   = 'Node:                 ? = 'startDate?'
                  ?Node:               Node: factory'
Node:  = '                factoryredirecting_factory_constructor_signatureNode: '
identifier = ' = ''
tagsconst factory PaymentState.initial() = _StateInitial                  '
          '
Node:               identifier           = 'nullable_typeNode: AppUser,'
 = ' = ',Node: Node: Node: ,?const_builtin = ' = '          ?'
Node:  = '?'
              formal_parameter_listNode: const                  formal_parameter'
Node:  = '          DateTime? endDate'
?,Node: '
factory = ''
 = ' = 'factory                ?                Node: Node: type_identifieridentifier              ({
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = ''
email = ''
'
            '
Node: Node:               formal_parameterNode:  = ',DateTime = '('
,                '
                Node: String? status              '
identifierNode:            = 'formal_parameter( = ''
Node:  = '                            Node: Node: optional_formal_parametersidentifier = ' = 'Node: PaymentStateString? photoURL'
type_identifiernullable_type           = 'Node:  = '.String = ''
.endDate'
                          '
Node: Node: identifier{
    required String id,
    required String displayName,
    String? email,
    String? photoURL,
    String? statusMessage,
    @Default('line') String provider,
    @Default(false) bool isEmailVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }               = '?initialnullable_type'
'
                            '
Node: Node: formal_parameter_list? = ' = '()'
                Node:               Node: Node:  = '{?,'
? = ''
{                Node: identifiertype_identifier = ' = ''
,'
String                              '
Node:                 Node: Node:  = 'nullable_type'
endDate              ?Node:  = '?(              '
requiredNode:                = ''
 = 'formal_parameter = ' = 'Node: String? location,? = ''
'
,(                  '
'
                Node:                           ?Node: requiredNode:                 '
)Node:               type_identifierNode:  = 'formal_parameterString = ''
Node: identifier                 = ' = 'statusNode: '
 = '              formal_parameternullable_type? = ' = ')String id'
Node:           '
?Node: String? location                '
Node:                   '
,                Node: Node:  = 'identifier=? = ' = ',=? = ''
'
'
photoURL'
'
                        type_identifier                              Node: Node: Node: type_identifier                 = 'Node: Node: ,String = ' = ''
,type_identifier'
                 = 'Node:               _StateInitialNode: identifierformal_parameter = ' = 'String}identifier'
'
location = 'String? statusMessageid                '
'
                                     = 'Node: Node: ,type_identifier = ' = 'Node: Stringnullable_type} = ''
Node: '
;,            ? = 'Node: ;)'
'
'
                              '
              Node:                   ,Node:  = '? = ', = ')?Node: '
      '
                Node: Node: declarationformal_parameter              '
Node: nullable_type = ' = ' = '?const factory PaymentState.loading() = _StateLoading'
'
                  identifierNode:         int? capacityNode:  = '?          locationrequired'
'
 = '                Node: required              Node:  = 'Node: ?'
'
Node:               type_identifier, = 'redirecting_factory_constructor_signature = 'Node: ,formal_parameter'
int                               = ' = ''
=
=== Complete AST for source ===
Node: String displayNameconst factory PaymentState.loading() = _StateLoadingNode: Node: '
identifierprogram'
 = ' = '                                Node:  = 'type_identifierNode:           =nullable_typeNode: formal_parameterconst_builtin = ' = 'statusMessage?'
 = ' = 'const'
'
import 'package:freezed_annotation/freezed_annotation.dart';

part 'payment.freezed.dart';
part 'payment.g.dart';

@freezed
class Payment with _$Payment {
  const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Payment;

  factory Payment.fromJson(Map<String, dynamic> json) =>
      _$PaymentFromJson(json);
}

@freezed
class PaymentCreateRequest with _$PaymentCreateRequest {
  const factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequest;

  factory PaymentCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$PaymentCreateRequestFromJson(json);
}

@freezed
class PaymentResult with _$PaymentResult {
  const factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _Success;

  const factory PaymentResult.failed({
    required String errorMessage,
  }) = _Failed;

  const factory PaymentResult.cancelled() = _Cancelled;
}

@freezed
class PaymentState with _$PaymentState {
  const factory PaymentState.initial() = _StateInitial;
  const factory PaymentState.loading() = _StateLoading;
  const factory PaymentState.success(Payment payment) = _StateSuccess;
  const factory PaymentState.failed(String errorMessage) = _StateFailed;
}
          '
Node: String  type_identifier              int? capacity                  Node: '
 = 'Node: _EventUpdateRequestimport_or_export'
 = '          import 'package:freezed_annotation/freezed_annotation.dart';Node: '
                '
,factory      Node: '
Node:                 Node:  = ' = 'identifierfactory,Node: '
?'
 = '; = '?displayName                        '
type_identifierNode: Node:  = 'identifier = '    annotation                 = ';@Default('line')int = 'Node: '
'
'
                library_importNode:       '
PaymentStateidentifierNode:  = ' = '              Node: @capacity'
method_signatureNode:  = '                 = '          Node: factory EventUpdateRequest.fromJson(Map<String, dynamic> json)import 'package:freezed_annotation/freezed_annotation.dart';'
'
'
Node: @.,               = ' = '      '
Node: nullable_type                ,        '
Node:  = '              factory_constructor_signature.Node: Node: identifierNode: '
import_specificationformal_parameter = ' = 'Default,? = 'factory EventUpdateRequest.fromJson(Map<String, dynamic> json)           = ''
'
                 = 'Node: ,arguments'
                  String? emailimport 'package:freezed_annotation/freezed_annotation.dart';'
Node: '
Node: '
?         = 'Node:                  = '              identifier? = 'import('line') = 'loadingNode: Node: type_identifierformal_parameter = ''
          '
import                            '
Node:                 (Node: StringNode: '
formal_parameter_listidentifier = '                (Node: '
 = ''
                  capacityfactoryNode:  = 'nullable_typeNode: int? price = ''
 = ' = '()        ?Node: configurable_uri'
              '
Node: argument, = ' = 'factory,'
'
                                          Node:  = ''line''
(                  '
Node: Node: Node: formal_parameter = 'type_identifier = ' = '          ?'package:freezed_annotation/freezed_annotation.dart'                     = 'Node: int(?'
int? price          '
identifier'
'
'
 = '                Node: Node: string_literalNode:                                 type_identifier            uri = 'Node: EventUpdateRequestNode: '
 = 'identifierNode:  = ')'line' = 'int'
'
           = '                email                      )'package:freezed_annotation/freezed_annotation.dart'Node: Node: nullable_type'
'
nullable_type.'
 = '            Node:  = '                        Node: Node: .''
Node: ?=string_literal'
 = '                  Node: ?,'
           = ' = ' = ', = 'Node: '?'package:freezed_annotation/freezed_annotation.dart''
=              '
Node:                   formal_parameterNode: '
                                Node: ? = 'Node:  = ''
?''
 = ' = 'type_identifier                identifier'? = '               = ''
fromJsonNode: '
identifierString? photoURL'
                          Node:                   Node: identifierNode: formal_parameter_list)Node: '
 = ''_StateLoading = ' = ')''
price = ''
'
(Map<String, dynamic> json)      '
Node:             ;Node:  = '                 = '              '
Node: ;,                            Node: price(Node:  = ''Node: '
,'
formal_parameter       = ' = '              type_identifierNode: (, = ''
'
String provider = ' = 'Node: Stringdeclaration             = 'Node: ,              '
'
'Node: formal_parameterformal_parameter               = ' = ''
                Node: const factory PaymentState.success(Payment payment) = _StateSuccessMap<String, dynamic> jsonformal_parameter'
String? imageUrl = '        '
Node: String? imageUrl              '
Node:                 type_identifiertype_identifier'
 = 'Node: Node: '
 = '                                ;type_identifierMap        Node:  = 'Node: Node: Stringredirecting_factory_constructor_signature'
 = '                type_identifierStringNode:  = 'identifiernullable_type = 'String'
const factory PaymentState.success(Payment payment) = _StateSuccess'
 = '                '
?Node: '
;nullable_type'
 = ' = '                    Node: '
providerNode: ?                 = 'Node: ?part_directive                        '
Node: type_arguments              ?nullable_type'
 = 'Node: '
Node:  = 'const_builtin, = '                                  const = '?Node: part 'payment.freezed.dart';'
'
Node:  = '          ?Node:  = 'factory? = '    '
identifierfactory                  <String, dynamic>,'
 = ''
                              Node: '
'
photoURLNode: identifierNode: partannotation = ' = 'part = '                Node: '
          imageUrl'
'
Node: @Default(false)?                  Node: '
identifierNode:  = '<? = ''
 = '<Node:                               uriNode:  = ''
Node: ,PaymentState                'payment.freezed.dart',                '
 = '@, = ''
 = '      ,Node: Node: '
type_identifier               = 'Node: @'
'
                        StringNode: '
identifier                Node: Node: Node:                 .Node:  = 'identifierformal_parameterstring_literal. = ','
 = '           = 'Node: List<String>? tagsidentifier, = ''
'
successformal_parameter = 'DefaultimageUrl = '                 = ''
Node:                 '
Node: '
type_identifier               = 'Node: List,'
 = ''payment.freezed.dart',                '
String? statusMessage                          Node: Node: arguments'
type_identifierformal_parameter_list         = 'Node:                = '''
 = 'dynamic'Node: (Payment payment)'
'
 = 'Node:                         Node: formal_parameterNode: >' = '(false)type_arguments = ''
 = '>                '
Node:               type_identifierNode:  = 'identifier            ' = ''
'
json<String>                   = '    List<String>? tags'
'
StringNode: Node: '
(                            Node: Node: '
                  Node: ) = '(( = ' = ')('
'
Node:                   <Node:  = '                '
<Node: '
                              nullable_typetype_identifier;argumentNode: Node:  = 'type_identifierfalse = ' = 'formal_parameterString;'
      '
                   = 'Node: Node: function_body> = ' = '? = ''
List = 'Payment payment'
                    '
=>
      _$EventUpdateRequestFromJson(json);>                    '
Node: '
        falseNode: '
Node:                 Node:                 =>? = ' = '              ?part_directiveNode:  = ' = 'nullable_typefalse = ''
?                      =>Node: part 'payment.g.dart';type_arguments'
Node: '
    falseNode:                   '
Node: '
                type_identifierNode:          = 'Node: PaymentNode:  = 'part = ' = '<String>false'
identifier? = 'partstatusMessage'
identifier = ''
?                  '
'
                                 = 'Node: '
,_$EventUpdateRequestFromJson = '                ,                  Node: Node: '
'
Node:                       uri<)Node: Node:  = '<Node: Node: '
identifieridentifier = '                  tagsannotation = 'selector = ''
Node:               Node:  = 'payment = ' = ''payment.g.dart'(json)'
)'
type_identifier,@Default('line') = '            '
String      '
 = 'Node: '
),               = '          )Node: '
'
'
Node: Node: string_literal                formal_parameter                  Node:  = '               = '@'payment.g.dart'argument_part = ''
@ = '          bool isEmailVerified        (json)'
'
Node: Node: '
'                 = 'Node: '>            '
Node: Node: type_identifierarguments=                 = ' = ' = '        (json)Node: Node: > = ''
=                '
bool'Node: formal_parameter = ''
' = ''
String? statusNode: '
    identifier'
Node:                               Node: ;( = ' = '          Node:                 ; = 'type_identifierDefaultnullable_type = ''
String'
'
(                Node: Node: '
   = 'identifierNode: Node:  = 'class_definitionisEmailVerified = '                type_identifier?               = ''
_StateSuccess@freezed
class Payment with _$Payment {
  const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Payment;

  factory Payment.fromJson(Map<String, dynamic> json) =>
      _$PaymentFromJson(json);
}'
Node: Node: '
argumentsnullable_type = '       = 'Node: '
;                   = 'Node: ;('line')'
'
      ?                      Node: argumentNode: ?'
 = '              jsonNode: '
declaration( = 'annotation                 = 'Node: @freezed = 'identifierconst factory PaymentState.failed(String errorMessage) = _StateFailed = '                  Node: Node: json?'
'
'
              ?,Node: '
 = ' = '(        '
?                  '
)Node:                  = 'Node:                 ,redirecting_factory_constructor_signature'
identifier      Node:  = 'Node: status@argument = ' = '@ = ''
Node: )      identifierNode:  = ' = ''line''
const factory PaymentState.failed(String errorMessage) = _StateFailed        '
Node: identifier;          '
'
               = ' = '              Node: freezedtags'
Node: ;    '
Node: Node: formal_parameter,              class                     = 'Node: classstring_literal'
 = 'const_builtin'
 = ''line','
'
                                    Node:  = 'Node: 'DateTime? createdAt = ', = 'Node: '          '
 = 'const'
},                '
          Node: Node: type_identifier = ' = '}DateTimeNode: '
Node: '
}'
                       = 'factory} = ''
factory  identifierNode: Node:              = '                Node: class_definitionPayment)'
 = ' = 'Node:               '
)'@freezed
class EventListState with _$EventListState {
  const factory EventListState.initial() = _Initial;
  const factory EventListState.loading() = _Loading;
  const factory EventListState.loaded(List<Event> events) = _Loaded;
  const factory EventListState.error(String message) = _Error;
}nullable_type = ''
 = ''    '
Node: '
                  annotationNode: ?)'
    Node:                   Node: Node:           ?Node: identifier = '           = 'Node: @freezed=?'
'
superclass       = 'Node:  = '                 = 'Node: formal_parameteridentifierPaymentState)'
 = 'with _$Payment = ''
 = '='
String? status@       = '              @Node: Node: '
          '
formal_parametercreatedAt = ''
String provider'
'
              mixinsNode:                 ,          Node:  = 'Node: .with _$Payment = ''
       = '                Node: .type_identifierNode: '
 = 'type_identifier        type_identifierNode:  = ',Node: '
with_EventUpdateRequest               = 'Node:  = 'withformal_parameterStringString          '
identifierNode:          = 'Node: identifier'
 = ''
'
                failedfreezed'
      '
 = 'Node: type_identifierNode:  = 'identifier_$Payment = ''
provider          '
Node:                     DateTime? updatedAtNode: Node:               class; = '    classNode: '
class_bodyformal_parameter_list = ''
;nullable_type                '
Node:      = ' = 'Node: {
  const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Payment;

  factory Payment.fromJson(Map<String, dynamic> json) =>
      _$PaymentFromJson(json);
}?identifier,'
 = 'Node:  = ' = 'EventListState(String errorMessage)type_identifier'
'
 = '            DateTime                              Node: '
Node: ,'
'
(method_signatureNode: Node:               ?    { = ' = 'Node: Node:  = 'annotation?{'
'
                (Node:  = ''
factory EventUpdateRequest.fromJson(Map<String, dynamic> json)identifiersuperclass = ' = '                      @Default(false)Node: Node: '
declarationnullable_type                 = '            const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _PaymentNode: '
formal_parameterstatusNode:  = ''
? = ' = '        @'
 = 'with _$EventListStateString errorMessage        Node: '
Node: @redirecting_factory_constructor_signature'
'
                  Node:                  = 'Node:               identifierfactory_constructor_signature = 'const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Payment?Default = ''
?                 = 'Node:               '
Node: '
'
                      Node: argumentsfactory EventUpdateRequest.fromJson(Map<String, dynamic> json) = ''
(false)          Node: Node: identifierconst_builtin = 'type_identifier           = 'updatedAtStringNode: Node: '
'
 = '              constNode: '
mixinsfactory,           = ' = ',factory = ''
              '
Node: '
                  ,identifierwith _$EventListState = ',                        Node: Node: (Node: factory'
 = '}Node:          = ' = 'Node: errorMessagewith}factory'
 = 'identifier'
'
'
 = '          with                          Node:              = 'Node: ()Node:  = 'EventUpdateRequest))'
 = ''
          )'
'
        '
          identifierNode:           Node: =Node:  = '}Node:                    = 'Node: }.Node: ='
 = ' = 'type_identifier.Payment = '=_$EventListState'
'
'
argument     = ' = '='
'
falseNode:                     '
                      class_bodyNode:           )Node:                     Node:  = 'formal_parameter_list{
  const factory EventListState.initial() = _Initial;
  const factory EventListState.loading() = _Loading;
  const factory EventListState.loaded(List<Event> events) = _Loaded;
  const factory EventListState.error(String message) = _Error;
} = ''
type_identifierNode: Node:       Node: false = 'Node:  = '){'
 = '({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }){ = ''
type_identifier      falseNode: _EventUpdateRequest          '
'
 = ''
_StateFailed      '
Node:                       ;      Node: Node:             identifierNode:  = ' = '(falseNode: fromJson;'
;= = '          (declaration'
Node: '
             = 'Node:  = '       = 'Node: falsemethod_signatureformal_parameter_list'
 = '                  (Map<String, dynamic> json) = 'Node: ; = ''
optional_formal_parameters=             = 'Node: '
({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  } = '          (Node: '
type_identifierconst factory EventListState.initial() = _Initialfactory EventUpdateRequest.fromJson(Map<String, dynamic> json)'
) = '            '
_AppUserNode:         formal_parameter = '      Node: '
factory_constructor_signatureNode: '
'
} = ')      '
Node:                        = 'Map<String, dynamic> json}Node: '
 = 'redirecting_factory_constructor_signature;               = ' = ';Node: const factory EventListState.initial() = _Initial{'
 = ''
      Node: {=== End AST ===
'
formal_parameter          
=== Processing class: Node: Paymentconst_builtinfactory EventUpdateRequest.fromJson(Map<String, dynamic> json) = ' = 'constNode: bool isEmailVerified               ===
'
method_signature'
Node:  = ''
              factory AppUser.fromJson(Map<String, dynamic> json)Node: '
requiredtype_identifier           = 'Node:            = '        required
=== Processing class: '
MapPaymentCreateRequest               ===
Node: Node: '
'
formal_parameterfactory               = ' = 'String id                '
Node: Node:                 type_identifierNode:  = 'type_identifier = 'factoryboolNode: factory_constructor_signature'
type_arguments = ' = 'factory AppUser.fromJson(Map<String, dynamic> json)                '
<String, dynamic>factory'
                          Node: Node: factory'
 = 'StringfactoryNode: '
 = '                    Node: Node: '
identifieridentifier
=== Processing class:  = 'factory = '<PaymentResult = ' ===
<identifier
=== Processing class: '
isEmailVerifiedAppUser = 'PaymentState'
'
                EventUpdateRequest                          '
 ===
          Node: Node: Node: .               = ''
.Node:           type_identifieridentifierNode: Node: identifier = ' = '.EventListStateid'
 = ''
'
, = ' = '          ,Node: '
.                            .Node: Node: ,'
String = ''
,                Node: formal_parameter'
 = '          DateTime? createdAtNode:           '
              identifier = ',Node:  = '.fromJson'
 = 'required                Node: Node: identifier          type_identifier = ' = 'Node: fromJson = ','
'
required          '
                Node: '
formal_parameter_list               = 'Node: identifierformal_parameterDateTime = ' = 'String eventId'
initial'
'
(Map<String, dynamic> json)                Node:           type_identifier                           = 'Node: Node: type_identifierNode: Node: formal_parameter_list'
 = 'formal_parameter_listnullable_type = '             = ' = 'Node: ?String'
((Map<String, dynamic> json) = ''
            dynamic'
                  '
Node:                                 (()(Node: '
>Node: '
 = '?>            '
Node:               Node: Node: identifier = 'identifier? = ' = 'eventId = 'json'
'
(                        Node:  = '              (('
'
'
)                            Node:  = ')Node:             identifierNode: Node:  = 'formal_parametercreatedAt = ''
formal_parameterMap<String, dynamic> json'
'
 = '              ,              Node: Node: Node: type_identifier      Map<String, dynamic> json = 'Node: Mapfunction_body'
'
,              )              Node:  = 'type_arguments) = ''
 = 'Node: ,=>
      _$EventUpdateRequestFromJson(json); = ''
                  <String, dynamic>Node: '
'
=>Node:                = 'Node: => = 'required,type_identifier='
 = ' = '              =Node: '
 = 'Map'
          formal_parameterNode: '
 = 'type_identifier                        Node:  = '<_Initial = ''
Node: DateTime? updatedAt              required      '
Node: Node:               identifier'
Node: <                 = 'Node: type_argumentstype_identifier_$EventUpdateRequestFromJson'
'
;                         = 'Node:  = 'formal_parameter = 'Node: ;<String, dynamic>type_identifier = ' = 'String userIdString'
'
                                Node: Node: type_identifier, = ' = 'String,'
'
                                Node: Node: identifiertype_identifier = ' = 'DateTime'
userIddynamicselector'
'
 = '                      (json)Node: '
>          Node: '
 = ''
                Node: argument_partdeclaration                 = ' = 'Node:               Node: Node: (json),> = ''
              Node: identifier'
 = ',json            '
Node:             argumentsNode:  = ')(json)<const factory EventListState.loading() = _Loading = ' = ''
'
nullable_type               = '?'
<                          '
Node: (Node:  = ')?( = 'Node: ?redirecting_factory_constructor_signature'
 = '                const factory EventListState.loading() = _Loading'
                            '
Node: argument                 = 'Node: jsontype_identifier'
'
          '
Node: Node: Node: identifierrequired = '                      const_builtinNode:  = ' = ' = 'function_bodyconstStringrequired'
updatedAt = ''
=>
      _$AppUserFromJson(json);              '
Node: Node: '
identifier        '
Node:                           ,Node: => = ' = '              jsonNode: ,'
formal_parameter = ' = '=>              '
int amount        Node: Node: )'
,Node:  = ''
 = 'factoryidentifier = ' = 'factory,_$AppUserFromJson)'
                      '
Node: '
          selector                 = 'Node: (json)identifier'
'
 = '                  Node: Node: Node: argument_parttype_identifier; = ' = ' = '                ;dynamicNode: '
'
type_identifier                      Node:  = 'EventListState(json)intNode: }'
}'
                '
                      Node: Node: > = ' = ' = 'Node: }}Node: arguments'
.             = ' = '(json)Node: '
'
.>'
identifier           = 'Node: amountidentifier'
)              '
 = '               = 'loadingNode: '
            )Node:               formal_parameter_listNode:  = '()Node: '
'
(,Node:  = 'class_definition( = ''
 = 'identifier               = '          @freezed
class EventListState with _$EventListState {
  const factory EventListState.initial() = _Initial;
  const factory EventListState.loading() = _Loading;
  const factory EventListState.loaded(List<Event> events) = _Loaded;
  const factory EventListState.error(String message) = _Error;
}json,'
'
Node:                           Node:             Node: '
Node: )( = '=argument     = ' = '=Node: '
jsonNode:  = 'requiredannotation = ' = 'required          '
'
(Node: '
)@freezed            '
'
Node:       type_identifierNode:                               Node: )function_body       = 'identifierNode:  = 'formal_parameter_AppUser = 'json = ' = ''
=>
      _$EventUpdateRequestFromJson(json);Node: String currency@'
)'
 = ''
@                          '
Node:                             '
Node: Node: Node: =>=;      Node:  = 'Node: type_identifier = ' = ');=> = ''
'
=        '
Node:  = '          identifierNode:       type_identifier = ' = '_$EventUpdateRequestFromJsonStringidentifier'
Node: )        method_signatureNode: '
'
selector        _Loading = ' = 'freezedfactory AppUser.fromJson(Map<String, dynamic> json)'
'
Node:             Node: Node: classfactory_constructor_signature'
; = '                factory AppUser.fromJson(Map<String, dynamic> json) = 'Node:        = 'identifierclass = ''
'
 = '              (json)currency'
;Node: '
Node: identifier       = 'Node: EventListState}'
 = ';} = ''
;    '
Node: Node:       superclassNode:  = '  '
Node: factory              class_definition = 'Node: with _$EventListState          '
declarationfactory = 'Node:  = ',argument_part@freezed
class UserProfile with _$UserProfile {
  const factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfile;

  factory UserProfile.fromJson(Map<String, dynamic> json) =>
      _$UserProfileFromJson(json);
}const factory EventListState.loaded(List<Event> events) = _Loaded = ''
(json)'
'
 = '          '
          Node: Node: annotation                    ,Node: Node: '
mixins              Node: redirecting_factory_constructor_signatureNode: identifier = 'argumentsrequired = ' = 'AppUserwith _$EventListState = ' = ''
(json)@freezed = ''
'
requiredconst factory EventListState.loaded(List<Event> events) = _Loaded          '
Node: '
              .      '
 = 'Node: .              '
          Node: Node: formal_parameter@ = '( = ' = '        (Node: @Node: '
const_builtinwith               = 'Node:           withargument = ' = 'String statusconstjson'
'
'
                '
'
Node:       type_identifier         = 'Node:           identifier                 = 'Node: Node: freezedtype_identifierNode: String = 'factory_$EventListStateNode: '
 = '    identifierNode:  = 'class_bodyfromJsonidentifierfactory'
'
              '
'
Node:  = 'formal_parameter_listjson = 'Node:           (Map<String, dynamic> json)                '
 = 'Node: {
  const factory EventListState.initial() = _Initial;
  const factory EventListState.loading() = _Loading;
  const factory EventListState.loaded(List<Event> events) = _Loaded;
  const factory EventListState.error(String message) = _Error;
}              '
identifier'
 = '      statusNode: Node: class{Node:  = ' = ''
            identifier)Node:  = ' = 'class(EventListState'
{'
    Node:  = ')'
'
      identifierNode: (              declarationNode:  = ',const factory EventListState.initial() = _Initial = ''
           = '        UserProfileNode: Node: '
.         = ''
,redirecting_factory_constructor_signature             = 'Node:     '
.const factory EventListState.initial() = _Initial'
formal_parameterNode:               '
          Node: Node:           identifierNode:  = 'Node:  = 'superclassloaded = ';with _$UserProfileMap<String, dynamic> jsoncomment'
'
const_builtin       = 'Node:  = 'mixins; = ''
with _$UserProfile = '      '
'
Node:                         Node:         formal_parameter_listconst = 'Node: '
(List<Event> events)}
=== Complete AST for source ===
Node: Node:  = 'with}program = ' = '// pending, succeeded, failed, cancelled'
'
                            Node: Node: '
class_definitionfactory = 'Node: type_identifierimport 'package:freezed_annotation/freezed_annotation.dart';

part 'payment.freezed.dart';
part 'payment.g.dart';

@freezed
class Payment with _$Payment {
  const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Payment;

  factory Payment.fromJson(Map<String, dynamic> json) =>
      _$PaymentFromJson(json);
}

@freezed
class PaymentCreateRequest with _$PaymentCreateRequest {
  const factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequest;

  factory PaymentCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$PaymentCreateRequestFromJson(json);
}

@freezed
class PaymentResult with _$PaymentResult {
  const factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _Success;

  const factory PaymentResult.failed({
    required String errorMessage,
  }) = _Failed;

  const factory PaymentResult.cancelled() = _Cancelled;
}

@freezed
class PaymentState with _$PaymentState {
  const factory PaymentState.initial() = _StateInitial;
  const factory PaymentState.loading() = _StateLoading;
  const factory PaymentState.success(Payment payment) = _StateSuccess;
  const factory PaymentState.failed(String errorMessage) = _StateFailed;
}
 = ' = '@freezed
class EventListState with _$EventListState {
  const factory EventListState.initial() = _Initial;
  const factory EventListState.loading() = _Loading;
  const factory EventListState.loaded(List<Event> events) = _Loaded;
  const factory EventListState.error(String message) = _Error;
}Mapwith            factory'
'
'
'
Node:   (        '
     = '          Node: Node: annotation              identifier( = '//Node: Node: Node: import_or_exporttype_argumentstype_identifier = ''
 = ' = 'EventListState@freezed'
                      // = ' = 'import 'package:freezed_annotation/freezed_annotation.dart';_$UserProfile'
<String, dynamic>'
Node: '
.       = 'Node: .'
'
@Node:               formal_parameter        Node:  = '                '
Node: library_importList<Event> events<Node:  = 'required@          '
Node:  = ''
 = '<class_body               = 'import 'package:freezed_annotation/freezed_annotation.dart';      '
Node: Node: identifierrequired = ''
{
  const factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfile;

  factory UserProfile.fromJson(Map<String, dynamic> json) =>
      _$UserProfileFromJson(json);
}'
Node:       '
Node:       type_identifier = 'Node: identifier{                 = ' = '               = 'initialimport_specificationListfreezed'
Node:           '
Node: {    '
Node:  = 'classformal_parameter'
Node:  = '              String paymentMethodformal_parameter_list'
type_identifier       = 'Node: classdeclarationimport 'package:freezed_annotation/freezed_annotation.dart';'
 = '     = 'Node: () = 'identifier'
StringNode: '
                             = 'Node:                 ,type_arguments'
EventListState         = 'Node: const factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfileNode: '
'
<Event>import            Node: Node: superclass = ' = 'redirecting_factory_constructor_signatureNode:  = '( = ' = 'type_identifier'
 = '(import'
const factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfilewith _$EventListState'
            '
Node:           )String = ''
)'
'
Node:                                         ,                '
Node: const_builtinNode: Node:  = 'configurable_uriNode: Node: identifier<                const = '= = '< = 'Node: paymentMethodmixins'package:freezed_annotation/freezed_annotation.dart' = ''
with _$EventListStatetype_identifier'
 = ''
'
 = '        =dynamicNode: '
with                     = ''
                              with                '
Node: Node:         type_identifier'
 = 'Node:           Event>Node: '
 = ',                Node:  = 'factoryNode: ,Node: >> = ''
> = ''
'
                            type_identifierNode: factoryNode: '
Node:           type_identifierNode: identifier = ' = 'uri_Initial              '
Node: identifierformal_parameter = ' = ' = ''package:freezed_annotation/freezed_annotation.dart'String? stripeSessionId      _$EventListState'
events = '                jsonNode: '
type_identifier'
'
            Node: '
) = ' = 'identifierNode: ) = ';String                Node: '
 = '            ;Node: '
'
UserProfile                Node: '
Node: =declaration                Node: class_body) = ' = '          const factory EventListState.loading() = _LoadingNode: ='
formal_parameter_list'
 = 'string_literal = 'Node:  = ')'package:freezed_annotation/freezed_annotation.dart' = '                  ({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  })Node: Node: type_identifiernullable_type'
 = ' = '_Loaded'
?'
'
{
  const factory EventListState.initial() = _Initial;
  const factory EventListState.loading() = _Loading;
  const factory EventListState.loaded(List<Event> events) = _Loaded;
  const factory EventListState.error(String message) = _Error;
}                        '
redirecting_factory_constructor_signatureNode:        = ''
?const factory EventListState.loading() = _Loading      Node:               '
function_bodyNode:            = ''Node: =>
      _$AppUserFromJson(json);            Node: Node:  = '(Node: {const_builtin; = ' = ' = 'const''
'
 = ''
; = ''
?                      {          '
'
Node: Node:       =>(Node:  = ''
                      Node:             =>Node: declarationidentifierfactory = ' = 'const factory EventListState.initial() = _Initial'stripeSessionId'
Node: '
Node:                = 'Node: declaration,''
 = 'optional_formal_parametersfactory = ''
{
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }          '
 = ' = '                      Node: Node: '
redirecting_factory_constructor_signatureconst factory EventListState.error(String message) = _Error{'
 = 'Node:         identifierconst factory EventListState.initial() = _InitialNode:  = ''
 = 'identifier        ,{'
Node: '
                      Node: EventListState              formal_parameterNode: '
 = 'Node:           redirecting_factory_constructor_signatureNode:  = ' = 'const factory EventListState.error(String message) = _Error_$AppUserFromJson'
          '
;required        .Node:  = '           = 'String? stripePaymentIntentIdrequired'
'
                Node: Node:  = 'Node: ;const_builtin'
.selector = '  constNode: '
'
               = 'type_identifierconst_builtin = '          Node:            = '(json)part_directive'
Node:           formal_parameterconstStringNode: '
 = 'Node:                  = 'identifierfactorypart 'payment.freezed.dart';argument_part = ' = 'factory'
'
 = 'Node: (json)    '
          nullable_type'
loading          String userIdNode: Node: '
identifier'
Node:  = 'factory = '                      Node: Node:  = 'argumentsformal_parameter_list = 'EventListState                part? = ''
part = 'Node:                   type_identifierNode: ()'
'
(json)                      Node: factory.Node:  = '(.'
?'
 = ' = ''
?                  '
          Node: '
(Node:                 identifier = ' = '(String'
'
           = '                Node: Node:               initial(identifier'
Node:             Node: '
identifierNode:  = ')Node:           uriNode: identifierformal_parameter_list = ' = ' = 'argumentstripePaymentIntentId = ' = ''payment.freezed.dart'()'
 = ''
json)'
'
'
                                Node:           userId                EventListState('
 = ''
Node:               (Node: Node: identifierNode: string_literal = ',, = ' = 'Node: '
json            ,Node:            = '=, = ''
=Node: 'payment.freezed.dart''
'
.                            Node:  = 'Node:               ).'
'
required                  Node: '
'          )Node: Node:  = ' = ' = ')Node: '
formal_parameterrequired = 'identifierString? errorMessagetype_identifier = ''
 = '          error)Node: '
='          '
 = '              _Loading        Node: Node: '
;formal_parameterNode: '
'
 = '        formal_parameter_list=Node: '
 = ' = '                                Node: Node: 'type_identifier = '(String message)' = ';'
_Initial = 'Node:  = ';;'
    '
            '
      Node: Node: String displayName;'
 = '                      (Node: '
Node: type_identifier       = 'type_identifier;Node: String = '}'
 = '; = ';'
('
'
                    }Node:  = 'Node: StringNode: declaration                declaration = ' = 'formal_parameterNode: '
identifier = ' = 'Node: displayName'
const factory EventListState.loading() = _Loading'
'
          Node: String messageconst factory EventListState.loaded(List<Event> events) = _Loaded                Node: part_directive'
redirecting_factory_constructor_signature         = ' = 'Node: class_definitionnullable_typeNode: '
 = 'redirecting_factory_constructor_signaturepart 'payment.g.dart';?'
'
                                              Node:  = '?const factory EventListState.loading() = _Loading = ' = 'Node: Node: const factory EventListState.loaded(List<Event> events) = _Loaded    type_identifier'
?@freezed
class UserProfile with _$UserProfile {
  const factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfile;

  factory UserProfile.fromJson(Map<String, dynamic> json) =>
      _$UserProfileFromJson(json);
}'
Node: '
          '
part           = ' = 'Node: Stringpart'
,'
const_builtin        Node:  = '              const_builtin = ' = ',constconstNode: Node: '
uriNode:                 '
'
Node:           identifier = 'Node: annotationfactory              identifier = ''payment.g.dart' = ''
@freezed      Node:  = 'messageformal_parameter'
           = ' = 'Node: factoryString? pictureUrl'
'
'
string_literal                errorMessageNode: Node: identifier'
@ = ' = 'Node: @                 = 'Node:               '
'payment.g.dart'Node:       ,Node: EventListState = '            type_identifier'
Node:         ) = 'Node: String'identifier'
 = ''
                )          '
Node: Node:           nullable_type,factory'
 = ' = '              factoryNode: '
. = ' = 'formal_parameterNode:  = 'freezed?'DateTime? createdAt='
'
 = ''
                '
. = '          =Node:                   '
Node: Node: type_identifier'
identifier = ' = 'DateTime          '
EventListState                      ?Node: Node: identifier'
Node: classNode:  = 'type_identifier'class = '                 = '' = ''
_ErrorNode: '
          ?'
'
Node:                       Node: Node: nullable_type.;     = 'Node: ;identifier = '     = ' = 'identifierUserProfile = 'Node: ;pictureUrl?'
loading    '
'
 = '          Node: Node: formal_parameter_list = ''
superclass; = '      '
with _$UserProfile.'
  Node: '
}'
                 = '               = '()}Node: '
'
Node: identifierclass_definition                                Node: Node: (? = 'Node:  = 'Node:  = 'mixinsNode:  = ',with _$UserProfile?'
 = ' = ',(@freezed
class Payment with _$Payment {
  const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Payment;

  factory Payment.fromJson(Map<String, dynamic> json) =>
      _$PaymentFromJson(json);
}'
'
'
class_definition                      Node:  = 'withNode:  = 'formal_parameterwith'
@freezed
class EventDetailState with _$EventDetailState {
  const factory EventDetailState.initial() = _DetailInitial;
  const factory EventDetailState.loading() = _DetailLoading;
  const factory EventDetailState.loaded(Event event) = _DetailLoaded;
  const factory EventDetailState.error(String message) = _DetailError;
}'
loaded         = 'Node: '
    String? statusMessage'
Node: '
                                            type_identifierNode:     annotation          identifierNode:  = ')createdAtNode: '
 = 'annotation = ' = '              @freezedNode: _$UserProfile,'
Node:  = ''
Node: type_identifier     = ' = ',Node: Stringclass_body'
) = '{
  const factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfile;

  factory UserProfile.fromJson(Map<String, dynamic> json) =>
      _$UserProfileFromJson(json);
}              '
formal_parameter_list@freezed           = ''
'
      '
(List<Event> events)Node: Node: =formal_parameter = ' = '='
                          Node: DateTime? updatedAtNode: nullable_typetype_identifier'
 = '       = '                Node: Node: ?_Loading'
'
Node: @      {Node:  = '@{ = ''
            @      '
Node:       type_identifierNode:  = ''
                  Node:       identifierdeclaration = '(Node:  = '@;const factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfileNode:  = '?; = ' = '? = ''
'
'
      '
Node: DateTime      declarationNode: '
identifier         = ' = 'Node: (                redirecting_factory_constructor_signaturefreezed                const factory EventListState.loaded(List<Event> events) = _Loaded'
Node: '
identifier            '
Node: Node:              = 'Node: nullable_typefreezed = 'formal_parameter?statusMessage = ''
 = ''
'
Node:               List<Event> events    Node: Node: ,                  class'
classconst factory UserProfile({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = _UserProfile               = 'Node: redirecting_factory_constructor_signatureclasstype_identifierNode: '
 = '    '
?classNode:  = ''
identifier?     = 'Node:           const factory EventListState.loaded(List<Event> events) = _Loadedidentifier = ' = ',Node:  = ''
PaymentList          '
'
'
'
 = '    EventDetailState              const_builtin               = 'Node: constNode: '
Node: Node: type_arguments                 = '          <Event>annotationsuperclass'
'
 = '                Node: const_builtinwith _$PaymentNode: '
 = '<       = 'Node: <     = 'factoryNode: identifiermixins = 'Node:  = ''
@Default('line')updatedAt'
                                '
Node:  = 'constwith _$Payment              '
'
factorysuperclassNode: '
Node:           type_identifier,           = 'Node: with _$EventDetailStateNode:         '
factoryidentifier       = ' = 'Event@ = ''
 = ' = '@UserProfile,'
'
Node: '
factory          Node:               withNode:                  = 'Node: with>                '
Node:         formal_parameter_listNode: '
type_identifier} = '          _$Payment = ''
 = '>Node: Node:      = 'Node: identifier({
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  })class_body'
 = 'mixinsEventListState = ''
 = '}                      Node: Node: .'
with _$EventDetailState(identifier{
  const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Payment;

  factory Payment.fromJson(Map<String, dynamic> json) =>
      _$PaymentFromJson(json);
} = ' = '( = 'Default.'
'
'
'
'
                                  Node: Node: )                  '
Node: Node: Node: identifier          withoptional_formal_parametersNode:  = '{ = '                identifierNode:  = ' = ' = 'arguments{
    required String userId,
    required String displayName,
    String? pictureUrl,
    String? statusMessage,
    @Default('line') String provider,
  }) = ''
('line') = '{              events'
'
'
Node:           {                  Node:             =Node: '
with( = ' = ' = 'Node: {)'
loaded'
(='
      '
                  Node: Node: declaration               = '        argumentNode: '
 = 'type_identifier          'line' = ')          Node: const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _PaymentNode: formal_parameter_listtype_identifier'
 = ''
(List<Event> events) = '                    '
Node: Node: '
string_literal = '             = '_Payment'line'Node:           '
required_$EventDetailState                      '
        Node: (' = ' = '(Node: '
'
'             = 'Node: '
formal_parameter                                Node: Node: 'class_body = ' = '' = ''
{
  const factory EventDetailState.initial() = _DetailInitial;
  const factory EventDetailState.loading() = _DetailLoading;
  const factory EventDetailState.loaded(Event event) = _DetailLoaded;
  const factory EventDetailState.error(String message) = _DetailError;
}Node:                   '
Node: Node: List<Event> events)redirecting_factory_constructor_signature = ' = ';=const factory Payment({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Payment      )'
requiredNode:               {Node: '
'
type_identifier'
               = 'Node: {              formal_parameter = ' = 'Node:  = 'String providerList'
'
                 = ''
formal_parameterNode:                 ;='
declaration'
                Node: Node: method_signature = ' = 'String userIdconst factory EventDetailState.initial() = _DetailInitialNode:  = '              factory Payment.fromJson(Map<String, dynamic> json)Node: '
type_argumentstype_identifierNode: '
 = '        const_builtinStringNode: '
 = '                factory_constructor_signatureconstNode: identifier'
                '
Node:           type_identifiertype_identifier = 'String = '         = 'provider_Loaded'
Node: factory = 'Node: factory Payment.fromJson(Map<String, dynamic> json)redirecting_factory_constructor_signature'
 = ''
 = '                              '
Node:  = '<Event>factoryNode: '
'
identifier                          Node: Node: ,           = 'const factory EventDetailState.initial() = _DetailInitial<'
       = ' = 'userIdidentifierNode:  = ''
,<                        factory'
 = 'Node:               ;factoryNode: '
}Node:  = '                ;PaymentNode: '
const_builtin'
 = '      , = 'const          Node: '
}Node: Node: '
 = 'type_identifier,          '
formal_parameter_listdeclaration = 'Node:  = 'Eventidentifier({
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  })          '
Node:  = ' = ''
                                      '
factoryconst factory EventListState.error(String message) = _Error = ''
factory                '
PaymentNode: '
(Node:         requiredNode:  = '          redirecting_factory_constructor_signature          Node: required = 'Node: )identifierNode: '
Node: .               = 'Node: .formal_parameter> = 'const factory EventListState.error(String message) = _Error = '('
 = 'EventDetailState = ''
 = ')            String displayName'
'
'
'
>                '
          Node:                         Node: Node:           optional_formal_parameters          identifierNode: Node: identifier = '. = ' = 'type_identifierNode: eventsfromJson'
'
                      Node:  = 'const_builtinNode: )= = ' = 'const{
    required String id,
    required String eventId,
    required String userId,
    required int amount,
    required String currency,
    required String status, // pending, succeeded, failed, cancelled
    required String paymentMethod,
    String? stripeSessionId,
    String? stripePaymentIntentId,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }'
'
Node: . = ' = ''
String='
                        formal_parameter_list          )'
Node:  = 'factory          (Map<String, dynamic> json)'
Node:  = 'Node: '
factoryNode:             {Node:  = '(          type_identifier{ = 'Node:                 ='
'
 = 'identifier          =              Node: '
Node: Node:  = '          identifier( = 'requiredEventListState'
Node:  = '            initialNode: '
_UserProfileformal_parametertype_identifier'
identifier           = 'Node:  = '._Loaded = 'displayName          '
Node: '
formal_parameter_list = ' = ''
      . = ''
              Node: Node: Map<String, dynamic> jsonrequired;'
 = ';              '
Node: ()              formal_parameterNode:  = 'type_identifierString id = '      MapNode: ; = '          '
'
,                  Node:  = ''
Node: ;'
,identifier              Node: method_signature( = ' = 'factory UserProfile.fromJson(Map<String, dynamic> json)                '
Node:               Node: '
type_arguments'
 = '(type_identifier'
         = 'Node:              = 'Node: <String, dynamic>error'
factory_constructor_signatureformal_parameter       = 'Node: Node: )declaration = 'String? pictureUrl'
)                '
 = 'String                    Node: Node:  = '=Node: '
const factory EventListState.error(String message) = _Error<                '
Node:  = 'formal_parameter_listtype_identifier'
<                 = ''
Node: factory UserProfile.fromJson(Map<String, dynamic> json)identifierString = ''
 = '                  idNode: '
factory                 = 'Node: '
(String message)='
'
                      Node: Node: Node:                 type_identifier = '              factory( = 'redirecting_factory_constructor_signatureStringtype_identifierNode: '
'
 = '                          nullable_typeNode:  = 'const factory EventListState.error(String message) = _Error_DetailInitial = 'Node: identifier'
,           = ' = 'Node:  = '(UserProfileNode: '
?'
'
                Node:             Node: '
;,                   = 'Node: ;'
.formal_parameter,Node:  = '?String message = ' = ',?'
'
 = ''
const_builtin'
               = 'Node: consttype_identifier'
 = '              String                Node: '
Node: requiredidentifier               = ' = 'Node:                 .      requiredNode: '
declarationpictureUrl'
          '
Node: identifier = ' = 'factory          Node:  = '              Node: type_identifier               = 'Node: const factory EventDetailState.loading() = _DetailLoadingNode: messagefactoryidentifier'
 = ''
,          '
dynamicNode:  = 'fromJson        formal_parameteridentifierNode: ,'
            '
redirecting_factory_constructor_signature = 'Node:                  = ')Node:  = '> = '          const factory EventDetailState.loading() = _DetailLoading = ')'
>'
'
String eventId          '
EventListState                              '
Node:           Node: Node: Node: const_builtinformal_parameter_listtype_identifierNode:  = ' = '(Map<String, dynamic> json)const'
='
 = '              String = '            =Node: identifier'
'
 = '(json = ''
(            Node:           formal_parameter                '
 = 'Node: String? statusMessage          Node: Node: '
.factoryNode:           ) = '            '
Node:  = '                )factoryNode: identifierNode: '
formal_parameter = ' = '      type_identifierMap<String, dynamic> jsoneventIdtype_identifier'
'
 = ' = '           = 'String'
_ErrorNode: Node: identifierfunction_body = ''
 = ''
=>
      _$PaymentFromJson(json);.              EventDetailState              '
'
          Node:                 Node:                 identifierNode:  = 'Node: errorNode: .'
nullable_typeNode:  = 'type_identifier'
 = ' = '.Map'
'
          ,        ;Node:  = '?;=>'
'
           = '      Node: ,formal_parameter_listNode:  = 'identifier                   = ''
              Node:               ?Node: Node: Node: (String message)type_arguments = '=>loading'
'
'
          } = 'Node: ?formal_parameter_list'
 = ' = '                ()Node:  = ''
                    <String, dynamic>requiredNode:  = '(requiredidentifierNode: '
'
            }                 = ' = '(statusMessageNode: '
identifier'
 = '                          '
_$PaymentFromJsonNode:   <( = 'Node: <, = 'Node:               formal_parameterNode:  = ''
String messageformal_parameter'
                '
Node: Node: class_definition              type_identifierNode:          = ' = ',@freezed
class EventDetailState with _$EventDetailState {
  const factory EventDetailState.initial() = _DetailInitial;
  const factory EventDetailState.loading() = _DetailLoading;
  const factory EventDetailState.loaded(Event event) = _DetailLoaded;
  const factory EventDetailState.error(String message) = _DetailError;
}'
('
 = 'Node: String    '
type_identifier                selectorNode: '
, = '            String userId = 'Node: Node:                = 'Node: annotation'
annotation                ) = ' = '(json)String = 'Node: '
type_identifier) = ''
,@Default('line')'
'
@freezed'
                                              Node:  = 'type_identifierStringNode:  = ''
          dynamicNode: '
argument_part           = '      '
(json)Node: '
@                 = '                @            Node:  = 'identifier@ = ''
@                Node: Node: Node: Node: argumentsidentifierNode:  = ' = '(json)message'
userId'
identifier> = ' = ''
'
>='
                            DefaultNode:                            = 'Node: Node:       =), = ' = ''
,'
)Node:           '
Node: identifier          '
 = '                              Node: Node: requiredtype_identifieridentifier = 'Node:  = ' = 'freezed('
 = '    requiredjsonNode: '
Node: =            '
class(               = 'arguments = 'Node: class_DetailLoading'
'
=              '
Node:       )'
 = 'Node: formal_parameter; = ') = ''
Node: int amount('line')              '
      '
Node:                 argumentNode:  = 'function_bodyjson                  Node: Node: '
identifier = ' = ' = '                =>
      _$UserProfileFromJson(json);Node: '
identifierNode: EventDetailState        '
Node: type_identifier = '=>( = ' = '=>( = ''
'
    type_identifierintNode:  = ';_Error'
        json                        '
'
superclass              Node: Node:                 '
Node: Node: Node:       )identifier = 'identifier) = ' = 'argument_$UserProfileFromJson'
'
Node:         with _$EventDetailStateNode: ;         = ' = 'Node: '
;declarationamountselector'
'line' = ' = '(json)              '
       = ' = ';          '
const factory EventDetailState.loaded(Event event) = _DetailLoadedNode: '
argument_part                            Node: redirecting_factory_constructor_signatureNode: ;'
Node: '
            mixinsNode: ,string_literalNode:  = '}'line' = ''
 = ' = ' = 'Node: ,                      '
with _$EventDetailStateNode: '
(json) = ''
}            'const factory EventDetailState.loaded(Event event) = _DetailLoadedNode:  = ''
'arguments'
          '
Node:                 }Node: class_definition         = '                       = '}Node: Node:  = 'with(json)'
Node: 'const_builtin = '@freezed
class PaymentCreateRequest with _$PaymentCreateRequest {
  const factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequest;

  factory PaymentCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$PaymentCreateRequestFromJson(json);
}' = ''
const'
'
                  requiredNode:  = ')                     = 'Node: Node: annotationrequiredclass_definitionwith'
'
 = '        @freezed
class EventDetailState with _$EventDetailState {
  const factory EventDetailState.initial() = _DetailInitial;
  const factory EventDetailState.loading() = _DetailLoading;
  const factory EventDetailState.loaded(Event event) = _DetailLoaded;
  const factory EventDetailState.error(String message) = _DetailError;
}Node: '
type_identifier'
 = '    Node:  = 'Node:                = 'Node: annotationformal_parameter          @freezed_$EventDetailState)'
'
 = '    @freezedNode: '
class_body = '(      String currencyNode:  = ''
Node: '
factory                 = '              factory = '{
  const factory EventDetailState.initial() = _DetailInitial;
  const factory EventDetailState.loading() = _DetailLoading;
  const factory EventDetailState.loaded(Event event) = _DetailLoaded;
  const factory EventDetailState.error(String message) = _DetailError;
}(      Node: '
type_identifierNode:               '
@Node:       '
Node: argument           = 'Node: jsonidentifierNode:  = 'formal_parameter = ''
 = 'String = '                '
Node: @String provider'
'
identifier                      @Node: EventDetailState = '{'
 = '                @           = 'Node: jsonidentifier{'
'
'
Node: . = 'Node:  = 'identifier                     = 'Node:       freezedNode: )Node:  = 'declarationidentifiertype_identifier.'
 = '     = 'currency'
'
)                        '
Node:  = '        ,Node: String = 'Node: ,Node: '
identifierconst factory EventDetailState.initial() = _DetailInitialclass; = ''
 = ' = ';                '
Node:               identifier'
Node: loadedclassfreezed'
      required = ''
           = 'Node: Node: formal_parameter_list} = '         = 'providerNode: }required'
'
'
                Node: (Event event)class_definitionredirecting_factory_constructor_signature    '
                Node: '
 = 'Node: @freezed
class AuthState with _$AuthState {
  const factory AuthState.initial() = _Initial;
  const factory AuthState.loading() = _Loading;
  const factory AuthState.authenticated(AppUser user) = _Authenticated;
  const factory AuthState.unauthenticated() = _Unauthenticated;
  const factory AuthState.error(String message) = _Error;
}              Node: '
Node: identifier     = 'Node: Node: formal_parameterannotationclassconst factory EventDetailState.initial() = _DetailInitial = ''
String status,(          '
 = 'Node:                  = 'classNode:  = ' = 'const_builtinPaymentCreateRequest = ''
@freezed = '    '
,('
type_identifierconst = ''
'
String'
              '
Node:                   Node:               identifier                Node: Node: }identifiersuperclassNode:  = 'Node: @factory}Node: '
formal_parameter = ' = '             = 'Node: status = ' = 'EventDetailStateEvent eventfactory = ''
@'
)'
           = 'Node: '
              with _$PaymentCreateRequestNode: '
'
      ,       = 'Node:               ,Node:     )mixinsidentifier = ' = 'Node: with _$PaymentCreateRequest'
freezedtype_identifierNode:  = 'superclass'
'
 = ''
with _$EventDetailStateEvent                      identifier          Node:  = 'Node: EventDetailStatewith    '
 = '          '
withNode: '
.         = '=.Node: '
 = 'comment      '
Node:  = '              Node: mixins= = ''
Node:           identifier          Node: Node:  = 'type_identifier// pending, succeeded, failed, cancelled = 'Node: _UserProfileclassidentifiertype_identifierevent = ''
with _$EventDetailState = '_$PaymentCreateRequestinitial = ''
class'
'
'
'
                            Node: Node: Node:                       '
Node: class_body//Node:  = ' = 'formal_parameter_list       = 'Node: ();'
 = '){
  const factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequest;

  factory PaymentCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$PaymentCreateRequestFromJson(json);
}                Node: '
Node:  = '(with)identifier//       = ' = '( = 'Node: ;with'
{      '
 = ''
{        '
Node: '
                      Node: Node: =Node: '
AuthStatemethod_signature               = 'Node: factory UserProfile.fromJson(Map<String, dynamic> json)      '
'
) = 'required     = '        =Node: '
factory_constructor_signature           = ' = 'type_identifier)required = ''
_$EventDetailState'
'
              Node:     Node: Node: declarationformal_parameterclass_body = ' = 'String paymentMethodNode:  = ''
superclassfactory UserProfile.fromJson(Map<String, dynamic> json)                          {
  const factory EventDetailState.initial() = _DetailInitial;
  const factory EventDetailState.loading() = _DetailLoading;
  const factory EventDetailState.loaded(Event event) = _DetailLoaded;
  const factory EventDetailState.error(String message) = _DetailError;
}Node:  = 'type_identifierwith _$AuthState = ''
'
const factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequest'
Node: Node: '
=type_identifier                     = '          StringNode:  = 'Node: _DetailLoadedfactory'
 = 'Node: Node: mixins      '
 = '{                with _$AuthStateNode:  = ''
factory        '
={          redirecting_factory_constructor_signatureNode: Node: identifier = ' = 'withUserProfile = ''
'
withconst factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequest'
'
identifier           = 'Node: paymentMethod'
'
                    Node: Node:       Node: type_identifier; = ' = '_DetailInitial;'
'
      const_builtin        . = '              Node: .declaration'
 = 'Node:        = '          const factory EventDetailState.initial() = _DetailInitialNode: '
,;Node: Node:         constNode:  = ' = 'identifiertype_identifier;,redirecting_factory_constructor_signature'
 = ' = '              '
Node: Node: formal_parameterfromJson = '          declaration = ''
String? stripeSessionId_$AuthState'
'
const factory EventDetailState.initial() = _DetailInitial = '      Node:                 factoryconst factory EventDetailState.error(String message) = _DetailErrorNode: '
declaration         = ''
 = ''
    factoryNode: Node: type_identifierclass_body          const factory EventDetailState.loading() = _DetailLoadingNode:  = '          Node: Node:  = ''
'
const_builtinredirecting_factory_constructor_signature        {
  const factory AuthState.initial() = _Initial;
  const factory AuthState.loading() = _Loading;
  const factory AuthState.authenticated(AppUser user) = _Authenticated;
  const factory AuthState.unauthenticated() = _Unauthenticated;
  const factory AuthState.error(String message) = _Error;
}formal_parameter_list = ' = ''
Node:           StringNode: '
identifierconst = '                redirecting_factory_constructor_signature'
      const factory EventDetailState.error(String message) = _DetailError          '
Node:            = 'const factory EventDetailState.loading() = _DetailLoadingfactoryNode: (Map<String, dynamic> json) = ''
factory            '
 = 'Node: PaymentCreateRequest{('
Node: Node:                     '
Node:  = 'const_builtin{ = ''
const      nullable_typeNode: Node:  = 'formal_parameter_list = ''
declaration          ({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  })identifier'
 = '          EventDetailState('
'
                       = 'Node:  = 'Node: (? = ''
(                  Node: Node: const factory AuthState.initial() = _Initial            '
Node: factory'
.? = '             = 'Node: .optional_formal_parameters'
factoryNode: '
formal_parameter                  Node:  = ' = 'identifierconst_builtin = ' = '{
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }EventDetailStateconst = '          ?'
'
Node: Map<String, dynamic> jsonNode: redirecting_factory_constructor_signatureidentifier'
 = ' = 'initial'
'
                                  '
                Node: Node:           type_identifieridentifier = 'Node:               Node: Node: factory = 'Node: const factory AuthState.initial() = _Initial = '.factory = ''
stripeSessionIdformal_parameter_list'
.'
'
Map                    Node: Node:           identifier = '              ()'
 = '{error = '              const_builtinNode: '
Node:  = 'Node: identifier'
 = 'type_argumentsEventDetailState = '            <String, dynamic>,{          '
constNode: '
 = 'Node: '
(                               = '          Node: Node: formal_parameter_list(,'
'
          Node: Node:               requiredNode:  = '<'
 = '.(String message) = ''
factory             = ' = '            .<required'
'
Node:                 '
              factoryNode: Node: )'
 = 'type_identifier)          formal_parameter = '('
Node: Node:           Stringformal_parameter'
 = 'Node:                 identifierNode:  = ' = ',AuthStateString eventId = ''
identifier           = '          loadingNode: String? stripePaymentIntentId = 'Node: ,='
'
          . = '( = ''
=            '
'
.                '
Node:                 Node: Node: formal_parameter                           = 'Node: String messagetype_identifierNode: '
'
 = 'formal_parameter_list               = 'Node: ()type_identifier'
identifierdynamicNode:  = ''
type_identifier           = 'Node: initial                 = '            type_identifierNode:  = '(String = ''
_DetailInitialNode: '
>type_identifier = '      '
String          Node: Node: ;formal_parameter_list = ''
 = ';                >'
Node:  = ''
              StringNode: '
(                              identifierNode:  = 'nullable_typeNode:       identifiereventId = ''
jsonNode: '
()identifier             = ' = '              '
Node: declarationmessageNode: ,?'
)'
 = '             = ' = '            '
Node: const factory EventDetailState.loading() = _DetailLoading)             = ''
)        '
Node: Node:           redirecting_factory_constructor_signatureNode:  = '=                  Node: ,)'
 = 'const factory EventDetailState.loading() = _DetailLoading=(?               = ' = ''
Node: (          )Node:  = ''
Node: '
'
required             = 'Node: )='
)          required      Node: ? = ''
           = 'Node: )Node: function_body=const_builtintype_identifier = ''
 = ''
              '
Node: const                          '
          Node: _DetailErroridentifierformal_parameter = ' = 'stripePaymentIntentId'
           = 'Node: '
type_identifierNode:       Node: =>
      _$UserProfileFromJson(json);Node: int amount;'
'
 = '              factory        Node:  = ' = 'factory                Node: _DetailLoading=>, = ' = '=>,='
'
'
Node: '
               = '          type_identifierNode:       identifier = '         = '=Node: Node: ;Node: '
intEventDetailState;'
          '
identifier'
Node:  = 'formal_parameter; = '                '
String? errorMessagetype_identifier      '
           = '                Node: ._InitialNode:  = '      declaration = 'Node: _$UserProfileFromJsonidentifierNode: '
'
.type_identifier'
 = '                Node:         Node: Node: }selector = ' = ' = 'identifierconst factory EventDetailState.loaded(Event event) = _DetailLoaded} = '(json)'
Node: '
        ;Node: amountredirecting_factory_constructor_signature = '           = 'Node:  = 'argument_partloadingconst factory EventDetailState.loaded(Event event) = _DetailLoaded'
'
'
;=== End AST ===
              '
Node:            = ''
(json)Node:           '
Node:             
=== Processing class:       Node: const_builtinString = 'argumentsEvent, = ''
Node:  ===
declaration                 = 'formal_parameter_listconst(json) = ''
()
=== Processing class: ,'
              '
'
          Node:               Node:  = 'factory            const factory AuthState.loading() = _LoadingNode: '
nullable_type         = 'Node: factoryNode:  = 'EventCreateRequestNode: ?redirecting_factory_constructor_signature ===
('
 = '(                  annotation(Node:  = '?'
 = ' = ' = '
=== Processing class: '
@Default('jpy')EventUpdateRequest            const factory AuthState.loading() = _Loading'
('
'
                        Node: ?Node:  ===
Node:           const_builtin)argument'
                                 = 'Node: Node: Node:  = 'json = 'identifier'
) = ''
identifier                 = 'const@errorMessage'
 = ''
          @                        '
Node: Node: factory, = 'Node: Node: EventDetailStatefactory = ''
,          '
identifier'
 = 'Node:               =Node:  = 'formal_parameteridentifier = 'jsonDateTime? createdAt'
'
           = '=                              Node: Node: AuthStateidentifier'
                Node: Node: .          '
) = 'type_identifier = ' = '.DateTime'
'
Node:                           DefaultNode: '
nullable_type          Node:  = 'identifier?                type_identifier
=== Processing class:  = ''
Node:  = '.) = 'Node: EventListStatearguments'
                   ===
 = 'loadedNode: '
? = '           = '
=== Processing class: .Node: ?('jpy')formal_parameter_list'
 = ''
(Event event)        EventDetailState'
'
Node: _DetailLoading;             = 'Node: '
(                          Node: Node:                    ===
identifierNode:  = ';(identifier = ' = 'createdAt('
 = ''
              '
      Node:       ,Node:  = '(loadingNode: };,'
'
'
             = 'Node:           formal_parameterNode:  = ';Event event                                '
Node: formal_parameter_listNode:  = ' = 'argumentformal_parameter = '               = ''jpy'()'
'
DateTime? updatedAt                                Node: }'
'
(Node:  = ''
Node: (        type_identifierNode: Node: string_literal                 = 'Node: 'jpy'class_definition'
 = ' = '                      type_identifierdeclaration'
 = 'EventNode: @freezed
class AuthState with _$AuthState {
  const factory AuthState.initial() = _Initial;
  const factory AuthState.loading() = _Loading;
  const factory AuthState.authenticated(AppUser user) = _Authenticated;
  const factory AuthState.unauthenticated() = _Unauthenticated;
  const factory AuthState.error(String message) = _Error;
}            '
const factory EventDetailState.loaded(Event event) = _DetailLoadedNode:  = ''
'        )Node: '
DateTime = ''
    redirecting_factory_constructor_signatureNode:               annotationNode:  = 'identifierconst factory EventDetailState.loaded(Event event) = _DetailLoaded = ''
 = '' = 'event@freezed'
'
                                  Node:                 )Node: )'
Node: '
 = 'nullable_type) = '                '
Node:           '?           = ''
'Node: Node:                   =Node: Node:  = '?='
'
                   = '          ?Node: '
=Node:                  = 'const_builtin=@'
type_identifier)           = ' = ')Node: '
Node:  = ' = '              const'
identifier@ = ''
updatedAt_DetailLoadedNode: '
formal_parameter       = 'type_identifierString currency'
Node:            = ''
identifier               = 'Node: freezedfactory                Node: Node: _Loadingtype_identifier      '
,Node:  = '; = ''
factory    ;'
 = ' = 'Node: String,      class'
 = 'Node:           class;'
'
'
Node:                                     identifier = ' = 'Node:     ;Node: '
declarationNode: Node: EventDetailStateidentifier = 'identifier = ''
const factory EventDetailState.error(String message) = _DetailError}'
 = ' = 'AuthState              '
currency    Node:           declarationNode: Node: }redirecting_factory_constructor_signature'
. = ' = 'const factory EventDetailState.error(String message) = _DetailError.               = ''
Node:           superclass = ''
Node: Node:           identifier'
 = 'const factory AuthState.authenticated(AppUser user) = _Authenticatedwith _$AuthStateloadedNode: '
const_builtin'
'
                    ,Node:  = ')const = ''
          Node:       Node: Node:  = '),'
redirecting_factory_constructor_signature          mixins           = ''
formal_parameter_listwith _$AuthState = ' = '              '
Node: Node: (Event event)factoryNode:         annotationNode:  = 'with=const factory AuthState.authenticated(AppUser user) = _Authenticated@Default('stripe') = ''
factory = ''
 = '                      '
='
'
with                    Node: Node: type_identifieridentifierNode:  = '                _PaymentNode: '
@'
 = 'Node: EventDetailStateconst_builtin'
 = '(           = '      Node: @ = '        Node: '
(                constNode: .type_identifier'
 = ''
            Node: Node: identifier           = 'formal_parameter; = ' = 'Event event_$AuthState.'
'
Node:     ;factory'
 = '          '
      Node: factoryidentifier'
 = 'Node: error = ''
              Default          method_signatureNode:  = 'formal_parameter_listNode:           '
Node: class_bodytype_identifier = ' = '(String message)                Event = ''
'
              Node: factory Payment.fromJson(Map<String, dynamic> json)Node: identifier'
Node:  = 'identifierarguments                     = 'Node:  = '{
  const factory AuthState.initial() = _Initial;
  const factory AuthState.loading() = _Loading;
  const factory AuthState.authenticated(AppUser user) = _Authenticated;
  const factory AuthState.unauthenticated() = _Unauthenticated;
  const factory AuthState.error(String message) = _Error;
}Node: ('stripe')factory_constructor_signature'
 = 'AuthStatefactory Payment.fromJson(Map<String, dynamic> json)('
 = '                            ('
Node:       eventNode: '
Node: factory('
 = '{(            '
 = '             = '          '
Node: {formal_parameterNode: factory.'
 = ' = '.                  '
Node: Node: argument'
          String message          '
Node: Node: identifier               = 'identifier       = 'Node: Payment'stripe''
'
) = '                              Node:  = '.)Node: Node: declarationauthenticated = ''
const factory AuthState.initial() = _Initial = 'string_literal'
 = 'type_identifier'stripe' = '          '
.          '
Node: Node: String          '
Node:               identifier        Node: '
formal_parameter_list                       = 'identifier= = 'Node: messagefromJson = ''
 = '(AppUser user)            '
Node: Node: =)'             = ''
redirecting_factory_constructor_signature = '''
'
           = 'Node: Node: )type_identifier'
 = '          _DetailLoadedNode:           const factory AuthState.initial() = _InitialNode: (formal_parameter_list                       = '=Node:  = ' = ''( = ''
=(Map<String, dynamic> json)''
'
'
                        Node: Node: '
)'
           = 'Node:                       )Node: '
Node: type_identifierconst_builtin( = '             = 'const = ''
(;_DetailError              '
Node: Node:           formal_parameter       = 'Node:  = ';;'
Node:             AppUser userformal_parameter = ''
; = ''
Node: factory      '
String paymentMethod      '
Node: Node: }formal_parameter = ' = '                              Map<String, dynamic> jsondeclarationNode:  = 'const factory EventDetailState.error(String message) = _DetailErrorNode: }'
 = ''
              factorytype_identifier'
Node: === End AST ===
type_identifier = ''
AppUser        type_identifier'
 = '
=== Processing class:  = '              MapNode: '
Stringidentifier          Event = ' ===
user'
Node:               identifierNode:  = '
=== Processing class: AuthStateNode:                 '
EventCreateRequestredirecting_factory_constructor_signaturetype_arguments = '          const factory EventDetailState.error(String message) = _DetailError = ' ===
'
Node: '
            <String, dynamic>Node: identifier) = ''
 = 'Node:                           paymentMethodNode: Node: <. = ' = 'const_builtin'
 = '.)'
              '
                    Node: Node: identifierconst< = ''
Node: ='
 = '                          =Node: ,'
Node:  = 'factoryinitial = 'factory'
,type_identifier          '
Node:               Node:           '
formal_parameter_listNode: type_identifier           = ' = 'String_Authenticated'
'
} = ' = '      }Node: 
=== Processing class:                 '
Node: Node: identifier,();             = 'Node: '
 = '),EventDetailState = ' = '            )Node: ;'
'
                          '
'
          EventUpdateRequest( ===
      Node:  = 'Node: .Node:  = '.Node: type_identifier'
 = '
=== Processing class: dynamicdeclarationEventListState           = ' ===
('
Node: =identifier                 = 'Node: error>
=== Processing class: '
EventDetailState             = 'Node: >)'
 = ''
) ===
 = '              const factory AuthState.unauthenticated() = _UnauthenticatedNode: '
identifier                   = 'Node: =formal_parameter_listNode:  = 'redirecting_factory_constructor_signature(String message)'
json           = ''
const factory AuthState.unauthenticated() = _Unauthenticated'
'
            '
Node:             (Node: Node: )type_identifier           = 'Node:            = 'Node:  = 'const_builtin( = '='
 = '            const)'
'
Node:                 Node: _PaymentCreateRequest=formal_parameterNode: factoryfunction_body = ' = 'factory=>
      _$PaymentFromJson(json);'
'
      '
'
 = '          String message          '
Node: Node:         Node: Node: ;=>type_identifier = ' = ';_Initial'
 = ''
identifier=>      '
 = 'Node: AuthState        '
method_signature          Node: Node:                     identifierNode:  = 'type_identifier_$PaymentFromJson = ''
StringNode:          = 'Node: factory PaymentCreateRequest.fromJson(Map<String, dynamic> json).'
 = '        .Node: selector'
factory_constructor_signature = '              ;Node:  = 'identifier; = ' = '(json)'
factory PaymentCreateRequest.fromJson(Map<String, dynamic> json)'
      '
Node:           declarationNode:  = 'argument_part = ''
(json)          '
Node:           factory             = 'Node: const factory AuthState.loading() = _Loadingfactoryidentifier'
 = '        messageNode: '
redirecting_factory_constructor_signature = 'Node: const factory AuthState.loading() = _Loadingarguments'
                      Node: '
)           = 'unauthenticated)Node: '
identifierNode:  = '          PaymentCreateRequestNode: '
=           = 'Node: =.'
 = '          .Node: '
           = 'Node: (json)identifiertype_identifier = ' = ''
fromJson'
'
                                  Node: const_builtinformal_parameter_list = 'constNode: _DetailErrorNode: '
( = ' = '      (Node: '
;(Map<String, dynamic> json) = ''
;'
'
formal_parameter_list                            Node: Node: Node: (               = '}(Node: '
 = '            ()Node: '
formal_parameterargument = ' = 'Map<String, dynamic> jsonjson'
'
               = 'Node: }type_identifier'
 = '            === End AST ===
Mapfactory'
 = '              factoryNode: '
type_argumentsNode:                 (Node:  = 'identifier( = '          
=== Processing class: jsonEvent'
 ===
'
 = 'Node: <String, dynamic>identifier'
 = '                            Node:               <Node:  = ')<AuthState = 'Node: '
)) = ''
)'
                  Node: Node: .;           = 'Node: ;='
 = '      =Node: '
}           = 'Node: }type_identifier'
 = '  _UnauthenticatedNode: '
class_definition       = 'Node: @freezed
class PaymentCreateRequest with _$PaymentCreateRequest {
  const factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequest;

  factory PaymentCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$PaymentCreateRequestFromJson(json);
};'
 = ''
 = ';.'
'
      Node:           declarationNode:  = 'identifierconst factory AuthState.error(String message) = _Error = ''
loading        '
                              Node: Node: Node: formal_parameter_listtype_identifier = 'redirecting_factory_constructor_signature() = ''
Node:              = 'Node: 
=== Processing class: (EventCreateRequest = ' ===
(annotation
=== Processing class: '
const factory AuthState.error(String message) = _ErrorEventUpdateRequestString ===
'
            '

=== Processing class:                  = 'Node: @freezed,Node: EventListState'
 ===
)      
=== Processing class: Node: EventDetailState@ ===
           = ' = ')Node: '
const_builtin, = ''
          const                '
Node:  = '@Node: '
      Node: =type_identifieridentifier = ' = 'dynamicfreezed = ''
=    '
Node:           class = 'classNode:           type_identifier'
 = 'Node:     factoryNode:  = 'identifier_Loading = ''
PaymentCreateRequest      '
Node:     ;Node:  = 'superclass; = ''
with _$PaymentCreateRequestfactory      '
Node: '
declaration       = 'Node: const factory AuthState.authenticated(AppUser user) = _Authenticatedmixins'
 = ''
with _$PaymentCreateRequest                          Node: Node: identifier>         = 'Node: > = 'redirecting_factory_constructor_signature'
'
 = '              const factory AuthState.authenticated(AppUser user) = _AuthenticatedNode:         '
identifier          AuthState = ''
json          Node: Node: const_builtin. = ' = 'const.
=== Complete AST for source ===
'
'
Node: Node:             program = 'import 'package:freezed_annotation/freezed_annotation.dart';

part 'event.freezed.dart';
part 'event.g.dart';

@freezed
class Event with _$Event {
  const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event;

  factory Event.fromJson(Map<String, dynamic> json) => _$EventFromJson(json);
}

@freezed
class EventCreateRequest with _$EventCreateRequest {
  const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest;

  factory EventCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventCreateRequestFromJson(json);
}

@freezed
class EventUpdateRequest with _$EventUpdateRequest {
  const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest;

  factory EventUpdateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventUpdateRequestFromJson(json);
}

@freezed
class EventListState with _$EventListState {
  const factory EventListState.initial() = _Initial;
  const factory EventListState.loading() = _Loading;
  const factory EventListState.loaded(List<Event> events) = _Loaded;
  const factory EventListState.error(String message) = _Error;
}

@freezed
class EventDetailState with _$EventDetailState {
  const factory EventDetailState.initial() = _DetailInitial;
  const factory EventDetailState.loading() = _DetailLoading;
  const factory EventDetailState.loaded(Event event) = _DetailLoaded;
  const factory EventDetailState.error(String message) = _DetailError;
}
          '
Node: withNode: '
 = 'factorywith           = ''
Node:         identifier   = 'factoryerrorNode: '
)'
           = '          Node: type_identifierNode: Node: import_or_exportformal_parameter_list) = ' = 'import 'package:freezed_annotation/freezed_annotation.dart';(String message)'
'
identifier    '
Node:       library_import = 'import 'package:freezed_annotation/freezed_annotation.dart'; = ''
Node:       AuthStatefunction_bodyNode:  = 'import_specification=>
      _$PaymentCreateRequestFromJson(json); = ' = '            _$PaymentCreateRequestimport 'package:freezed_annotation/freezed_annotation.dart';'
'
    Node: Node: class_body( = ' = '{
  const factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequest;

  factory PaymentCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$PaymentCreateRequestFromJson(json);
}('
'
'
                  Node: Node: '
.       = 'Node: .{'
 = '          {Node: '
                    identifier       = 'Node: authenticatedNode: import'
Node:           =>Node:  = 'formal_parameter=>formal_parameter_list'
 = ' = ' = 'declaration        String message = ''
const factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequestNode:               identifier(AppUser user) = 'Node: import'
type_identifier'
 = '        '
Node: String            redirecting_factory_constructor_signatureNode: '
(_$PaymentCreateRequestFromJson               = 'Node:         '
 = '(const factory PaymentCreateRequest({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  }) = _PaymentCreateRequest        '
'
identifier          Node: Node:  = 'const_builtinconfigurable_uri = 'messageNode: '
             = 'const'package:freezed_annotation/freezed_annotation.dart'selector'
 = '                      (json)'
Node: '
uri          Node: Node: formal_parameterNode: )factory = '          ) = ''
'package:freezed_annotation/freezed_annotation.dart' = ''
factory                      Node: Node: Node: = = ' = 'AppUser user='
'
'
string_literal           = 'Node: 'package:freezed_annotation/freezed_annotation.dart'                        '
Node:               identifierNode:  = 'argument_parttype_identifiertype_identifier = ' = ' = 'AppUser_Error'
PaymentCreateRequest(json)Node: '
'
                          Node:       identifierNode:  = ';Node: user''
 = ''
'            '
Node:               )Node:  = ''arguments) = ''
'                    '
Node: Node: =formal_parameter_list = ' = ';= = ''
(json)'
 = '      ({
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  })        '
'
Node:                         Node: Node: (type_identifier = ' = '(_Authenticated;'
            '
      Node:               Node: ( = ' = ';Node: Node: (argument'
'
              Node: Node: part_directiveoptional_formal_parameters = ' = '}{
    required String eventId,
    required int amount,
    @Default('jpy') String currency,
    @Default('stripe') String paymentMethod,
  } = ' = ';'
part 'event.freezed.dart'; = '              '
Node:     ;Node: {}json'
part       = 'Node: '
 = '{'
part              '
Node: === End AST ===
'
requireddeclaration                 = 'Node: requiredidentifier'
 = '                  Node: Node: uriformal_parameter = ' = 'const factory AuthState.unauthenticated() = _Unauthenticated
=== Processing class: '
AppUser        jsonNode:  ===
redirecting_factory_constructor_signature'

=== Processing class:  = 'UserProfileString eventId = ' ===
'
'event.freezed.dart'                '
                    const factory AuthState.unauthenticated() = _UnauthenticatedNode: '
string_literalNode:  = '          'event.freezed.dart')'
Node:         const_builtinNode:  = ''const = ' = '''
)'
          '
Node:         factoryNode:  = ';Node:  = 'factory;        type_identifier'
Node:  = ''String           = ''
Node: '      identifier'
 = 'Node:     AuthStateNode: '
;'
 = '          ;Node: '
                  }Node: .part_directive = '
=== Processing class:  = 'Node:  = 'identifierpart 'event.g.dart';} = ''
eventId'
'
      Node: .              '
partNode: Node: ,AuthState = ' ===
, = ''
class_definitionpart               = 'Node: '
required     = 'Node: @freezed
class PaymentResult with _$PaymentResult {
  const factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _Success;

  const factory PaymentResult.failed({
    required String errorMessage,
  }) = _Failed;

  const factory PaymentResult.cancelled() = _Cancelled;
}requireduri'
 = '          'event.g.dart'              '
Node: Node: formal_parameter       = 'identifierNode: int amountstring_literal = ' = ''
'event.g.dart''
                '
    unauthenticatedNode:         annotation'
 = 'Node: @freezedtype_identifier'
 = 'Node:                 intNode: Node: @'
 = 'formal_parameter_list@                '
 = 'Node:       identifierNode:  = ''identifieramount = ' = ''
freezed              '
Node: (),     = 'Node: ','
'
class         = 'Node: class'             = ''
'Node:     '
Node:     identifierNode: (; = ' = '(;'
'
'
  Node:             class_definitionNode:  = ')               = 'Node: PaymentResult@freezed
class Event with _$Event {
  const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event;

  factory Event.fromJson(Map<String, dynamic> json) => _$EventFromJson(json);
}'
'
     = 'annotation     = 'Node: @Default('jpy')Node: superclassannotation = ' = 'with _$PaymentResult@freezed'
'
)            Node: Node: @mixins = ''
 = ''
with _$PaymentResult          '
                        Node: Node: Node: @='
 = '      withNode: =identifier'
 = '          freezed@Node: '
 = 'type_identifier    withNode: '
class = ' = '        classNode: '
     = 'Node: _Unauthenticatedidentifier'
 = '      EventNode: '
;     = 'Node: ;superclass'
type_identifier       = 'Node: with _$Eventdeclaration = 'const factory AuthState.error(String message) = _Error@'
'
              Node: mixins = 'Node: with _$Eventredirecting_factory_constructor_signature'
 = '        const factory AuthState.error(String message) = _ErrorNode: '
with = '           = 'Node: _$PaymentResultconst_builtin'
 = '    constNode: '
class_body           = 'Node: {
  const factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _Success;

  const factory PaymentResult.failed({
    required String errorMessage,
  }) = _Failed;

  const factory PaymentResult.cancelled() = _Cancelled;
}with'
factory'
                 = 'Node: factoryidentifier'
'
                  Node: Node: type_identifieridentifier = ' = '_$Event      '
 = 'Node:     DefaultNode: AuthState{'
'
class_body
=== Complete AST for source ===
 = 'Node:  = '          program                 = 'Node: Node: arguments{
  const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event;

  factory Event.fromJson(Map<String, dynamic> json) => _$EventFromJson(json);
} = '{('jpy')'
'
'
import 'package:freezed_annotation/freezed_annotation.dart';

part 'event.freezed.dart';
part 'event.g.dart';

@freezed
class Event with _$Event {
  const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event;

  factory Event.fromJson(Map<String, dynamic> json) => _$EventFromJson(json);
}

@freezed
class EventCreateRequest with _$EventCreateRequest {
  const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest;

  factory EventCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventCreateRequestFromJson(json);
}

@freezed
class EventUpdateRequest with _$EventUpdateRequest {
  const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest;

  factory EventUpdateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventUpdateRequestFromJson(json);
}

@freezed
class EventListState with _$EventListState {
  const factory EventListState.initial() = _Initial;
  const factory EventListState.loading() = _Loading;
  const factory EventListState.loaded(List<Event> events) = _Loaded;
  const factory EventListState.error(String message) = _Error;
}

@freezed
class EventDetailState with _$EventDetailState {
  const factory EventDetailState.initial() = _DetailInitial;
  const factory EventDetailState.loading() = _DetailLoading;
  const factory EventDetailState.loaded(Event event) = _DetailLoaded;
  const factory EventDetailState.error(String message) = _DetailError;
}
            Node:                   Node: declaration{.'
 = ' = '.Node:   '
 = '          const factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _SuccessNode: '
{identifier('
 = ' = '(      error'
'
                  Node: Node: Node: argumentimport_or_export           = '        'jpy'Node: Node: '
redirecting_factory_constructor_signature = ' = '                    const factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _SuccessNode: import 'package:freezed_annotation/freezed_annotation.dart';string_literal'
 = 'formal_parameter_list'jpy' = '          '
(String message)Node:     declarationNode: '
const_builtin = ' = 'const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Eventconstlibrary_import'
                              Node: Node: ''
 = ' = 'import 'package:freezed_annotation/freezed_annotation.dart';''
'
          '
Node:       factoryredirecting_factory_constructor_signature = ' = 'factoryNode:                       '
const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event                      '
Node: import_specificationidentifier          Node: Node:  = '(import 'package:freezed_annotation/freezed_annotation.dart'; = ''
const_builtin         = ' = 'Node: constimport'
 = '(PaymentResultNode:           'Node: importfactory = ''
'
factory'
            '
                  Node: Node:  = 'identifier           = 'Node: Node: Event.'
 = '          'Node: .formal_parameter'
formal_parameter_list           = 'Node: ({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  })identifier = ''
 = '            successNode: '
configurable_uri          String messageNode: '
formal_parameter_list'
               = 'Node:  = 'type_identifier( = ' = '                  ('package:freezed_annotation/freezed_annotation.dart''
String            ({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  })Node: '
optional_formal_parameters'
'
 = '                      Node: {
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }Node: Node: '
)( = ' = ')('
              uri               = 'Node: 'package:freezed_annotation/freezed_annotation.dart'formal_parameter               = ''
String currencyNode: '
identifierNode:  = '                '
Node:             type_identifier             = 'String{Node: Node: optional_formal_parameters = 'string_literal = ' = '{
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }'
'
'package:freezed_annotation/freezed_annotation.dart'message{'
'
'
                          Node:               'Node:  = 'required'                Node: '
)               = 'Node: ){'
 = ' = '{              '
Node: Node: 'identifier = ' = ''currency          requiredNode: '
              '
                      Node: Node: required,='
Node:  = ';required = ''
 = '               = '              ;Node: =formal_parameter'
 = ',String id'
'
  Node: Node: formal_parameter'
part_directive = ' = '                String paymentIdNode:           '
Node:               part 'event.freezed.dart';Node: '
annotationtype_identifier = 'type_identifier@Default('stripe') = ' = '_Error'
'
String                      Node: Node: type_identifier; = '    String = ''
Node:                                 Node: Node: @ = 'identifier@ = 'partpaymentId'
'
 = '                              partNode: Node: ,'
 = ''
,                ;'
'
                    Node: Node: requiredNode:  = '}required = 'identifier     = '}Default'
'
=== End AST ===
                identifierNode:  = ''
arguments
=== Processing class:  = '              AppUserNode: ('stripe')Node: '
formal_parameter                   = 'Node: String sessionIdid ===
'
'
uri( = '              'event.freezed.dart' = ''
Node: (      ,Node:  = 'string_literal, = ''
'event.freezed.dart''
'
                              Node:                   type_identifierNode:  = 'Node: Stringargument
=== Processing class: '
required = ' = '                requiredNode: UserProfileidentifier'
 = '        sessionIdNode: '
 ===
''stripe'              '
 = '                    Node: 'Node: 
=== Processing class: string_literal               = 'AuthState'stripe'formal_parameter'
 = 'String title ===
'
Node: '
,         = '                ,Node: Node: '
type_identifier'               = 'Node:  = ''formal_parameter'
 = '                      String? paymentIntentIdStringNode: '
''
                 = 'Node: 'type_identifier'
 = '                                      StringNode: '
'     = '                'Node: '
nullable_typeNode: Node: 
=== Complete AST for source ===
identifier; = ' = 'Node:  = 'titleprogram'
 = ';import 'package:freezed_annotation/freezed_annotation.dart';

part 'event.freezed.dart';
part 'event.g.dart';

@freezed
class Event with _$Event {
  const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event;

  factory Event.fromJson(Map<String, dynamic> json) => _$EventFromJson(json);
}

@freezed
class EventCreateRequest with _$EventCreateRequest {
  const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest;

  factory EventCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventCreateRequestFromJson(json);
}

@freezed
class EventUpdateRequest with _$EventUpdateRequest {
  const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest;

  factory EventUpdateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventUpdateRequestFromJson(json);
}

@freezed
class EventListState with _$EventListState {
  const factory EventListState.initial() = _Initial;
  const factory EventListState.loading() = _Loading;
  const factory EventListState.loaded(List<Event> events) = _Loaded;
  const factory EventListState.error(String message) = _Error;
}

@freezed
class EventDetailState with _$EventDetailState {
  const factory EventDetailState.initial() = _DetailInitial;
  const factory EventDetailState.loading() = _DetailLoading;
  const factory EventDetailState.loaded(Event event) = _DetailLoaded;
  const factory EventDetailState.error(String message) = _DetailError;
}
?                                Node: Node: '
), = ' = '),'
'
                '
Node: Node:   formal_parameterNode:  = 'import_or_exportString paymentMethod'
'
 = '                              import 'package:freezed_annotation/freezed_annotation.dart';part_directive'
 = '    Node: Node: Node:                   part 'event.g.dart';requiredNode:  = 'required?library_importtype_identifier = ' = '?String'
'
 = '                                import 'package:freezed_annotation/freezed_annotation.dart';'
Node: '
identifierNode:  = 'identifier              paymentMethodNode: '
formal_parameter = ' = '              String descriptionNode: '
,'
 = '                      ,Node: '
type_identifierpaymentIntentId = '              StringNode: '
}     = 'Node: }import_specification'
 = '            import 'package:freezed_annotation/freezed_annotation.dart';                '
Node: Node: )identifier = ' = '        description)'
Node: Node: import = ''
'
          partimport              '
              Node:  = 'Node:         Node: ,, = ','
               = 'Node: ,part'
=              '
Node:     configurable_uriNode: uriNode:  = ' = '} = '='event.g.dart'required'package:freezed_annotation/freezed_annotation.dart''
 = ''
      }           = ''
'
Node: requiredNode:             type_identifierNode:  = 'string_literal_PaymentCreateRequest = ''
'event.g.dart'          Node: uri = ')'
'
'package:freezed_annotation/freezed_annotation.dart'              Node:          = 'formal_parameter       = 'Node: DateTime startDate;'
 = '                ;Node: '
)            '
'
Node:       Node: method_signature = 'factory PaymentCreateRequest.fromJson(Map<String, dynamic> json)'
        Node: factory_constructor_signature = 'factory PaymentCreateRequest.fromJson(Map<String, dynamic> json)Node: '          type_identifier'
 = 'Node:           string_literalNode:  = ' = '=DateTime'package:freezed_annotation/freezed_annotation.dart''
'
                              Node: Node: identifier'' = ' = ''
'startDate        '
Node:               'factoryNode: '
' = ' = '' = ' = '              '=Node: '
'
factory'
'
                        Node: Node: type_identifieridentifierNode:  = '        PaymentCreateRequest;'
 = '          ;Node: Node:  = ';,_Success = ''
 = ';      ,'
Node: '
;  .               = 'Node: .class_definition'
'
 = 'Node:           @freezed
class Event with _$Event {
  const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event;

  factory Event.fromJson(Map<String, dynamic> json) => _$EventFromJson(json);
}required = 'Node: '
required = ''
  ;              '
Node:       identifierNode: Node: declarationpart_directive     = 'formal_parameterpart 'event.freezed.dart'; = ''
Node:      = 'Node: annotationfromJsonpart'
 = '          Node:  = ' = 'formal_parameter_listconst factory PaymentResult.failed({
    required String errorMessage,
  }) = _Failedpart'
'
DateTime endDate            @freezedNode: '
uri       = 'Node: (Map<String, dynamic> json)redirecting_factory_constructor_signature'
'
 = '             = 'Node: const factory PaymentResult.failed({
    required String errorMessage,
  }) = _Failed(Node: 'event.freezed.dart''
'
@                      Node: string_literal = ' = ' = '('event.freezed.dart'Node: '
'
        type_identifierNode: @            ''
Node:  = 'formal_parameter'           = ''
Map<String, dynamic> json = '        '
Node: DateTimeNode: '              '
 = 'Node:                 'type_identifierNode: '
 = 'identifier      MapNode:     identifier'
const_builtin = 'Node:               ;freezedNode: '
 = ' = ' = '    ;Node: '
classtype_arguments  endDate = 'Node: class'
part_directiveconst              '
 = 'Node: part 'event.g.dart';, = '          <String, dynamic>Node: '
factory                '
'
 = '    factory = 'Node: '
part,          Node: Node: <     = 'Node: '
< = 'identifier'
               = 'Node:                 EventrequiredNode: '
type_identifierpart = ''
 = '    identifierStringrequired'
'
                Node:  = 'uri              Node: Node:     formal_parameter, = ' = ''event.g.dart' = ''
String location,PaymentResult'
'
                                Node: Node: type_identifierNode: '
Node:                 string_literalNode:  = 'type_identifier.'event.g.dart' = ' = ''
dynamic'
        superclass                Node:  = ''Node: with _$Event> = '.> = ''
String              '
'
                Node:  = 'Node: identifier''
                Node: Node: mixins'
identifier = '         = 'Node: identifierjson = ''
location             = 'Node: ')with _$Event = ''
 = ')failed'
'
'        '
      Node:               with'
 = 'Node: with          function_body'
        Node:      = ',Node: =>
      _$PaymentCreateRequestFromJson(json); = ''
,'
Node: ;type_identifier = ' = ';_$Event'
'
      Node: class_definition = '        @freezed
class Event with _$Event {
  const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event;

  factory Event.fromJson(Map<String, dynamic> json) => _$EventFromJson(json);
}Node: '
Node: class_body=>Node: formal_parameter_list     = 'Node:                = '({
    required String errorMessage,
  }) = 'annotation'
 = '=>@freezed            '
'
Node:               {
  const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event;

  factory Event.fromJson(Map<String, dynamic> json) => _$EventFromJson(json);
}Node: Node: '
@required       = 'Node: @{'
( = ' = ' = '{('
Node: '
requiredidentifier                   = 'Node: _$PaymentCreateRequestFromJsonNode: '
      identifier        optional_formal_parametersNode:  = 'Node: declaration = 'selector = '{
    required String errorMessage,
  } = 'freezed'
(json)const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event'
'
'
'
                                                  Node: Node: Node: argument_partredirecting_factory_constructor_signatureNode:  = 'classNode:  = 'formal_parameterclass'
{ = ' = '(json) = 'int capacity{'
'
                              const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _EventNode: '
arguments'
 = 'Node:                 Node:           identifierNode: Node: required(json) = ''
 = 'type_identifierrequired              EventNode: '
'
(     = 'Node: ( = 'superclassconst_builtin = ''
with _$Event = '              '
              int      Node: Node: formal_parameterconst = ''
String errorMessageargument'
                 = 'Node:                 identifierjson = 'Node: capacitytype_identifier'
 = ''
String'
                        '
Node:                 ,Node:  = 'Node: identifiermixins, = ''
with _$EventNode: '
 = 'factory                      Node:                 with = 'jsonfactory = ''
withNode: '
'
Node:                       Node: Node: type_identifierrequiredidentifier = ')          _$Event = ''
)Node:     '
Node: identifierclass_body = '         = 'Node:  = ';errorMessageEvent = '{
  const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event;

  factory Event.fromJson(Map<String, dynamic> json) => _$EventFromJson(json);
} = ''
;      '
required'
                Node: Node: '
}'
              Node:  = 'Node: },'
               = 'formal_parameter_list,  '
Node: {class_definition               = ' = '@freezed
class PaymentResult with _$PaymentResult {
  const factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _Success;

  const factory PaymentResult.failed({
    required String errorMessage,
  }) = _Failed;

  const factory PaymentResult.cancelled() = _Cancelled;
}Node: '
Node:  = '    {Node: '
annotation({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = '      }Node: @freezeddeclaration'
 = ''
 = '      }const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event'
formal_parameterNode: '
             = '        Node: Node: )            redirecting_factory_constructor_signature = 'int price) = '@const factory Event({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) = _Event = ''
'
Node: '
                    (Node:  = 'const_builtin@( = ''
const'
                      '
Node: Node: Node:           type_identifier            identifier = 'Node: =intfactoryNode:  = ''
 = ' = '                =Node: '
freezedidentifier           = 'Node: pricetype_identifier'
optional_formal_parameters'
factory                  '
Node:           Node: Node:  = 'identifier = ',class_Failed = '{
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  }class = ''
'
    Event              Node: Node: identifier{ = ' = 'PaymentResult,'
'
                  Node: Node: '
'
superclass                 = 'Node: with _$PaymentResult;Node:  = 'required; = ''
required      '
Node:  = ''
declaration{ = ''
formal_parameter_listconst factory PaymentResult.cancelled() = _Cancelled                                  Node: Node: formal_parameter = 'Node: ({
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  })requiredmixins = ''
 = ''
with _$PaymentResult        '
Node: String createdByredirecting_factory_constructor_signature = ' = 'requiredconst factory PaymentResult.cancelled() = _Cancelled'
'
                                    Node: (Node:  = ''
formal_parameter( = '                Node: String idNode: '
type_identifier                         = 'Node: Stringtype_identifierNode: '
 = 'withString            '
Node: const_builtinoptional_formal_parameters                 = ' = ''
const                withNode: '
'
Node:         identifier           = 'Node:  = 'createdByNode: factory'
 = 'identifierfactory              '
Node:  = '          ,Node:  = 'type_identifier{
    required String id,
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    required String createdBy,
    @Default('draft') String status, // draft, published, cancelled, completed
    String? imageUrl,
    List<String>? tags,
    @Default([]) List<String> attendees,
    DateTime? createdAt,
    DateTime? updatedAt,
  },id'
identifier'
              '
Node:  = 'annotation = ' = 'PaymentResult@Default('draft')              _$PaymentResult              Node: '
,Node:     {Node:  = 'class_body, = ''
{
  const factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _Success;

  const factory PaymentResult.failed({
    required String errorMessage,
  }) = _Failed;

  const factory PaymentResult.cancelled() = _Cancelled;
} = ''
{'
      '
Node: '
              {Node:  = '                {Node: '
@      required          Node:               declarationNode:  = 'Node:  = ' = 'required@required'
 = '                requiredNode: const factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _Successidentifier.'
 = ''
              .Node: '
 = '                        Node: Node: formal_parameterformal_parameteridentifierDefault = ' = ''
String titlecancelled = ''
String id'
'
                          '
Node:                 Node: formal_parameter_list                type_identifier = ' = 'Node: StringNode: '
type_identifierarguments                         = 'Node: Node: identifierredirecting_factory_constructor_signature = ' = 'id()'
const factory PaymentResult.success({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }) = _SuccessString              '
Node:  = ',           = 'Node: ('draft')'
,'
const_builtin'
 = '                constNode:               '
identifier                  Node: Node:  = '            titleNode: '
(               = 'Node: (,'
 = '            ,Node: '
)               = 'Node: required'
 = 'required          required = '('
 = '              (Node: '
required                  formal_parameterNode:  = 'argument)'
Node: String descriptionfactory               = 'Node: factory'
'
 = '                          Node: 'draft'type_identifierNode: formal_parameter = ' = '=String title = ''
=                StringNode: '
type_identifier                 = 'Node: Stringidentifier'
 = '                descriptionNode: '
identifier               = 'Node: title,'
 = '              ,Node: '
,               = 'Node: ,required'
 = '              requiredNode: '
required               = 'Node: requiredformal_parameter'
 = '              DateTime startDateNode: '
formal_parameter = 'String description'
                                Node: Node: type_identifiertype_identifier = ' = 'DateTime'
'
                          Node: Node: identifieridentifier = ' = 'PaymentResultstartDate'
'
          Node:               .Node:  = ',. = ''
,          '
Node:               identifierNode:  = 'requiredsuccess = ''
required'
'
'
                        Node:                     Node: formal_parameter_listStringformal_parameter = ''
 = '                ({
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  })DateTime endDateNode: '
'
identifier             = '                descriptionNode: '
type_identifierNode:  = '(DateTime = ''
(                '
Node:             identifierNode: Node: optional_formal_parameters = '          endDateNode: '
type_identifier = ' = 'string_literal              {
    required String paymentId,
    required String sessionId,
    String? paymentIntentId,
  }              Node: Node: '
, = ' = '              'draft',,'
'
 = '                                    ,Node: Node: '
'required = '               = 'Node: requiredrequired'
' = ''
              requiredNode: '
formal_parameterNode:  = '                      DateTime startDateNode: '
'{                 = 'Node: 'type_identifier'
 = '                  _CancelledNode: '
) = '      )Node: '
;               = 'Node: ;formal_parameter'
 = '      String statusNode: '
} = '                }Node: '
type_identifier = '  StringNode: '
class_definition                 = 'Node: @freezed
class PaymentState with _$PaymentState {
  const factory PaymentState.initial() = _StateInitial;
  const factory PaymentState.loading() = _StateLoading;
  const factory PaymentState.success(Payment payment) = _StateSuccess;
  const factory PaymentState.failed(String errorMessage) = _StateFailed;
}identifier'
 = '    statusNode: '
annotation               = 'Node: @freezed,'
 = '      ,Node: '
@               = 'Node: @comment'
 = '      // draft, published, cancelled, completedNode: '
identifier                 = 'Node: freezed//'
 = '    //Node: class'
 = '              classNode: '
formal_parameter     = 'Node: String? imageUrlidentifier'
 = '                PaymentStateNode: '
type_identifier              { = 'Node: '
DateTime              '
Node:                 requiredNode: formal_parameter = 'identifierrequired = ' = ''
startDate              Node:     String location'
'
Node:                                = 'formal_parameterNode: superclass = ', = 'String paymentId = 'with _$PaymentState,String'
'
Node:                 '
type_identifierNode:  = '                StringNode: '
'
                      Node:               type_identifierNode: nullable_typemixins = ' = '?with _$PaymentState'
'
                  Node:          = 'Node: Node: with? = 'identifier = 'with?'
 = ''
                        Node: Node: type_identifierStringlocation'
'
 = '              _$PaymentStateNode: '
identifier     = '                Node: imageUrlclass_body'
 = 'Node:               {
  const factory PaymentState.initial() = _StateInitial;
  const factory PaymentState.loading() = _StateLoading;
  const factory PaymentState.success(Payment payment) = _StateSuccess;
  const factory PaymentState.failed(String errorMessage) = _StateFailed;
}Node: '
,requiredidentifier, = ' = 'paymentId,'
'
                     = 'Node: required{'
 = '              Node:               { = 'Node: '
,formal_parameter      Node: '
Node: ,               = ' = 'requiredNode: declarationformal_parameter = ' = ' = 'List<String>? tags,DateTime endDate'
'
requiredconst factory PaymentState.initial() = _StateInitial              '
'
        Node: Node: required              redirecting_factory_constructor_signature = ' = 'requiredconst factory PaymentState.initial() = _StateInitial'
'
              Node: Node:           '
                Node: Node: const_builtintype_identifier = 'constformal_parameter = ' = 'List'
'
                formal_parameterString sessionId = ''
int capacityNode: type_identifier = 'DateTime          '
'
Node:                 factoryNode:  = '                factoryNode: '
identifier                                 = 'Node: Node: type_identifierendDatetype_arguments = ' = 'type_identifierString<String> = ''
int                  '
          '
'
Node:                 identifierNode:  = 'identifierPaymentState                Node: Node: <identifier = ' = '              '
Node: capacity          ,'
 = 'Node: ,              '
Node: < = '.sessionId              '
,               = 'Node:  = ',,'
 = '.,'
'
'
                                          Node: Node: type_identifierformal_parameterNode:  = ' = 'identifierString = ''
Node:                   requiredNode:  = '              String? paymentIntentIdinitial>'
 = ''
                >Node: Node:           type_identifierNode:  = 'requiredrequiredformal_parameter_list = ' = ''
()'
'
                requiredString            '
Node:                 ('
 = '              (              '
Node:             formal_parameterNode:  = 'Node: )Node: Node:  = 'nullable_type) = 'nullable_type'
 = '          ?String locationNode: '
formal_parameter?'
='
 = '                  =Node: '
? = '                                            Node: Node: Node: type_identifiertype_identifier = 'int price?'
 = '                 = 'StringNode: _StateInitialtype_identifier'
 = ' = ''
int                ?'
Node:                 identifierNode:  = 'identifier'
       = '                priceNode: '
;               = '?Node: Node: '
,identifier = '                , = ''
Node: paymentIntentId;identifier'
'
 = '              locationtags'
'
                                  Node: Node: Node: ,               = 'Node: ,declarationNode: required, = ' = ' = 'const factory PaymentState.loading() = _StateLoading,required'
'
                            '
Node:         formal_parameterNode:  = 'redirecting_factory_constructor_signatureString createdBy = ''
'
const factory PaymentState.loading() = _StateLoadingNode: '
}           = '              Node: ,const_builtin                 = '} = 'Node: Node: type_identifier = ','
'
required               = 'const            Node: Node: annotation)required = ' = 'String'
'
@Default([])                          Node: Node: identifier'
 = 'factorycreatedBy                '
 = '              factoryNode: '
Node: '
                        Node: Node: formal_parameteridentifier = ' = 'int capacityPaymentState'
'
)          '
Node:           ,                 = 'Node: .type_identifierNode:  = ' = 'int='
. = '                '
Node:           identifier,=Node: '
identifier'
 = '@           = 'Node: @type_identifier'
 = ' = '                capacityNode: '
identifier               = '_SuccessNode: loading              '
Node:           annotation'
 = 'Node: @Default('draft')formal_parameter_list'
       = 'Default()'
,'
                             = 'Node: Node:                 ,arguments(Node: Node:  = ' = '([]);'
( = '              ;'
'
@       = 'Node:             @declaration'
 = 'Node: const factory PaymentResult.failed({
    required String errorMessage,
  }) = _Failedrequired'
 = '                        '
Node: Node:                   )redirecting_factory_constructor_signature = ' = ')Node: '
(Node:            = 'requiredNode: (identifier='
 = '                  =Node: const factory PaymentResult.failed({
    required String errorMessage,
  }) = _Failedargument'
 = '[]          '
Node: '
 = 'const_builtinDefault = ''
const                    '
Node: '
list_literal           = '          Node: []Node: factory'
type_identifier                       = 'Node: _StateLoading['
 = ' = '[factory'
'
                                      Node: Node: ]identifier = ' = ']Node: '
PaymentResult                  '
Node:               )           = ';)                '
 = 'Node: ;formal_parameter'
              Node:  = 'Node: .formal_parameterint priceNode: '
arguments = '                List<String> attendees = 'Node: ('draft')type_identifier = ' = '.int'
'
'
'
                          Node: Node: identifieridentifier = ' = 'pricefailed'
'
                        Node: Node: ,formal_parameter_list = ' = ',      '
Node:               declarationNode:                   requiredNode:  = '(required = ''
                (({
    required String errorMessage,
  })'
'
 = 'Node:               type_identifierNode:  = '                              const factory PaymentState.success(Payment payment) = _StateSuccessNode: formal_parameterargument'
 = ' = '        'draft'Node: '
redirecting_factory_constructor_signatureListString createdByNode:                     '
(Node:                  = 'Node: string_literal(type_identifier'
 = ' = 'String'draft'            '
Node:                       '
optional_formal_parameters                Node:  = 'Node: {
    required String errorMessage,
  }''
identifier               = 'Node: createdBy{'
 = '{'
               = '                'Node: '
type_arguments                      Node: Node: ,' = ' = ' = '','
const factory PaymentState.success(Payment payment) = _StateSuccess'
'
 = '                            Node: Node: annotation'
<String>required'
 = '          required                  '
Node:               <                  Node: Node: formal_parameterconst_builtin = ' = 'String errorMessageconst'
'
Node:  = ' = '@Default('draft'))'
 = '                )<'
'
                                                Node: Node: type_identifierformal_parameter = ' = 'StringString statusNode: '
type_identifier                 = '          Node: Node: type_identifierfactoryString = ''
String                '
 = '                Node: Node: factoryNode: identifieridentifier'
'
@                            Node:  = ' = '@>'
 = '                Node: Node: >identifieridentifier'
 = ' = 'Default = 'statusPaymentState'
'
                '
errorMessage              '
Node:               ,                 = 'Node:           ,Node:  = '.Node:  = 'identifier. = ''
Node: ,          attendeesNode: '
identifier              ,Node: '
arguments,'
 = ' = ',              '
 = '                            Node: Node: commentformal_parameter = ' = '// draft, published, cancelled, completedDateTime? createdAt('draft')Node: success}'
 = '          }Node: '
formal_parameter_list'
            '
                  Node:                 Node: Node: )// = ' = ')'
( = '                (Payment payment) = 'Node: (type_identifier'
'
 = ''
DateTime                      '
Node:                 =                  Node: Node: Node: argumentnullable_type = '//'draft'( = ' = ''
?='
 = '                                (Node: '
?             = 'Node: ?formal_parameterNode: '
formal_parameter'
 = '                              String? imageUrlNode: '
string_literal                 = ''
Node: Node: type_identifiertype_identifier = ' = 'String = '_Failed'
'
                      Node:                 Payment paymentNode: '
'draft'Node:               ;Node:  = 'type_identifier; = ''
Payment      '
Node:               declarationNode:  = 'identifierconst factory PaymentResult.cancelled() = _Cancelled = ''
payment        '
Node:             redirecting_factory_constructor_signatureNode:  = ')const factory PaymentResult.cancelled() = _Cancelled = ''
)          '
Node:           const_builtinNode:  = '=const = ''
=          '
Node:           factoryNode:  = 'type_identifierfactory = ''
_StateSuccess          '
nullable_type       = 'Node: ?;'
 = '                  ;Node: '
?       = 'Node: ?declaration'
 = '                const factory PaymentState.failed(String errorMessage) = _StateFailedNode: '
identifier         = 'Node: imageUrlredirecting_factory_constructor_signature'
 = '              const factory PaymentState.failed(String errorMessage) = _StateFailedNode: '
,           = 'Node: const_builtin = 'const'
          Node: factory = 'factory,'
              Node: formal_parameter = 'List<String>? tags'
                Node: type_identifier = 'List'
                Node: Node: identifieridentifier = ' = 'PaymentResultcreatedAt'
'
'
                                              Node: Node: '. = 'type_arguments = 'Node: .'
'
,           = '          Node: Node: identifieridentifier = ',cancelled = ''
'
PaymentState          '
Node:               formal_parameter_list          Node:  = 'Node: formal_parameter() = ''
DateTime? updatedAt = '.            <String>Node:  = '('
. = ''
'(                  '
Node: '
<'
                            Node:           )Node:  = 'Node: type_identifier                       = 'Node: DateTime' = ' = ''
<')identifier'
                '
                  Node:           Node: nullable_typeNode: type_identifier = ' = '?String'
'
'
=                                    Node:  = '>= = ''
>          '
Node: Node:                  = 'Node: )failed = ''
)nullable_type          '
 = 'Node:               formal_parameter_listNode:  = '?                  formal_parametertype_identifier = ' = 'String statusNode: _Cancelled'
?'
 = '                ?Node: '
type_identifier                  (String errorMessage) = 'Node: String?'
       = ''
?'
'
                                            Node: Node: Node: (identifieridentifier = ' = ' = '(tagsupdatedAt'
'
            '
                            Node: Node: ,Node:  = 'Node: formal_parameter; = ',String errorMessage'
'
               = 'Node:               annotationNode:  = ';@Default([])'
                '
      Node: Node:                 }Node:  = 'identifier@} = ' = '@'
'
                  Node: Node: statusidentifiertype_identifier'
, = '              DefaultNode: '
 = 'class_definition,, = ''
 = '               = 'Node: String@freezed
class PaymentState with _$PaymentState {
  const factory PaymentState.initial() = _StateInitial;
  const factory PaymentState.loading() = _StateLoading;
  const factory PaymentState.success(Payment payment) = _StateSuccess;
  const factory PaymentState.failed(String errorMessage) = _StateFailed;
}                '
,    Node: Node: '
annotationarguments = ' = '@freezed([])              '
Node: }comment = ''
}                                '
Node: Node:             identifier(Node:  = ')( = ''
 = ')      errorMessage'
Node: '
          @Node:             =Node:  = ') = ' = '=)'
'
'
                  Node: @argument           = 'Node: // draft, published, cancelled, completedtype_identifier           = ' = '_Event'
'
[]'
'
                      Node: Node:                           Node: =Node: Node: identifier// = ' = 'freezed//'
'
list_literal = ';= = ''
;               = 'Node: Node: class[]type_identifier'
 = '                      _StateFailedNode: '
 = '[class = '      [Node: '
;'
               = '    Node: ;Node: '
identifierformal_parameter       = ' = 'Node: PaymentStateString? imageUrl'
}     = 'Node: }superclass'
 = '=== End AST ===
with _$PaymentState'
      
=== Processing class: Node: Paymentmixins ===
 = ''
'
                                      Node:       Node: Node: type_identifiermethod_signature = ' = ']factory Event.fromJson(Map<String, dynamic> json) = 'with _$PaymentState'
'
]        '
Node:                   factory_constructor_signature         = 'Node: factory Event.fromJson(Map<String, dynamic> json)with'
 = '          withNode: '
factory         = 'Node: factorytype_identifier'
 = '          _$PaymentStateNode: '
identifier     = 'Node: Eventclass_body'
 = '          {
  const factory PaymentState.initial() = _StateInitial;
  const factory PaymentState.loading() = _StateLoading;
  const factory PaymentState.success(Payment payment) = _StateSuccess;
  const factory PaymentState.failed(String errorMessage) = _StateFailed;
}Node: '
.       = 'Node: .{'
 = 'String{
=== Processing class:           PaymentCreateRequestNode: '
identifier       = 'Node: fromJsondeclaration'
 = ''
           ===
                Node: Node: formal_parameter_listnullable_type = ' = '(Map<String, dynamic> json)Node: '
)
=== Processing class:  = '            PaymentResult)Node: '
(               = ' ===
(
=== Processing class: '
?PaymentState'
             ===
Node:                   formal_parameterNode:  = '?Map<String, dynamic> json = ''
?'
                              Node: Node: type_identifieridentifier = ' = 'MapimageUrl'
'
                            Node: Node: type_arguments, = ' = '<String, dynamic>,'
'
                              Node: Node: <Node:  = 'formal_parameterformal_parameter = ' = 'List<String>? tagsconst factory PaymentState.initial() = _StateInitialList<String> attendees'
'
                                <Node: '
type_identifier         = 'Node: Listredirecting_factory_constructor_signature'
 = ''
const factory PaymentState.initial() = _StateInitial                '
Node:                 type_argumentsNode:  = 'Node: <String>type_identifier'
          type_identifier = ' = 'StringListNode: '
const_builtin                   = '                '
Node:                 const,Node:  = '<, = ''
'
<Node:                           Node: Node: factorytype_arguments'
 = ' = '<String>factory'
'
                                              Node: Node: identifier< = ' = 'PaymentStateNode: '
<          '
Node: .type_identifiertype_identifier = ' = 'String                  '
Node:  = '                  type_identifier. = ''
String          dynamicNode: Node: >'
 = '                >Node: '
identifier>                 = 'Node: initialidentifier'
 = '          attendeesNode: '
formal_parameter_list               = 'Node:  = ',> = ''
,'
'
                                              Node: Node: Node: identifierformal_parameter = ' = '>json = ''
>            ()Node: '
)DateTime? createdAt = '            '
)Node: '
(       = 'Node: (function_body                 = ''
=> _$EventFromJson(json);            '
'
        Node: Node: Node: )=> = ' = ')=>                type_identifierNode:  = 'nullable_typeDateTime = ''
?'
'
                                          Node: Node: ?identifier = ''
 = '          ?Node: '
=                _$EventFromJsonNode:  = 'identifier=Node: '
nullable_type           = 'Node: ?type_identifier'
'
                   = 'Node:  = '?tags = '        '
_StateInitialNode:               '
selectorNode:  = ',       = 'Node: ,'
(json)?              '
Node:                 ;'
annotation = '          ;Node: '
 = 'argument_partNode:  = '@Default([])(json)identifier'
'
             = '                Node: createdAtNode: arguments'
 = '@              (json)Node:  = ''
,@ = '              '
Node:                 (Node:  = ',('
'
                            identifierNode: Node:  = 'argumentformal_parameter = 'Defaultjson = ''
'
                DateTime? updatedAtNode: '
identifier                 = '                json      Node: '
Node:               declarationNode:  = ')Node:  = 'type_identifier) = ''
argumentsDateTime = '        '
Node: const factory PaymentState.loading() = _StateLoading                ;Node:  = 'nullable_type'
([]);        '
Node: '
                  redirecting_factory_constructor_signature      Node:  = '(Node:  = ' = '}?('
'
                                    Node: Node: ?argument = ' = '?}'
'
                const factory PaymentState.loading() = _StateLoadingNode:   identifierNode:  = 'class_definitionupdatedAt = ''
@freezed
class EventCreateRequest with _$EventCreateRequest {
  const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest;

  factory EventCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventCreateRequestFromJson(json);
} = ''
[]'
    '
Node:           annotation                     = 'Node: @freezedlist_literal'
Node:  = 'const_builtin       = 'Node: const@               = 'Node: @,'
[]       = 'Node: '
identifier, = ''
freezed'
'
                                        Node: Node: class} = ' = 'classNode: '
              [Node: Node:  = 'identifier[ = ''
EventCreateRequest                      factoryNode:  = ''
factory]'
 = '          ]}    '
'
Node:                   superclassNode:              = 'Node: ))with _$EventCreateRequest = ' = '))'
'
'
                              Node: Node: =Node: formal_parameter = ' = '=List<String> attendees'
'
mixins                           = 'Node: Node: with _$EventCreateRequesttype_identifiertype_identifier = ' = '_EventList'
'
'
                              Node: Node: ;type_arguments = 'Node:  = 'Node: <String>with'
 = 'identifierwith                   = 'Node: '
<PaymentState = '        '
<          Node: Node: '
type_identifier                   = 'Node: _$EventCreateRequesttype_identifier'
 = '    ;Node: '
String.'
 = 'class_body.                  '
Node:                  = 'Node: {
  const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest;

  factory EventCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventCreateRequestFromJson(json);
}method_signature'
 = '      factory Event.fromJson(Map<String, dynamic> json)Node: '
{         = 'Node: {factory_constructor_signature> = ' = 'factory Event.fromJson(Map<String, dynamic> json)>'
'
'
          Node: Node:       identifierfactory = ' = 'loadingfactoryNode: '
                          Node: Node: declarationidentifier = ' = ''
Eventconst factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest'
          '
          Node: Node:         .Node:  = 'redirecting_factory_constructor_signatureformal_parameter_list. = ''
const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest          '
Node:           identifierNode:  = 'const_builtinfromJsonidentifier'
 = '          constNode:  = ' = 'formal_parameter_list() = 'attendees'
'
'
                      Node:               Node: (factoryNode:  = ' = '(,factory'
'
                      Node: Node:  = 'identifier, = ''
EventCreateRequest(Map<String, dynamic> json)'
              '
          )Node:  = 'formal_parameter_list) = ''
({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  })          '
Node:             =Node:  = '(= = 'Node: (formal_parameter'
 = 'DateTime? createdAt'
                                        '
Node: type_identifierNode:  = 'Node:           optional_formal_parametersDateTime = '({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  } = ''
(Node: '
                          Node: Node: {formal_parametertype_identifier = ' = 'Map<String, dynamic> json{'
 = ''
'
_StateLoading                              '
Node: Node: required       = 'nullable_typeNode: required = ''
?'
              ;                  Node: Node: formal_parameter              ? = ' = '; = ''
?      '
Node: declarationString title                 = ''
const factory PaymentState.success(Payment payment) = _StateSuccessNode: '
                identifierNode:          = 'Node: createdAtredirecting_factory_constructor_signature'
 = '              const factory PaymentState.success(Payment payment) = _StateSuccessNode: Node: type_identifier, = ' = ','
'
type_identifier           = 'Node: String              '
const_builtinNode:                  = 'Mapformal_parameter'
 = 'DateTime? updatedAtconstNode: '
              identifier                 = 'Node: Node: type_identifiertype_arguments = ' = 'DateTime<String, dynamic>'
'
                          '
Node: Node: nullable_typefactory = ' = '?factory'
'
                                            titleNode: Node: identifier'
 = '<PaymentState = ''
<Node:               '
?Node:                  = ',Node:  = 'type_identifier,          '
Node:               .Node:  = 'required? = '. = ''
'
Stringrequired'
'
          Node:                 identifierNode:  = 'identifiersuccess = ''
updatedAt                              Node: Node: formal_parameter, = ' = 'String description,          '
Node: '
                formal_parameter_list              Node:  = 'type_identifier(Payment payment) = 'Node: dynamic'
'
                            Node: Node: (>,'
 = '                , = ''
 = '              (Node: '
}> = ''
}              '
Node:             identifierNode: Node: )type_identifier = ' = ' = 'String)json'
'
                      Node: Node: =) = ' = ''
)'
                      Node: Node: identifierfunction_body = ' = 'description=> _$EventFromJson(json);            '
=              Node: '
Node: formal_parameter,           = ' = ',Node: '
type_identifier               = 'Payment paymentNode: '
required               = 'Node: _Eventtype_identifier'
 = '      Paymentrequired'
'
                            Node: Node: ;formal_parameter = '; = ''
DateTime startDate      '
'
Node:         identifierNode:  = '=>paymentNode: '
method_signature             = '                 = 'Node: factory Event.fromJson(Map<String, dynamic> json)type_identifier'
 = '        DateTimeNode: =>factory_constructor_signature'
 = '        factory Event.fromJson(Map<String, dynamic> json)Node: '
identifier           = 'Node: _$EventFromJsonNode: '
)factory         = 'Node: factory'
'
                          Node:  = 'identifierselector) = ''
Node:           identifierNode:  = 'Event(json)'
'
 = '                    Node: Node: .argument_part = ' = 'startDate(json)'
'
                          Node: Node: ,arguments. = ' = ''
,(json)'
          '
              Node:               =Node: Node:  = '(required= = ''
 = '          (identifierNode:  = 'type_identifierfromJsonrequired = ''
'
          _StateSuccessNode: '
formal_parameter_list'
 = '      (Map<String, dynamic> json)Node: '
;                            Node:  = 'formal_parameter; = ''
Node:                   argumentNode:  = 'declarationjson = ''
const factory PaymentState.failed(String errorMessage) = _StateFailed                Node: '
Node: identifier         = 'Node: jsonredirecting_factory_constructor_signature'
( = '              const factory PaymentState.failed(String errorMessage) = _StateFailedNode: '
 = '          DateTime endDateNode: '
const_builtin)                (Node: '
type_identifier             = 'Node: )formal_parameter'
 = '        Map<String, dynamic> jsonNode: ;'
 = ' = 'const;'
'
 = '                    Node: Node: }type_identifierDateTime = ''
Map                          Node: Node: identifier = ''
factory = '              endDateNode: '
type_arguments} = ' = ''
factory<String, dynamic>'
'
                          Node: Node:   identifier< = ' = 'PaymentState<'
Node:           class_definitionNode: '
.                 = 'Node: .type_identifier = ''
 = '          @freezed
class EventCreateRequest with _$EventCreateRequest {
  const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest;

  factory EventCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventCreateRequestFromJson(json);
}StringNode: '
'
identifier                 = 'Node: failed    '
Node:               annotationNode:  = ',@freezed = ''
,      '
Node: @ = '@,'
 = '      ,Node: '
identifier = '          freezedNode: '
formal_parameter_list     = 'Node: (String errorMessage)class'
 = '            classNode: '
(     = 'Node: (identifier'
 = '            EventCreateRequestNode: '
formal_parameter     = 'Node: String errorMessagesuperclass'
 = '              with _$EventCreateRequestNode: '
type_identifier       = 'Node: Stringmixins'
 = '              with _$EventCreateRequestNode: '
identifier         = 'Node: errorMessagewith'
 = '            withNode: '
)         = 'Node: )type_identifier'
 = '          _$EventCreateRequestNode: '
    Node: =class_body = ' = '={
  const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest;

  factory EventCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventCreateRequestFromJson(json);
}'
'
                Node: Node: type_identifier{ = ' = '_StateFailed              '
{Node: '
required             = 'required'
                              Node: Node: type_identifierformal_parameter = ' = 'dynamicString location'
'
Node:                 declarationNode:                 type_identifierNode:  = '>String = ''
>                '
Node:               identifierNode:  = 'identifierlocation = ''
Node:               ;Node:  = ',; = ''
json      '
 = '            const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest,Node: '
'
        )Node:               redirecting_factory_constructor_signatureNode:  = 'requiredconst factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest = ''
required           = 'Node: '
const_builtin) = ''
const      '
                        Node: Node: formal_parameterfactoryNode:  = 'function_bodyfactoryNode:  = '}int capacity = ''
 = '}                => _$EventFromJson(json);'
Node: '
=== End AST ===
type_identifier         = 'Node: 
=== Processing class: int=>'
Payment                 ===
Node: 
=== Processing class:  = ''
=>PaymentCreateRequest'
                  Node: Node: identifier ===
 = 'EventCreateRequest'
          Node: formal_parameter_list = '({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  })'
            Node: ( = '('
            Node: optional_formal_parameters = '{
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }
=== Processing class: '
PaymentResult ===

=== Processing class: PaymentState ===
              identifieridentifier = ' = '_$EventFromJsoncapacity'
'
                      Node: Node: selector, = ' = '(json),'
'
              Node: required = 'required'
              Node: formal_parameter = 'int price'
          Node: argument_part = '(json)'
            Node: arguments = '(json)'
              Node: ( = '('
              Node: argument = 'json'
                Node: identifier = 'json'
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}Node: '
{   = 'Node: {class_definition'
 = '              @freezed
class EventCreateRequest with _$EventCreateRequest {
  const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest;

  factory EventCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventCreateRequestFromJson(json);
}Node: '
required     = 'Node: requiredannotation'
 = '              @freezedNode: '
formal_parameter       = 'Node: String title@'
                Node: type_identifier = 'String'
                Node: identifier = 'title'
              Node:                 ,Node:  = 'type_identifier, = ''
int              '
 = '                @Node: '
identifier       = 'Node: Node: identifier = 'freezed'
    Node: class = 'class'
    priceNode: '
identifier               = 'Node: EventCreateRequest,'
 = '    ,Node: '
superclass               = 'Node: with _$EventCreateRequestformal_parameter'
 = '      String? imageUrlNode: '
mixins                 = 'Node: with _$EventCreateRequesttype_identifier'
 = '        StringNode: '
with = 'with'
        Node: type_identifier = '_$EventCreateRequest'
    Node: class_body = '{
  const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest;

  factory EventCreateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventCreateRequestFromJson(json);
}'
                      Node: Node: {nullable_type = ' = '{?'
required                  Node: ? = '?'
 = '                requiredNode: '
identifier               = 'imageUrl'
              Node: , = ','
              Node: formal_parameter = 'List<String>? tags'
                Node: type_identifier = 'List'
'
      Node: Node: declarationformal_parameter = ' = 'const factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequestString description'
'
        Node:                 redirecting_factory_constructor_signatureNode:  = 'type_identifierconst factory EventCreateRequest({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }) = _EventCreateRequest = ''
String          Node: const_builtin = ''
const                '
                          Node: Node: identifierfactoryNode:  = 'type_argumentsfactory = ''
<String>          '
Node:  = 'identifierdescription = ''
EventCreateRequest              '
Node:                   ,Node:  = '          <, = ''
<Node: '
formal_parameter_list                   = 'Node: ({
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  })type_identifier'
 = '            StringNode: '
(                   = 'Node: (>              '
Node:             requiredNode:  = 'optional_formal_parametersrequired = ''
{
    required String title,
    required String description,
    required DateTime startDate,
    required DateTime endDate,
    required String location,
    required int capacity,
    required int price,
    String? imageUrl,
    List<String>? tags,
  }              '
Node:               formal_parameterNode:  = '{DateTime startDate = ''
{'
                              Node: Node: type_identifierrequired = ' = 'DateTimerequired'
'
                              Node: Node: identifierformal_parameter = ' = 'startDateString title'
'
                              Node: Node: ,type_identifier = ' = ',String'
'
                              Node: Node: requiredidentifier = ' = 'requiredtitle'
'
                            Node: Node: formal_parameter, = ' = 'DateTime endDate,'
'
                              Node: Node: type_identifierrequired = ' = 'DateTimerequired'
'
                              Node: Node: identifierformal_parameter = ' = 'endDateString description'
'
                              Node: Node: ,type_identifier = ' = ',String'
'
                              Node: Node: requiredidentifier = ' = 'requireddescription'
 = ''
>              '
Node:                 ,Node:  = '              nullable_type,Node: '
 = 'formal_parameter?               = 'Node: String locationrequired'
 = ''
required                  '
                              Node: Node: formal_parametertype_identifier = ' = 'DateTime startDateNode: String?'
'
 = '                                Node: Node: identifiertype_identifier = '? = 'location'
'
DateTime              '
Node: ,                 = '                ,Node: Node: identifier'
 = '              startDateNode: '
required               = 'Node: requiredidentifier'
 = '              tagsNode: '
formal_parameter               = 'Node: int capacity,'
 = ',                , = 'Node: '
type_identifier,              '
 = 'Node: int}'
 = '                              Node: Node: identifier} = 'requiredcapacity = ''
'
                          Node: Node: ,) = ' = ',)'
'
                        Node: Node: required= = ' = 'required='
'
                        Node: Node: formal_parameterrequired = ''
int pricetype_identifier'
 = '_EventCreateRequest                '
Node:       type_identifierNode:  = ';int = ''
;                '
Node:               identifierNode:  = 'formal_parameterprice = ''
DateTime endDate              '
Node:                 ,Node:  = 'type_identifier, = ''
DateTime              '
Node:                 formal_parameterNode:  = 'identifierString? imageUrl = ''
endDate                '
                    Node: Node: method_signature, = ' = 'factory EventCreateRequest.fromJson(Map<String, dynamic> json),'
'
                      Node: Node: factory_constructor_signatureNode:  = 'type_identifierfactory EventCreateRequest.fromJson(Map<String, dynamic> json)required'
 = '          requiredNode: '
factory = '              factoryNode:  = 'formal_parameter'
 = '          String locationNode: Stringidentifier'
 = '                EventCreateRequestNode: '
nullable_type           = ''
?Node: '
                                  .Node: Node: type_identifier? = ' = 'String. = ''
'
                          Node: Node: ?identifier'
 = '                fromJsonNode: '
identifieridentifier           = 'Node: locationformal_parameter_list'
 = ' = '(Map<String, dynamic> json)imageUrl              '
'
                          Node: Node: (Node: , = ' = '(,'
'
            ,Node:  = '              formal_parameter, = ''
Map<String, dynamic> json              Node: Node: '
requiredformal_parameter = '               = 'requiredNode: '
List<String>? tags              '
Node: type_identifierformal_parameter = '                Map = 'Node: '
int capacity              type_identifier'
 = 'Node: List                '
type_arguments                 = 'Node: <String, dynamic>Node: '
type_identifier                 = 'Node: int<'
 = '                <Node: '
identifier                 = 'Node: capacitytype_identifier'
 = '              StringNode: '
,                 = 'Node: ,,'
 = '              ,Node: '
required                 = 'Node: requiredtype_identifier'
 = '              dynamicNode: '
formal_parameter                 = 'Node: int price>'
 = '                >Node: '
type_identifier               = 'Node: intidentifier'
 = '                jsonNode: '
identifier             = 'Node: price)'
 = '              )Node: '
,       = 'Node: ,function_body'
 = '              =>
      _$EventCreateRequestFromJson(json);Node: '
formal_parameter         = 'Node: String? imageUrl=>'
 = 'type_arguments                => = ''
Node: <String>        type_identifier'
Node:  = 'identifier                   = 'Node: _$EventCreateRequestFromJson<'
 = 'String        <Node: '
selector                  '
Node:                 type_identifierNode:  = ' = 'Stringnullable_type'
 = '(json)                  '
Node:           >Node:  = 'argument_part> = ''
?                '
Node:                   nullable_typeNode:  = '?? = '(json)?'
'
'
                                              Node: Node: argumentsidentifierNode:  = ' = 'imageUrl?(json)'
 = '              ?Node: '
,'
               = 'Node: ,('
 = '              (Node: '
                              Node: Node: identifierargument = ' = 'tagsjson'
'
              Node: ,                 = 'formal_parameter,Node: '
identifier               = 'Node: json}'
 = '              } = 'Node: List<String>? tags'
)            '
 = 'Node: )                )Node:  = 'type_identifier) = ''
List'
          '
Node:                         Node: type_arguments=Node:  = ' = ';<String>='
'
                            Node:  = 'Node: ;type_identifier<'
 = '      _EventCreateRequestNode: '
 = '}       = '<}'
'
Node:                     ;Node: Node: type_identifierclass_definition = ' = ' = '@freezed
class EventUpdateRequest with _$EventUpdateRequest {
  const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest;

  factory EventUpdateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventUpdateRequestFromJson(json);
}String'
;    '
Node: '
annotation                   = '      @freezedNode: Node: '
method_signature       = '>Node: factory EventCreateRequest.fromJson(Map<String, dynamic> json)@'
 = ' = '@        '
Node: >factory_constructor_signature       = 'Node: '
identifier = 'factory EventCreateRequest.fromJson(Map<String, dynamic> json)freezed'
'
                              Node: Node: nullable_typeNode: class = ' = 'factoryclass?'
 = '    '
Node: factoryidentifier                   = ''
EventUpdateRequestNode: '
              Node: Node: ?superclass = ' = 'identifierwith _$EventUpdateRequest = ''
?      '
Node: EventCreateRequestmixins                 = 'Node: with _$EventUpdateRequest'
'
                  identifierNode: withNode:  = '.with = ''
tags         = 'Node: type_identifier'
 = '._$EventUpdateRequest              '
'
Node:               Node: Node: identifierclass_body, = ' = '{
  const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest;

  factory EventUpdateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventUpdateRequestFromJson(json);
} = ''
fromJson      ,'
Node: '
{           = '              {Node: Node: '
formal_parameter_list}       = 'Node: (Map<String, dynamic> json)declaration = ' = '}const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest'
'
'
                    Node: Node: redirecting_factory_constructor_signature             = 'Node: const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest('
 = '          )Node:  = '(const_builtin) = ''
const'
'
                                Node: Node: Node: formal_parameterfactory= = ' = ' = 'factoryMap<String, dynamic> json'
'
          =Node:               '
identifierNode:  = '          type_identifierEventUpdateRequest = ''
Node:           MapNode: '
formal_parameter_list              type_identifier = 'Node: ({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  })type_arguments'
 = '             = 'Node: <String, dynamic>(_EventCreateRequest'
 = ''
(                '
                  Node: Node: <optional_formal_parameters = ' = '<{
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }'
'
                Node:               Node: Node: type_identifier{ = ';{ = ''
 = 'String              ;Node: '
formal_parameter'
 = '                      String? titleNode: Node: '
,method_signature                 = 'Node:  = ',type_identifier'
 = '                factory EventCreateRequest.fromJson(Map<String, dynamic> json)StringNode: '
type_identifier                Node: '
nullable_type         = '? = ''
dynamic                  Node: Node: '
factory_constructor_signature? = ' = '                ?factory EventCreateRequest.fromJson(Map<String, dynamic> json)Node: '
'
                >Node:           identifier = ' = 'Node: >titlefactory'
 = ''
                            factoryNode: Node: ,'
 = '          ,Node: identifier'
identifier               = 'Node:  = 'formal_parameterjsonEventCreateRequest'
'
 = '                      Node: String? description)'
 = 'Node:                 .Node: )type_identifier = ' = ''
String.'
'
                                Node: Node: Node: nullable_typefunction_body = ' = '?=>
      _$EventCreateRequestFromJson(json);identifier'
'
 = '                  fromJsonNode: '
?           = 'Node: ?        '
Node:                 =>Node:  = 'identifier=> = 'formal_parameter_listdescription = ''
'
                      Node: Node: ,identifier = '(Map<String, dynamic> json), = ''
_$EventCreateRequestFromJson'
              '
Node:             formal_parameter         = 'Node: DateTime? startDateNode: '
(                 = 'Node: (type_identifier'
 = '            DateTimeNode: '
formal_parameterselector = ' = '                (json)Node: Map<String, dynamic> json'
'
                        nullable_typeNode: Node: type_identifier = ' = 'argument_partMap?'
'
               = 'Node:                   type_arguments(json) = 'Node: <String, dynamic>?'
 = '                ?Node: '
< = ''
<                '
            Node:                 Node: Node: argumentstype_identifier = ' = '(json)Stringidentifier'
 = '                '
Node:               ,startDate = ''
,              '
Node: Node:                 ,Node: type_identifier = ' = ',dynamic'
'
(                 = 'Node: (>               = 'Node: >'
'
                            Node: Node: formal_parameteridentifier = ' = 'argumentjson = ''
DateTime? endDatejson            '
Node: '
)                 = 'Node: )identifier'
 = '      jsonNode: function_body                 = 'Node: =>
      _$EventCreateRequestFromJson(json);type_identifier'
 = ''
        DateTimeNode: '
=>               = 'Node: =>                '
Node: nullable_type        )Node:  = 'identifier = ' = '?_$EventCreateRequestFromJson'
'
)                          Node: Node: selector? = ''
 = '(json)?'
'
                                  Node: Node: identifier;Node:  = ' = 'endDate;'
'
              Node: argument_part, = ' = '(json),      '
Node: '
              }Node:             formal_parameterNode:  = ' = 'String? locationarguments'
}                '
Node:   type_identifierNode:  = ' = 'Stringclass_definition'
 = '(json)                '
Node:               nullable_typeNode:  = '(? = ''
('
                  @freezed
class EventUpdateRequest with _$EventUpdateRequest {
  const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest;

  factory EventUpdateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventUpdateRequestFromJson(json);
}              Node: '
?     = 'Node: ?argument'
Node:                 annotationNode:  = 'identifier@freezed = ' = 'locationjson'
'
                    Node: '
,                 = 'Node: ,@'
Node:               identifierNode:  = 'formal_parameter@ = ' = 'int? capacityjson'
'
'
                              Node: type_identifierNode:  = ')int      '
Node:  = '                identifierNode:  = 'nullable_type) = ''
?freezed'
        '
                  Node: Node:     ?Node:  = 'class? = ';'
class = '                ;Node: '
identifier'
 = '      capacity    '
Node:               Node: Node: }, = ' = 'identifier, = ''
EventUpdateRequest}              '
Node:     formal_parameter'
 = 'Node: int? pricesuperclass'
 = '                  with _$EventUpdateRequestNode: Node: '
type_identifierclass_definition = '      intNode: '
 = '                mixinsNode: @freezed
class EventUpdateRequest with _$EventUpdateRequest {
  const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest;

  factory EventUpdateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventUpdateRequestFromJson(json);
}nullable_type = ' = ''
with _$EventUpdateRequest?'
'
                      Node: Node:         ?Node:  = 'annotationwith? = ''
with = '                '
Node:         identifierNode:  = 'type_identifierprice@freezed'
'
 = '                    _$EventUpdateRequestNode: Node: ,'
@ = '    ,Node: '
 = '              @Node: '
formal_parameterclass_body = '      String? imageUrl = 'Node: '
{
  const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest;

  factory EventUpdateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventUpdateRequestFromJson(json);
}identifier                '
Node:  = 'type_identifier      freezed = ''
String    '
Node: Node:                 classNode: { = 'nullable_type = ' = '{?class'
'
                        Node: '
Node: declaration? = ' = 'const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest?    '
'
Node:                 identifierNode:  = 'identifierEventUpdateRequest = ''
imageUrl        '
Node:                   Node: redirecting_factory_constructor_signature, = ' = 'Node: ,const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest'
superclass              '
Node:           formal_parameterNode:  = ' = 'List<String>? tagsconst_builtin'
with _$EventUpdateRequest = '                '
Node:       consttype_identifierNode: '
 = '          ListNode: '
factorymixins                 = 'Node:  = 'type_argumentsfactorywith _$EventUpdateRequest = ''
<String>'
'
                                    Node: Node: identifier< = ' = 'EventUpdateRequest<Node: '
with'
                            Node: Node: type_identifier = ' = 'formal_parameter_listString = ''
({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  })                  '
Node: with>'
 = '            >Node: '
        (                 = 'Node: Node: nullable_typetype_identifier = '(?'
'
 = '                              Node: Node: ?_$EventUpdateRequestoptional_formal_parameters = ' = '?{
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }'
'
'
                    Node: Node: identifier               = 'Node: class_bodytags{'
 = '{               = 'Node: '
,{
  const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest;

  factory EventUpdateRequest.fromJson(Map<String, dynamic> json) =>
      _$EventUpdateRequestFromJson(json);
} = '              ,Node: '
formal_parameter              '
Node:  = 'formal_parameterString? title = '      String? status'
Node: '
                {                Node: Node: type_identifiertype_identifier = ' = 'String'
 = '                {Node: Stringnullable_type'
 = '?'
'
                                  Node: Node: nullable_type?       = ' = '??'
Node:                 '
Node:                   identifierNode:  = 'declarationstatus?'
 = ' = '?              '
Node: const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest,                 = 'Node: ,'
'
identifier                      Node: } = ' = '}Node: '
redirecting_factory_constructor_signature             = 'Node: const factory EventUpdateRequest({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }) = _EventUpdateRequest)'
 = '          )title'
'
                        Node: Node: const_builtin, = ' = 'constNode: '
,='
 = '=                        Node: '
Node:           formal_parameterfactory = 'Node: String? descriptiontype_identifier = ''
factory                '
Node:           Node: identifiertype_identifier = ' = 'EventUpdateRequest_EventUpdateRequest'
'
 = '                Node: StringNode: '
;formal_parameter_list                 = ' = '({
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  })Node: '
nullable_type            ;Node:  = ''
?'
                  (Node:  = '?( = ''
      ?            '
Node: Node: optional_formal_parametersmethod_signature                 = 'Node: factory EventUpdateRequest.fromJson(Map<String, dynamic> json) = ''
{
    String? title,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    String? location,
    int? capacity,
    int? price,
    String? imageUrl,
    List<String>? tags,
    String? status,
  }        '
Node: factory_constructor_signatureidentifier               = ' = 'Node: factory EventUpdateRequest.fromJson(Map<String, dynamic> json){description = ''
'
{                        Node: '
factoryNode: ,               = ' = 'Node: ,formal_parameter'
 = 'String? titlefactory'
              '
                Node: Node:           type_identifierformal_parameter = 'Node: Stringidentifier'
 = '                 = 'DateTime? startDateNode: '
EventUpdateRequestnullable_type'
 = '                ?          '
Node: .Node:                    = 'Node: .type_identifier?'
 = '           = '?Node: '
DateTimeidentifier                '
 = '                fromJsonNode: '
nullable_typeNode:  = '          ?Node: '
formal_parameter_list                  identifierNode:  = ' = 'title(Map<String, dynamic> json)'
?              '
Node:             ,Node:  = '(, = ''
(              '
 = 'Node:             formal_parameterNode:  = 'formal_parameterString? description = ''
?                Map<String, dynamic> json'
Node: '
type_identifier                 = '              StringNode: '
type_identifier                 = 'Node: Mapnullable_type'
 = '?'
Node:                   identifierNode:               ? = '? = ''
startDate                '
Node: Node: identifier               = 'Node: description,'
 = '              type_argumentsNode:  = ',<String, dynamic> = ',,'
'
'
                            Node: Node: formal_parameter                 = 'DateTime? startDateNode: '
formal_parameter                 = 'Node: <type_identifier = 'DateTime? endDateDateTime'
 = '                <Node: '
nullable_type                 = ''
?Node: '
type_identifier                                   = 'Node: Node: ?DateTime = ''
?                '
Node:                 type_identifiernullable_typeNode:  = 'identifierString = ''
startDate = ''
?'
                                                Node: Node: ,,Node:  = '?, = ''
?               = 'Node: ,formal_parameter'
'
 = '                DateTime? endDate                '
Node: Node:                 type_identifierNode:  = 'type_identifieridentifier = 'dynamicDateTime = ''
endDate'
'
                                              Node: Node: nullable_type>Node:  = '> = ''
?              ,'
Node:  = 'identifier, = '                  json'
'
Node:                           Node: ?) = ' = 'Node: )formal_parameter'
 = 'String? location?      '
'
Node:                                 Node: function_bodyidentifier = ' = 'Node: endDate=>
      _$EventUpdateRequestFromJson(json);'
'
type_identifier         = '              StringNode: '
Node: ,                 = 'Node: ,nullable_type'
 = '=>              ? = ''
=>                  '
Node: Node: ?         = 'formal_parameter?Node: '
 = '                identifierNode:  = 'identifier = 'locationString? location'
_$EventUpdateRequestFromJson'
              '
                Node: Node: ,         = 'Node: ,selector'
 = '              (json)Node: '
formal_parametertype_identifier = '          int? capacityNode: '
argument_part                 = 'Node:  = 'type_identifier(json) = 'Stringint'
'
'
                Node: nullable_type                             = 'Node: Node: ?argumentsnullable_type'
 = '                  (json)Node: '
?               = 'Node: ?('
 = '                (Node: '
identifier               = ' = '?capacity'
'
Node:                                 Node: argument, = ' = 'jsonNode: ,'
'
?               = 'Node: ?formal_parameter                '
 = 'Node: int? price                '
identifier                Node: Node:  = 'type_identifierjson = 'int'
identifier                 = 'Node: '
nullable_type               = 'locationNode: ?'
'
)                                Node:  = '?) = '?'
Node:                 '
Node:         identifierNode:  = ';price,'
 = '              ;Node:  = ',, = ''
,              '
Node:               '
Node:       formal_parameterformal_parameterNode:  = '}String? imageUrl = ''
 = '                int? capacityNode: }type_identifier'
'
 = '                String  '
Node:                 Node: Node: type_identifiernullable_typeclass_definition = ' = '?int'
 = '                  '
Node: @freezed
class EventListState with _$EventListState {
  const factory EventListState.initial() = _Initial;
  const factory EventListState.loading() = _Loading;
  const factory EventListState.loaded(List<Event> events) = _Loaded;
  const factory EventListState.error(String message) = _Error;
}?'
 = '?                '
                    Node: Node: identifier = 'Node: imageUrlannotation'
nullable_type = '              @freezedNode: '
,       = 'Node: , = ''
?              @Node: '
 = 'formal_parameter@ = '                  '
List<String>? tags      Node: '
Node: ?                identifierNode:  = 'type_identifierfreezed = ''
List    '
 = 'Node:                 classNode:  = 'class'
type_arguments? = ''
<String>    '
Node: identifier                                   = 'Node: Node: <EventListState = 'identifier'
<    '
 = '                  Node: capacityNode: superclasstype_identifier = ' = ''
Stringwith _$EventListState'
              '
                        Node: Node: >Node:  = ',> = ''
mixins                ,Node: '
nullable_type = ' = '?              '
Node: with _$EventListState                  formal_parameterNode: '
? = ' = '        ?int? price'
'
                Node: Node:                 identifierwithNode:  = ' = 'tagstype_identifier'
with               = 'Node: int,'
 = '                ,'
              Node: '
Node: nullable_typeformal_parameter         = ' = 'String? statusNode: '
?                type_identifierNode:  = 'type_identifier_$EventListState = ''
'
String                  '
Node:                     Node: Node: class_bodynullable_type? = ' = '? = ''
{
  const factory EventListState.initial() = _Initial;
  const factory EventListState.loading() = _Loading;
  const factory EventListState.loaded(List<Event> events) = _Loaded;
  const factory EventListState.error(String message) = _Error;
}                  '
Node:       ?Node:  = '{? = ''
{                ?Node: '
identifier                Node: identifier = ''
status      '
 = '              priceNode: Node: ,'
declaration = ' = ',              const factory EventListState.initial() = _InitialNode: '
,         = ''
,Node:               '
Node: redirecting_factory_constructor_signature               = '}const factory EventListState.initial() = _InitialNode: '
formal_parameter           = 'Node:  = 'String? imageUrlconst_builtin'
 = '                }const'
'
Node:                       type_identifierNode:  = 'factoryNode:  = 'Stringfactory)'
'
           = 'Node:                 identifier) = ''
EventListState'
Node:                     Node: Node: nullable_type. = ' = '.'
=           = 'Node: =identifier'
? = '          initial'
'
Node:                             Node: type_identifierformal_parameter_list = ' = 'Node: ()?'
 = '_EventUpdateRequest            ?Node: '
'
(                 = 'Node: (      '
identifier             = 'Node: ) = 'Node: imageUrl);'
'
           = 'Node:               =;Node:  = ','
= = '      '
,          Node: Node: '
type_identifier               = 'Node: method_signature_Initial = ''
factory EventUpdateRequest.fromJson(Map<String, dynamic> json)formal_parameter       = ''
Node: List<String>? tags;         = 'Node: ;'
      factory_constructor_signatureNode:  = ''
declarationfactory EventUpdateRequest.fromJson(Map<String, dynamic> json) = ''
const factory EventListState.loading() = _Loading'
                                  Node: Node: type_identifierfactoryNode:  = 'redirecting_factory_constructor_signature = 'factory = ''
const factory EventListState.loading() = _Loading'
List                    Node: Node: const_builtinidentifier = ' = 'const'
'
EventUpdateRequest                          Node: Node: factory'
 = 'type_argumentsfactory          '
Node:           .Node:  = 'identifier = '<String> = '.EventListState'
'
          '
Node: .           = '                  .Node: '
Node:           Node: <identifier = ' = 'identifier<loading'
'
 = '          fromJson                  Node: '
formal_parameter_listNode:           type_identifier = 'Node:  = '()formal_parameter_list'
 = '            Node: (String = '(Map<String, dynamic> json)('
            '
'
Node:             (Node:  = ')( = '                  )Node: '
'
>                      Node: Node: formal_parameter= = ' = ' = '=>'
Map<String, dynamic> json          '
Node: '
type_identifier                 = '              _LoadingNode: '
Node:       nullable_typeNode:  = ';type_identifier = '?; = ''
Map      '
Node: '
declaration               = 'Node: const factory EventListState.loaded(List<Event> events) = _Loadedtype_arguments'
 = '                          Node: Node: redirecting_factory_constructor_signature<String, dynamic> = ''
const factory EventListState.loaded(List<Event> events) = _Loaded'
?                           = 'Node: Node: ?const_builtin< = ' = 'const'
'
                          Node: Node: identifierfactory< = ''
factory = '                '
Node:           type_identifierNode: tagsidentifier'
 = ' = 'StringEventListState'
              '
                Node:           Node: ,Node: ,. = ' = ' = '.,'
          Node: '
identifier                 = ',Node: '
type_identifierloaded = ''
dynamic                        Node: '
formal_parameter_listNode:  = '                (List<Event> events)Node: '
formal_parameter             = 'Node: String? status(> = ' = '(>'
'
            '
Node:               formal_parameterNode:  = '                List<Event> eventsNode: '
type_identifier               = 'identifierNode: Stringtype_identifier = ' = ''
Listjson'
'
                                          Node: Node: type_argumentsnullable_type = ' = '<Event>?'
Node:                 )Node: < = ''
< = ''
                                  )Node: '
type_identifier       = 'Node: Event?'
Node:  = '                ?Node: '
                function_body> = ' = '=>
      _$EventUpdateRequestFromJson(json);>Node: '
identifier'
               = 'Node:         statusidentifier'
 = 'Node: events              '
Node:             Node: )=> = ' = '),=> = ''
'
,                  Node: '
Node: identifier= = ' = '_$EventUpdateRequestFromJson='
'
                                Node: Node: type_identifierNode:  = 'selector_Loaded'
}       = 'Node:  = ';} = ''
;            '
Node: )(json)      '
Node:  = '          declarationNode:  = 'argument_partconst factory EventListState.error(String message) = _Error = ')(json)'
'
                      '
Node: Node: arguments= = ' = '(json)='
                      Node: Node: redirecting_factory_constructor_signature( = ' = 'const factory EventListState.error(String message) = _Error('
'
                        Node: Node: const_builtinargument = ' = 'constjson'
'
                          Node: Node: factoryidentifier = ' = 'factory'
          jsonNode: '
identifier'
 = '              EventListState          '
Node:           Node: Node: ). = ' = '.'
type_identifier          )Node:  = 'identifier'
 = '_EventUpdateRequesterror'
'
                        Node: Node: formal_parameter_listNode:  = '; = ';;(String message)'
'
                   = 'Node: ;( = '(Node: '
method_signature            '
Node:       formal_parameterNode:  = '}String message = ''
}              '
Node:  = 'type_identifier   = 'factory EventUpdateRequest.fromJson(Map<String, dynamic> json)String'
        Node: '
factory_constructor_signature               = 'Node: Node: identifierfactory EventUpdateRequest.fromJson(Map<String, dynamic> json) = 'class_definitionmessage'
'
 = '            @freezed
class EventListState with _$EventListState {
  const factory EventListState.initial() = _Initial;
  const factory EventListState.loading() = _Loading;
  const factory EventListState.loaded(List<Event> events) = _Loaded;
  const factory EventListState.error(String message) = _Error;
}Node: '
)     = 'Node: )          '
Node: annotation           = 'Node: @freezed='
 = '      =Node: '
@          Node: type_identifierfactory = ' = '_Error = '@factory'
'
      Node: '
;                 = 'Node: ;Node: '
identifier = 'identifier       = 'freezedEventUpdateRequest'
'
Node:               Node: Node: }. = ' = '.'
class          }Node: '
identifier = '   = 'classfromJson'
'
              Node: Node: Node: identifierformal_parameter_listclass_definition = ' = '(Map<String, dynamic> json)'
            @freezed
class EventDetailState with _$EventDetailState {
  const factory EventDetailState.initial() = _DetailInitial;
  const factory EventDetailState.loading() = _DetailLoading;
  const factory EventDetailState.loaded(Event event) = _DetailLoaded;
  const factory EventDetailState.error(String message) = _DetailError;
}Node: '
(     = 'Node: (annotation'
 = '             = '@freezedNode: EventListStateformal_parameter'
 = 'Map<String, dynamic> json'
'
                        Node: Node: @type_identifierNode:  = ' = 'Mapsuperclass'
@               = 'Node: with _$EventListStatetype_arguments'
 = '      <String, dynamic>Node: '
mixins'
                 = 'Node: with _$EventListState<'
 = '        <Node: '
                      Node: Node: identifiertype_identifierwith = ' = ' = 'Stringfreezed'
'
with                    Node: '
,Node:  = '        class,Node: '
 = '                type_identifierNode:  = 'type_identifierclass = '_$EventListStatedynamic'
'
                    Node: >'
 = 'Node: >identifier'
     = 'Node: EventDetailStateclass_body               = ''
Node: {
  const factory EventListState.initial() = _Initial;
  const factory EventListState.loading() = _Loading;
  const factory EventListState.loaded(List<Event> events) = _Loaded;
  const factory EventListState.error(String message) = _Error;
}identifier    '
 = 'Node: json      '
Node:             Node: )superclass = '{) = ''
 = '      {'
with _$EventDetailStateNode: '
            Node: function_bodydeclaration = 'Node:  = 'mixins=>
      _$EventUpdateRequestFromJson(json);const factory EventListState.initial() = _Initial'
 = ''
with _$EventDetailState        '
Node:         redirecting_factory_constructor_signatureNode:  = '=>        const factory EventListState.initial() = _Initial = ''
=>          Node: const_builtinNode:  = 'withconst'
'
         = '          withNode: '
factoryNode:  = 'identifierfactory = ''
        _$EventUpdateRequestFromJson          Node: '
type_identifierNode:  = 'identifier_$EventDetailState = '        EventListStateNode: '
'
          selectorNode:  = '.(json) = ''
    .          Node: '
Node: class_bodyargument_part = '           = 'Node: (json)identifier = 'initial{
  const factory EventDetailState.initial() = _DetailInitial;
  const factory EventDetailState.loading() = _DetailLoading;
  const factory EventDetailState.loaded(Event event) = _DetailLoaded;
  const factory EventDetailState.error(String message) = _DetailError;
}'
'
          '
Node:             formal_parameter_listNode:  = '      arguments()Node: '
 = '            (json)Node: '
({ = '               = '({Node: '
'
(                  Node:  = ')( = ')Node: '
'
                        Node: declarationNode:  = '=argument = ' = '=json'
'
          Node: const factory EventDetailState.initial() = _DetailInitialtype_identifier'
 = '_Initial                '
        Node:       identifierNode:  = ';json = ''
;Node: '
                    Node: Node: )declarationredirecting_factory_constructor_signature = ' = 'const factory EventListState.loading() = _Loading = ''
const factory EventDetailState.initial() = _DetailInitial        )'
Node: '
redirecting_factory_constructor_signature           = 'Node: const factory EventListState.loading() = _Loadingconst_builtin'
                   = 'Node: Node: constconst_builtin; = ''
const = ''
                    ;Node: Node: factory'
 = 'factoryfactory = ''
factory      '
          Node: Node:           identifierNode:  = 'EventListState'
}           = 'Node: identifier. = ' = '}.EventDetailState'
'
          Node: '
identifier           = '  loadingNode: '
. = '.Node:           '
Node: class_definitionformal_parameter_list           = 'Node: @freezed
class EventListState with _$EventListState {
  const factory EventListState.initial() = _Initial;
  const factory EventListState.loading() = _Loading;
  const factory EventListState.loaded(List<Event> events) = _Loaded;
  const factory EventListState.error(String message) = _Error;
}identifier'
 = ' = '()    '
initialNode:             annotationNode:  = '(@freezed = ''
('
          '
                  Node: Node: @)Node:  = ' = 'formal_parameter_list@)'
 = ''
                ()Node: '
=Node:             identifier = ' = 'Node: freezed=('
'
 = '              Node: Node: type_identifier( = 'class_Loading'
'
 = '                  classNode: Node: '
;) = '     = 'Node: ;identifier'
 = 'EventListState'
)      '
Node:     declarationNode:  = '          const factory EventListState.loaded(List<Event> events) = _LoadedNode: '
=        superclass = 'Node:  = '=redirecting_factory_constructor_signaturewith _$EventListState = ''
const factory EventListState.loaded(List<Event> events) = _Loaded'
'
                          Node: Node: type_identifierconst_builtin = ' = 'Node: const_DetailInitial'
mixins          '
Node:  = 'factorywith _$EventListState       = 'Node: factory;'
'
           = 'Node: ;        identifier'
 = '      EventListStateNode: '
declaration           = 'Node: Node: .const factory EventDetailState.loading() = _DetailLoading = 'with. = ''
with          '
Node: identifier'
 = '        loadedNode: '
type_identifier                   = 'Node: _$EventListStateformal_parameter_list = '(List<Event> events)Node: '
'
            redirecting_factory_constructor_signatureNode:     (Node:  = 'class_body( = ''
const factory EventDetailState.loading() = _DetailLoading             = 'Node: {
  const factory EventListState.initial() = _Initial;
  const factory EventListState.loading() = _Loading;
  const factory EventListState.loaded(List<Event> events) = _Loaded;
  const factory EventListState.error(String message) = _Error;
}formal_parameter = 'List<Event> events'
'
'
                              Node: Node: type_identifier{ = 'Node:  = 'const_builtin{List = ''
const'
          Node: factory'
 = '              factory'
Node:                 Node: identifier = 'type_arguments = 'EventDetailState<Event>'
'
Node:                 Node:           <Node:  = '.declaration< = '.'
          Node: identifier = 'loading'
          Node:  = 'formal_parameter_listconst factory EventListState.initial() = _Initial = ''
()        '
Node:             redirecting_factory_constructor_signature'
 = '                const factory EventListState.initial() = _InitialNode: '
type_identifier           = 'Node: Eventconst_builtin'
 = '                Node: Node: (> = ' = '(>'
'
            constNode: '
)           = 'Node: )factory'
 = 'factory              '
Node:           identifier          Node:  = 'identifiereventsNode:  = '=EventListState = ''
=          '
Node:           .Node:  = 'type_identifier.'
          Node: identifier = ''
 = '            initialNode: _DetailLoading'
)           = ')'
Node:           formal_parameter_list'
Node:  = '=() = ''
=            '
Node:           (Node:  = 'type_identifier('
                  Node: Node:  = ') = ';_Loaded = ')'
'
      ;          Node: Node: ;'
 = '      ;=Node:  = 'declaration='
'
                 = 'Node: const factory EventDetailState.loaded(Event event) = _DetailLoadeddeclarationNode:  = 'type_identifier = '_Initialconst factory EventListState.error(String message) = _Error'
'
      '
Node: ;                 = 'Node: ;Node: redirecting_factory_constructor_signatureredirecting_factory_constructor_signature = 'const factory EventDetailState.loaded(Event event) = _DetailLoaded = ''
const factory EventListState.error(String message) = _Error      '
Node:           declarationNode:  = 'const_builtinconst factory EventListState.loading() = _Loading = ''
const'
        '
Node:           redirecting_factory_constructor_signature           = 'Node: const factory EventListState.loading() = _LoadingNode: '
factory           = 'Node: factoryconst_builtinconst_builtin = ' = 'constconst'
'
'
                              Node: Node: identifierNode: factoryfactory = ' = ' = 'factoryfactoryEventListState'
'
          '
Node:           identifier           = 'EventListStateNode: '
identifier          Node: Node: .. = ' = '.. = ''
EventDetailState          '
'
                    Node: Node: .identifier = ' = '.error'
'
                    Node: Node: identifierformal_parameter_list = 'Node:  = 'loadedidentifier'
 = '          (String message)Node: loadingformal_parameter_list'
 = ''
(Event event)'
                      Node: Node:             (formal_parameter_list = ' = '(Node: ()'
'
                        (Node: Node:  = '(formal_parameter( = ''
Event event             = ''
Node: (              formal_parameterNode: '
type_identifier = ' = '            EventString message'
Node:               '
Node: )identifier = ' = ')event              '
Node:             type_identifierNode:  = ')String = ''
)'
'
                    Node: Node: =               = '== = ''
Node:           identifierNode:  = 'type_identifiermessage = '=_DetailLoaded'
'
'
                Node:             ;Node:  = 'Node: type_identifier;)'
 = '       = 'Node: )declaration = 'const factory EventDetailState.error(String message) = _DetailError_Loading'
'
        '
          Node:       redirecting_factory_constructor_signatureNode: ;Node:  = '=const factory EventDetailState.error(String message) = _DetailError = '= = ''
;'
          '
          Node:       const_builtinNode:  = 'Node: consttype_identifier'
declaration          Node:  = 'factory_Error = ''
factory = ''
const factory EventListState.loaded(List<Event> events) = _Loaded          '
      Node:         identifierNode:  = 'EventDetailState'
Node:           redirecting_factory_constructor_signatureNode:  = 'const factory EventListState.loaded(List<Event> events) = _Loaded'
.          ; = 'Node: . = ''
;          '
Node: const_builtin      identifierNode:  = ' = 'error}'
const          '
Node:            = 'formal_parameter_listNode: } = ''
(String message)factory'
   = 'Node:             factoryNode: class_definition('
 = ' = '(          '
@freezed
class EventDetailState with _$EventDetailState {
  const factory EventDetailState.initial() = _DetailInitial;
  const factory EventDetailState.loading() = _DetailLoading;
  const factory EventDetailState.loaded(Event event) = _DetailLoaded;
  const factory EventDetailState.error(String message) = _DetailError;
}            Node: Node: identifierformal_parameter = 'String message'
'
 = '                  Node: Node: type_identifierEventListState = 'annotation'
String = ''
@freezed                        Node: Node: '
identifier. = ' = 'message.      '
'
            Node: Node:           )@ = ' = ')'
          Node: @Node: '
= = 'identifier=      '
 = '          loadedNode: type_identifier = 'Node: _DetailError'
'
identifier                Node:  = ';freezed = ''
;    Node: '
Node:       formal_parameter_listNode: class} = ' = '}'
 = '=== End AST ===
class(List<Event> events)'

=== Processing class: '
Event     ===
            Node: Node: 
=== Processing class: identifierEventCreateRequest( = ' = 'EventDetailState( ===
'
'

=== Processing class:     EventUpdateRequestNode:  ===
            superclassNode:  = 'formal_parameterwith _$EventDetailState = ''
List<Event> events      '
Node:               mixinsNode:  = 'type_identifierwith _$EventDetailState = ''
List        '
Node:               withNode:  = 'type_argumentswith = ''
<Event>        '
Node:                 type_identifierNode:  = '<_$EventDetailState = ''
<    '
Node: class_body = '{
  const factory EventDetailState.initial() = _DetailInitial;
  const factory EventDetailState.loading() = _DetailLoading;
  const factory EventDetailState.loaded(Event event) = _DetailLoaded;
  const factory EventDetailState.error(String message) = _DetailError;
}'
      Node: { = '{'

=== Processing class:                       Node: Node: declarationtype_identifier = ' = 'const factory EventDetailState.initial() = _DetailInitialEventListState'
 ===
        EventNode: 
=== Processing class: redirecting_factory_constructor_signatureEventDetailState = ' ===
const factory EventDetailState.initial() = _DetailInitial'
'
          Node: const_builtin = 'const'
          Node:                 Node: factory> = ' = '>'
              Node: identifier = 'events'
            Node: ) = ')'
          Node: = = '='
          Node: type_identifier = '_Loadedfactory'
'
                Node: Node: ;identifier = ' = ';EventDetailState'
'
                Node: Node: .declaration = ' = '.const factory EventListState.error(String message) = _Error'
'
                  Node: Node: identifierredirecting_factory_constructor_signature = 'initial = ''
const factory EventListState.error(String message) = _Error          '
Node:           formal_parameter_listNode:  = 'const_builtin()'
            Node: ( = '('
            Node: ) = ')'
          Node: = = '='
          Node: type_identifier = '_DetailInitial'
      Node: ; = ' = ';'
      Node: declaration = 'const factory EventDetailState.loading() = _DetailLoading'
        Node: redirecting_factory_constructor_signature = 'const factory EventDetailState.loading() = _DetailLoading'
          Node: const_builtin = 'const'
const          '
Node:           factoryNode:  = 'factoryfactory = ''
factory          '
Node:           identifierNode:  = 'EventDetailState'
          Node: . = '.'
          Node: identifier = 'loading'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
identifier           = 'Node: EventListState='
 = '          =Node: '
.           = 'Node: .type_identifier'
 = '_DetailLoading'
      Node: ;           = 'Node: ;identifier'
 = '      errorNode: '
declaration           = 'Node: const factory EventDetailState.loaded(Event event) = _DetailLoadedformal_parameter_list'
 = '        (String message)Node: '
redirecting_factory_constructor_signature             = 'Node: const factory EventDetailState.loaded(Event event) = _DetailLoaded('
 = '          (Node: '
const_builtin             = 'Node: constformal_parameter'
 = '          String messageNode: '
factory               = 'Node: factorytype_identifier'
 = '          StringNode: '
identifier               = 'Node: EventDetailStateidentifier'
 = '          messageNode: '
.             = 'Node: .)'
 = '          )Node: '
identifier           = 'Node: loaded='
 = '          =Node: '
formal_parameter_list           = 'Node: (Event event)type_identifier'
 = '            _ErrorNode: '
(       = 'Node: (;'
 = '            ;Node: '
formal_parameter       = 'Node: Event event}'
 = '              }Node: '
type_identifier   = 'Node: Eventclass_definition'
 = '              @freezed
class EventDetailState with _$EventDetailState {
  const factory EventDetailState.initial() = _DetailInitial;
  const factory EventDetailState.loading() = _DetailLoading;
  const factory EventDetailState.loaded(Event event) = _DetailLoaded;
  const factory EventDetailState.error(String message) = _DetailError;
}Node: '
identifier     = 'Node: eventannotation'
 = '            @freezedNode: '
)       = 'Node: )@'
 = '          @Node: '
=       = 'Node: =identifier'
 = '          freezedNode: '
type_identifier     = 'Node: _DetailLoadedclass'
 = '      classNode: '
;     = 'Node: ;identifier'
 = '      EventDetailStateNode: '
declaration     = 'Node: const factory EventDetailState.error(String message) = _DetailErrorsuperclass'
 = '        with _$EventDetailStateNode: '
redirecting_factory_constructor_signature       = 'Node: const factory EventDetailState.error(String message) = _DetailErrormixins'
 = '          with _$EventDetailStateNode: '
const_builtin         = 'Node: constwith'
 = '          withNode: '
factory         = 'Node: factorytype_identifier'
 = '          _$EventDetailStateNode: '
identifier     = 'Node: EventDetailStateclass_body'
 = '          {
  const factory EventDetailState.initial() = _DetailInitial;
  const factory EventDetailState.loading() = _DetailLoading;
  const factory EventDetailState.loaded(Event event) = _DetailLoaded;
  const factory EventDetailState.error(String message) = _DetailError;
}Node: '
.       = 'Node: .{'
 = '          {Node: '
identifier       = 'Node: errordeclaration'
 = '          const factory EventDetailState.initial() = _DetailInitialNode: '
formal_parameter_list         = 'Node: (String message)redirecting_factory_constructor_signature'
 = '            const factory EventDetailState.initial() = _DetailInitialNode: '
(           = 'Node: (const_builtin'
 = '            constNode: '
formal_parameter           = 'Node: String messagefactory'
 = '              factoryNode: '
type_identifier           = 'Node: Stringidentifier'
 = '              EventDetailStateNode: '
identifier           = 'Node: message.'
 = '            .Node: '
)           = 'Node: )identifier'
 = '          initialNode: '
=           = 'Node: =formal_parameter_list'
 = '          ()Node: '
type_identifier             = 'Node: _DetailError('
 = '      (Node: '
;             = 'Node: ;)'
 = '      )Node: '
}           = 'Node: }='
 = '=== End AST ===
='
          
=== Processing class: Node: Eventtype_identifier ===
 = '_DetailInitial
=== Processing class: '
EventCreateRequest       ===
Node: ; = ';'
      Node: declaration = 'const factory EventDetailState.loading() = _DetailLoading'
        Node: redirecting_factory_constructor_signature = 'const factory EventDetailState.loading() = _DetailLoading'
          Node: const_builtin = 'const'
          Node: factory = 'factory'
          Node: identifier
=== Processing class:  = 'EventUpdateRequestEventDetailState ===
'

=== Processing class:           EventListStateNode:  ===
.
=== Processing class:  = 'EventDetailState. ===
'
          Node: identifier = 'loading'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
          Node: = = '='
          Node: type_identifier = '_DetailLoading'
      Node: ; = ';'
      Node: declaration = 'const factory EventDetailState.loaded(Event event) = _DetailLoaded'
        Node: redirecting_factory_constructor_signature = 'const factory EventDetailState.loaded(Event event) = _DetailLoaded'
          Node: const_builtin = 'const'
          Node: factory = 'factory'
          Node: identifier = 'EventDetailState'
          Node: . = '.'
          Node: identifier = 'loaded'
          Node: formal_parameter_list = '(Event event)'
            Node: ( = '('
            Node: formal_parameter = 'Event event'
              Node: type_identifier = 'Event'
              Node: identifier = 'event'
            Node: ) = ')'
          Node: = = '='
          Node: type_identifier = '_DetailLoaded'
      Node: ; = ';'
      Node: declaration = 'const factory EventDetailState.error(String message) = _DetailError'
        Node: redirecting_factory_constructor_signature = 'const factory EventDetailState.error(String message) = _DetailError'
          Node: const_builtin = 'const'
          Node: factory = 'factory'
          Node: identifier = 'EventDetailState'
          Node: . = '.'
          Node: identifier = 'error'
          Node: formal_parameter_list = '(String message)'
            Node: ( = '('
            Node: formal_parameter = 'String message'
              Node: type_identifier = 'String'
              Node: identifier = 'message'
            Node: ) = ')'
          Node: = = '='
          Node: type_identifier = '_DetailError'
      Node: ; = ';'
      Node: } = '}'
=== End AST ===

=== Processing class: Event ===

=== Processing class: EventCreateRequest ===

=== Processing class: EventUpdateRequest ===

=== Processing class: EventListState ===

=== Processing class: EventDetailState ===

=== Complete AST for test_flutter_app/aminomi/lib/providers/auth_provider.dart ===
Node: program = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;
import 'package:riverpod/riverpod.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import '../models/user.dart';
import '../services/line_auth_service.dart';

part 'auth_provider.g.dart';

@riverpod
class AuthNotifier extends _$AuthNotifier {
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}

/// 認証状態プロバイダー
@riverpod
AuthState authState(Ref ref) {
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}

/// 現在のユーザープロバイダー
@riverpod
AppUser? currentUser(Ref ref) {
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}

/// 認証済みかどうかのプロバイダー
@riverpod
bool isAuthenticated(Ref ref) {
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}
'
  Node: import_or_export = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
    Node: library_import = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
      Node: import_specification = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
        Node: import = 'import'
        Node: configurable_uri = ''package:firebase_auth/firebase_auth.dart''
          Node: uri = ''package:firebase_auth/firebase_auth.dart''
            Node: string_literal = ''package:firebase_auth/firebase_auth.dart''
              Node: ' = '''
              Node: ' = '''
        Node: as = 'as'
        Node: identifier = 'firebase_auth'
        Node: ; = ';'
  Node: import_or_export = 'import 'package:riverpod/riverpod.dart';'
    Node: library_import = 'import 'package:riverpod/riverpod.dart';'
      Node: import_specification = 'import 'package:riverpod/riverpod.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:riverpod/riverpod.dart''
          Node: uri = ''package:riverpod/riverpod.dart''
            Node: string_literal = ''package:riverpod/riverpod.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
    Node: library_import = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
      Node: import_specification = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:riverpod_annotation/riverpod_annotation.dart''
          Node: uri = ''package:riverpod_annotation/riverpod_annotation.dart''
            Node: string_literal = ''package:riverpod_annotation/riverpod_annotation.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import '../models/user.dart';'
    Node: library_import = 'import '../models/user.dart';'
      Node: import_specification = 'import '../models/user.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''../models/user.dart''
          Node: uri = ''../models/user.dart''
            Node: string_literal = ''../models/user.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import '../services/line_auth_service.dart';'
    Node: library_import = 'import '../services/line_auth_service.dart';'
      Node: import_specification = 'import '../services/line_auth_service.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''../services/line_auth_service.dart''
          Node: uri = ''../services/line_auth_service.dart''
            Node: string_literal = ''../services/line_auth_service.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: part_directive = 'part 'auth_provider.g.dart';'
    Node: part = 'part'
    Node: uri = ''auth_provider.g.dart''
      Node: string_literal = ''auth_provider.g.dart''
        Node: ' = '''
        Node: ' = '''
    Node: ; = ';'
  Node: class_definition = '@riverpod
class AuthNotifier extends _$AuthNotifier {
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}'
    Node: annotation = '@riverpod'
      Node: @ = '@'
      Node: identifier = 'riverpod'
    Node: class = 'class'
    Node: identifier = 'AuthNotifier'
    Node: superclass = 'extends _$AuthNotifier'
      Node: extends = 'extends'
      Node: type_identifier = '_$AuthNotifier'
    Node: class_body = '{
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}'
      Node: { = '{'
      Node: annotation = '@override'
        Node: @ = '@'
        Node: identifier = 'override'
      Node: method_signature = 'AuthState build()'
        Node: function_signature = 'AuthState build()'
          Node: type_identifier = 'AuthState'
          Node: identifier = 'build'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = '{
    return const AuthState.initial();
  }'
        Node: block = '{
    return const AuthState.initial();
  }'
          Node: { = '{'
          Node: return_statement = 'return const AuthState.initial();'
            Node: return = 'return'
            Node: const_object_expression = 'const AuthState.initial()'
              Node: const_builtin = 'const'
              Node: type_identifier = 'AuthState'
              Node: . = '.'
              Node: identifier = 'initial'
              Node: arguments = '()'
                Node: ( = '('
                Node: ) = ')'
            Node: ; = ';'
          Node: } = '}'
      Node: documentation_comment = '/// LINEログイン'
        Node: /// = '///'
      Node: method_signature = 'Future<void> signInWithLine()'
        Node: function_signature = 'Future<void> signInWithLine()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'signInWithLine'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: expression_statement = 'state = const AuthState.loading();'
            Node: assignment_expression = 'state = const AuthState.loading()'
              Node: assignable_expression = 'state'
                Node: identifier = 'state'
              Node: = = '='
              Node: const_object_expression = 'const AuthState.loading()'
                Node: const_builtin = 'const'
                Node: type_identifier = 'AuthState'
                Node: . = '.'
                Node: identifier = 'loading'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: ; = ';'
          Node: try_statement = 'try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    }'
              Node: { = '{'
              Node: local_variable_declaration = 'final result = await LineAuthService.login();'
                Node: initialized_variable_definition = 'final result = await LineAuthService.login()'
                  Node: final_builtin = 'final'
                    Node: final = 'final'
                  Node: identifier = 'result'
                  Node: = = '='
                  Node: unary_expression = 'await LineAuthService.login()'
                    Node: await_expression = 'await LineAuthService.login()'
                      Node: await = 'await'
                      Node: identifier = 'LineAuthService'
                      Node: selector = '.login'
                        Node: unconditional_assignable_selector = '.login'
                          Node: . = '.'
                          Node: identifier = 'login'
                      Node: selector = '()'
                        Node: argument_part = '()'
                          Node: arguments = '()'
                            Node: ( = '('
                            Node: ) = ')'
                Node: ; = ';'
              Node: if_statement = 'if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }'
                Node: if = 'if'
                Node: ( = '('
                Node: equality_expression = 'result != null'
                  Node: identifier = 'result'
                  Node: equality_operator = '!='
                  Node: null_literal = 'null'
                    Node: null = 'null'
                Node: ) = ')'
                Node: block = '{
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      }'
                  Node: { = '{'
                  Node: comment = '// Firebaseカスタムトークンでサインイン'
                    Node: // = '//'
                  Node: local_variable_declaration = 'final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );'
                    Node: initialized_variable_definition = 'final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                      Node: final_builtin = 'final'
                        Node: final = 'final'
                      Node: identifier = 'userCredential'
                      Node: = = '='
                      Node: unary_expression = 'await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                        Node: await_expression = 'await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                          Node: await = 'await'
                          Node: identifier = 'firebase_auth'
                          Node: selector = '.FirebaseAuth'
                            Node: unconditional_assignable_selector = '.FirebaseAuth'
                              Node: . = '.'
                              Node: identifier = 'FirebaseAuth'
                          Node: selector = '.instance'
                            Node: unconditional_assignable_selector = '.instance'
                              Node: . = '.'
                              Node: identifier = 'instance'
                          Node: selector = '.signInWithCustomToken'
                            Node: unconditional_assignable_selector = '.signInWithCustomToken'
                              Node: . = '.'
                              Node: identifier = 'signInWithCustomToken'
                          Node: selector = '(
          result.accessToken,
        )'
                            Node: argument_part = '(
          result.accessToken,
        )'
                              Node: arguments = '(
          result.accessToken,
        )'
                                Node: ( = '('
                                Node: argument = 'result.accessToken'
                                  Node: identifier = 'result'
                                  Node: selector = '.accessToken'
                                    Node: unconditional_assignable_selector = '.accessToken'
                                      Node: . = '.'
                                      Node: identifier = 'accessToken'
                                Node: , = ','
                                Node: ) = ')'
                    Node: ; = ';'
                  Node: if_statement = 'if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }'
                    Node: if = 'if'
                    Node: ( = '('
                    Node: equality_expression = 'userCredential.user != null'
                      Node: identifier = 'userCredential'
                      Node: selector = '.user'
                        Node: unconditional_assignable_selector = '.user'
                          Node: . = '.'
                          Node: identifier = 'user'
                      Node: equality_operator = '!='
                      Node: null_literal = 'null'
                        Node: null = 'null'
                    Node: ) = ')'
                    Node: block = '{
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        }'
                      Node: { = '{'
                      Node: local_variable_declaration = 'final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );'
                        Node: initialized_variable_definition = 'final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                          Node: final_builtin = 'final'
                            Node: final = 'final'
                          Node: identifier = 'user'
                          Node: = = '='
                          Node: identifier = 'AppUser'
                          Node: selector = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                            Node: argument_part = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                              Node: arguments = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                                Node: ( = '('
                                Node: named_argument = 'id: userCredential.user!.uid'
                                  Node: label = 'id:'
                                    Node: identifier = 'id'
                                    Node: : = ':'
                                  Node: identifier = 'userCredential'
                                  Node: selector = '.user'
                                    Node: unconditional_assignable_selector = '.user'
                                      Node: . = '.'
                                      Node: identifier = 'user'
                                  Node: selector = '!'
                                    Node: ! = '!'
                                  Node: selector = '.uid'
                                    Node: unconditional_assignable_selector = '.uid'
                                      Node: . = '.'
                                      Node: identifier = 'uid'
                                Node: , = ','
                                Node: named_argument = 'displayName: result.profile.displayName'
                                  Node: label = 'displayName:'
                                    Node: identifier = 'displayName'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.displayName'
                                    Node: unconditional_assignable_selector = '.displayName'
                                      Node: . = '.'
                                      Node: identifier = 'displayName'
                                Node: , = ','
                                Node: named_argument = 'photoURL: result.profile.pictureUrl'
                                  Node: label = 'photoURL:'
                                    Node: identifier = 'photoURL'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.pictureUrl'
                                    Node: unconditional_assignable_selector = '.pictureUrl'
                                      Node: . = '.'
                                      Node: identifier = 'pictureUrl'
                                Node: , = ','
                                Node: named_argument = 'statusMessage: result.profile.statusMessage'
                                  Node: label = 'statusMessage:'
                                    Node: identifier = 'statusMessage'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.statusMessage'
                                    Node: unconditional_assignable_selector = '.statusMessage'
                                      Node: . = '.'
                                      Node: identifier = 'statusMessage'
                                Node: , = ','
                                Node: named_argument = 'provider: 'line''
                                  Node: label = 'provider:'
                                    Node: identifier = 'provider'
                                    Node: : = ':'
                                  Node: string_literal = ''line''
                                    Node: ' = '''
                                    Node: ' = '''
                                Node: , = ','
                                Node: named_argument = 'createdAt: DateTime.now()'
                                  Node: label = 'createdAt:'
                                    Node: identifier = 'createdAt'
                                    Node: : = ':'
                                  Node: identifier = 'DateTime'
                                  Node: selector = '.now'
                                    Node: unconditional_assignable_selector = '.now'
                                      Node: . = '.'
                                      Node: identifier = 'now'
                                  Node: selector = '()'
                                    Node: argument_part = '()'
                                      Node: arguments = '()'
                                        Node: ( = '('
                                        Node: ) = ')'
                                Node: , = ','
                                Node: ) = ')'
                        Node: ; = ';'
                      Node: expression_statement = 'state = AuthState.authenticated(user);'
                        Node: assignment_expression = 'state = AuthState.authenticated(user)'
                          Node: assignable_expression = 'state'
                            Node: identifier = 'state'
                          Node: = = '='
                          Node: identifier = 'AuthState'
                          Node: selector = '.authenticated'
                            Node: unconditional_assignable_selector = '.authenticated'
                              Node: . = '.'
                              Node: identifier = 'authenticated'
                          Node: selector = '(user)'
                            Node: argument_part = '(user)'
                              Node: arguments = '(user)'
                                Node: ( = '('
                                Node: argument = 'user'
                                  Node: identifier = 'user'
                                Node: ) = ')'
                        Node: ; = ';'
                      Node: } = '}'
                    Node: else = 'else'
                    Node: block = '{
          state = const AuthState.error('Failed to sign in with custom token');
        }'
                      Node: { = '{'
                      Node: expression_statement = 'state = const AuthState.error('Failed to sign in with custom token');'
                        Node: assignment_expression = 'state = const AuthState.error('Failed to sign in with custom token')'
                          Node: assignable_expression = 'state'
                            Node: identifier = 'state'
                          Node: = = '='
                          Node: const_object_expression = 'const AuthState.error('Failed to sign in with custom token')'
                            Node: const_builtin = 'const'
                            Node: type_identifier = 'AuthState'
                            Node: . = '.'
                            Node: identifier = 'error'
                            Node: arguments = '('Failed to sign in with custom token')'
                              Node: ( = '('
                              Node: argument = ''Failed to sign in with custom token''
                                Node: string_literal = ''Failed to sign in with custom token''
                                  Node: ' = '''
                                  Node: ' = '''
                              Node: ) = ')'
                        Node: ; = ';'
                      Node: } = '}'
                  Node: } = '}'
                Node: else = 'else'
                Node: block = '{
        state = const AuthState.error('LINE login failed');
      }'
                  Node: { = '{'
                  Node: expression_statement = 'state = const AuthState.error('LINE login failed');'
                    Node: assignment_expression = 'state = const AuthState.error('LINE login failed')'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: const_object_expression = 'const AuthState.error('LINE login failed')'
                        Node: const_builtin = 'const'
                        Node: type_identifier = 'AuthState'
                        Node: . = '.'
                        Node: identifier = 'error'
                        Node: arguments = '('LINE login failed')'
                          Node: ( = '('
                          Node: argument = ''LINE login failed''
                            Node: string_literal = ''LINE login failed''
                              Node: ' = '''
                              Node: ' = '''
                          Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// ログアウト'
        Node: /// = '///'
      Node: method_signature = 'Future<void> signOut()'
        Node: function_signature = 'Future<void> signOut()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'signOut'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: try_statement = 'try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    }'
              Node: { = '{'
              Node: expression_statement = 'await firebase_auth.FirebaseAuth.instance.signOut();'
                Node: unary_expression = 'await firebase_auth.FirebaseAuth.instance.signOut()'
                  Node: await_expression = 'await firebase_auth.FirebaseAuth.instance.signOut()'
                    Node: await = 'await'
                    Node: identifier = 'firebase_auth'
                    Node: selector = '.FirebaseAuth'
                      Node: unconditional_assignable_selector = '.FirebaseAuth'
                        Node: . = '.'
                        Node: identifier = 'FirebaseAuth'
                    Node: selector = '.instance'
                      Node: unconditional_assignable_selector = '.instance'
                        Node: . = '.'
                        Node: identifier = 'instance'
                    Node: selector = '.signOut'
                      Node: unconditional_assignable_selector = '.signOut'
                        Node: . = '.'
                        Node: identifier = 'signOut'
                    Node: selector = '()'
                      Node: argument_part = '()'
                        Node: arguments = '()'
                          Node: ( = '('
                          Node: ) = ')'
                Node: ; = ';'
              Node: expression_statement = 'state = const AuthState.unauthenticated();'
                Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: const_object_expression = 'const AuthState.unauthenticated()'
                    Node: const_builtin = 'const'
                    Node: type_identifier = 'AuthState'
                    Node: . = '.'
                    Node: identifier = 'unauthenticated'
                    Node: arguments = '()'
                      Node: ( = '('
                      Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// 現在のユーザーを取得'
        Node: /// = '///'
      Node: method_signature = 'Future<void> getCurrentUser()'
        Node: function_signature = 'Future<void> getCurrentUser()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'getCurrentUser'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: expression_statement = 'state = const AuthState.loading();'
            Node: assignment_expression = 'state = const AuthState.loading()'
              Node: assignable_expression = 'state'
                Node: identifier = 'state'
              Node: = = '='
              Node: const_object_expression = 'const AuthState.loading()'
                Node: const_builtin = 'const'
                Node: type_identifier = 'AuthState'
                Node: . = '.'
                Node: identifier = 'loading'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: ; = ';'
          Node: try_statement = 'try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    }'
              Node: { = '{'
              Node: local_variable_declaration = 'final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;'
                Node: initialized_variable_definition = 'final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser'
                  Node: final_builtin = 'final'
                    Node: final = 'final'
                  Node: identifier = 'firebaseUser'
                  Node: = = '='
                  Node: identifier = 'firebase_auth'
                  Node: selector = '.FirebaseAuth'
                    Node: unconditional_assignable_selector = '.FirebaseAuth'
                      Node: . = '.'
                      Node: identifier = 'FirebaseAuth'
                  Node: selector = '.instance'
                    Node: unconditional_assignable_selector = '.instance'
                      Node: . = '.'
                      Node: identifier = 'instance'
                  Node: selector = '.currentUser'
                    Node: unconditional_assignable_selector = '.currentUser'
                      Node: . = '.'
                      Node: identifier = 'currentUser'
                Node: ; = ';'
              Node: if_statement = 'if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }'
                Node: if = 'if'
                Node: ( = '('
                Node: equality_expression = 'firebaseUser != null'
                  Node: identifier = 'firebaseUser'
                  Node: equality_operator = '!='
                  Node: null_literal = 'null'
                    Node: null = 'null'
                Node: ) = ')'
                Node: block = '{
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      }'
                  Node: { = '{'
                  Node: comment = '// Firestoreからユーザー情報を取得'
                    Node: // = '//'
                  Node: comment = '// TODO: FirestoreServiceを使用してユーザー情報を取得'
                    Node: // = '//'
                  Node: local_variable_declaration = 'final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );'
                    Node: initialized_variable_definition = 'final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                      Node: final_builtin = 'final'
                        Node: final = 'final'
                      Node: identifier = 'user'
                      Node: = = '='
                      Node: identifier = 'AppUser'
                      Node: selector = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                        Node: argument_part = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                          Node: arguments = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                            Node: ( = '('
                            Node: named_argument = 'id: firebaseUser.uid'
                              Node: label = 'id:'
                                Node: identifier = 'id'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.uid'
                                Node: unconditional_assignable_selector = '.uid'
                                  Node: . = '.'
                                  Node: identifier = 'uid'
                            Node: , = ','
                            Node: named_argument = 'displayName: firebaseUser.displayName ?? 'Unknown User''
                              Node: label = 'displayName:'
                                Node: identifier = 'displayName'
                                Node: : = ':'
                              Node: if_null_expression = 'firebaseUser.displayName ?? 'Unknown User''
                                Node: identifier = 'firebaseUser'
                                Node: selector = '.displayName'
                                  Node: unconditional_assignable_selector = '.displayName'
                                    Node: . = '.'
                                    Node: identifier = 'displayName'
                                Node: ?? = '??'
                                Node: string_literal = ''Unknown User''
                                  Node: ' = '''
                                  Node: ' = '''
                            Node: , = ','
                            Node: named_argument = 'email: firebaseUser.email'
                              Node: label = 'email:'
                                Node: identifier = 'email'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.email'
                                Node: unconditional_assignable_selector = '.email'
                                  Node: . = '.'
                                  Node: identifier = 'email'
                            Node: , = ','
                            Node: named_argument = 'photoURL: firebaseUser.photoURL'
                              Node: label = 'photoURL:'
                                Node: identifier = 'photoURL'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.photoURL'
                                Node: unconditional_assignable_selector = '.photoURL'
                                  Node: . = '.'
                                  Node: identifier = 'photoURL'
                            Node: , = ','
                            Node: named_argument = 'provider: 'line''
                              Node: label = 'provider:'
                                Node: identifier = 'provider'
                                Node: : = ':'
                              Node: string_literal = ''line''
                                Node: ' = '''
                                Node: ' = '''
                            Node: , = ','
                            Node: ) = ')'
                    Node: ; = ';'
                  Node: expression_statement = 'state = AuthState.authenticated(user);'
                    Node: assignment_expression = 'state = AuthState.authenticated(user)'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: identifier = 'AuthState'
                      Node: selector = '.authenticated'
                        Node: unconditional_assignable_selector = '.authenticated'
                          Node: . = '.'
                          Node: identifier = 'authenticated'
                      Node: selector = '(user)'
                        Node: argument_part = '(user)'
                          Node: arguments = '(user)'
                            Node: ( = '('
                            Node: argument = 'user'
                              Node: identifier = 'user'
                            Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
                Node: else = 'else'
                Node: block = '{
        state = const AuthState.unauthenticated();
      }'
                  Node: { = '{'
                  Node: expression_statement = 'state = const AuthState.unauthenticated();'
                    Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: const_object_expression = 'const AuthState.unauthenticated()'
                        Node: const_builtin = 'const'
                        Node: type_identifier = 'AuthState'
                        Node: . = '.'
                        Node: identifier = 'unauthenticated'
                        Node: arguments = '()'
                          Node: ( = '('
                          Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// 認証状態の監視'
        Node: /// = '///'
      Node: method_signature = 'void listenToAuthChanges()'
        Node: function_signature = 'void listenToAuthChanges()'
          Node: void_type = 'void'
          Node: identifier = 'listenToAuthChanges'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = '{
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }'
        Node: block = '{
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }'
          Node: { = '{'
          Node: expression_statement = 'firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });'
            Node: identifier = 'firebase_auth'
            Node: selector = '.FirebaseAuth'
              Node: unconditional_assignable_selector = '.FirebaseAuth'
                Node: . = '.'
                Node: identifier = 'FirebaseAuth'
            Node: selector = '.instance'
              Node: unconditional_assignable_selector = '.instance'
                Node: . = '.'
                Node: identifier = 'instance'
            Node: selector = '.authStateChanges'
              Node: unconditional_assignable_selector = '.authStateChanges'
                Node: . = '.'
                Node: identifier = 'authStateChanges'
            Node: selector = '()'
              Node: argument_part = '()'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: selector = '.listen'
              Node: unconditional_assignable_selector = '.listen'
                Node: . = '.'
                Node: identifier = 'listen'
            Node: selector = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
              Node: argument_part = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
                Node: arguments = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
                  Node: ( = '('
                  Node: argument = '(firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                    Node: function_expression = '(firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                      Node: formal_parameter_list = '(firebaseUser)'
                        Node: ( = '('
                        Node: formal_parameter = 'firebaseUser'
                          Node: identifier = 'firebaseUser'
                        Node: ) = ')'
                      Node: function_expression_body = '{
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                        Node: block = '{
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                          Node: { = '{'
                          Node: if_statement = 'if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }'
                            Node: if = 'if'
                            Node: ( = '('
                            Node: equality_expression = 'firebaseUser != null'
                              Node: identifier = 'firebaseUser'
                              Node: equality_operator = '!='
                              Node: null_literal = 'null'
                                Node: null = 'null'
                            Node: ) = ')'
                            Node: block = '{
        // ユーザーがログインしている場合
        getCurrentUser();
      }'
                              Node: { = '{'
                              Node: comment = '// ユーザーがログインしている場合'
                                Node: // = '//'
                              Node: expression_statement = 'getCurrentUser();'
                                Node: identifier = 'getCurrentUser'
                                Node: selector = '()'
                                  Node: argument_part = '()'
                                    Node: arguments = '()'
                                      Node: ( = '('
                                      Node: ) = ')'
                                Node: ; = ';'
                              Node: } = '}'
                            Node: else = 'else'
                            Node: block = '{
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }'
                              Node: { = '{'
                              Node: comment = '// ユーザーがログアウトしている場合'
                                Node: // = '//'
                              Node: expression_statement = 'state = const AuthState.unauthenticated();'
                                Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                                  Node: assignable_expression = 'state'
                                    Node: identifier = 'state'
                                  Node: = = '='
                                  Node: const_object_expression = 'const AuthState.unauthenticated()'
                                    Node: const_builtin = 'const'
                                    Node: type_identifier = 'AuthState'
                                    Node: . = '.'
                                    Node: identifier = 'unauthenticated'
                                    Node: arguments = '()'
                                      Node: ( = '('
                                      Node: ) = ')'
                                Node: ; = ';'
                              Node: } = '}'
                          Node: } = '}'
                  Node: ) = ')'
            Node: ; = ';'
          Node: } = '}'
      Node: } = '}'
  Node: documentation_comment = '/// 認証状態プロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'AuthState authState(Ref ref)'
    Node: type_identifier = 'AuthState'
    Node: identifier = 'authState'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}'
    Node: block = '{
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}'
      Node: { = '{'
      Node: comment = '// 初回起動時に認証状態を監視開始'
        Node: // = '//'
      Node: expression_statement = 'ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });'
        Node: identifier = 'ref'
        Node: selector = '.listen'
          Node: unconditional_assignable_selector = '.listen'
            Node: . = '.'
            Node: identifier = 'listen'
        Node: selector = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
          Node: argument_part = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
            Node: arguments = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
              Node: ( = '('
              Node: argument = 'authNotifierProvider'
                Node: identifier = 'authNotifierProvider'
              Node: , = ','
              Node: argument = '(previous, next) {
    // 認証状態が変更された時の処理
  }'
                Node: function_expression = '(previous, next) {
    // 認証状態が変更された時の処理
  }'
                  Node: formal_parameter_list = '(previous, next)'
                    Node: ( = '('
                    Node: formal_parameter = 'previous'
                      Node: identifier = 'previous'
                    Node: , = ','
                    Node: formal_parameter = 'next'
                      Node: identifier = 'next'
                    Node: ) = ')'
                  Node: function_expression_body = '{
    // 認証状態が変更された時の処理
  }'
                    Node: block = '{
    // 認証状態が変更された時の処理
  }'
                      Node: { = '{'
                      Node: comment = '// 認証状態が変更された時の処理'
                        Node: // = '//'
                      Node: } = '}'
              Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return ref.watch(authNotifierProvider);'
        Node: return = 'return'
        Node: identifier = 'ref'
        Node: selector = '.watch'
          Node: unconditional_assignable_selector = '.watch'
            Node: . = '.'
            Node: identifier = 'watch'
        Node: selector = '(authNotifierProvider)'
          Node: argument_part = '(authNotifierProvider)'
            Node: arguments = '(authNotifierProvider)'
              Node: ( = '('
              Node: argument = 'authNotifierProvider'
                Node: identifier = 'authNotifierProvider'
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
  Node: documentation_comment = '/// 現在のユーザープロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'AppUser? currentUser(Ref ref)'
    Node: type_identifier = 'AppUser'
    Node: nullable_type = '?'
      Node: ? = '?'
    Node: identifier = 'currentUser'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}'
    Node: block = '{
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}'
      Node: { = '{'
      Node: local_variable_declaration = 'final authState = ref.watch(authStateProvider);'
        Node: initialized_variable_definition = 'final authState = ref.watch(authStateProvider)'
          Node: final_builtin = 'final'
            Node: final = 'final'
          Node: identifier = 'authState'
          Node: = = '='
          Node: identifier = 'ref'
          Node: selector = '.watch'
            Node: unconditional_assignable_selector = '.watch'
              Node: . = '.'
              Node: identifier = 'watch'
          Node: selector = '(authStateProvider)'
            Node: argument_part = '(authStateProvider)'
              Node: arguments = '(authStateProvider)'
                Node: ( = '('
                Node: argument = 'authStateProvider'
                  Node: identifier = 'authStateProvider'
                Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );'
        Node: return = 'return'
        Node: identifier = 'authState'
        Node: selector = '.when'
          Node: unconditional_assignable_selector = '.when'
            Node: . = '.'
            Node: identifier = 'when'
        Node: selector = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
          Node: argument_part = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
            Node: arguments = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
              Node: ( = '('
              Node: named_argument = 'authenticated: (user) => user'
                Node: label = 'authenticated:'
                  Node: identifier = 'authenticated'
                  Node: : = ':'
                Node: function_expression = '(user) => user'
                  Node: formal_parameter_list = '(user)'
                    Node: ( = '('
                    Node: formal_parameter = 'user'
                      Node: identifier = 'user'
                    Node: ) = ')'
                  Node: function_expression_body = '=> user'
                    Node: => = '=>'
                    Node: identifier = 'user'
              Node: , = ','
              Node: named_argument = 'initial: () => null'
                Node: label = 'initial:'
                  Node: identifier = 'initial'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'loading: () => null'
                Node: label = 'loading:'
                  Node: identifier = 'loading'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'unauthenticated: () => null'
                Node: label = 'unauthenticated:'
                  Node: identifier = 'unauthenticated'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'error: (_) => null'
                Node: label = 'error:'
                  Node: identifier = 'error'
                  Node: : = ':'
                Node: function_expression = '(_) => null'
                  Node: formal_parameter_list = '(_)'
                    Node: ( = '('
                    Node: formal_parameter = '_'
                      Node: identifier = '_'
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
  Node: documentation_comment = '/// 認証済みかどうかのプロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'bool isAuthenticated(Ref ref)'
    Node: type_identifier = 'bool'
    Node: identifier = 'isAuthenticated'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}'
    Node: block = '{
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}'
      Node: { = '{'
      Node: local_variable_declaration = 'final authState = ref.watch(authStateProvider);'
        Node: initialized_variable_definition = 'final authState = ref.watch(authStateProvider)'
          Node: final_builtin = 'final'
            Node: final = 'final'
          Node: identifier = 'authState'
          Node: = = '='
          Node: identifier = 'ref'
          Node: selector = '.watch'
            Node: unconditional_assignable_selector = '.watch'
              Node: . = '.'
              Node: identifier = 'watch'
          Node: selector = '(authStateProvider)'
            Node: argument_part = '(authStateProvider)'
              Node: arguments = '(authStateProvider)'
                Node: ( = '('
                Node: argument = 'authStateProvider'
                  Node: identifier = 'authStateProvider'
                Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );'
        Node: return = 'return'
        Node: identifier = 'authState'
        Node: selector = '.maybeWhen'
          Node: unconditional_assignable_selector = '.maybeWhen'
            Node: . = '.'
            Node: identifier = 'maybeWhen'
        Node: selector = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
          Node: argument_part = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
            Node: arguments = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
              Node: ( = '('
              Node: named_argument = 'authenticated: (_) => true'
                Node: label = 'authenticated:'
                  Node: identifier = 'authenticated'
                  Node: : = ':'
                Node: function_expression = '(_) => true'
                  Node: formal_parameter_list = '(_)'
                    Node: ( = '('
                    Node: formal_parameter = '_'
                      Node: identifier = '_'
                    Node: ) = ')'
                  Node: function_expression_body = '=> true'
                    Node: => = '=>'
                    Node: true = 'true'
                      Node: true = 'true'
              Node: , = ','
              Node: named_argument = 'orElse: () => false'
                Node: label = 'orElse:'
                  Node: identifier = 'orElse'
                  Node: : = ':'
                Node: function_expression = '() => false'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> false'
                    Node: => = '=>'
                    Node: false = 'false'
                      Node: false = 'false'
              Node: , = ','
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
=== End AST ===

=== Complete AST for test_flutter_app/aminomi/lib/providers/auth_provider.dart ===
Node: program = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;
import 'package:riverpod/riverpod.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import '../models/user.dart';
import '../services/line_auth_service.dart';

part 'auth_provider.g.dart';

@riverpod
class AuthNotifier extends _$AuthNotifier {
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}

/// 認証状態プロバイダー
@riverpod
AuthState authState(Ref ref) {
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}

/// 現在のユーザープロバイダー
@riverpod
AppUser? currentUser(Ref ref) {
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}

/// 認証済みかどうかのプロバイダー
@riverpod
bool isAuthenticated(Ref ref) {
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}
'
  Node: import_or_export = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
    Node: library_import = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
      Node: import_specification = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
        Node: import = 'import'
        Node: configurable_uri = ''package:firebase_auth/firebase_auth.dart''
          Node: uri = ''package:firebase_auth/firebase_auth.dart''
            Node: string_literal = ''package:firebase_auth/firebase_auth.dart''
              Node: ' = '''
              Node: ' = '''
        Node: as = 'as'
        Node: identifier = 'firebase_auth'
        Node: ; = ';'
  Node: import_or_export = 'import 'package:riverpod/riverpod.dart';'
    Node: library_import = 'import 'package:riverpod/riverpod.dart';'
      Node: import_specification = 'import 'package:riverpod/riverpod.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:riverpod/riverpod.dart''
          Node: uri = ''package:riverpod/riverpod.dart''
            Node: string_literal = ''package:riverpod/riverpod.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
    Node: library_import = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
      Node: import_specification = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:riverpod_annotation/riverpod_annotation.dart''
          Node: uri = ''package:riverpod_annotation/riverpod_annotation.dart''
            Node: string_literal = ''package:riverpod_annotation/riverpod_annotation.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import '../models/user.dart';'
    Node: library_import = 'import '../models/user.dart';'
      Node: import_specification = 'import '../models/user.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''../models/user.dart''
          Node: uri = ''../models/user.dart''
            Node: string_literal = ''../models/user.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import '../services/line_auth_service.dart';'
    Node: library_import = 'import '../services/line_auth_service.dart';'
      Node: import_specification = 'import '../services/line_auth_service.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''../services/line_auth_service.dart''
          Node: uri = ''../services/line_auth_service.dart''
            Node: string_literal = ''../services/line_auth_service.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: part_directive = 'part 'auth_provider.g.dart';'
    Node: part = 'part'
    Node: uri = ''auth_provider.g.dart''
      Node: string_literal = ''auth_provider.g.dart''
        Node: ' = '''
        Node: ' = '''
    Node: ; = ';'
  Node: class_definition = '@riverpod
class AuthNotifier extends _$AuthNotifier {
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}'
    Node: annotation = '@riverpod'
      Node: @ = '@'
      Node: identifier = 'riverpod'
    Node: class = 'class'
    Node: identifier = 'AuthNotifier'
    Node: superclass = 'extends _$AuthNotifier'
      Node: extends = 'extends'
      Node: type_identifier = '_$AuthNotifier'
    Node: class_body = '{
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}'
      Node: { = '{'
      Node: annotation = '@override'
        Node: @ = '@'
        Node: identifier = 'override'
      Node: method_signature = 'AuthState build()'
        Node: function_signature = 'AuthState build()'
          Node: type_identifier = 'AuthState'
          Node: identifier = 'build'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = '{
    return const AuthState.initial();
  }'
        Node: block = '{
    return const AuthState.initial();
  }'
          Node: { = '{'
          Node: return_statement = 'return const AuthState.initial();'
            Node: return = 'return'
            Node: const_object_expression = 'const AuthState.initial()'
              Node: const_builtin = 'const'
              Node: type_identifier = 'AuthState'
              Node: . = '.'
              Node: identifier = 'initial'
              Node: arguments = '()'
                Node: ( = '('
                Node: ) = ')'
            Node: ; = ';'
          Node: } = '}'
      Node: documentation_comment = '/// LINEログイン'
        Node: /// = '///'
      Node: method_signature = 'Future<void> signInWithLine()'
        Node: function_signature = 'Future<void> signInWithLine()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'signInWithLine'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: expression_statement = 'state = const AuthState.loading();'
            Node: assignment_expression = 'state = const AuthState.loading()'
              Node: assignable_expression = 'state'
                Node: identifier = 'state'
              Node: = = '='
              Node: const_object_expression = 'const AuthState.loading()'
                Node: const_builtin = 'const'
                Node: type_identifier = 'AuthState'
                Node: . = '.'
                Node: identifier = 'loading'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: ; = ';'
          Node: try_statement = 'try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    }'
              Node: { = '{'
              Node: local_variable_declaration = 'final result = await LineAuthService.login();'
                Node: initialized_variable_definition = 'final result = await LineAuthService.login()'
                  Node: final_builtin = 'final'
                    Node: final = 'final'
                  Node: identifier = 'result'
                  Node: = = '='
                  Node: unary_expression = 'await LineAuthService.login()'
                    Node: await_expression = 'await LineAuthService.login()'
                      Node: await = 'await'
                      Node: identifier = 'LineAuthService'
                      Node: selector = '.login'
                        Node: unconditional_assignable_selector = '.login'
                          Node: . = '.'
                          Node: identifier = 'login'
                      Node: selector = '()'
                        Node: argument_part = '()'
                          Node: arguments = '()'
                            Node: ( = '('
                            Node: ) = ')'
                Node: ; = ';'
              Node: if_statement = 'if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }'
                Node: if = 'if'
                Node: ( = '('
                Node: equality_expression = 'result != null'
                  Node: identifier = 'result'
                  Node: equality_operator = '!='
                  Node: null_literal = 'null'
                    Node: null = 'null'
                Node: ) = ')'
                Node: block = '{
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      }'
                  Node: { = '{'
                  Node: comment = '// Firebaseカスタムトークンでサインイン'
                    Node: // = '//'
                  Node: local_variable_declaration = 'final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );'
                    Node: initialized_variable_definition = 'final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                      Node: final_builtin = 'final'
                        Node: final = 'final'
                      Node: identifier = 'userCredential'
                      Node: = = '='
                      Node: unary_expression = 'await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                        Node: await_expression = 'await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                          Node: await = 'await'
                          Node: identifier = 'firebase_auth'
                          Node: selector = '.FirebaseAuth'
                            Node: unconditional_assignable_selector = '.FirebaseAuth'
                              Node: . = '.'
                              Node: identifier = 'FirebaseAuth'
                          Node: selector = '.instance'
                            Node: unconditional_assignable_selector = '.instance'
                              Node: . = '.'
                              Node: identifier = 'instance'
                          Node: selector = '.signInWithCustomToken'
                            Node: unconditional_assignable_selector = '.signInWithCustomToken'
                              Node: . = '.'
                              Node: identifier = 'signInWithCustomToken'
                          Node: selector = '(
          result.accessToken,
        )'
                            Node: argument_part = '(
          result.accessToken,
        )'
                              Node: arguments = '(
          result.accessToken,
        )'
                                Node: ( = '('
                                Node: argument = 'result.accessToken'
                                  Node: identifier = 'result'
                                  Node: selector = '.accessToken'
                                    Node: unconditional_assignable_selector = '.accessToken'
                                      Node: . = '.'
                                      Node: identifier = 'accessToken'
                                Node: , = ','
                                Node: ) = ')'
                    Node: ; = ';'
                  Node: if_statement = 'if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }'
                    Node: if = 'if'
                    Node: ( = '('
                    Node: equality_expression = 'userCredential.user != null'
                      Node: identifier = 'userCredential'
                      Node: selector = '.user'
                        Node: unconditional_assignable_selector = '.user'
                          Node: . = '.'
                          Node: identifier = 'user'
                      Node: equality_operator = '!='
                      Node: null_literal = 'null'
                        Node: null = 'null'
                    Node: ) = ')'
                    Node: block = '{
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        }'
                      Node: { = '{'
                      Node: local_variable_declaration = 'final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );'
                        Node: initialized_variable_definition = 'final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                          Node: final_builtin = 'final'
                            Node: final = 'final'
                          Node: identifier = 'user'
                          Node: = = '='
                          Node: identifier = 'AppUser'
                          Node: selector = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                            Node: argument_part = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                              Node: arguments = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                                Node: ( = '('
                                Node: named_argument = 'id: userCredential.user!.uid'
                                  Node: label = 'id:'
                                    Node: identifier = 'id'
                                    Node: : = ':'
                                  Node: identifier = 'userCredential'
                                  Node: selector = '.user'
                                    Node: unconditional_assignable_selector = '.user'
                                      Node: . = '.'
                                      Node: identifier = 'user'
                                  Node: selector = '!'
                                    Node: ! = '!'
                                  Node: selector = '.uid'
                                    Node: unconditional_assignable_selector = '.uid'
                                      Node: . = '.'
                                      Node: identifier = 'uid'
                                Node: , = ','
                                Node: named_argument = 'displayName: result.profile.displayName'
                                  Node: label = 'displayName:'
                                    Node: identifier = 'displayName'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.displayName'
                                    Node: unconditional_assignable_selector = '.displayName'
                                      Node: . = '.'
                                      Node: identifier = 'displayName'
                                Node: , = ','
                                Node: named_argument = 'photoURL: result.profile.pictureUrl'
                                  Node: label = 'photoURL:'
                                    Node: identifier = 'photoURL'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.pictureUrl'
                                    Node: unconditional_assignable_selector = '.pictureUrl'
                                      Node: . = '.'
                                      Node: identifier = 'pictureUrl'
                                Node: , = ','
                                Node: named_argument = 'statusMessage: result.profile.statusMessage'
                                  Node: label = 'statusMessage:'
                                    Node: identifier = 'statusMessage'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.statusMessage'
                                    Node: unconditional_assignable_selector = '.statusMessage'
                                      Node: . = '.'
                                      Node: identifier = 'statusMessage'
                                Node: , = ','
                                Node: named_argument = 'provider: 'line''
                                  Node: label = 'provider:'
                                    Node: identifier = 'provider'
                                    Node: : = ':'
                                  Node: string_literal = ''line''
                                    Node: ' = '''
                                    Node: ' = '''
                                Node: , = ','
                                Node: named_argument = 'createdAt: DateTime.now()'
                                  Node: label = 'createdAt:'
                                    Node: identifier = 'createdAt'
                                    Node: : = ':'
                                  Node: identifier = 'DateTime'
                                  Node: selector = '.now'
                                    Node: unconditional_assignable_selector = '.now'
                                      Node: . = '.'
                                      Node: identifier = 'now'
                                  Node: selector = '()'
                                    Node: argument_part = '()'
                                      Node: arguments = '()'
                                        Node: ( = '('
                                        Node: ) = ')'
                                Node: , = ','
                                Node: ) = ')'
                        Node: ; = ';'
                      Node: expression_statement = 'state = AuthState.authenticated(user);'
                        Node: assignment_expression = 'state = AuthState.authenticated(user)'
                          Node: assignable_expression = 'state'
                            Node: identifier = 'state'
                          Node: = = '='
                          Node: identifier = 'AuthState'
                          Node: selector = '.authenticated'
                            Node: unconditional_assignable_selector = '.authenticated'
                              Node: . = '.'
                              Node: identifier = 'authenticated'
                          Node: selector = '(user)'
                            Node: argument_part = '(user)'
                              Node: arguments = '(user)'
                                Node: ( = '('
                                Node: argument = 'user'
                                  Node: identifier = 'user'
                                Node: ) = ')'
                        Node: ; = ';'
                      Node: } = '}'
                    Node: else = 'else'
                    Node: block = '{
          state = const AuthState.error('Failed to sign in with custom token');
        }'
                      Node: { = '{'
                      Node: expression_statement = 'state = const AuthState.error('Failed to sign in with custom token');'
                        Node: assignment_expression = 'state = const AuthState.error('Failed to sign in with custom token')'
                          Node: assignable_expression = 'state'
                            Node: identifier = 'state'
                          Node: = = '='
                          Node: const_object_expression = 'const AuthState.error('Failed to sign in with custom token')'
                            Node: const_builtin = 'const'
                            Node: type_identifier = 'AuthState'
                            Node: . = '.'
                            Node: identifier = 'error'
                            Node: arguments = '('Failed to sign in with custom token')'
                              Node: ( = '('
                              Node: argument = ''Failed to sign in with custom token''
                                Node: string_literal = ''Failed to sign in with custom token''
                                  Node: ' = '''
                                  Node: ' = '''
                              Node: ) = ')'
                        Node: ; = ';'
                      Node: } = '}'
                  Node: } = '}'
                Node: else = 'else'
                Node: block = '{
        state = const AuthState.error('LINE login failed');
      }'
                  Node: { = '{'
                  Node: expression_statement = 'state = const AuthState.error('LINE login failed');'
                    Node: assignment_expression = 'state = const AuthState.error('LINE login failed')'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: const_object_expression = 'const AuthState.error('LINE login failed')'
                        Node: const_builtin = 'const'
                        Node: type_identifier = 'AuthState'
                        Node: . = '.'
                        Node: identifier = 'error'
                        Node: arguments = '('LINE login failed')'
                          Node: ( = '('
                          Node: argument = ''LINE login failed''
                            Node: string_literal = ''LINE login failed''
                              Node: ' = '''
                              Node: ' = '''
                          Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// ログアウト'
        Node: /// = '///'
      Node: method_signature = 'Future<void> signOut()'
        Node: function_signature = 'Future<void> signOut()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'signOut'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: try_statement = 'try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    }'
              Node: { = '{'
              Node: expression_statement = 'await firebase_auth.FirebaseAuth.instance.signOut();'
                Node: unary_expression = 'await firebase_auth.FirebaseAuth.instance.signOut()'
                  Node: await_expression = 'await firebase_auth.FirebaseAuth.instance.signOut()'
                    Node: await = 'await'
                    Node: identifier = 'firebase_auth'
                    Node: selector = '.FirebaseAuth'
                      Node: unconditional_assignable_selector = '.FirebaseAuth'
                        Node: . = '.'
                        Node: identifier = 'FirebaseAuth'
                    Node: selector = '.instance'
                      Node: unconditional_assignable_selector = '.instance'
                        Node: . = '.'
                        Node: identifier = 'instance'
                    Node: selector = '.signOut'
                      Node: unconditional_assignable_selector = '.signOut'
                        Node: . = '.'
                        Node: identifier = 'signOut'
                    Node: selector = '()'
                      Node: argument_part = '()'
                        Node: arguments = '()'
                          Node: ( = '('
                          Node: ) = ')'
                Node: ; = ';'
              Node: expression_statement = 'state = const AuthState.unauthenticated();'
                Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: const_object_expression = 'const AuthState.unauthenticated()'
                    Node: const_builtin = 'const'
                    Node: type_identifier = 'AuthState'
                    Node: . = '.'
                    Node: identifier = 'unauthenticated'
                    Node: arguments = '()'
                      Node: ( = '('
                      Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// 現在のユーザーを取得'
        Node: /// = '///'
      Node: method_signature = 'Future<void> getCurrentUser()'
        Node: function_signature = 'Future<void> getCurrentUser()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'getCurrentUser'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: expression_statement = 'state = const AuthState.loading();'
            Node: assignment_expression = 'state = const AuthState.loading()'
              Node: assignable_expression = 'state'
                Node: identifier = 'state'
              Node: = = '='
              Node: const_object_expression = 'const AuthState.loading()'
                Node: const_builtin = 'const'
                Node: type_identifier = 'AuthState'
                Node: . = '.'
                Node: identifier = 'loading'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: ; = ';'
          Node: try_statement = 'try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    }'
              Node: { = '{'
              Node: local_variable_declaration = 'final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;'
                Node: initialized_variable_definition = 'final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser'
                  Node: final_builtin = 'final'
                    Node: final = 'final'
                  Node: identifier = 'firebaseUser'
                  Node: = = '='
                  Node: identifier = 'firebase_auth'
                  Node: selector = '.FirebaseAuth'
                    Node: unconditional_assignable_selector = '.FirebaseAuth'
                      Node: . = '.'
                      Node: identifier = 'FirebaseAuth'
                  Node: selector = '.instance'
                    Node: unconditional_assignable_selector = '.instance'
                      Node: . = '.'
                      Node: identifier = 'instance'
                  Node: selector = '.currentUser'
                    Node: unconditional_assignable_selector = '.currentUser'
                      Node: . = '.'
                      Node: identifier = 'currentUser'
                Node: ; = ';'
              Node: if_statement = 'if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }'
                Node: if = 'if'
                Node: ( = '('
                Node: equality_expression = 'firebaseUser != null'
                  Node: identifier = 'firebaseUser'
                  Node: equality_operator = '!='
                  Node: null_literal = 'null'
                    Node: null = 'null'
                Node: ) = ')'
                Node: block = '{
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      }'
                  Node: { = '{'
                  Node: comment = '// Firestoreからユーザー情報を取得'
                    Node: // = '//'
                  Node: comment = '// TODO: FirestoreServiceを使用してユーザー情報を取得'
                    Node: // = '//'
                  Node: local_variable_declaration = 'final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );'
                    Node: initialized_variable_definition = 'final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                      Node: final_builtin = 'final'
                        Node: final = 'final'
                      Node: identifier = 'user'
                      Node: = = '='
                      Node: identifier = 'AppUser'
                      Node: selector = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                        Node: argument_part = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                          Node: arguments = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                            Node: ( = '('
                            Node: named_argument = 'id: firebaseUser.uid'
                              Node: label = 'id:'
                                Node: identifier = 'id'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.uid'
                                Node: unconditional_assignable_selector = '.uid'
                                  Node: . = '.'
                                  Node: identifier = 'uid'
                            Node: , = ','
                            Node: named_argument = 'displayName: firebaseUser.displayName ?? 'Unknown User''
                              Node: label = 'displayName:'
                                Node: identifier = 'displayName'
                                Node: : = ':'
                              Node: if_null_expression = 'firebaseUser.displayName ?? 'Unknown User''
                                Node: identifier = 'firebaseUser'
                                Node: selector = '.displayName'
                                  Node: unconditional_assignable_selector = '.displayName'
                                    Node: . = '.'
                                    Node: identifier = 'displayName'
                                Node: ?? = '??'
                                Node: string_literal = ''Unknown User''
                                  Node: ' = '''
                                  Node: ' = '''
                            Node: , = ','
                            Node: named_argument = 'email: firebaseUser.email'
                              Node: label = 'email:'
                                Node: identifier = 'email'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.email'
                                Node: unconditional_assignable_selector = '.email'
                                  Node: . = '.'
                                  Node: identifier = 'email'
                            Node: , = ','
                            Node: named_argument = 'photoURL: firebaseUser.photoURL'
                              Node: label = 'photoURL:'
                                Node: identifier = 'photoURL'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.photoURL'
                                Node: unconditional_assignable_selector = '.photoURL'
                                  Node: . = '.'
                                  Node: identifier = 'photoURL'
                            Node: , = ','
                            Node: named_argument = 'provider: 'line''
                              Node: label = 'provider:'
                                Node: identifier = 'provider'
                                Node: : = ':'
                              Node: string_literal = ''line''
                                Node: ' = '''
                                Node: ' = '''
                            Node: , = ','
                            Node: ) = ')'
                    Node: ; = ';'
                  Node: expression_statement = 'state = AuthState.authenticated(user);'
                    Node: assignment_expression = 'state = AuthState.authenticated(user)'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: identifier = 'AuthState'
                      Node: selector = '.authenticated'
                        Node: unconditional_assignable_selector = '.authenticated'
                          Node: . = '.'
                          Node: identifier = 'authenticated'
                      Node: selector = '(user)'
                        Node: argument_part = '(user)'
                          Node: arguments = '(user)'
                            Node: ( = '('
                            Node: argument = 'user'
                              Node: identifier = 'user'
                            Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
                Node: else = 'else'
                Node: block = '{
        state = const AuthState.unauthenticated();
      }'
                  Node: { = '{'
                  Node: expression_statement = 'state = const AuthState.unauthenticated();'
                    Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: const_object_expression = 'const AuthState.unauthenticated()'
                        Node: const_builtin = 'const'
                        Node: type_identifier = 'AuthState'
                        Node: . = '.'
                        Node: identifier = 'unauthenticated'
                        Node: arguments = '()'
                          Node: ( = '('
                          Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// 認証状態の監視'
        Node: /// = '///'
      Node: method_signature = 'void listenToAuthChanges()'
        Node: function_signature = 'void listenToAuthChanges()'
          Node: void_type = 'void'
          Node: identifier = 'listenToAuthChanges'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = '{
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }'
        Node: block = '{
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }'
          Node: { = '{'
          Node: expression_statement = 'firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });'
            Node: identifier = 'firebase_auth'
            Node: selector = '.FirebaseAuth'
              Node: unconditional_assignable_selector = '.FirebaseAuth'
                Node: . = '.'
                Node: identifier = 'FirebaseAuth'
            Node: selector = '.instance'
              Node: unconditional_assignable_selector = '.instance'
                Node: . = '.'
                Node: identifier = 'instance'
            Node: selector = '.authStateChanges'
              Node: unconditional_assignable_selector = '.authStateChanges'
                Node: . = '.'
                Node: identifier = 'authStateChanges'
            Node: selector = '()'
              Node: argument_part = '()'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: selector = '.listen'
              Node: unconditional_assignable_selector = '.listen'
                Node: . = '.'
                Node: identifier = 'listen'
            Node: selector = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
              Node: argument_part = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
                Node: arguments = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
                  Node: ( = '('
                  Node: argument = '(firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                    Node: function_expression = '(firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                      Node: formal_parameter_list = '(firebaseUser)'
                        Node: ( = '('
                        Node: formal_parameter = 'firebaseUser'
                          Node: identifier = 'firebaseUser'
                        Node: ) = ')'
                      Node: function_expression_body = '{
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                        Node: block = '{
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                          Node: { = '{'
                          Node: if_statement = 'if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }'
                            Node: if = 'if'
                            Node: ( = '('
                            Node: equality_expression = 'firebaseUser != null'
                              Node: identifier = 'firebaseUser'
                              Node: equality_operator = '!='
                              Node: null_literal = 'null'
                                Node: null = 'null'
                            Node: ) = ')'
                            Node: block = '{
        // ユーザーがログインしている場合
        getCurrentUser();
      }'
                              Node: { = '{'
                              Node: comment = '// ユーザーがログインしている場合'
                                Node: // = '//'
                              Node: expression_statement = 'getCurrentUser();'
                                Node: identifier = 'getCurrentUser'
                                Node: selector = '()'
                                  Node: argument_part = '()'
                                    Node: arguments = '()'
                                      Node: ( = '('
                                      Node: ) = ')'
                                Node: ; = ';'
                              Node: } = '}'
                            Node: else = 'else'
                            Node: block = '{
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }'
                              Node: { = '{'
                              Node: comment = '// ユーザーがログアウトしている場合'
                                Node: // = '//'
                              Node: expression_statement = 'state = const AuthState.unauthenticated();'
                                Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                                  Node: assignable_expression = 'state'
                                    Node: identifier = 'state'
                                  Node: = = '='
                                  Node: const_object_expression = 'const AuthState.unauthenticated()'
                                    Node: const_builtin = 'const'
                                    Node: type_identifier = 'AuthState'
                                    Node: . = '.'
                                    Node: identifier = 'unauthenticated'
                                    Node: arguments = '()'
                                      Node: ( = '('
                                      Node: ) = ')'
                                Node: ; = ';'
                              Node: } = '}'
                          Node: } = '}'
                  Node: ) = ')'
            Node: ; = ';'
          Node: } = '}'
      Node: } = '}'
  Node: documentation_comment = '/// 認証状態プロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'AuthState authState(Ref ref)'
    Node: type_identifier = 'AuthState'
    Node: identifier = 'authState'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}'
    Node: block = '{
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}'
      Node: { = '{'
      Node: comment = '// 初回起動時に認証状態を監視開始'
        Node: // = '//'
      Node: expression_statement = 'ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });'
        Node: identifier = 'ref'
        Node: selector = '.listen'
          Node: unconditional_assignable_selector = '.listen'
            Node: . = '.'
            Node: identifier = 'listen'
        Node: selector = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
          Node: argument_part = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
            Node: arguments = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
              Node: ( = '('
              Node: argument = 'authNotifierProvider'
                Node: identifier = 'authNotifierProvider'
              Node: , = ','
              Node: argument = '(previous, next) {
    // 認証状態が変更された時の処理
  }'
                Node: function_expression = '(previous, next) {
    // 認証状態が変更された時の処理
  }'
                  Node: formal_parameter_list = '(previous, next)'
                    Node: ( = '('
                    Node: formal_parameter = 'previous'
                      Node: identifier = 'previous'
                    Node: , = ','
                    Node: formal_parameter = 'next'
                      Node: identifier = 'next'
                    Node: ) = ')'
                  Node: function_expression_body = '{
    // 認証状態が変更された時の処理
  }'
                    Node: block = '{
    // 認証状態が変更された時の処理
  }'
                      Node: { = '{'
                      Node: comment = '// 認証状態が変更された時の処理'
                        Node: // = '//'
                      Node: } = '}'
              Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return ref.watch(authNotifierProvider);'
        Node: return = 'return'
        Node: identifier = 'ref'
        Node: selector = '.watch'
          Node: unconditional_assignable_selector = '.watch'
            Node: . = '.'
            Node: identifier = 'watch'
        Node: selector = '(authNotifierProvider)'
          Node: argument_part = '(authNotifierProvider)'
            Node: arguments = '(authNotifierProvider)'
              Node: ( = '('
              Node: argument = 'authNotifierProvider'
                Node: identifier = 'authNotifierProvider'
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
  Node: documentation_comment = '/// 現在のユーザープロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'AppUser? currentUser(Ref ref)'
    Node: type_identifier = 'AppUser'
    Node: nullable_type = '?'
      Node: ? = '?'
    Node: identifier = 'currentUser'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}'
    Node: block = '{
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}'
      Node: { = '{'
      Node: local_variable_declaration = 'final authState = ref.watch(authStateProvider);'
        Node: initialized_variable_definition = 'final authState = ref.watch(authStateProvider)'
          Node: final_builtin = 'final'
            Node: final = 'final'
          Node: identifier = 'authState'
          Node: = = '='
          Node: identifier = 'ref'
          Node: selector = '.watch'
            Node: unconditional_assignable_selector = '.watch'
              Node: . = '.'
              Node: identifier = 'watch'
          Node: selector = '(authStateProvider)'
            Node: argument_part = '(authStateProvider)'
              Node: arguments = '(authStateProvider)'
                Node: ( = '('
                Node: argument = 'authStateProvider'
                  Node: identifier = 'authStateProvider'
                Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );'
        Node: return = 'return'
        Node: identifier = 'authState'
        Node: selector = '.when'
          Node: unconditional_assignable_selector = '.when'
            Node: . = '.'
            Node: identifier = 'when'
        Node: selector = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
          Node: argument_part = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
            Node: arguments = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
              Node: ( = '('
              Node: named_argument = 'authenticated: (user) => user'
                Node: label = 'authenticated:'
                  Node: identifier = 'authenticated'
                  Node: : = ':'
                Node: function_expression = '(user) => user'
                  Node: formal_parameter_list = '(user)'
                    Node: ( = '('
                    Node: formal_parameter = 'user'
                      Node: identifier = 'user'
                    Node: ) = ')'
                  Node: function_expression_body = '=> user'
                    Node: => = '=>'
                    Node: identifier = 'user'
              Node: , = ','
              Node: named_argument = 'initial: () => null'
                Node: label = 'initial:'
                  Node: identifier = 'initial'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'loading: () => null'
                Node: label = 'loading:'
                  Node: identifier = 'loading'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'unauthenticated: () => null'
                Node: label = 'unauthenticated:'
                  Node: identifier = 'unauthenticated'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'error: (_) => null'
                Node: label = 'error:'
                  Node: identifier = 'error'
                  Node: : = ':'
                Node: function_expression = '(_) => null'
                  Node: formal_parameter_list = '(_)'
                    Node: ( = '('
                    Node: formal_parameter = '_'
                      Node: identifier = '_'
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
  Node: documentation_comment = '/// 認証済みかどうかのプロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'bool isAuthenticated(Ref ref)'
    Node: type_identifier = 'bool'
    Node: identifier = 'isAuthenticated'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}'
    Node: block = '{
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}'
      Node: { = '{'
      Node: local_variable_declaration = 'final authState = ref.watch(authStateProvider);'
        Node: initialized_variable_definition = 'final authState = ref.watch(authStateProvider)'
          Node: final_builtin = 'final'
            Node: final = 'final'
          Node: identifier = 'authState'
          Node: = = '='
          Node: identifier = 'ref'
          Node: selector = '.watch'
            Node: unconditional_assignable_selector = '.watch'
              Node: . = '.'
              Node: identifier = 'watch'
          Node: selector = '(authStateProvider)'
            Node: argument_part = '(authStateProvider)'
              Node: arguments = '(authStateProvider)'
                Node: ( = '('
                Node: argument = 'authStateProvider'
                  Node: identifier = 'authStateProvider'
                Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );'
        Node: return = 'return'
        Node: identifier = 'authState'
        Node: selector = '.maybeWhen'
          Node: unconditional_assignable_selector = '.maybeWhen'
            Node: . = '.'
            Node: identifier = 'maybeWhen'
        Node: selector = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
          Node: argument_part = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
            Node: arguments = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
              Node: ( = '('
              Node: named_argument = 'authenticated: (_) => true'
                Node: label = 'authenticated:'
                  Node: identifier = 'authenticated'
                  Node: : = ':'
                Node: function_expression = '(_) => true'
                  Node: formal_parameter_list = '(_)'
                    Node: ( = '('
                    Node: formal_parameter = '_'
                      Node: identifier = '_'
                    Node: ) = ')'
                  Node: function_expression_body = '=> true'
                    Node: => = '=>'
                    Node: true = 'true'
                      Node: true = 'true'
              Node: , = ','
              Node: named_argument = 'orElse: () => false'
                Node: label = 'orElse:'
                  Node: identifier = 'orElse'
                  Node: : = ':'
                Node: function_expression = '() => false'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> false'
                    Node: => = '=>'
                    Node: false = 'false'
                      Node: false = 'false'
              Node: , = ','
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
=== End AST ===

=== Complete AST for test_flutter_app/aminomi/lib/providers/auth_provider.dart ===
Node: program = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;
import 'package:riverpod/riverpod.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import '../models/user.dart';
import '../services/line_auth_service.dart';

part 'auth_provider.g.dart';

@riverpod
class AuthNotifier extends _$AuthNotifier {
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}

/// 認証状態プロバイダー
@riverpod
AuthState authState(Ref ref) {
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}

/// 現在のユーザープロバイダー
@riverpod
AppUser? currentUser(Ref ref) {
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}

/// 認証済みかどうかのプロバイダー
@riverpod
bool isAuthenticated(Ref ref) {
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}
'
  Node: import_or_export = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
    Node: library_import = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
      Node: import_specification = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
        Node: import = 'import'
        Node: configurable_uri = ''package:firebase_auth/firebase_auth.dart''
          Node: uri = ''package:firebase_auth/firebase_auth.dart''
            Node: string_literal = ''package:firebase_auth/firebase_auth.dart''
              Node: ' = '''
              Node: ' = '''
        Node: as = 'as'
        Node: identifier = 'firebase_auth'
        Node: ; = ';'
  Node: import_or_export = 'import 'package:riverpod/riverpod.dart';'
    Node: library_import = 'import 'package:riverpod/riverpod.dart';'
      Node: import_specification = 'import 'package:riverpod/riverpod.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:riverpod/riverpod.dart''
          Node: uri = ''package:riverpod/riverpod.dart''
            Node: string_literal = ''package:riverpod/riverpod.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
    Node: library_import = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
      Node: import_specification = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:riverpod_annotation/riverpod_annotation.dart''
          Node: uri = ''package:riverpod_annotation/riverpod_annotation.dart''
            Node: string_literal = ''package:riverpod_annotation/riverpod_annotation.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import '../models/user.dart';'
    Node: library_import = 'import '../models/user.dart';'
      Node: import_specification = 'import '../models/user.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''../models/user.dart''
          Node: uri = ''../models/user.dart''
            Node: string_literal = ''../models/user.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import '../services/line_auth_service.dart';'
    Node: library_import = 'import '../services/line_auth_service.dart';'
      Node: import_specification = 'import '../services/line_auth_service.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''../services/line_auth_service.dart''
          Node: uri = ''../services/line_auth_service.dart''
            Node: string_literal = ''../services/line_auth_service.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: part_directive = 'part 'auth_provider.g.dart';'
    Node: part = 'part'
    Node: uri = ''auth_provider.g.dart''
      Node: string_literal = ''auth_provider.g.dart''
        Node: ' = '''
        Node: ' = '''
    Node: ; = ';'
  Node: class_definition = '@riverpod
class AuthNotifier extends _$AuthNotifier {
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}'
    Node: annotation = '@riverpod'
      Node: @ = '@'
      Node: identifier = 'riverpod'
    Node: class = 'class'
    Node: identifier = 'AuthNotifier'
    Node: superclass = 'extends _$AuthNotifier'
      Node: extends = 'extends'
      Node: type_identifier = '_$AuthNotifier'
    Node: class_body = '{
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}'
      Node: { = '{'
      Node: annotation = '@override'
        Node: @ = '@'
        Node: identifier = 'override'
      Node: method_signature = 'AuthState build()'
        Node: function_signature = 'AuthState build()'
          Node: type_identifier = 'AuthState'
          Node: identifier = 'build'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = '{
    return const AuthState.initial();
  }'
        Node: block = '{
    return const AuthState.initial();
  }'
          Node: { = '{'
          Node: return_statement = 'return const AuthState.initial();'
            Node: return = 'return'
            Node: const_object_expression = 'const AuthState.initial()'
              Node: const_builtin = 'const'
              Node: type_identifier = 'AuthState'
              Node: . = '.'
              Node: identifier = 'initial'
              Node: arguments = '()'
                Node: ( = '('
                Node: ) = ')'
            Node: ; = ';'
          Node: } = '}'
      Node: documentation_comment = '/// LINEログイン'
        Node: /// = '///'
      Node: method_signature = 'Future<void> signInWithLine()'
        Node: function_signature = 'Future<void> signInWithLine()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'signInWithLine'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: expression_statement = 'state = const AuthState.loading();'
            Node: assignment_expression = 'state = const AuthState.loading()'
              Node: assignable_expression = 'state'
                Node: identifier = 'state'
              Node: = = '='
              Node: const_object_expression = 'const AuthState.loading()'
                Node: const_builtin = 'const'
                Node: type_identifier = 'AuthState'
                Node: . = '.'
                Node: identifier = 'loading'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: ; = ';'
          Node: try_statement = 'try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    }'
              Node: { = '{'
              Node: local_variable_declaration = 'final result = await LineAuthService.login();'
                Node: initialized_variable_definition = 'final result = await LineAuthService.login()'
                  Node: final_builtin = 'final'
                    Node: final = 'final'
                  Node: identifier = 'result'
                  Node: = = '='
                  Node: unary_expression = 'await LineAuthService.login()'
                    Node: await_expression = 'await LineAuthService.login()'
                      Node: await = 'await'
                      Node: identifier = 'LineAuthService'
                      Node: selector = '.login'
                        Node: unconditional_assignable_selector = '.login'
                          Node: . = '.'
                          Node: identifier = 'login'
                      Node: selector = '()'
                        Node: argument_part = '()'
                          Node: arguments = '()'
                            Node: ( = '('
                            Node: ) = ')'
                Node: ; = ';'
              Node: if_statement = 'if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }'
                Node: if = 'if'
                Node: ( = '('
                Node: equality_expression = 'result != null'
                  Node: identifier = 'result'
                  Node: equality_operator = '!='
                  Node: null_literal = 'null'
                    Node: null = 'null'
                Node: ) = ')'
                Node: block = '{
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      }'
                  Node: { = '{'
                  Node: comment = '// Firebaseカスタムトークンでサインイン'
                    Node: // = '//'
                  Node: local_variable_declaration = 'final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );'
                    Node: initialized_variable_definition = 'final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                      Node: final_builtin = 'final'
                        Node: final = 'final'
                      Node: identifier = 'userCredential'
                      Node: = = '='
                      Node: unary_expression = 'await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                        Node: await_expression = 'await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                          Node: await = 'await'
                          Node: identifier = 'firebase_auth'
                          Node: selector = '.FirebaseAuth'
                            Node: unconditional_assignable_selector = '.FirebaseAuth'
                              Node: . = '.'
                              Node: identifier = 'FirebaseAuth'
                          Node: selector = '.instance'
                            Node: unconditional_assignable_selector = '.instance'
                              Node: . = '.'
                              Node: identifier = 'instance'
                          Node: selector = '.signInWithCustomToken'
                            Node: unconditional_assignable_selector = '.signInWithCustomToken'
                              Node: . = '.'
                              Node: identifier = 'signInWithCustomToken'
                          Node: selector = '(
          result.accessToken,
        )'
                            Node: argument_part = '(
          result.accessToken,
        )'
                              Node: arguments = '(
          result.accessToken,
        )'
                                Node: ( = '('
                                Node: argument = 'result.accessToken'
                                  Node: identifier = 'result'
                                  Node: selector = '.accessToken'
                                    Node: unconditional_assignable_selector = '.accessToken'
                                      Node: . = '.'
                                      Node: identifier = 'accessToken'
                                Node: , = ','
                                Node: ) = ')'
                    Node: ; = ';'
                  Node: if_statement = 'if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }'
                    Node: if = 'if'
                    Node: ( = '('
                    Node: equality_expression = 'userCredential.user != null'
                      Node: identifier = 'userCredential'
                      Node: selector = '.user'
                        Node: unconditional_assignable_selector = '.user'
                          Node: . = '.'
                          Node: identifier = 'user'
                      Node: equality_operator = '!='
                      Node: null_literal = 'null'
                        Node: null = 'null'
                    Node: ) = ')'
                    Node: block = '{
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        }'
                      Node: { = '{'
                      Node: local_variable_declaration = 'final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );'
                        Node: initialized_variable_definition = 'final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                          Node: final_builtin = 'final'
                            Node: final = 'final'
                          Node: identifier = 'user'
                          Node: = = '='
                          Node: identifier = 'AppUser'
                          Node: selector = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                            Node: argument_part = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                              Node: arguments = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                                Node: ( = '('
                                Node: named_argument = 'id: userCredential.user!.uid'
                                  Node: label = 'id:'
                                    Node: identifier = 'id'
                                    Node: : = ':'
                                  Node: identifier = 'userCredential'
                                  Node: selector = '.user'
                                    Node: unconditional_assignable_selector = '.user'
                                      Node: . = '.'
                                      Node: identifier = 'user'
                                  Node: selector = '!'
                                    Node: ! = '!'
                                  Node: selector = '.uid'
                                    Node: unconditional_assignable_selector = '.uid'
                                      Node: . = '.'
                                      Node: identifier = 'uid'
                                Node: , = ','
                                Node: named_argument = 'displayName: result.profile.displayName'
                                  Node: label = 'displayName:'
                                    Node: identifier = 'displayName'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.displayName'
                                    Node: unconditional_assignable_selector = '.displayName'
                                      Node: . = '.'
                                      Node: identifier = 'displayName'
                                Node: , = ','
                                Node: named_argument = 'photoURL: result.profile.pictureUrl'
                                  Node: label = 'photoURL:'
                                    Node: identifier = 'photoURL'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.pictureUrl'
                                    Node: unconditional_assignable_selector = '.pictureUrl'
                                      Node: . = '.'
                                      Node: identifier = 'pictureUrl'
                                Node: , = ','
                                Node: named_argument = 'statusMessage: result.profile.statusMessage'
                                  Node: label = 'statusMessage:'
                                    Node: identifier = 'statusMessage'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.statusMessage'
                                    Node: unconditional_assignable_selector = '.statusMessage'
                                      Node: . = '.'
                                      Node: identifier = 'statusMessage'
                                Node: , = ','
                                Node: named_argument = 'provider: 'line''
                                  Node: label = 'provider:'
                                    Node: identifier = 'provider'
                                    Node: : = ':'
                                  Node: string_literal = ''line''
                                    Node: ' = '''
                                    Node: ' = '''
                                Node: , = ','
                                Node: named_argument = 'createdAt: DateTime.now()'
                                  Node: label = 'createdAt:'
                                    Node: identifier = 'createdAt'
                                    Node: : = ':'
                                  Node: identifier = 'DateTime'
                                  Node: selector = '.now'
                                    Node: unconditional_assignable_selector = '.now'
                                      Node: . = '.'
                                      Node: identifier = 'now'
                                  Node: selector = '()'
                                    Node: argument_part = '()'
                                      Node: arguments = '()'
                                        Node: ( = '('
                                        Node: ) = ')'
                                Node: , = ','
                                Node: ) = ')'
                        Node: ; = ';'
                      Node: expression_statement = 'state = AuthState.authenticated(user);'
                        Node: assignment_expression = 'state = AuthState.authenticated(user)'
                          Node: assignable_expression = 'state'
                            Node: identifier = 'state'
                          Node: = = '='
                          Node: identifier = 'AuthState'
                          Node: selector = '.authenticated'
                            Node: unconditional_assignable_selector = '.authenticated'
                              Node: . = '.'
                              Node: identifier = 'authenticated'
                          Node: selector = '(user)'
                            Node: argument_part = '(user)'
                              Node: arguments = '(user)'
                                Node: ( = '('
                                Node: argument = 'user'
                                  Node: identifier = 'user'
                                Node: ) = ')'
                        Node: ; = ';'
                      Node: } = '}'
                    Node: else = 'else'
                    Node: block = '{
          state = const AuthState.error('Failed to sign in with custom token');
        }'
                      Node: { = '{'
                      Node: expression_statement = 'state = const AuthState.error('Failed to sign in with custom token');'
                        Node: assignment_expression = 'state = const AuthState.error('Failed to sign in with custom token')'
                          Node: assignable_expression = 'state'
                            Node: identifier = 'state'
                          Node: = = '='
                          Node: const_object_expression = 'const AuthState.error('Failed to sign in with custom token')'
                            Node: const_builtin = 'const'
                            Node: type_identifier = 'AuthState'
                            Node: . = '.'
                            Node: identifier = 'error'
                            Node: arguments = '('Failed to sign in with custom token')'
                              Node: ( = '('
                              Node: argument = ''Failed to sign in with custom token''
                                Node: string_literal = ''Failed to sign in with custom token''
                                  Node: ' = '''
                                  Node: ' = '''
                              Node: ) = ')'
                        Node: ; = ';'
                      Node: } = '}'
                  Node: } = '}'
                Node: else = 'else'
                Node: block = '{
        state = const AuthState.error('LINE login failed');
      }'
                  Node: { = '{'
                  Node: expression_statement = 'state = const AuthState.error('LINE login failed');'
                    Node: assignment_expression = 'state = const AuthState.error('LINE login failed')'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: const_object_expression = 'const AuthState.error('LINE login failed')'
                        Node: const_builtin = 'const'
                        Node: type_identifier = 'AuthState'
                        Node: . = '.'
                        Node: identifier = 'error'
                        Node: arguments = '('LINE login failed')'
                          Node: ( = '('
                          Node: argument = ''LINE login failed''
                            Node: string_literal = ''LINE login failed''
                              Node: ' = '''
                              Node: ' = '''
                          Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// ログアウト'
        Node: /// = '///'
      Node: method_signature = 'Future<void> signOut()'
        Node: function_signature = 'Future<void> signOut()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'signOut'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: try_statement = 'try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    }'
              Node: { = '{'
              Node: expression_statement = 'await firebase_auth.FirebaseAuth.instance.signOut();'
                Node: unary_expression = 'await firebase_auth.FirebaseAuth.instance.signOut()'
                  Node: await_expression = 'await firebase_auth.FirebaseAuth.instance.signOut()'
                    Node: await = 'await'
                    Node: identifier = 'firebase_auth'
                    Node: selector = '.FirebaseAuth'
                      Node: unconditional_assignable_selector = '.FirebaseAuth'
                        Node: . = '.'
                        Node: identifier = 'FirebaseAuth'
                    Node: selector = '.instance'
                      Node: unconditional_assignable_selector = '.instance'
                        Node: . = '.'
                        Node: identifier = 'instance'
                    Node: selector = '.signOut'
                      Node: unconditional_assignable_selector = '.signOut'
                        Node: . = '.'
                        Node: identifier = 'signOut'
                    Node: selector = '()'
                      Node: argument_part = '()'
                        Node: arguments = '()'
                          Node: ( = '('
                          Node: ) = ')'
                Node: ; = ';'
              Node: expression_statement = 'state = const AuthState.unauthenticated();'
                Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: const_object_expression = 'const AuthState.unauthenticated()'
                    Node: const_builtin = 'const'
                    Node: type_identifier = 'AuthState'
                    Node: . = '.'
                    Node: identifier = 'unauthenticated'
                    Node: arguments = '()'
                      Node: ( = '('
                      Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// 現在のユーザーを取得'
        Node: /// = '///'
      Node: method_signature = 'Future<void> getCurrentUser()'
        Node: function_signature = 'Future<void> getCurrentUser()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'getCurrentUser'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: expression_statement = 'state = const AuthState.loading();'
            Node: assignment_expression = 'state = const AuthState.loading()'
              Node: assignable_expression = 'state'
                Node: identifier = 'state'
              Node: = = '='
              Node: const_object_expression = 'const AuthState.loading()'
                Node: const_builtin = 'const'
                Node: type_identifier = 'AuthState'
                Node: . = '.'
                Node: identifier = 'loading'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: ; = ';'
          Node: try_statement = 'try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    }'
              Node: { = '{'
              Node: local_variable_declaration = 'final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;'
                Node: initialized_variable_definition = 'final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser'
                  Node: final_builtin = 'final'
                    Node: final = 'final'
                  Node: identifier = 'firebaseUser'
                  Node: = = '='
                  Node: identifier = 'firebase_auth'
                  Node: selector = '.FirebaseAuth'
                    Node: unconditional_assignable_selector = '.FirebaseAuth'
                      Node: . = '.'
                      Node: identifier = 'FirebaseAuth'
                  Node: selector = '.instance'
                    Node: unconditional_assignable_selector = '.instance'
                      Node: . = '.'
                      Node: identifier = 'instance'
                  Node: selector = '.currentUser'
                    Node: unconditional_assignable_selector = '.currentUser'
                      Node: . = '.'
                      Node: identifier = 'currentUser'
                Node: ; = ';'
              Node: if_statement = 'if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }'
                Node: if = 'if'
                Node: ( = '('
                Node: equality_expression = 'firebaseUser != null'
                  Node: identifier = 'firebaseUser'
                  Node: equality_operator = '!='
                  Node: null_literal = 'null'
                    Node: null = 'null'
                Node: ) = ')'
                Node: block = '{
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      }'
                  Node: { = '{'
                  Node: comment = '// Firestoreからユーザー情報を取得'
                    Node: // = '//'
                  Node: comment = '// TODO: FirestoreServiceを使用してユーザー情報を取得'
                    Node: // = '//'
                  Node: local_variable_declaration = 'final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );'
                    Node: initialized_variable_definition = 'final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                      Node: final_builtin = 'final'
                        Node: final = 'final'
                      Node: identifier = 'user'
                      Node: = = '='
                      Node: identifier = 'AppUser'
                      Node: selector = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                        Node: argument_part = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                          Node: arguments = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                            Node: ( = '('
                            Node: named_argument = 'id: firebaseUser.uid'
                              Node: label = 'id:'
                                Node: identifier = 'id'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.uid'
                                Node: unconditional_assignable_selector = '.uid'
                                  Node: . = '.'
                                  Node: identifier = 'uid'
                            Node: , = ','
                            Node: named_argument = 'displayName: firebaseUser.displayName ?? 'Unknown User''
                              Node: label = 'displayName:'
                                Node: identifier = 'displayName'
                                Node: : = ':'
                              Node: if_null_expression = 'firebaseUser.displayName ?? 'Unknown User''
                                Node: identifier = 'firebaseUser'
                                Node: selector = '.displayName'
                                  Node: unconditional_assignable_selector = '.displayName'
                                    Node: . = '.'
                                    Node: identifier = 'displayName'
                                Node: ?? = '??'
                                Node: string_literal = ''Unknown User''
                                  Node: ' = '''
                                  Node: ' = '''
                            Node: , = ','
                            Node: named_argument = 'email: firebaseUser.email'
                              Node: label = 'email:'
                                Node: identifier = 'email'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.email'
                                Node: unconditional_assignable_selector = '.email'
                                  Node: . = '.'
                                  Node: identifier = 'email'
                            Node: , = ','
                            Node: named_argument = 'photoURL: firebaseUser.photoURL'
                              Node: label = 'photoURL:'
                                Node: identifier = 'photoURL'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.photoURL'
                                Node: unconditional_assignable_selector = '.photoURL'
                                  Node: . = '.'
                                  Node: identifier = 'photoURL'
                            Node: , = ','
                            Node: named_argument = 'provider: 'line''
                              Node: label = 'provider:'
                                Node: identifier = 'provider'
                                Node: : = ':'
                              Node: string_literal = ''line''
                                Node: ' = '''
                                Node: ' = '''
                            Node: , = ','
                            Node: ) = ')'
                    Node: ; = ';'
                  Node: expression_statement = 'state = AuthState.authenticated(user);'
                    Node: assignment_expression = 'state = AuthState.authenticated(user)'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: identifier = 'AuthState'
                      Node: selector = '.authenticated'
                        Node: unconditional_assignable_selector = '.authenticated'
                          Node: . = '.'
                          Node: identifier = 'authenticated'
                      Node: selector = '(user)'
                        Node: argument_part = '(user)'
                          Node: arguments = '(user)'
                            Node: ( = '('
                            Node: argument = 'user'
                              Node: identifier = 'user'
                            Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
                Node: else = 'else'
                Node: block = '{
        state = const AuthState.unauthenticated();
      }'
                  Node: { = '{'
                  Node: expression_statement = 'state = const AuthState.unauthenticated();'
                    Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: const_object_expression = 'const AuthState.unauthenticated()'
                        Node: const_builtin = 'const'
                        Node: type_identifier = 'AuthState'
                        Node: . = '.'
                        Node: identifier = 'unauthenticated'
                        Node: arguments = '()'
                          Node: ( = '('
                          Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// 認証状態の監視'
        Node: /// = '///'
      Node: method_signature = 'void listenToAuthChanges()'
        Node: function_signature = 'void listenToAuthChanges()'
          Node: void_type = 'void'
          Node: identifier = 'listenToAuthChanges'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = '{
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }'
        Node: block = '{
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }'
          Node: { = '{'
          Node: expression_statement = 'firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });'
            Node: identifier = 'firebase_auth'
            Node: selector = '.FirebaseAuth'
              Node: unconditional_assignable_selector = '.FirebaseAuth'
                Node: . = '.'
                Node: identifier = 'FirebaseAuth'
            Node: selector = '.instance'
              Node: unconditional_assignable_selector = '.instance'
                Node: . = '.'
                Node: identifier = 'instance'
            Node: selector = '.authStateChanges'
              Node: unconditional_assignable_selector = '.authStateChanges'
                Node: . = '.'
                Node: identifier = 'authStateChanges'
            Node: selector = '()'
              Node: argument_part = '()'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: selector = '.listen'
              Node: unconditional_assignable_selector = '.listen'
                Node: . = '.'
                Node: identifier = 'listen'
            Node: selector = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
              Node: argument_part = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
                Node: arguments = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
                  Node: ( = '('
                  Node: argument = '(firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                    Node: function_expression = '(firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                      Node: formal_parameter_list = '(firebaseUser)'
                        Node: ( = '('
                        Node: formal_parameter = 'firebaseUser'
                          Node: identifier = 'firebaseUser'
                        Node: ) = ')'
                      Node: function_expression_body = '{
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                        Node: block = '{
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                          Node: { = '{'
                          Node: if_statement = 'if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }'
                            Node: if = 'if'
                            Node: ( = '('
                            Node: equality_expression = 'firebaseUser != null'
                              Node: identifier = 'firebaseUser'
                              Node: equality_operator = '!='
                              Node: null_literal = 'null'
                                Node: null = 'null'
                            Node: ) = ')'
                            Node: block = '{
        // ユーザーがログインしている場合
        getCurrentUser();
      }'
                              Node: { = '{'
                              Node: comment = '// ユーザーがログインしている場合'
                                Node: // = '//'
                              Node: expression_statement = 'getCurrentUser();'
                                Node: identifier = 'getCurrentUser'
                                Node: selector = '()'
                                  Node: argument_part = '()'
                                    Node: arguments = '()'
                                      Node: ( = '('
                                      Node: ) = ')'
                                Node: ; = ';'
                              Node: } = '}'
                            Node: else = 'else'
                            Node: block = '{
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }'
                              Node: { = '{'
                              Node: comment = '// ユーザーがログアウトしている場合'
                                Node: // = '//'
                              Node: expression_statement = 'state = const AuthState.unauthenticated();'
                                Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                                  Node: assignable_expression = 'state'
                                    Node: identifier = 'state'
                                  Node: = = '='
                                  Node: const_object_expression = 'const AuthState.unauthenticated()'
                                    Node: const_builtin = 'const'
                                    Node: type_identifier = 'AuthState'
                                    Node: . = '.'
                                    Node: identifier = 'unauthenticated'
                                    Node: arguments = '()'
                                      Node: ( = '('
                                      Node: ) = ')'
                                Node: ; = ';'
                              Node: } = '}'
                          Node: } = '}'
                  Node: ) = ')'
            Node: ; = ';'
          Node: } = '}'
      Node: } = '}'
  Node: documentation_comment = '/// 認証状態プロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'AuthState authState(Ref ref)'
    Node: type_identifier = 'AuthState'
    Node: identifier = 'authState'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}'
    Node: block = '{
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}'
      Node: { = '{'
      Node: comment = '// 初回起動時に認証状態を監視開始'
        Node: // = '//'
      Node: expression_statement = 'ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });'
        Node: identifier = 'ref'
        Node: selector = '.listen'
          Node: unconditional_assignable_selector = '.listen'
            Node: . = '.'
            Node: identifier = 'listen'
        Node: selector = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
          Node: argument_part = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
            Node: arguments = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
              Node: ( = '('
              Node: argument = 'authNotifierProvider'
                Node: identifier = 'authNotifierProvider'
              Node: , = ','
              Node: argument = '(previous, next) {
    // 認証状態が変更された時の処理
  }'
                Node: function_expression = '(previous, next) {
    // 認証状態が変更された時の処理
  }'
                  Node: formal_parameter_list = '(previous, next)'
                    Node: ( = '('
                    Node: formal_parameter = 'previous'
                      Node: identifier = 'previous'
                    Node: , = ','
                    Node: formal_parameter = 'next'
                      Node: identifier = 'next'
                    Node: ) = ')'
                  Node: function_expression_body = '{
    // 認証状態が変更された時の処理
  }'
                    Node: block = '{
    // 認証状態が変更された時の処理
  }'
                      Node: { = '{'
                      Node: comment = '// 認証状態が変更された時の処理'
                        Node: // = '//'
                      Node: } = '}'
              Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return ref.watch(authNotifierProvider);'
        Node: return = 'return'
        Node: identifier = 'ref'
        Node: selector = '.watch'
          Node: unconditional_assignable_selector = '.watch'
            Node: . = '.'
            Node: identifier = 'watch'
        Node: selector = '(authNotifierProvider)'
          Node: argument_part = '(authNotifierProvider)'
            Node: arguments = '(authNotifierProvider)'
              Node: ( = '('
              Node: argument = 'authNotifierProvider'
                Node: identifier = 'authNotifierProvider'
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
  Node: documentation_comment = '/// 現在のユーザープロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'AppUser? currentUser(Ref ref)'
    Node: type_identifier = 'AppUser'
    Node: nullable_type = '?'
      Node: ? = '?'
    Node: identifier = 'currentUser'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}'
    Node: block = '{
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}'
      Node: { = '{'
      Node: local_variable_declaration = 'final authState = ref.watch(authStateProvider);'
        Node: initialized_variable_definition = 'final authState = ref.watch(authStateProvider)'
          Node: final_builtin = 'final'
            Node: final = 'final'
          Node: identifier = 'authState'
          Node: = = '='
          Node: identifier = 'ref'
          Node: selector = '.watch'
            Node: unconditional_assignable_selector = '.watch'
              Node: . = '.'
              Node: identifier = 'watch'
          Node: selector = '(authStateProvider)'
            Node: argument_part = '(authStateProvider)'
              Node: arguments = '(authStateProvider)'
                Node: ( = '('
                Node: argument = 'authStateProvider'
                  Node: identifier = 'authStateProvider'
                Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );'
        Node: return = 'return'
        Node: identifier = 'authState'
        Node: selector = '.when'
          Node: unconditional_assignable_selector = '.when'
            Node: . = '.'
            Node: identifier = 'when'
        Node: selector = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
          Node: argument_part = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
            Node: arguments = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
              Node: ( = '('
              Node: named_argument = 'authenticated: (user) => user'
                Node: label = 'authenticated:'
                  Node: identifier = 'authenticated'
                  Node: : = ':'
                Node: function_expression = '(user) => user'
                  Node: formal_parameter_list = '(user)'
                    Node: ( = '('
                    Node: formal_parameter = 'user'
                      Node: identifier = 'user'
                    Node: ) = ')'
                  Node: function_expression_body = '=> user'
                    Node: => = '=>'
                    Node: identifier = 'user'
              Node: , = ','
              Node: named_argument = 'initial: () => null'
                Node: label = 'initial:'
                  Node: identifier = 'initial'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'loading: () => null'
                Node: label = 'loading:'
                  Node: identifier = 'loading'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'unauthenticated: () => null'
                Node: label = 'unauthenticated:'
                  Node: identifier = 'unauthenticated'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'error: (_) => null'
                Node: label = 'error:'
                  Node: identifier = 'error'
                  Node: : = ':'
                Node: function_expression = '(_) => null'
                  Node: formal_parameter_list = '(_)'
                    Node: ( = '('
                    Node: formal_parameter = '_'
                      Node: identifier = '_'
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
  Node: documentation_comment = '/// 認証済みかどうかのプロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'bool isAuthenticated(Ref ref)'
    Node: type_identifier = 'bool'
    Node: identifier = 'isAuthenticated'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}'
    Node: block = '{
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}'
      Node: { = '{'
      Node: local_variable_declaration = 'final authState = ref.watch(authStateProvider);'
        Node: initialized_variable_definition = 'final authState = ref.watch(authStateProvider)'
          Node: final_builtin = 'final'
            Node: final = 'final'
          Node: identifier = 'authState'
          Node: = = '='
          Node: identifier = 'ref'
          Node: selector = '.watch'
            Node: unconditional_assignable_selector = '.watch'
              Node: . = '.'
              Node: identifier = 'watch'
          Node: selector = '(authStateProvider)'
            Node: argument_part = '(authStateProvider)'
              Node: arguments = '(authStateProvider)'
                Node: ( = '('
                Node: argument = 'authStateProvider'
                  Node: identifier = 'authStateProvider'
                Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );'
        Node: return = 'return'
        Node: identifier = 'authState'
        Node: selector = '.maybeWhen'
          Node: unconditional_assignable_selector = '.maybeWhen'
            Node: . = '.'
            Node: identifier = 'maybeWhen'
        Node: selector = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
          Node: argument_part = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
            Node: arguments = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
              Node: ( = '('
              Node: named_argument = 'authenticated: (_) => true'
                Node: label = 'authenticated:'
                  Node: identifier = 'authenticated'
                  Node: : = ':'
                Node: function_expression = '(_) => true'
                  Node: formal_parameter_list = '(_)'
                    Node: ( = '('
                    Node: formal_parameter = '_'
                      Node: identifier = '_'
                    Node: ) = ')'
                  Node: function_expression_body = '=> true'
                    Node: => = '=>'
                    Node: true = 'true'
                      Node: true = 'true'
              Node: , = ','
              Node: named_argument = 'orElse: () => false'
                Node: label = 'orElse:'
                  Node: identifier = 'orElse'
                  Node: : = ':'
                Node: function_expression = '() => false'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> false'
                    Node: => = '=>'
                    Node: false = 'false'
                      Node: false = 'false'
              Node: , = ','
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
=== End AST ===

=== Complete AST for test_flutter_app/aminomi/lib/providers/auth_provider.dart ===
Node: program = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;
import 'package:riverpod/riverpod.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import '../models/user.dart';
import '../services/line_auth_service.dart';

part 'auth_provider.g.dart';

@riverpod
class AuthNotifier extends _$AuthNotifier {
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}

/// 認証状態プロバイダー
@riverpod
AuthState authState(Ref ref) {
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}

/// 現在のユーザープロバイダー
@riverpod
AppUser? currentUser(Ref ref) {
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}

/// 認証済みかどうかのプロバイダー
@riverpod
bool isAuthenticated(Ref ref) {
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}
'
  Node: import_or_export = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
    Node: library_import = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
      Node: import_specification = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
        Node: import = 'import'
        Node: configurable_uri = ''package:firebase_auth/firebase_auth.dart''
          Node: uri = ''package:firebase_auth/firebase_auth.dart''
            Node: string_literal = ''package:firebase_auth/firebase_auth.dart''
              Node: ' = '''
              Node: ' = '''
        Node: as = 'as'
        Node: identifier = 'firebase_auth'
        Node: ; = ';'
  Node: import_or_export = 'import 'package:riverpod/riverpod.dart';'
    Node: library_import = 'import 'package:riverpod/riverpod.dart';'
      Node: import_specification = 'import 'package:riverpod/riverpod.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:riverpod/riverpod.dart''
          Node: uri = ''package:riverpod/riverpod.dart''
            Node: string_literal = ''package:riverpod/riverpod.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
    Node: library_import = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
      Node: import_specification = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:riverpod_annotation/riverpod_annotation.dart''
          Node: uri = ''package:riverpod_annotation/riverpod_annotation.dart''
            Node: string_literal = ''package:riverpod_annotation/riverpod_annotation.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import '../models/user.dart';'
    Node: library_import = 'import '../models/user.dart';'
      Node: import_specification = 'import '../models/user.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''../models/user.dart''
          Node: uri = ''../models/user.dart''
            Node: string_literal = ''../models/user.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import '../services/line_auth_service.dart';'
    Node: library_import = 'import '../services/line_auth_service.dart';'
      Node: import_specification = 'import '../services/line_auth_service.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''../services/line_auth_service.dart''
          Node: uri = ''../services/line_auth_service.dart''
            Node: string_literal = ''../services/line_auth_service.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: part_directive = 'part 'auth_provider.g.dart';'
    Node: part = 'part'
    Node: uri = ''auth_provider.g.dart''
      Node: string_literal = ''auth_provider.g.dart''
        Node: ' = '''
        Node: ' = '''
    Node: ; = ';'
  Node: class_definition = '@riverpod
class AuthNotifier extends _$AuthNotifier {
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}'
    Node: annotation = '@riverpod'
      Node: @ = '@'
      Node: identifier = 'riverpod'
    Node: class = 'class'
    Node: identifier = 'AuthNotifier'
    Node: superclass = 'extends _$AuthNotifier'
      Node: extends = 'extends'
      Node: type_identifier = '_$AuthNotifier'
    Node: class_body = '{
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}'
      Node: { = '{'
      Node: annotation = '@override'
        Node: @ = '@'
        Node: identifier = 'override'
      Node: method_signature = 'AuthState build()'
        Node: function_signature = 'AuthState build()'
          Node: type_identifier = 'AuthState'
          Node: identifier = 'build'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = '{
    return const AuthState.initial();
  }'
        Node: block = '{
    return const AuthState.initial();
  }'
          Node: { = '{'
          Node: return_statement = 'return const AuthState.initial();'
            Node: return = 'return'
            Node: const_object_expression = 'const AuthState.initial()'
              Node: const_builtin = 'const'
              Node: type_identifier = 'AuthState'
              Node: . = '.'
              Node: identifier = 'initial'
              Node: arguments = '()'
                Node: ( = '('
                Node: ) = ')'
            Node: ; = ';'
          Node: } = '}'
      Node: documentation_comment = '/// LINEログイン'
        Node: /// = '///'
      Node: method_signature = 'Future<void> signInWithLine()'
        Node: function_signature = 'Future<void> signInWithLine()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'signInWithLine'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: expression_statement = 'state = const AuthState.loading();'
            Node: assignment_expression = 'state = const AuthState.loading()'
              Node: assignable_expression = 'state'
                Node: identifier = 'state'
              Node: = = '='
              Node: const_object_expression = 'const AuthState.loading()'
                Node: const_builtin = 'const'
                Node: type_identifier = 'AuthState'
                Node: . = '.'
                Node: identifier = 'loading'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: ; = ';'
          Node: try_statement = 'try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    }'
              Node: { = '{'
              Node: local_variable_declaration = 'final result = await LineAuthService.login();'
                Node: initialized_variable_definition = 'final result = await LineAuthService.login()'
                  Node: final_builtin = 'final'
                    Node: final = 'final'
                  Node: identifier = 'result'
                  Node: = = '='
                  Node: unary_expression = 'await LineAuthService.login()'
                    Node: await_expression = 'await LineAuthService.login()'
                      Node: await = 'await'
                      Node: identifier = 'LineAuthService'
                      Node: selector = '.login'
                        Node: unconditional_assignable_selector = '.login'
                          Node: . = '.'
                          Node: identifier = 'login'
                      Node: selector = '()'
                        Node: argument_part = '()'
                          Node: arguments = '()'
                            Node: ( = '('
                            Node: ) = ')'
                Node: ; = ';'
              Node: if_statement = 'if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }'
                Node: if = 'if'
                Node: ( = '('
                Node: equality_expression = 'result != null'
                  Node: identifier = 'result'
                  Node: equality_operator = '!='
                  Node: null_literal = 'null'
                    Node: null = 'null'
                Node: ) = ')'
                Node: block = '{
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      }'
                  Node: { = '{'
                  Node: comment = '// Firebaseカスタムトークンでサインイン'
                    Node: // = '//'
                  Node: local_variable_declaration = 'final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );'
                    Node: initialized_variable_definition = 'final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                      Node: final_builtin = 'final'
                        Node: final = 'final'
                      Node: identifier = 'userCredential'
                      Node: = = '='
                      Node: unary_expression = 'await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                        Node: await_expression = 'await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                          Node: await = 'await'
                          Node: identifier = 'firebase_auth'
                          Node: selector = '.FirebaseAuth'
                            Node: unconditional_assignable_selector = '.FirebaseAuth'
                              Node: . = '.'
                              Node: identifier = 'FirebaseAuth'
                          Node: selector = '.instance'
                            Node: unconditional_assignable_selector = '.instance'
                              Node: . = '.'
                              Node: identifier = 'instance'
                          Node: selector = '.signInWithCustomToken'
                            Node: unconditional_assignable_selector = '.signInWithCustomToken'
                              Node: . = '.'
                              Node: identifier = 'signInWithCustomToken'
                          Node: selector = '(
          result.accessToken,
        )'
                            Node: argument_part = '(
          result.accessToken,
        )'
                              Node: arguments = '(
          result.accessToken,
        )'
                                Node: ( = '('
                                Node: argument = 'result.accessToken'
                                  Node: identifier = 'result'
                                  Node: selector = '.accessToken'
                                    Node: unconditional_assignable_selector = '.accessToken'
                                      Node: . = '.'
                                      Node: identifier = 'accessToken'
                                Node: , = ','
                                Node: ) = ')'
                    Node: ; = ';'
                  Node: if_statement = 'if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }'
                    Node: if = 'if'
                    Node: ( = '('
                    Node: equality_expression = 'userCredential.user != null'
                      Node: identifier = 'userCredential'
                      Node: selector = '.user'
                        Node: unconditional_assignable_selector = '.user'
                          Node: . = '.'
                          Node: identifier = 'user'
                      Node: equality_operator = '!='
                      Node: null_literal = 'null'
                        Node: null = 'null'
                    Node: ) = ')'
                    Node: block = '{
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        }'
                      Node: { = '{'
                      Node: local_variable_declaration = 'final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );'
                        Node: initialized_variable_definition = 'final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                          Node: final_builtin = 'final'
                            Node: final = 'final'
                          Node: identifier = 'user'
                          Node: = = '='
                          Node: identifier = 'AppUser'
                          Node: selector = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                            Node: argument_part = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                              Node: arguments = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                                Node: ( = '('
                                Node: named_argument = 'id: userCredential.user!.uid'
                                  Node: label = 'id:'
                                    Node: identifier = 'id'
                                    Node: : = ':'
                                  Node: identifier = 'userCredential'
                                  Node: selector = '.user'
                                    Node: unconditional_assignable_selector = '.user'
                                      Node: . = '.'
                                      Node: identifier = 'user'
                                  Node: selector = '!'
                                    Node: ! = '!'
                                  Node: selector = '.uid'
                                    Node: unconditional_assignable_selector = '.uid'
                                      Node: . = '.'
                                      Node: identifier = 'uid'
                                Node: , = ','
                                Node: named_argument = 'displayName: result.profile.displayName'
                                  Node: label = 'displayName:'
                                    Node: identifier = 'displayName'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.displayName'
                                    Node: unconditional_assignable_selector = '.displayName'
                                      Node: . = '.'
                                      Node: identifier = 'displayName'
                                Node: , = ','
                                Node: named_argument = 'photoURL: result.profile.pictureUrl'
                                  Node: label = 'photoURL:'
                                    Node: identifier = 'photoURL'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.pictureUrl'
                                    Node: unconditional_assignable_selector = '.pictureUrl'
                                      Node: . = '.'
                                      Node: identifier = 'pictureUrl'
                                Node: , = ','
                                Node: named_argument = 'statusMessage: result.profile.statusMessage'
                                  Node: label = 'statusMessage:'
                                    Node: identifier = 'statusMessage'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.statusMessage'
                                    Node: unconditional_assignable_selector = '.statusMessage'
                                      Node: . = '.'
                                      Node: identifier = 'statusMessage'
                                Node: , = ','
                                Node: named_argument = 'provider: 'line''
                                  Node: label = 'provider:'
                                    Node: identifier = 'provider'
                                    Node: : = ':'
                                  Node: string_literal = ''line''
                                    Node: ' = '''
                                    Node: ' = '''
                                Node: , = ','
                                Node: named_argument = 'createdAt: DateTime.now()'
                                  Node: label = 'createdAt:'
                                    Node: identifier = 'createdAt'
                                    Node: : = ':'
                                  Node: identifier = 'DateTime'
                                  Node: selector = '.now'
                                    Node: unconditional_assignable_selector = '.now'
                                      Node: . = '.'
                                      Node: identifier = 'now'
                                  Node: selector = '()'
                                    Node: argument_part = '()'
                                      Node: arguments = '()'
                                        Node: ( = '('
                                        Node: ) = ')'
                                Node: , = ','
                                Node: ) = ')'
                        Node: ; = ';'
                      Node: expression_statement = 'state = AuthState.authenticated(user);'
                        Node: assignment_expression = 'state = AuthState.authenticated(user)'
                          Node: assignable_expression = 'state'
                            Node: identifier = 'state'
                          Node: = = '='
                          Node: identifier = 'AuthState'
                          Node: selector = '.authenticated'
                            Node: unconditional_assignable_selector = '.authenticated'
                              Node: . = '.'
                              Node: identifier = 'authenticated'
                          Node: selector = '(user)'
                            Node: argument_part = '(user)'
                              Node: arguments = '(user)'
                                Node: ( = '('
                                Node: argument = 'user'
                                  Node: identifier = 'user'
                                Node: ) = ')'
                        Node: ; = ';'
                      Node: } = '}'
                    Node: else = 'else'
                    Node: block = '{
          state = const AuthState.error('Failed to sign in with custom token');
        }'
                      Node: { = '{'
                      Node: expression_statement = 'state = const AuthState.error('Failed to sign in with custom token');'
                        Node: assignment_expression = 'state = const AuthState.error('Failed to sign in with custom token')'
                          Node: assignable_expression = 'state'
                            Node: identifier = 'state'
                          Node: = = '='
                          Node: const_object_expression = 'const AuthState.error('Failed to sign in with custom token')'
                            Node: const_builtin = 'const'
                            Node: type_identifier = 'AuthState'
                            Node: . = '.'
                            Node: identifier = 'error'
                            Node: arguments = '('Failed to sign in with custom token')'
                              Node: ( = '('
                              Node: argument = ''Failed to sign in with custom token''
                                Node: string_literal = ''Failed to sign in with custom token''
                                  Node: ' = '''
                                  Node: ' = '''
                              Node: ) = ')'
                        Node: ; = ';'
                      Node: } = '}'
                  Node: } = '}'
                Node: else = 'else'
                Node: block = '{
        state = const AuthState.error('LINE login failed');
      }'
                  Node: { = '{'
                  Node: expression_statement = 'state = const AuthState.error('LINE login failed');'
                    Node: assignment_expression = 'state = const AuthState.error('LINE login failed')'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: const_object_expression = 'const AuthState.error('LINE login failed')'
                        Node: const_builtin = 'const'
                        Node: type_identifier = 'AuthState'
                        Node: . = '.'
                        Node: identifier = 'error'
                        Node: arguments = '('LINE login failed')'
                          Node: ( = '('
                          Node: argument = ''LINE login failed''
                            Node: string_literal = ''LINE login failed''
                              Node: ' = '''
                              Node: ' = '''
                          Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// ログアウト'
        Node: /// = '///'
      Node: method_signature = 'Future<void> signOut()'
        Node: function_signature = 'Future<void> signOut()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'signOut'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: try_statement = 'try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    }'
              Node: { = '{'
              Node: expression_statement = 'await firebase_auth.FirebaseAuth.instance.signOut();'
                Node: unary_expression = 'await firebase_auth.FirebaseAuth.instance.signOut()'
                  Node: await_expression = 'await firebase_auth.FirebaseAuth.instance.signOut()'
                    Node: await = 'await'
                    Node: identifier = 'firebase_auth'
                    Node: selector = '.FirebaseAuth'
                      Node: unconditional_assignable_selector = '.FirebaseAuth'
                        Node: . = '.'
                        Node: identifier = 'FirebaseAuth'
                    Node: selector = '.instance'
                      Node: unconditional_assignable_selector = '.instance'
                        Node: . = '.'
                        Node: identifier = 'instance'
                    Node: selector = '.signOut'
                      Node: unconditional_assignable_selector = '.signOut'
                        Node: . = '.'
                        Node: identifier = 'signOut'
                    Node: selector = '()'
                      Node: argument_part = '()'
                        Node: arguments = '()'
                          Node: ( = '('
                          Node: ) = ')'
                Node: ; = ';'
              Node: expression_statement = 'state = const AuthState.unauthenticated();'
                Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: const_object_expression = 'const AuthState.unauthenticated()'
                    Node: const_builtin = 'const'
                    Node: type_identifier = 'AuthState'
                    Node: . = '.'
                    Node: identifier = 'unauthenticated'
                    Node: arguments = '()'
                      Node: ( = '('
                      Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// 現在のユーザーを取得'
        Node: /// = '///'
      Node: method_signature = 'Future<void> getCurrentUser()'
        Node: function_signature = 'Future<void> getCurrentUser()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'getCurrentUser'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: expression_statement = 'state = const AuthState.loading();'
            Node: assignment_expression = 'state = const AuthState.loading()'
              Node: assignable_expression = 'state'
                Node: identifier = 'state'
              Node: = = '='
              Node: const_object_expression = 'const AuthState.loading()'
                Node: const_builtin = 'const'
                Node: type_identifier = 'AuthState'
                Node: . = '.'
                Node: identifier = 'loading'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: ; = ';'
          Node: try_statement = 'try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    }'
              Node: { = '{'
              Node: local_variable_declaration = 'final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;'
                Node: initialized_variable_definition = 'final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser'
                  Node: final_builtin = 'final'
                    Node: final = 'final'
                  Node: identifier = 'firebaseUser'
                  Node: = = '='
                  Node: identifier = 'firebase_auth'
                  Node: selector = '.FirebaseAuth'
                    Node: unconditional_assignable_selector = '.FirebaseAuth'
                      Node: . = '.'
                      Node: identifier = 'FirebaseAuth'
                  Node: selector = '.instance'
                    Node: unconditional_assignable_selector = '.instance'
                      Node: . = '.'
                      Node: identifier = 'instance'
                  Node: selector = '.currentUser'
                    Node: unconditional_assignable_selector = '.currentUser'
                      Node: . = '.'
                      Node: identifier = 'currentUser'
                Node: ; = ';'
              Node: if_statement = 'if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }'
                Node: if = 'if'
                Node: ( = '('
                Node: equality_expression = 'firebaseUser != null'
                  Node: identifier = 'firebaseUser'
                  Node: equality_operator = '!='
                  Node: null_literal = 'null'
                    Node: null = 'null'
                Node: ) = ')'
                Node: block = '{
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      }'
                  Node: { = '{'
                  Node: comment = '// Firestoreからユーザー情報を取得'
                    Node: // = '//'
                  Node: comment = '// TODO: FirestoreServiceを使用してユーザー情報を取得'
                    Node: // = '//'
                  Node: local_variable_declaration = 'final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );'
                    Node: initialized_variable_definition = 'final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                      Node: final_builtin = 'final'
                        Node: final = 'final'
                      Node: identifier = 'user'
                      Node: = = '='
                      Node: identifier = 'AppUser'
                      Node: selector = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                        Node: argument_part = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                          Node: arguments = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                            Node: ( = '('
                            Node: named_argument = 'id: firebaseUser.uid'
                              Node: label = 'id:'
                                Node: identifier = 'id'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.uid'
                                Node: unconditional_assignable_selector = '.uid'
                                  Node: . = '.'
                                  Node: identifier = 'uid'
                            Node: , = ','
                            Node: named_argument = 'displayName: firebaseUser.displayName ?? 'Unknown User''
                              Node: label = 'displayName:'
                                Node: identifier = 'displayName'
                                Node: : = ':'
                              Node: if_null_expression = 'firebaseUser.displayName ?? 'Unknown User''
                                Node: identifier = 'firebaseUser'
                                Node: selector = '.displayName'
                                  Node: unconditional_assignable_selector = '.displayName'
                                    Node: . = '.'
                                    Node: identifier = 'displayName'
                                Node: ?? = '??'
                                Node: string_literal = ''Unknown User''
                                  Node: ' = '''
                                  Node: ' = '''
                            Node: , = ','
                            Node: named_argument = 'email: firebaseUser.email'
                              Node: label = 'email:'
                                Node: identifier = 'email'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.email'
                                Node: unconditional_assignable_selector = '.email'
                                  Node: . = '.'
                                  Node: identifier = 'email'
                            Node: , = ','
                            Node: named_argument = 'photoURL: firebaseUser.photoURL'
                              Node: label = 'photoURL:'
                                Node: identifier = 'photoURL'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.photoURL'
                                Node: unconditional_assignable_selector = '.photoURL'
                                  Node: . = '.'
                                  Node: identifier = 'photoURL'
                            Node: , = ','
                            Node: named_argument = 'provider: 'line''
                              Node: label = 'provider:'
                                Node: identifier = 'provider'
                                Node: : = ':'
                              Node: string_literal = ''line''
                                Node: ' = '''
                                Node: ' = '''
                            Node: , = ','
                            Node: ) = ')'
                    Node: ; = ';'
                  Node: expression_statement = 'state = AuthState.authenticated(user);'
                    Node: assignment_expression = 'state = AuthState.authenticated(user)'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: identifier = 'AuthState'
                      Node: selector = '.authenticated'
                        Node: unconditional_assignable_selector = '.authenticated'
                          Node: . = '.'
                          Node: identifier = 'authenticated'
                      Node: selector = '(user)'
                        Node: argument_part = '(user)'
                          Node: arguments = '(user)'
                            Node: ( = '('
                            Node: argument = 'user'
                              Node: identifier = 'user'
                            Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
                Node: else = 'else'
                Node: block = '{
        state = const AuthState.unauthenticated();
      }'
                  Node: { = '{'
                  Node: expression_statement = 'state = const AuthState.unauthenticated();'
                    Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: const_object_expression = 'const AuthState.unauthenticated()'
                        Node: const_builtin = 'const'
                        Node: type_identifier = 'AuthState'
                        Node: . = '.'
                        Node: identifier = 'unauthenticated'
                        Node: arguments = '()'
                          Node: ( = '('
                          Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// 認証状態の監視'
        Node: /// = '///'
      Node: method_signature = 'void listenToAuthChanges()'
        Node: function_signature = 'void listenToAuthChanges()'
          Node: void_type = 'void'
          Node: identifier = 'listenToAuthChanges'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = '{
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }'
        Node: block = '{
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }'
          Node: { = '{'
          Node: expression_statement = 'firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });'
            Node: identifier = 'firebase_auth'
            Node: selector = '.FirebaseAuth'
              Node: unconditional_assignable_selector = '.FirebaseAuth'
                Node: . = '.'
                Node: identifier = 'FirebaseAuth'
            Node: selector = '.instance'
              Node: unconditional_assignable_selector = '.instance'
                Node: . = '.'
                Node: identifier = 'instance'
            Node: selector = '.authStateChanges'
              Node: unconditional_assignable_selector = '.authStateChanges'
                Node: . = '.'
                Node: identifier = 'authStateChanges'
            Node: selector = '()'
              Node: argument_part = '()'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: selector = '.listen'
              Node: unconditional_assignable_selector = '.listen'
                Node: . = '.'
                Node: identifier = 'listen'
            Node: selector = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
              Node: argument_part = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
                Node: arguments = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
                  Node: ( = '('
                  Node: argument = '(firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                    Node: function_expression = '(firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                      Node: formal_parameter_list = '(firebaseUser)'
                        Node: ( = '('
                        Node: formal_parameter = 'firebaseUser'
                          Node: identifier = 'firebaseUser'
                        Node: ) = ')'
                      Node: function_expression_body = '{
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                        Node: block = '{
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                          Node: { = '{'
                          Node: if_statement = 'if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }'
                            Node: if = 'if'
                            Node: ( = '('
                            Node: equality_expression = 'firebaseUser != null'
                              Node: identifier = 'firebaseUser'
                              Node: equality_operator = '!='
                              Node: null_literal = 'null'
                                Node: null = 'null'
                            Node: ) = ')'
                            Node: block = '{
        // ユーザーがログインしている場合
        getCurrentUser();
      }'
                              Node: { = '{'
                              Node: comment = '// ユーザーがログインしている場合'
                                Node: // = '//'
                              Node: expression_statement = 'getCurrentUser();'
                                Node: identifier = 'getCurrentUser'
                                Node: selector = '()'
                                  Node: argument_part = '()'
                                    Node: arguments = '()'
                                      Node: ( = '('
                                      Node: ) = ')'
                                Node: ; = ';'
                              Node: } = '}'
                            Node: else = 'else'
                            Node: block = '{
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }'
                              Node: { = '{'
                              Node: comment = '// ユーザーがログアウトしている場合'
                                Node: // = '//'
                              Node: expression_statement = 'state = const AuthState.unauthenticated();'
                                Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                                  Node: assignable_expression = 'state'
                                    Node: identifier = 'state'
                                  Node: = = '='
                                  Node: const_object_expression = 'const AuthState.unauthenticated()'
                                    Node: const_builtin = 'const'
                                    Node: type_identifier = 'AuthState'
                                    Node: . = '.'
                                    Node: identifier = 'unauthenticated'
                                    Node: arguments = '()'
                                      Node: ( = '('
                                      Node: ) = ')'
                                Node: ; = ';'
                              Node: } = '}'
                          Node: } = '}'
                  Node: ) = ')'
            Node: ; = ';'
          Node: } = '}'
      Node: } = '}'
  Node: documentation_comment = '/// 認証状態プロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'AuthState authState(Ref ref)'
    Node: type_identifier = 'AuthState'
    Node: identifier = 'authState'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}'
    Node: block = '{
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}'
      Node: { = '{'
      Node: comment = '// 初回起動時に認証状態を監視開始'
        Node: // = '//'
      Node: expression_statement = 'ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });'
        Node: identifier = 'ref'
        Node: selector = '.listen'
          Node: unconditional_assignable_selector = '.listen'
            Node: . = '.'
            Node: identifier = 'listen'
        Node: selector = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
          Node: argument_part = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
            Node: arguments = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
              Node: ( = '('
              Node: argument = 'authNotifierProvider'
                Node: identifier = 'authNotifierProvider'
              Node: , = ','
              Node: argument = '(previous, next) {
    // 認証状態が変更された時の処理
  }'
                Node: function_expression = '(previous, next) {
    // 認証状態が変更された時の処理
  }'
                  Node: formal_parameter_list = '(previous, next)'
                    Node: ( = '('
                    Node: formal_parameter = 'previous'
                      Node: identifier = 'previous'
                    Node: , = ','
                    Node: formal_parameter = 'next'
                      Node: identifier = 'next'
                    Node: ) = ')'
                  Node: function_expression_body = '{
    // 認証状態が変更された時の処理
  }'
                    Node: block = '{
    // 認証状態が変更された時の処理
  }'
                      Node: { = '{'
                      Node: comment = '// 認証状態が変更された時の処理'
                        Node: // = '//'
                      Node: } = '}'
              Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return ref.watch(authNotifierProvider);'
        Node: return = 'return'
        Node: identifier = 'ref'
        Node: selector = '.watch'
          Node: unconditional_assignable_selector = '.watch'
            Node: . = '.'
            Node: identifier = 'watch'
        Node: selector = '(authNotifierProvider)'
          Node: argument_part = '(authNotifierProvider)'
            Node: arguments = '(authNotifierProvider)'
              Node: ( = '('
              Node: argument = 'authNotifierProvider'
                Node: identifier = 'authNotifierProvider'
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
  Node: documentation_comment = '/// 現在のユーザープロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'AppUser? currentUser(Ref ref)'
    Node: type_identifier = 'AppUser'
    Node: nullable_type = '?'
      Node: ? = '?'
    Node: identifier = 'currentUser'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}'
    Node: block = '{
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}'
      Node: { = '{'
      Node: local_variable_declaration = 'final authState = ref.watch(authStateProvider);'
        Node: initialized_variable_definition = 'final authState = ref.watch(authStateProvider)'
          Node: final_builtin = 'final'
            Node: final = 'final'
          Node: identifier = 'authState'
          Node: = = '='
          Node: identifier = 'ref'
          Node: selector = '.watch'
            Node: unconditional_assignable_selector = '.watch'
              Node: . = '.'
              Node: identifier = 'watch'
          Node: selector = '(authStateProvider)'
            Node: argument_part = '(authStateProvider)'
              Node: arguments = '(authStateProvider)'
                Node: ( = '('
                Node: argument = 'authStateProvider'
                  Node: identifier = 'authStateProvider'
                Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );'
        Node: return = 'return'
        Node: identifier = 'authState'
        Node: selector = '.when'
          Node: unconditional_assignable_selector = '.when'
            Node: . = '.'
            Node: identifier = 'when'
        Node: selector = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
          Node: argument_part = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
            Node: arguments = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
              Node: ( = '('
              Node: named_argument = 'authenticated: (user) => user'
                Node: label = 'authenticated:'
                  Node: identifier = 'authenticated'
                  Node: : = ':'
                Node: function_expression = '(user) => user'
                  Node: formal_parameter_list = '(user)'
                    Node: ( = '('
                    Node: formal_parameter = 'user'
                      Node: identifier = 'user'
                    Node: ) = ')'
                  Node: function_expression_body = '=> user'
                    Node: => = '=>'
                    Node: identifier = 'user'
              Node: , = ','
              Node: named_argument = 'initial: () => null'
                Node: label = 'initial:'
                  Node: identifier = 'initial'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'loading: () => null'
                Node: label = 'loading:'
                  Node: identifier = 'loading'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'unauthenticated: () => null'
                Node: label = 'unauthenticated:'
                  Node: identifier = 'unauthenticated'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'error: (_) => null'
                Node: label = 'error:'
                  Node: identifier = 'error'
                  Node: : = ':'
                Node: function_expression = '(_) => null'
                  Node: formal_parameter_list = '(_)'
                    Node: ( = '('
                    Node: formal_parameter = '_'
                      Node: identifier = '_'
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
  Node: documentation_comment = '/// 認証済みかどうかのプロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'bool isAuthenticated(Ref ref)'
    Node: type_identifier = 'bool'
    Node: identifier = 'isAuthenticated'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}'
    Node: block = '{
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}'
      Node: { = '{'
      Node: local_variable_declaration = 'final authState = ref.watch(authStateProvider);'
        Node: initialized_variable_definition = 'final authState = ref.watch(authStateProvider)'
          Node: final_builtin = 'final'
            Node: final = 'final'
          Node: identifier = 'authState'
          Node: = = '='
          Node: identifier = 'ref'
          Node: selector = '.watch'
            Node: unconditional_assignable_selector = '.watch'
              Node: . = '.'
              Node: identifier = 'watch'
          Node: selector = '(authStateProvider)'
            Node: argument_part = '(authStateProvider)'
              Node: arguments = '(authStateProvider)'
                Node: ( = '('
                Node: argument = 'authStateProvider'
                  Node: identifier = 'authStateProvider'
                Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );'
        Node: return = 'return'
        Node: identifier = 'authState'
        Node: selector = '.maybeWhen'
          Node: unconditional_assignable_selector = '.maybeWhen'
            Node: . = '.'
            Node: identifier = 'maybeWhen'
        Node: selector = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
          Node: argument_part = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
            Node: arguments = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
              Node: ( = '('
              Node: named_argument = 'authenticated: (_) => true'
                Node: label = 'authenticated:'
                  Node: identifier = 'authenticated'
                  Node: : = ':'
                Node: function_expression = '(_) => true'
                  Node: formal_parameter_list = '(_)'
                    Node: ( = '('
                    Node: formal_parameter = '_'
                      Node: identifier = '_'
                    Node: ) = ')'
                  Node: function_expression_body = '=> true'
                    Node: => = '=>'
                    Node: true = 'true'
                      Node: true = 'true'
              Node: , = ','
              Node: named_argument = 'orElse: () => false'
                Node: label = 'orElse:'
                  Node: identifier = 'orElse'
                  Node: : = ':'
                Node: function_expression = '() => false'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> false'
                    Node: => = '=>'
                    Node: false = 'false'
                      Node: false = 'false'
              Node: , = ','
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
=== End AST ===

=== Complete AST for test_flutter_app/aminomi/lib/providers/auth_provider.dart ===
Node: program = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;
import 'package:riverpod/riverpod.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import '../models/user.dart';
import '../services/line_auth_service.dart';

part 'auth_provider.g.dart';

@riverpod
class AuthNotifier extends _$AuthNotifier {
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}

/// 認証状態プロバイダー
@riverpod
AuthState authState(Ref ref) {
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}

/// 現在のユーザープロバイダー
@riverpod
AppUser? currentUser(Ref ref) {
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}

/// 認証済みかどうかのプロバイダー
@riverpod
bool isAuthenticated(Ref ref) {
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}
'
  Node: import_or_export = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
    Node: library_import = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
      Node: import_specification = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
        Node: import = 'import'
        Node: configurable_uri = ''package:firebase_auth/firebase_auth.dart''
          Node: uri = ''package:firebase_auth/firebase_auth.dart''
            Node: string_literal = ''package:firebase_auth/firebase_auth.dart''
              Node: ' = '''
              Node: ' = '''
        Node: as = 'as'
        Node: identifier = 'firebase_auth'
        Node: ; = ';'
  Node: import_or_export = 'import 'package:riverpod/riverpod.dart';'
    Node: library_import = 'import 'package:riverpod/riverpod.dart';'
      Node: import_specification = 'import 'package:riverpod/riverpod.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:riverpod/riverpod.dart''
          Node: uri = ''package:riverpod/riverpod.dart''
            Node: string_literal = ''package:riverpod/riverpod.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
    Node: library_import = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
      Node: import_specification = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:riverpod_annotation/riverpod_annotation.dart''
          Node: uri = ''package:riverpod_annotation/riverpod_annotation.dart''
            Node: string_literal = ''package:riverpod_annotation/riverpod_annotation.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import '../models/user.dart';'
    Node: library_import = 'import '../models/user.dart';'
      Node: import_specification = 'import '../models/user.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''../models/user.dart''
          Node: uri = ''../models/user.dart''
            Node: string_literal = ''../models/user.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import '../services/line_auth_service.dart';'
    Node: library_import = 'import '../services/line_auth_service.dart';'
      Node: import_specification = 'import '../services/line_auth_service.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''../services/line_auth_service.dart''
          Node: uri = ''../services/line_auth_service.dart''
            Node: string_literal = ''../services/line_auth_service.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: part_directive = 'part 'auth_provider.g.dart';'
    Node: part = 'part'
    Node: uri = ''auth_provider.g.dart''
      Node: string_literal = ''auth_provider.g.dart''
        Node: ' = '''
        Node: ' = '''
    Node: ; = ';'
  Node: class_definition = '@riverpod
class AuthNotifier extends _$AuthNotifier {
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}'
    Node: annotation = '@riverpod'
      Node: @ = '@'
      Node: identifier = 'riverpod'
    Node: class = 'class'
    Node: identifier = 'AuthNotifier'
    Node: superclass = 'extends _$AuthNotifier'
      Node: extends = 'extends'
      Node: type_identifier = '_$AuthNotifier'
    Node: class_body = '{
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}'
      Node: { = '{'
      Node: annotation = '@override'
        Node: @ = '@'
        Node: identifier = 'override'
      Node: method_signature = 'AuthState build()'
        Node: function_signature = 'AuthState build()'
          Node: type_identifier = 'AuthState'
          Node: identifier = 'build'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = '{
    return const AuthState.initial();
  }'
        Node: block = '{
    return const AuthState.initial();
  }'
          Node: { = '{'
          Node: return_statement = 'return const AuthState.initial();'
            Node: return = 'return'
            Node: const_object_expression = 'const AuthState.initial()'
              Node: const_builtin = 'const'
              Node: type_identifier = 'AuthState'
              Node: . = '.'
              Node: identifier = 'initial'
              Node: arguments = '()'
                Node: ( = '('
                Node: ) = ')'
            Node: ; = ';'
          Node: } = '}'
      Node: documentation_comment = '/// LINEログイン'
        Node: /// = '///'
      Node: method_signature = 'Future<void> signInWithLine()'
        Node: function_signature = 'Future<void> signInWithLine()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'signInWithLine'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: expression_statement = 'state = const AuthState.loading();'
            Node: assignment_expression = 'state = const AuthState.loading()'
              Node: assignable_expression = 'state'
                Node: identifier = 'state'
              Node: = = '='
              Node: const_object_expression = 'const AuthState.loading()'
                Node: const_builtin = 'const'
                Node: type_identifier = 'AuthState'
                Node: . = '.'
                Node: identifier = 'loading'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: ; = ';'
          Node: try_statement = 'try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    }'
              Node: { = '{'
              Node: local_variable_declaration = 'final result = await LineAuthService.login();'
                Node: initialized_variable_definition = 'final result = await LineAuthService.login()'
                  Node: final_builtin = 'final'
                    Node: final = 'final'
                  Node: identifier = 'result'
                  Node: = = '='
                  Node: unary_expression = 'await LineAuthService.login()'
                    Node: await_expression = 'await LineAuthService.login()'
                      Node: await = 'await'
                      Node: identifier = 'LineAuthService'
                      Node: selector = '.login'
                        Node: unconditional_assignable_selector = '.login'
                          Node: . = '.'
                          Node: identifier = 'login'
                      Node: selector = '()'
                        Node: argument_part = '()'
                          Node: arguments = '()'
                            Node: ( = '('
                            Node: ) = ')'
                Node: ; = ';'
              Node: if_statement = 'if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }'
                Node: if = 'if'
                Node: ( = '('
                Node: equality_expression = 'result != null'
                  Node: identifier = 'result'
                  Node: equality_operator = '!='
                  Node: null_literal = 'null'
                    Node: null = 'null'
                Node: ) = ')'
                Node: block = '{
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      }'
                  Node: { = '{'
                  Node: comment = '// Firebaseカスタムトークンでサインイン'
                    Node: // = '//'
                  Node: local_variable_declaration = 'final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );'
                    Node: initialized_variable_definition = 'final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                      Node: final_builtin = 'final'
                        Node: final = 'final'
                      Node: identifier = 'userCredential'
                      Node: = = '='
                      Node: unary_expression = 'await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                        Node: await_expression = 'await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                          Node: await = 'await'
                          Node: identifier = 'firebase_auth'
                          Node: selector = '.FirebaseAuth'
                            Node: unconditional_assignable_selector = '.FirebaseAuth'
                              Node: . = '.'
                              Node: identifier = 'FirebaseAuth'
                          Node: selector = '.instance'
                            Node: unconditional_assignable_selector = '.instance'
                              Node: . = '.'
                              Node: identifier = 'instance'
                          Node: selector = '.signInWithCustomToken'
                            Node: unconditional_assignable_selector = '.signInWithCustomToken'
                              Node: . = '.'
                              Node: identifier = 'signInWithCustomToken'
                          Node: selector = '(
          result.accessToken,
        )'
                            Node: argument_part = '(
          result.accessToken,
        )'
                              Node: arguments = '(
          result.accessToken,
        )'
                                Node: ( = '('
                                Node: argument = 'result.accessToken'
                                  Node: identifier = 'result'
                                  Node: selector = '.accessToken'
                                    Node: unconditional_assignable_selector = '.accessToken'
                                      Node: . = '.'
                                      Node: identifier = 'accessToken'
                                Node: , = ','
                                Node: ) = ')'
                    Node: ; = ';'
                  Node: if_statement = 'if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }'
                    Node: if = 'if'
                    Node: ( = '('
                    Node: equality_expression = 'userCredential.user != null'
                      Node: identifier = 'userCredential'
                      Node: selector = '.user'
                        Node: unconditional_assignable_selector = '.user'
                          Node: . = '.'
                          Node: identifier = 'user'
                      Node: equality_operator = '!='
                      Node: null_literal = 'null'
                        Node: null = 'null'
                    Node: ) = ')'
                    Node: block = '{
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        }'
                      Node: { = '{'
                      Node: local_variable_declaration = 'final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );'
                        Node: initialized_variable_definition = 'final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                          Node: final_builtin = 'final'
                            Node: final = 'final'
                          Node: identifier = 'user'
                          Node: = = '='
                          Node: identifier = 'AppUser'
                          Node: selector = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                            Node: argument_part = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                              Node: arguments = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                                Node: ( = '('
                                Node: named_argument = 'id: userCredential.user!.uid'
                                  Node: label = 'id:'
                                    Node: identifier = 'id'
                                    Node: : = ':'
                                  Node: identifier = 'userCredential'
                                  Node: selector = '.user'
                                    Node: unconditional_assignable_selector = '.user'
                                      Node: . = '.'
                                      Node: identifier = 'user'
                                  Node: selector = '!'
                                    Node: ! = '!'
                                  Node: selector = '.uid'
                                    Node: unconditional_assignable_selector = '.uid'
                                      Node: . = '.'
                                      Node: identifier = 'uid'
                                Node: , = ','
                                Node: named_argument = 'displayName: result.profile.displayName'
                                  Node: label = 'displayName:'
                                    Node: identifier = 'displayName'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.displayName'
                                    Node: unconditional_assignable_selector = '.displayName'
                                      Node: . = '.'
                                      Node: identifier = 'displayName'
                                Node: , = ','
                                Node: named_argument = 'photoURL: result.profile.pictureUrl'
                                  Node: label = 'photoURL:'
                                    Node: identifier = 'photoURL'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.pictureUrl'
                                    Node: unconditional_assignable_selector = '.pictureUrl'
                                      Node: . = '.'
                                      Node: identifier = 'pictureUrl'
                                Node: , = ','
                                Node: named_argument = 'statusMessage: result.profile.statusMessage'
                                  Node: label = 'statusMessage:'
                                    Node: identifier = 'statusMessage'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.statusMessage'
                                    Node: unconditional_assignable_selector = '.statusMessage'
                                      Node: . = '.'
                                      Node: identifier = 'statusMessage'
                                Node: , = ','
                                Node: named_argument = 'provider: 'line''
                                  Node: label = 'provider:'
                                    Node: identifier = 'provider'
                                    Node: : = ':'
                                  Node: string_literal = ''line''
                                    Node: ' = '''
                                    Node: ' = '''
                                Node: , = ','
                                Node: named_argument = 'createdAt: DateTime.now()'
                                  Node: label = 'createdAt:'
                                    Node: identifier = 'createdAt'
                                    Node: : = ':'
                                  Node: identifier = 'DateTime'
                                  Node: selector = '.now'
                                    Node: unconditional_assignable_selector = '.now'
                                      Node: . = '.'
                                      Node: identifier = 'now'
                                  Node: selector = '()'
                                    Node: argument_part = '()'
                                      Node: arguments = '()'
                                        Node: ( = '('
                                        Node: ) = ')'
                                Node: , = ','
                                Node: ) = ')'
                        Node: ; = ';'
                      Node: expression_statement = 'state = AuthState.authenticated(user);'
                        Node: assignment_expression = 'state = AuthState.authenticated(user)'
                          Node: assignable_expression = 'state'
                            Node: identifier = 'state'
                          Node: = = '='
                          Node: identifier = 'AuthState'
                          Node: selector = '.authenticated'
                            Node: unconditional_assignable_selector = '.authenticated'
                              Node: . = '.'
                              Node: identifier = 'authenticated'
                          Node: selector = '(user)'
                            Node: argument_part = '(user)'
                              Node: arguments = '(user)'
                                Node: ( = '('
                                Node: argument = 'user'
                                  Node: identifier = 'user'
                                Node: ) = ')'
                        Node: ; = ';'
                      Node: } = '}'
                    Node: else = 'else'
                    Node: block = '{
          state = const AuthState.error('Failed to sign in with custom token');
        }'
                      Node: { = '{'
                      Node: expression_statement = 'state = const AuthState.error('Failed to sign in with custom token');'
                        Node: assignment_expression = 'state = const AuthState.error('Failed to sign in with custom token')'
                          Node: assignable_expression = 'state'
                            Node: identifier = 'state'
                          Node: = = '='
                          Node: const_object_expression = 'const AuthState.error('Failed to sign in with custom token')'
                            Node: const_builtin = 'const'
                            Node: type_identifier = 'AuthState'
                            Node: . = '.'
                            Node: identifier = 'error'
                            Node: arguments = '('Failed to sign in with custom token')'
                              Node: ( = '('
                              Node: argument = ''Failed to sign in with custom token''
                                Node: string_literal = ''Failed to sign in with custom token''
                                  Node: ' = '''
                                  Node: ' = '''
                              Node: ) = ')'
                        Node: ; = ';'
                      Node: } = '}'
                  Node: } = '}'
                Node: else = 'else'
                Node: block = '{
        state = const AuthState.error('LINE login failed');
      }'
                  Node: { = '{'
                  Node: expression_statement = 'state = const AuthState.error('LINE login failed');'
                    Node: assignment_expression = 'state = const AuthState.error('LINE login failed')'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: const_object_expression = 'const AuthState.error('LINE login failed')'
                        Node: const_builtin = 'const'
                        Node: type_identifier = 'AuthState'
                        Node: . = '.'
                        Node: identifier = 'error'
                        Node: arguments = '('LINE login failed')'
                          Node: ( = '('
                          Node: argument = ''LINE login failed''
                            Node: string_literal = ''LINE login failed''
                              Node: ' = '''
                              Node: ' = '''
                          Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// ログアウト'
        Node: /// = '///'
      Node: method_signature = 'Future<void> signOut()'
        Node: function_signature = 'Future<void> signOut()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'signOut'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: try_statement = 'try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    }'
              Node: { = '{'
              Node: expression_statement = 'await firebase_auth.FirebaseAuth.instance.signOut();'
                Node: unary_expression = 'await firebase_auth.FirebaseAuth.instance.signOut()'
                  Node: await_expression = 'await firebase_auth.FirebaseAuth.instance.signOut()'
                    Node: await = 'await'
                    Node: identifier = 'firebase_auth'
                    Node: selector = '.FirebaseAuth'
                      Node: unconditional_assignable_selector = '.FirebaseAuth'
                        Node: . = '.'
                        Node: identifier = 'FirebaseAuth'
                    Node: selector = '.instance'
                      Node: unconditional_assignable_selector = '.instance'
                        Node: . = '.'
                        Node: identifier = 'instance'
                    Node: selector = '.signOut'
                      Node: unconditional_assignable_selector = '.signOut'
                        Node: . = '.'
                        Node: identifier = 'signOut'
                    Node: selector = '()'
                      Node: argument_part = '()'
                        Node: arguments = '()'
                          Node: ( = '('
                          Node: ) = ')'
                Node: ; = ';'
              Node: expression_statement = 'state = const AuthState.unauthenticated();'
                Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: const_object_expression = 'const AuthState.unauthenticated()'
                    Node: const_builtin = 'const'
                    Node: type_identifier = 'AuthState'
                    Node: . = '.'
                    Node: identifier = 'unauthenticated'
                    Node: arguments = '()'
                      Node: ( = '('
                      Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// 現在のユーザーを取得'
        Node: /// = '///'
      Node: method_signature = 'Future<void> getCurrentUser()'
        Node: function_signature = 'Future<void> getCurrentUser()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'getCurrentUser'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: expression_statement = 'state = const AuthState.loading();'
            Node: assignment_expression = 'state = const AuthState.loading()'
              Node: assignable_expression = 'state'
                Node: identifier = 'state'
              Node: = = '='
              Node: const_object_expression = 'const AuthState.loading()'
                Node: const_builtin = 'const'
                Node: type_identifier = 'AuthState'
                Node: . = '.'
                Node: identifier = 'loading'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: ; = ';'
          Node: try_statement = 'try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    }'
              Node: { = '{'
              Node: local_variable_declaration = 'final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;'
                Node: initialized_variable_definition = 'final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser'
                  Node: final_builtin = 'final'
                    Node: final = 'final'
                  Node: identifier = 'firebaseUser'
                  Node: = = '='
                  Node: identifier = 'firebase_auth'
                  Node: selector = '.FirebaseAuth'
                    Node: unconditional_assignable_selector = '.FirebaseAuth'
                      Node: . = '.'
                      Node: identifier = 'FirebaseAuth'
                  Node: selector = '.instance'
                    Node: unconditional_assignable_selector = '.instance'
                      Node: . = '.'
                      Node: identifier = 'instance'
                  Node: selector = '.currentUser'
                    Node: unconditional_assignable_selector = '.currentUser'
                      Node: . = '.'
                      Node: identifier = 'currentUser'
                Node: ; = ';'
              Node: if_statement = 'if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }'
                Node: if = 'if'
                Node: ( = '('
                Node: equality_expression = 'firebaseUser != null'
                  Node: identifier = 'firebaseUser'
                  Node: equality_operator = '!='
                  Node: null_literal = 'null'
                    Node: null = 'null'
                Node: ) = ')'
                Node: block = '{
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      }'
                  Node: { = '{'
                  Node: comment = '// Firestoreからユーザー情報を取得'
                    Node: // = '//'
                  Node: comment = '// TODO: FirestoreServiceを使用してユーザー情報を取得'
                    Node: // = '//'
                  Node: local_variable_declaration = 'final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );'
                    Node: initialized_variable_definition = 'final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                      Node: final_builtin = 'final'
                        Node: final = 'final'
                      Node: identifier = 'user'
                      Node: = = '='
                      Node: identifier = 'AppUser'
                      Node: selector = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                        Node: argument_part = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                          Node: arguments = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                            Node: ( = '('
                            Node: named_argument = 'id: firebaseUser.uid'
                              Node: label = 'id:'
                                Node: identifier = 'id'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.uid'
                                Node: unconditional_assignable_selector = '.uid'
                                  Node: . = '.'
                                  Node: identifier = 'uid'
                            Node: , = ','
                            Node: named_argument = 'displayName: firebaseUser.displayName ?? 'Unknown User''
                              Node: label = 'displayName:'
                                Node: identifier = 'displayName'
                                Node: : = ':'
                              Node: if_null_expression = 'firebaseUser.displayName ?? 'Unknown User''
                                Node: identifier = 'firebaseUser'
                                Node: selector = '.displayName'
                                  Node: unconditional_assignable_selector = '.displayName'
                                    Node: . = '.'
                                    Node: identifier = 'displayName'
                                Node: ?? = '??'
                                Node: string_literal = ''Unknown User''
                                  Node: ' = '''
                                  Node: ' = '''
                            Node: , = ','
                            Node: named_argument = 'email: firebaseUser.email'
                              Node: label = 'email:'
                                Node: identifier = 'email'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.email'
                                Node: unconditional_assignable_selector = '.email'
                                  Node: . = '.'
                                  Node: identifier = 'email'
                            Node: , = ','
                            Node: named_argument = 'photoURL: firebaseUser.photoURL'
                              Node: label = 'photoURL:'
                                Node: identifier = 'photoURL'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.photoURL'
                                Node: unconditional_assignable_selector = '.photoURL'
                                  Node: . = '.'
                                  Node: identifier = 'photoURL'
                            Node: , = ','
                            Node: named_argument = 'provider: 'line''
                              Node: label = 'provider:'
                                Node: identifier = 'provider'
                                Node: : = ':'
                              Node: string_literal = ''line''
                                Node: ' = '''
                                Node: ' = '''
                            Node: , = ','
                            Node: ) = ')'
                    Node: ; = ';'
                  Node: expression_statement = 'state = AuthState.authenticated(user);'
                    Node: assignment_expression = 'state = AuthState.authenticated(user)'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: identifier = 'AuthState'
                      Node: selector = '.authenticated'
                        Node: unconditional_assignable_selector = '.authenticated'
                          Node: . = '.'
                          Node: identifier = 'authenticated'
                      Node: selector = '(user)'
                        Node: argument_part = '(user)'
                          Node: arguments = '(user)'
                            Node: ( = '('
                            Node: argument = 'user'
                              Node: identifier = 'user'
                            Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
                Node: else = 'else'
                Node: block = '{
        state = const AuthState.unauthenticated();
      }'
                  Node: { = '{'
                  Node: expression_statement = 'state = const AuthState.unauthenticated();'
                    Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: const_object_expression = 'const AuthState.unauthenticated()'
                        Node: const_builtin = 'const'
                        Node: type_identifier = 'AuthState'
                        Node: . = '.'
                        Node: identifier = 'unauthenticated'
                        Node: arguments = '()'
                          Node: ( = '('
                          Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// 認証状態の監視'
        Node: /// = '///'
      Node: method_signature = 'void listenToAuthChanges()'
        Node: function_signature = 'void listenToAuthChanges()'
          Node: void_type = 'void'
          Node: identifier = 'listenToAuthChanges'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = '{
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }'
        Node: block = '{
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }'
          Node: { = '{'
          Node: expression_statement = 'firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });'
            Node: identifier = 'firebase_auth'
            Node: selector = '.FirebaseAuth'
              Node: unconditional_assignable_selector = '.FirebaseAuth'
                Node: . = '.'
                Node: identifier = 'FirebaseAuth'
            Node: selector = '.instance'
              Node: unconditional_assignable_selector = '.instance'
                Node: . = '.'
                Node: identifier = 'instance'
            Node: selector = '.authStateChanges'
              Node: unconditional_assignable_selector = '.authStateChanges'
                Node: . = '.'
                Node: identifier = 'authStateChanges'
            Node: selector = '()'
              Node: argument_part = '()'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: selector = '.listen'
              Node: unconditional_assignable_selector = '.listen'
                Node: . = '.'
                Node: identifier = 'listen'
            Node: selector = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
              Node: argument_part = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
                Node: arguments = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
                  Node: ( = '('
                  Node: argument = '(firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                    Node: function_expression = '(firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                      Node: formal_parameter_list = '(firebaseUser)'
                        Node: ( = '('
                        Node: formal_parameter = 'firebaseUser'
                          Node: identifier = 'firebaseUser'
                        Node: ) = ')'
                      Node: function_expression_body = '{
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                        Node: block = '{
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                          Node: { = '{'
                          Node: if_statement = 'if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }'
                            Node: if = 'if'
                            Node: ( = '('
                            Node: equality_expression = 'firebaseUser != null'
                              Node: identifier = 'firebaseUser'
                              Node: equality_operator = '!='
                              Node: null_literal = 'null'
                                Node: null = 'null'
                            Node: ) = ')'
                            Node: block = '{
        // ユーザーがログインしている場合
        getCurrentUser();
      }'
                              Node: { = '{'
                              Node: comment = '// ユーザーがログインしている場合'
                                Node: // = '//'
                              Node: expression_statement = 'getCurrentUser();'
                                Node: identifier = 'getCurrentUser'
                                Node: selector = '()'
                                  Node: argument_part = '()'
                                    Node: arguments = '()'
                                      Node: ( = '('
                                      Node: ) = ')'
                                Node: ; = ';'
                              Node: } = '}'
                            Node: else = 'else'
                            Node: block = '{
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }'
                              Node: { = '{'
                              Node: comment = '// ユーザーがログアウトしている場合'
                                Node: // = '//'
                              Node: expression_statement = 'state = const AuthState.unauthenticated();'
                                Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                                  Node: assignable_expression = 'state'
                                    Node: identifier = 'state'
                                  Node: = = '='
                                  Node: const_object_expression = 'const AuthState.unauthenticated()'
                                    Node: const_builtin = 'const'
                                    Node: type_identifier = 'AuthState'
                                    Node: . = '.'
                                    Node: identifier = 'unauthenticated'
                                    Node: arguments = '()'
                                      Node: ( = '('
                                      Node: ) = ')'
                                Node: ; = ';'
                              Node: } = '}'
                          Node: } = '}'
                  Node: ) = ')'
            Node: ; = ';'
          Node: } = '}'
      Node: } = '}'
  Node: documentation_comment = '/// 認証状態プロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'AuthState authState(Ref ref)'
    Node: type_identifier = 'AuthState'
    Node: identifier = 'authState'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}'
    Node: block = '{
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}'
      Node: { = '{'
      Node: comment = '// 初回起動時に認証状態を監視開始'
        Node: // = '//'
      Node: expression_statement = 'ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });'
        Node: identifier = 'ref'
        Node: selector = '.listen'
          Node: unconditional_assignable_selector = '.listen'
            Node: . = '.'
            Node: identifier = 'listen'
        Node: selector = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
          Node: argument_part = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
            Node: arguments = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
              Node: ( = '('
              Node: argument = 'authNotifierProvider'
                Node: identifier = 'authNotifierProvider'
              Node: , = ','
              Node: argument = '(previous, next) {
    // 認証状態が変更された時の処理
  }'
                Node: function_expression = '(previous, next) {
    // 認証状態が変更された時の処理
  }'
                  Node: formal_parameter_list = '(previous, next)'
                    Node: ( = '('
                    Node: formal_parameter = 'previous'
                      Node: identifier = 'previous'
                    Node: , = ','
                    Node: formal_parameter = 'next'
                      Node: identifier = 'next'
                    Node: ) = ')'
                  Node: function_expression_body = '{
    // 認証状態が変更された時の処理
  }'
                    Node: block = '{
    // 認証状態が変更された時の処理
  }'
                      Node: { = '{'
                      Node: comment = '// 認証状態が変更された時の処理'
                        Node: // = '//'
                      Node: } = '}'
              Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return ref.watch(authNotifierProvider);'
        Node: return = 'return'
        Node: identifier = 'ref'
        Node: selector = '.watch'
          Node: unconditional_assignable_selector = '.watch'
            Node: . = '.'
            Node: identifier = 'watch'
        Node: selector = '(authNotifierProvider)'
          Node: argument_part = '(authNotifierProvider)'
            Node: arguments = '(authNotifierProvider)'
              Node: ( = '('
              Node: argument = 'authNotifierProvider'
                Node: identifier = 'authNotifierProvider'
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
  Node: documentation_comment = '/// 現在のユーザープロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'AppUser? currentUser(Ref ref)'
    Node: type_identifier = 'AppUser'
    Node: nullable_type = '?'
      Node: ? = '?'
    Node: identifier = 'currentUser'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}'
    Node: block = '{
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}'
      Node: { = '{'
      Node: local_variable_declaration = 'final authState = ref.watch(authStateProvider);'
        Node: initialized_variable_definition = 'final authState = ref.watch(authStateProvider)'
          Node: final_builtin = 'final'
            Node: final = 'final'
          Node: identifier = 'authState'
          Node: = = '='
          Node: identifier = 'ref'
          Node: selector = '.watch'
            Node: unconditional_assignable_selector = '.watch'
              Node: . = '.'
              Node: identifier = 'watch'
          Node: selector = '(authStateProvider)'
            Node: argument_part = '(authStateProvider)'
              Node: arguments = '(authStateProvider)'
                Node: ( = '('
                Node: argument = 'authStateProvider'
                  Node: identifier = 'authStateProvider'
                Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );'
        Node: return = 'return'
        Node: identifier = 'authState'
        Node: selector = '.when'
          Node: unconditional_assignable_selector = '.when'
            Node: . = '.'
            Node: identifier = 'when'
        Node: selector = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
          Node: argument_part = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
            Node: arguments = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
              Node: ( = '('
              Node: named_argument = 'authenticated: (user) => user'
                Node: label = 'authenticated:'
                  Node: identifier = 'authenticated'
                  Node: : = ':'
                Node: function_expression = '(user) => user'
                  Node: formal_parameter_list = '(user)'
                    Node: ( = '('
                    Node: formal_parameter = 'user'
                      Node: identifier = 'user'
                    Node: ) = ')'
                  Node: function_expression_body = '=> user'
                    Node: => = '=>'
                    Node: identifier = 'user'
              Node: , = ','
              Node: named_argument = 'initial: () => null'
                Node: label = 'initial:'
                  Node: identifier = 'initial'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'loading: () => null'
                Node: label = 'loading:'
                  Node: identifier = 'loading'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'unauthenticated: () => null'
                Node: label = 'unauthenticated:'
                  Node: identifier = 'unauthenticated'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'error: (_) => null'
                Node: label = 'error:'
                  Node: identifier = 'error'
                  Node: : = ':'
                Node: function_expression = '(_) => null'
                  Node: formal_parameter_list = '(_)'
                    Node: ( = '('
                    Node: formal_parameter = '_'
                      Node: identifier = '_'
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
  Node: documentation_comment = '/// 認証済みかどうかのプロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'bool isAuthenticated(Ref ref)'
    Node: type_identifier = 'bool'
    Node: identifier = 'isAuthenticated'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}'
    Node: block = '{
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}'
      Node: { = '{'
      Node: local_variable_declaration = 'final authState = ref.watch(authStateProvider);'
        Node: initialized_variable_definition = 'final authState = ref.watch(authStateProvider)'
          Node: final_builtin = 'final'
            Node: final = 'final'
          Node: identifier = 'authState'
          Node: = = '='
          Node: identifier = 'ref'
          Node: selector = '.watch'
            Node: unconditional_assignable_selector = '.watch'
              Node: . = '.'
              Node: identifier = 'watch'
          Node: selector = '(authStateProvider)'
            Node: argument_part = '(authStateProvider)'
              Node: arguments = '(authStateProvider)'
                Node: ( = '('
                Node: argument = 'authStateProvider'
                  Node: identifier = 'authStateProvider'
                Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );'
        Node: return = 'return'
        Node: identifier = 'authState'
        Node: selector = '.maybeWhen'
          Node: unconditional_assignable_selector = '.maybeWhen'
            Node: . = '.'
            Node: identifier = 'maybeWhen'
        Node: selector = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
          Node: argument_part = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
            Node: arguments = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
              Node: ( = '('
              Node: named_argument = 'authenticated: (_) => true'
                Node: label = 'authenticated:'
                  Node: identifier = 'authenticated'
                  Node: : = ':'
                Node: function_expression = '(_) => true'
                  Node: formal_parameter_list = '(_)'
                    Node: ( = '('
                    Node: formal_parameter = '_'
                      Node: identifier = '_'
                    Node: ) = ')'
                  Node: function_expression_body = '=> true'
                    Node: => = '=>'
                    Node: true = 'true'
                      Node: true = 'true'
              Node: , = ','
              Node: named_argument = 'orElse: () => false'
                Node: label = 'orElse:'
                  Node: identifier = 'orElse'
                  Node: : = ':'
                Node: function_expression = '() => false'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> false'
                    Node: => = '=>'
                    Node: false = 'false'
                      Node: false = 'false'
              Node: , = ','
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
=== End AST ===

=== Complete AST for test_flutter_app/aminomi/lib/providers/auth_provider.dart ===
Node: program = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;
import 'package:riverpod/riverpod.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import '../models/user.dart';
import '../services/line_auth_service.dart';

part 'auth_provider.g.dart';

@riverpod
class AuthNotifier extends _$AuthNotifier {
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}

/// 認証状態プロバイダー
@riverpod
AuthState authState(Ref ref) {
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}

/// 現在のユーザープロバイダー
@riverpod
AppUser? currentUser(Ref ref) {
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}

/// 認証済みかどうかのプロバイダー
@riverpod
bool isAuthenticated(Ref ref) {
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}
'
  Node: import_or_export = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
    Node: library_import = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
      Node: import_specification = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
        Node: import = 'import'
        Node: configurable_uri = ''package:firebase_auth/firebase_auth.dart''
          Node: uri = ''package:firebase_auth/firebase_auth.dart''
            Node: string_literal = ''package:firebase_auth/firebase_auth.dart''
              Node: ' = '''
              Node: ' = '''
        Node: as = 'as'
        Node: identifier = 'firebase_auth'
        Node: ; = ';'
  Node: import_or_export = 'import 'package:riverpod/riverpod.dart';'
    Node: library_import = 'import 'package:riverpod/riverpod.dart';'
      Node: import_specification = 'import 'package:riverpod/riverpod.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:riverpod/riverpod.dart''
          Node: uri = ''package:riverpod/riverpod.dart''
            Node: string_literal = ''package:riverpod/riverpod.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
    Node: library_import = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
      Node: import_specification = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:riverpod_annotation/riverpod_annotation.dart''
          Node: uri = ''package:riverpod_annotation/riverpod_annotation.dart''
            Node: string_literal = ''package:riverpod_annotation/riverpod_annotation.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import '../models/user.dart';'
    Node: library_import = 'import '../models/user.dart';'
      Node: import_specification = 'import '../models/user.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''../models/user.dart''
          Node: uri = ''../models/user.dart''
            Node: string_literal = ''../models/user.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import '../services/line_auth_service.dart';'
    Node: library_import = 'import '../services/line_auth_service.dart';'
      Node: import_specification = 'import '../services/line_auth_service.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''../services/line_auth_service.dart''
          Node: uri = ''../services/line_auth_service.dart''
            Node: string_literal = ''../services/line_auth_service.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: part_directive = 'part 'auth_provider.g.dart';'
    Node: part = 'part'
    Node: uri = ''auth_provider.g.dart''
      Node: string_literal = ''auth_provider.g.dart''
        Node: ' = '''
        Node: ' = '''
    Node: ; = ';'
  Node: class_definition = '@riverpod
class AuthNotifier extends _$AuthNotifier {
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}'
    Node: annotation = '@riverpod'
      Node: @ = '@'
      Node: identifier = 'riverpod'
    Node: class = 'class'
    Node: identifier = 'AuthNotifier'
    Node: superclass = 'extends _$AuthNotifier'
      Node: extends = 'extends'
      Node: type_identifier = '_$AuthNotifier'
    Node: class_body = '{
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}'
      Node: { = '{'
      Node: annotation = '@override'
        Node: @ = '@'
        Node: identifier = 'override'
      Node: method_signature = 'AuthState build()'
        Node: function_signature = 'AuthState build()'
          Node: type_identifier = 'AuthState'
          Node: identifier = 'build'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = '{
    return const AuthState.initial();
  }'
        Node: block = '{
    return const AuthState.initial();
  }'
          Node: { = '{'
          Node: return_statement = 'return const AuthState.initial();'
            Node: return = 'return'
            Node: const_object_expression = 'const AuthState.initial()'
              Node: const_builtin = 'const'
              Node: type_identifier = 'AuthState'
              Node: . = '.'
              Node: identifier = 'initial'
              Node: arguments = '()'
                Node: ( = '('
                Node: ) = ')'
            Node: ; = ';'
          Node: } = '}'
      Node: documentation_comment = '/// LINEログイン'
        Node: /// = '///'
      Node: method_signature = 'Future<void> signInWithLine()'
        Node: function_signature = 'Future<void> signInWithLine()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'signInWithLine'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: expression_statement = 'state = const AuthState.loading();'
            Node: assignment_expression = 'state = const AuthState.loading()'
              Node: assignable_expression = 'state'
                Node: identifier = 'state'
              Node: = = '='
              Node: const_object_expression = 'const AuthState.loading()'
                Node: const_builtin = 'const'
                Node: type_identifier = 'AuthState'
                Node: . = '.'
                Node: identifier = 'loading'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: ; = ';'
          Node: try_statement = 'try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    }'
              Node: { = '{'
              Node: local_variable_declaration = 'final result = await LineAuthService.login();'
                Node: initialized_variable_definition = 'final result = await LineAuthService.login()'
                  Node: final_builtin = 'final'
                    Node: final = 'final'
                  Node: identifier = 'result'
                  Node: = = '='
                  Node: unary_expression = 'await LineAuthService.login()'
                    Node: await_expression = 'await LineAuthService.login()'
                      Node: await = 'await'
                      Node: identifier = 'LineAuthService'
                      Node: selector = '.login'
                        Node: unconditional_assignable_selector = '.login'
                          Node: . = '.'
                          Node: identifier = 'login'
                      Node: selector = '()'
                        Node: argument_part = '()'
                          Node: arguments = '()'
                            Node: ( = '('
                            Node: ) = ')'
                Node: ; = ';'
              Node: if_statement = 'if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }'
                Node: if = 'if'
                Node: ( = '('
                Node: equality_expression = 'result != null'
                  Node: identifier = 'result'
                  Node: equality_operator = '!='
                  Node: null_literal = 'null'
                    Node: null = 'null'
                Node: ) = ')'
                Node: block = '{
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      }'
                  Node: { = '{'
                  Node: comment = '// Firebaseカスタムトークンでサインイン'
                    Node: // = '//'
                  Node: local_variable_declaration = 'final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );'
                    Node: initialized_variable_definition = 'final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                      Node: final_builtin = 'final'
                        Node: final = 'final'
                      Node: identifier = 'userCredential'
                      Node: = = '='
                      Node: unary_expression = 'await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                        Node: await_expression = 'await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                          Node: await = 'await'
                          Node: identifier = 'firebase_auth'
                          Node: selector = '.FirebaseAuth'
                            Node: unconditional_assignable_selector = '.FirebaseAuth'
                              Node: . = '.'
                              Node: identifier = 'FirebaseAuth'
                          Node: selector = '.instance'
                            Node: unconditional_assignable_selector = '.instance'
                              Node: . = '.'
                              Node: identifier = 'instance'
                          Node: selector = '.signInWithCustomToken'
                            Node: unconditional_assignable_selector = '.signInWithCustomToken'
                              Node: . = '.'
                              Node: identifier = 'signInWithCustomToken'
                          Node: selector = '(
          result.accessToken,
        )'
                            Node: argument_part = '(
          result.accessToken,
        )'
                              Node: arguments = '(
          result.accessToken,
        )'
                                Node: ( = '('
                                Node: argument = 'result.accessToken'
                                  Node: identifier = 'result'
                                  Node: selector = '.accessToken'
                                    Node: unconditional_assignable_selector = '.accessToken'
                                      Node: . = '.'
                                      Node: identifier = 'accessToken'
                                Node: , = ','
                                Node: ) = ')'
                    Node: ; = ';'
                  Node: if_statement = 'if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }'
                    Node: if = 'if'
                    Node: ( = '('
                    Node: equality_expression = 'userCredential.user != null'
                      Node: identifier = 'userCredential'
                      Node: selector = '.user'
                        Node: unconditional_assignable_selector = '.user'
                          Node: . = '.'
                          Node: identifier = 'user'
                      Node: equality_operator = '!='
                      Node: null_literal = 'null'
                        Node: null = 'null'
                    Node: ) = ')'
                    Node: block = '{
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        }'
                      Node: { = '{'
                      Node: local_variable_declaration = 'final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );'
                        Node: initialized_variable_definition = 'final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                          Node: final_builtin = 'final'
                            Node: final = 'final'
                          Node: identifier = 'user'
                          Node: = = '='
                          Node: identifier = 'AppUser'
                          Node: selector = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                            Node: argument_part = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                              Node: arguments = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                                Node: ( = '('
                                Node: named_argument = 'id: userCredential.user!.uid'
                                  Node: label = 'id:'
                                    Node: identifier = 'id'
                                    Node: : = ':'
                                  Node: identifier = 'userCredential'
                                  Node: selector = '.user'
                                    Node: unconditional_assignable_selector = '.user'
                                      Node: . = '.'
                                      Node: identifier = 'user'
                                  Node: selector = '!'
                                    Node: ! = '!'
                                  Node: selector = '.uid'
                                    Node: unconditional_assignable_selector = '.uid'
                                      Node: . = '.'
                                      Node: identifier = 'uid'
                                Node: , = ','
                                Node: named_argument = 'displayName: result.profile.displayName'
                                  Node: label = 'displayName:'
                                    Node: identifier = 'displayName'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.displayName'
                                    Node: unconditional_assignable_selector = '.displayName'
                                      Node: . = '.'
                                      Node: identifier = 'displayName'
                                Node: , = ','
                                Node: named_argument = 'photoURL: result.profile.pictureUrl'
                                  Node: label = 'photoURL:'
                                    Node: identifier = 'photoURL'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.pictureUrl'
                                    Node: unconditional_assignable_selector = '.pictureUrl'
                                      Node: . = '.'
                                      Node: identifier = 'pictureUrl'
                                Node: , = ','
                                Node: named_argument = 'statusMessage: result.profile.statusMessage'
                                  Node: label = 'statusMessage:'
                                    Node: identifier = 'statusMessage'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.statusMessage'
                                    Node: unconditional_assignable_selector = '.statusMessage'
                                      Node: . = '.'
                                      Node: identifier = 'statusMessage'
                                Node: , = ','
                                Node: named_argument = 'provider: 'line''
                                  Node: label = 'provider:'
                                    Node: identifier = 'provider'
                                    Node: : = ':'
                                  Node: string_literal = ''line''
                                    Node: ' = '''
                                    Node: ' = '''
                                Node: , = ','
                                Node: named_argument = 'createdAt: DateTime.now()'
                                  Node: label = 'createdAt:'
                                    Node: identifier = 'createdAt'
                                    Node: : = ':'
                                  Node: identifier = 'DateTime'
                                  Node: selector = '.now'
                                    Node: unconditional_assignable_selector = '.now'
                                      Node: . = '.'
                                      Node: identifier = 'now'
                                  Node: selector = '()'
                                    Node: argument_part = '()'
                                      Node: arguments = '()'
                                        Node: ( = '('
                                        Node: ) = ')'
                                Node: , = ','
                                Node: ) = ')'
                        Node: ; = ';'
                      Node: expression_statement = 'state = AuthState.authenticated(user);'
                        Node: assignment_expression = 'state = AuthState.authenticated(user)'
                          Node: assignable_expression = 'state'
                            Node: identifier = 'state'
                          Node: = = '='
                          Node: identifier = 'AuthState'
                          Node: selector = '.authenticated'
                            Node: unconditional_assignable_selector = '.authenticated'
                              Node: . = '.'
                              Node: identifier = 'authenticated'
                          Node: selector = '(user)'
                            Node: argument_part = '(user)'
                              Node: arguments = '(user)'
                                Node: ( = '('
                                Node: argument = 'user'
                                  Node: identifier = 'user'
                                Node: ) = ')'
                        Node: ; = ';'
                      Node: } = '}'
                    Node: else = 'else'
                    Node: block = '{
          state = const AuthState.error('Failed to sign in with custom token');
        }'
                      Node: { = '{'
                      Node: expression_statement = 'state = const AuthState.error('Failed to sign in with custom token');'
                        Node: assignment_expression = 'state = const AuthState.error('Failed to sign in with custom token')'
                          Node: assignable_expression = 'state'
                            Node: identifier = 'state'
                          Node: = = '='
                          Node: const_object_expression = 'const AuthState.error('Failed to sign in with custom token')'
                            Node: const_builtin = 'const'
                            Node: type_identifier = 'AuthState'
                            Node: . = '.'
                            Node: identifier = 'error'
                            Node: arguments = '('Failed to sign in with custom token')'
                              Node: ( = '('
                              Node: argument = ''Failed to sign in with custom token''
                                Node: string_literal = ''Failed to sign in with custom token''
                                  Node: ' = '''
                                  Node: ' = '''
                              Node: ) = ')'
                        Node: ; = ';'
                      Node: } = '}'
                  Node: } = '}'
                Node: else = 'else'
                Node: block = '{
        state = const AuthState.error('LINE login failed');
      }'
                  Node: { = '{'
                  Node: expression_statement = 'state = const AuthState.error('LINE login failed');'
                    Node: assignment_expression = 'state = const AuthState.error('LINE login failed')'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: const_object_expression = 'const AuthState.error('LINE login failed')'
                        Node: const_builtin = 'const'
                        Node: type_identifier = 'AuthState'
                        Node: . = '.'
                        Node: identifier = 'error'
                        Node: arguments = '('LINE login failed')'
                          Node: ( = '('
                          Node: argument = ''LINE login failed''
                            Node: string_literal = ''LINE login failed''
                              Node: ' = '''
                              Node: ' = '''
                          Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// ログアウト'
        Node: /// = '///'
      Node: method_signature = 'Future<void> signOut()'
        Node: function_signature = 'Future<void> signOut()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'signOut'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: try_statement = 'try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    }'
              Node: { = '{'
              Node: expression_statement = 'await firebase_auth.FirebaseAuth.instance.signOut();'
                Node: unary_expression = 'await firebase_auth.FirebaseAuth.instance.signOut()'
                  Node: await_expression = 'await firebase_auth.FirebaseAuth.instance.signOut()'
                    Node: await = 'await'
                    Node: identifier = 'firebase_auth'
                    Node: selector = '.FirebaseAuth'
                      Node: unconditional_assignable_selector = '.FirebaseAuth'
                        Node: . = '.'
                        Node: identifier = 'FirebaseAuth'
                    Node: selector = '.instance'
                      Node: unconditional_assignable_selector = '.instance'
                        Node: . = '.'
                        Node: identifier = 'instance'
                    Node: selector = '.signOut'
                      Node: unconditional_assignable_selector = '.signOut'
                        Node: . = '.'
                        Node: identifier = 'signOut'
                    Node: selector = '()'
                      Node: argument_part = '()'
                        Node: arguments = '()'
                          Node: ( = '('
                          Node: ) = ')'
                Node: ; = ';'
              Node: expression_statement = 'state = const AuthState.unauthenticated();'
                Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: const_object_expression = 'const AuthState.unauthenticated()'
                    Node: const_builtin = 'const'
                    Node: type_identifier = 'AuthState'
                    Node: . = '.'
                    Node: identifier = 'unauthenticated'
                    Node: arguments = '()'
                      Node: ( = '('
                      Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// 現在のユーザーを取得'
        Node: /// = '///'
      Node: method_signature = 'Future<void> getCurrentUser()'
        Node: function_signature = 'Future<void> getCurrentUser()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'getCurrentUser'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: expression_statement = 'state = const AuthState.loading();'
            Node: assignment_expression = 'state = const AuthState.loading()'
              Node: assignable_expression = 'state'
                Node: identifier = 'state'
              Node: = = '='
              Node: const_object_expression = 'const AuthState.loading()'
                Node: const_builtin = 'const'
                Node: type_identifier = 'AuthState'
                Node: . = '.'
                Node: identifier = 'loading'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: ; = ';'
          Node: try_statement = 'try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    }'
              Node: { = '{'
              Node: local_variable_declaration = 'final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;'
                Node: initialized_variable_definition = 'final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser'
                  Node: final_builtin = 'final'
                    Node: final = 'final'
                  Node: identifier = 'firebaseUser'
                  Node: = = '='
                  Node: identifier = 'firebase_auth'
                  Node: selector = '.FirebaseAuth'
                    Node: unconditional_assignable_selector = '.FirebaseAuth'
                      Node: . = '.'
                      Node: identifier = 'FirebaseAuth'
                  Node: selector = '.instance'
                    Node: unconditional_assignable_selector = '.instance'
                      Node: . = '.'
                      Node: identifier = 'instance'
                  Node: selector = '.currentUser'
                    Node: unconditional_assignable_selector = '.currentUser'
                      Node: . = '.'
                      Node: identifier = 'currentUser'
                Node: ; = ';'
              Node: if_statement = 'if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }'
                Node: if = 'if'
                Node: ( = '('
                Node: equality_expression = 'firebaseUser != null'
                  Node: identifier = 'firebaseUser'
                  Node: equality_operator = '!='
                  Node: null_literal = 'null'
                    Node: null = 'null'
                Node: ) = ')'
                Node: block = '{
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      }'
                  Node: { = '{'
                  Node: comment = '// Firestoreからユーザー情報を取得'
                    Node: // = '//'
                  Node: comment = '// TODO: FirestoreServiceを使用してユーザー情報を取得'
                    Node: // = '//'
                  Node: local_variable_declaration = 'final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );'
                    Node: initialized_variable_definition = 'final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                      Node: final_builtin = 'final'
                        Node: final = 'final'
                      Node: identifier = 'user'
                      Node: = = '='
                      Node: identifier = 'AppUser'
                      Node: selector = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                        Node: argument_part = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                          Node: arguments = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                            Node: ( = '('
                            Node: named_argument = 'id: firebaseUser.uid'
                              Node: label = 'id:'
                                Node: identifier = 'id'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.uid'
                                Node: unconditional_assignable_selector = '.uid'
                                  Node: . = '.'
                                  Node: identifier = 'uid'
                            Node: , = ','
                            Node: named_argument = 'displayName: firebaseUser.displayName ?? 'Unknown User''
                              Node: label = 'displayName:'
                                Node: identifier = 'displayName'
                                Node: : = ':'
                              Node: if_null_expression = 'firebaseUser.displayName ?? 'Unknown User''
                                Node: identifier = 'firebaseUser'
                                Node: selector = '.displayName'
                                  Node: unconditional_assignable_selector = '.displayName'
                                    Node: . = '.'
                                    Node: identifier = 'displayName'
                                Node: ?? = '??'
                                Node: string_literal = ''Unknown User''
                                  Node: ' = '''
                                  Node: ' = '''
                            Node: , = ','
                            Node: named_argument = 'email: firebaseUser.email'
                              Node: label = 'email:'
                                Node: identifier = 'email'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.email'
                                Node: unconditional_assignable_selector = '.email'
                                  Node: . = '.'
                                  Node: identifier = 'email'
                            Node: , = ','
                            Node: named_argument = 'photoURL: firebaseUser.photoURL'
                              Node: label = 'photoURL:'
                                Node: identifier = 'photoURL'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.photoURL'
                                Node: unconditional_assignable_selector = '.photoURL'
                                  Node: . = '.'
                                  Node: identifier = 'photoURL'
                            Node: , = ','
                            Node: named_argument = 'provider: 'line''
                              Node: label = 'provider:'
                                Node: identifier = 'provider'
                                Node: : = ':'
                              Node: string_literal = ''line''
                                Node: ' = '''
                                Node: ' = '''
                            Node: , = ','
                            Node: ) = ')'
                    Node: ; = ';'
                  Node: expression_statement = 'state = AuthState.authenticated(user);'
                    Node: assignment_expression = 'state = AuthState.authenticated(user)'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: identifier = 'AuthState'
                      Node: selector = '.authenticated'
                        Node: unconditional_assignable_selector = '.authenticated'
                          Node: . = '.'
                          Node: identifier = 'authenticated'
                      Node: selector = '(user)'
                        Node: argument_part = '(user)'
                          Node: arguments = '(user)'
                            Node: ( = '('
                            Node: argument = 'user'
                              Node: identifier = 'user'
                            Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
                Node: else = 'else'
                Node: block = '{
        state = const AuthState.unauthenticated();
      }'
                  Node: { = '{'
                  Node: expression_statement = 'state = const AuthState.unauthenticated();'
                    Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: const_object_expression = 'const AuthState.unauthenticated()'
                        Node: const_builtin = 'const'
                        Node: type_identifier = 'AuthState'
                        Node: . = '.'
                        Node: identifier = 'unauthenticated'
                        Node: arguments = '()'
                          Node: ( = '('
                          Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// 認証状態の監視'
        Node: /// = '///'
      Node: method_signature = 'void listenToAuthChanges()'
        Node: function_signature = 'void listenToAuthChanges()'
          Node: void_type = 'void'
          Node: identifier = 'listenToAuthChanges'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = '{
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }'
        Node: block = '{
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }'
          Node: { = '{'
          Node: expression_statement = 'firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });'
            Node: identifier = 'firebase_auth'
            Node: selector = '.FirebaseAuth'
              Node: unconditional_assignable_selector = '.FirebaseAuth'
                Node: . = '.'
                Node: identifier = 'FirebaseAuth'
            Node: selector = '.instance'
              Node: unconditional_assignable_selector = '.instance'
                Node: . = '.'
                Node: identifier = 'instance'
            Node: selector = '.authStateChanges'
              Node: unconditional_assignable_selector = '.authStateChanges'
                Node: . = '.'
                Node: identifier = 'authStateChanges'
            Node: selector = '()'
              Node: argument_part = '()'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: selector = '.listen'
              Node: unconditional_assignable_selector = '.listen'
                Node: . = '.'
                Node: identifier = 'listen'
            Node: selector = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
              Node: argument_part = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
                Node: arguments = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
                  Node: ( = '('
                  Node: argument = '(firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                    Node: function_expression = '(firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                      Node: formal_parameter_list = '(firebaseUser)'
                        Node: ( = '('
                        Node: formal_parameter = 'firebaseUser'
                          Node: identifier = 'firebaseUser'
                        Node: ) = ')'
                      Node: function_expression_body = '{
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                        Node: block = '{
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                          Node: { = '{'
                          Node: if_statement = 'if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }'
                            Node: if = 'if'
                            Node: ( = '('
                            Node: equality_expression = 'firebaseUser != null'
                              Node: identifier = 'firebaseUser'
                              Node: equality_operator = '!='
                              Node: null_literal = 'null'
                                Node: null = 'null'
                            Node: ) = ')'
                            Node: block = '{
        // ユーザーがログインしている場合
        getCurrentUser();
      }'
                              Node: { = '{'
                              Node: comment = '// ユーザーがログインしている場合'
                                Node: // = '//'
                              Node: expression_statement = 'getCurrentUser();'
                                Node: identifier = 'getCurrentUser'
                                Node: selector = '()'
                                  Node: argument_part = '()'
                                    Node: arguments = '()'
                                      Node: ( = '('
                                      Node: ) = ')'
                                Node: ; = ';'
                              Node: } = '}'
                            Node: else = 'else'
                            Node: block = '{
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }'
                              Node: { = '{'
                              Node: comment = '// ユーザーがログアウトしている場合'
                                Node: // = '//'
                              Node: expression_statement = 'state = const AuthState.unauthenticated();'
                                Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                                  Node: assignable_expression = 'state'
                                    Node: identifier = 'state'
                                  Node: = = '='
                                  Node: const_object_expression = 'const AuthState.unauthenticated()'
                                    Node: const_builtin = 'const'
                                    Node: type_identifier = 'AuthState'
                                    Node: . = '.'
                                    Node: identifier = 'unauthenticated'
                                    Node: arguments = '()'
                                      Node: ( = '('
                                      Node: ) = ')'
                                Node: ; = ';'
                              Node: } = '}'
                          Node: } = '}'
                  Node: ) = ')'
            Node: ; = ';'
          Node: } = '}'
      Node: } = '}'
  Node: documentation_comment = '/// 認証状態プロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'AuthState authState(Ref ref)'
    Node: type_identifier = 'AuthState'
    Node: identifier = 'authState'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}'
    Node: block = '{
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}'
      Node: { = '{'
      Node: comment = '// 初回起動時に認証状態を監視開始'
        Node: // = '//'
      Node: expression_statement = 'ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });'
        Node: identifier = 'ref'
        Node: selector = '.listen'
          Node: unconditional_assignable_selector = '.listen'
            Node: . = '.'
            Node: identifier = 'listen'
        Node: selector = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
          Node: argument_part = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
            Node: arguments = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
              Node: ( = '('
              Node: argument = 'authNotifierProvider'
                Node: identifier = 'authNotifierProvider'
              Node: , = ','
              Node: argument = '(previous, next) {
    // 認証状態が変更された時の処理
  }'
                Node: function_expression = '(previous, next) {
    // 認証状態が変更された時の処理
  }'
                  Node: formal_parameter_list = '(previous, next)'
                    Node: ( = '('
                    Node: formal_parameter = 'previous'
                      Node: identifier = 'previous'
                    Node: , = ','
                    Node: formal_parameter = 'next'
                      Node: identifier = 'next'
                    Node: ) = ')'
                  Node: function_expression_body = '{
    // 認証状態が変更された時の処理
  }'
                    Node: block = '{
    // 認証状態が変更された時の処理
  }'
                      Node: { = '{'
                      Node: comment = '// 認証状態が変更された時の処理'
                        Node: // = '//'
                      Node: } = '}'
              Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return ref.watch(authNotifierProvider);'
        Node: return = 'return'
        Node: identifier = 'ref'
        Node: selector = '.watch'
          Node: unconditional_assignable_selector = '.watch'
            Node: . = '.'
            Node: identifier = 'watch'
        Node: selector = '(authNotifierProvider)'
          Node: argument_part = '(authNotifierProvider)'
            Node: arguments = '(authNotifierProvider)'
              Node: ( = '('
              Node: argument = 'authNotifierProvider'
                Node: identifier = 'authNotifierProvider'
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
  Node: documentation_comment = '/// 現在のユーザープロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'AppUser? currentUser(Ref ref)'
    Node: type_identifier = 'AppUser'
    Node: nullable_type = '?'
      Node: ? = '?'
    Node: identifier = 'currentUser'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}'
    Node: block = '{
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}'
      Node: { = '{'
      Node: local_variable_declaration = 'final authState = ref.watch(authStateProvider);'
        Node: initialized_variable_definition = 'final authState = ref.watch(authStateProvider)'
          Node: final_builtin = 'final'
            Node: final = 'final'
          Node: identifier = 'authState'
          Node: = = '='
          Node: identifier = 'ref'
          Node: selector = '.watch'
            Node: unconditional_assignable_selector = '.watch'
              Node: . = '.'
              Node: identifier = 'watch'
          Node: selector = '(authStateProvider)'
            Node: argument_part = '(authStateProvider)'
              Node: arguments = '(authStateProvider)'
                Node: ( = '('
                Node: argument = 'authStateProvider'
                  Node: identifier = 'authStateProvider'
                Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );'
        Node: return = 'return'
        Node: identifier = 'authState'
        Node: selector = '.when'
          Node: unconditional_assignable_selector = '.when'
            Node: . = '.'
            Node: identifier = 'when'
        Node: selector = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
          Node: argument_part = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
            Node: arguments = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
              Node: ( = '('
              Node: named_argument = 'authenticated: (user) => user'
                Node: label = 'authenticated:'
                  Node: identifier = 'authenticated'
                  Node: : = ':'
                Node: function_expression = '(user) => user'
                  Node: formal_parameter_list = '(user)'
                    Node: ( = '('
                    Node: formal_parameter = 'user'
                      Node: identifier = 'user'
                    Node: ) = ')'
                  Node: function_expression_body = '=> user'
                    Node: => = '=>'
                    Node: identifier = 'user'
              Node: , = ','
              Node: named_argument = 'initial: () => null'
                Node: label = 'initial:'
                  Node: identifier = 'initial'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'loading: () => null'
                Node: label = 'loading:'
                  Node: identifier = 'loading'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'unauthenticated: () => null'
                Node: label = 'unauthenticated:'
                  Node: identifier = 'unauthenticated'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'error: (_) => null'
                Node: label = 'error:'
                  Node: identifier = 'error'
                  Node: : = ':'
                Node: function_expression = '(_) => null'
                  Node: formal_parameter_list = '(_)'
                    Node: ( = '('
                    Node: formal_parameter = '_'
                      Node: identifier = '_'
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
  Node: documentation_comment = '/// 認証済みかどうかのプロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'bool isAuthenticated(Ref ref)'
    Node: type_identifier = 'bool'
    Node: identifier = 'isAuthenticated'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}'
    Node: block = '{
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}'
      Node: { = '{'
      Node: local_variable_declaration = 'final authState = ref.watch(authStateProvider);'
        Node: initialized_variable_definition = 'final authState = ref.watch(authStateProvider)'
          Node: final_builtin = 'final'
            Node: final = 'final'
          Node: identifier = 'authState'
          Node: = = '='
          Node: identifier = 'ref'
          Node: selector = '.watch'
            Node: unconditional_assignable_selector = '.watch'
              Node: . = '.'
              Node: identifier = 'watch'
          Node: selector = '(authStateProvider)'
            Node: argument_part = '(authStateProvider)'
              Node: arguments = '(authStateProvider)'
                Node: ( = '('
                Node: argument = 'authStateProvider'
                  Node: identifier = 'authStateProvider'
                Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );'
        Node: return = 'return'
        Node: identifier = 'authState'
        Node: selector = '.maybeWhen'
          Node: unconditional_assignable_selector = '.maybeWhen'
            Node: . = '.'
            Node: identifier = 'maybeWhen'
        Node: selector = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
          Node: argument_part = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
            Node: arguments = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
              Node: ( = '('
              Node: named_argument = 'authenticated: (_) => true'
                Node: label = 'authenticated:'
                  Node: identifier = 'authenticated'
                  Node: : = ':'
                Node: function_expression = '(_) => true'
                  Node: formal_parameter_list = '(_)'
                    Node: ( = '('
                    Node: formal_parameter = '_'
                      Node: identifier = '_'
                    Node: ) = ')'
                  Node: function_expression_body = '=> true'
                    Node: => = '=>'
                    Node: true = 'true'
                      Node: true = 'true'
              Node: , = ','
              Node: named_argument = 'orElse: () => false'
                Node: label = 'orElse:'
                  Node: identifier = 'orElse'
                  Node: : = ':'
                Node: function_expression = '() => false'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> false'
                    Node: => = '=>'
                    Node: false = 'false'
                      Node: false = 'false'
              Node: , = ','
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
=== End AST ===

=== Complete AST for test_flutter_app/aminomi/lib/providers/auth_provider.dart ===
Node: program = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;
import 'package:riverpod/riverpod.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import '../models/user.dart';
import '../services/line_auth_service.dart';

part 'auth_provider.g.dart';

@riverpod
class AuthNotifier extends _$AuthNotifier {
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}

/// 認証状態プロバイダー
@riverpod
AuthState authState(Ref ref) {
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}

/// 現在のユーザープロバイダー
@riverpod
AppUser? currentUser(Ref ref) {
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}

/// 認証済みかどうかのプロバイダー
@riverpod
bool isAuthenticated(Ref ref) {
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}
'
  Node: import_or_export = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
    Node: library_import = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
      Node: import_specification = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
        Node: import = 'import'
        Node: configurable_uri = ''package:firebase_auth/firebase_auth.dart''
          Node: uri = ''package:firebase_auth/firebase_auth.dart''
            Node: string_literal = ''package:firebase_auth/firebase_auth.dart''
              Node: ' = '''
              Node: ' = '''
        Node: as = 'as'
        Node: identifier = 'firebase_auth'
        Node: ; = ';'
  Node: import_or_export = 'import 'package:riverpod/riverpod.dart';'
    Node: library_import = 'import 'package:riverpod/riverpod.dart';'
      Node: import_specification = 'import 'package:riverpod/riverpod.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:riverpod/riverpod.dart''
          Node: uri = ''package:riverpod/riverpod.dart''
            Node: string_literal = ''package:riverpod/riverpod.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
    Node: library_import = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
      Node: import_specification = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:riverpod_annotation/riverpod_annotation.dart''
          Node: uri = ''package:riverpod_annotation/riverpod_annotation.dart''
            Node: string_literal = ''package:riverpod_annotation/riverpod_annotation.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import '../models/user.dart';'
    Node: library_import = 'import '../models/user.dart';'
      Node: import_specification = 'import '../models/user.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''../models/user.dart''
          Node: uri = ''../models/user.dart''
            Node: string_literal = ''../models/user.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import '../services/line_auth_service.dart';'
    Node: library_import = 'import '../services/line_auth_service.dart';'
      Node: import_specification = 'import '../services/line_auth_service.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''../services/line_auth_service.dart''
          Node: uri = ''../services/line_auth_service.dart''
            Node: string_literal = ''../services/line_auth_service.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: part_directive = 'part 'auth_provider.g.dart';'
    Node: part = 'part'
    Node: uri = ''auth_provider.g.dart''
      Node: string_literal = ''auth_provider.g.dart''
        Node: ' = '''
        Node: ' = '''
    Node: ; = ';'
  Node: class_definition = '@riverpod
class AuthNotifier extends _$AuthNotifier {
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}'
    Node: annotation = '@riverpod'
      Node: @ = '@'
      Node: identifier = 'riverpod'
    Node: class = 'class'
    Node: identifier = 'AuthNotifier'
    Node: superclass = 'extends _$AuthNotifier'
      Node: extends = 'extends'
      Node: type_identifier = '_$AuthNotifier'
    Node: class_body = '{
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}'
      Node: { = '{'
      Node: annotation = '@override'
        Node: @ = '@'
        Node: identifier = 'override'
      Node: method_signature = 'AuthState build()'
        Node: function_signature = 'AuthState build()'
          Node: type_identifier = 'AuthState'
          Node: identifier = 'build'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = '{
    return const AuthState.initial();
  }'
        Node: block = '{
    return const AuthState.initial();
  }'
          Node: { = '{'
          Node: return_statement = 'return const AuthState.initial();'
            Node: return = 'return'
            Node: const_object_expression = 'const AuthState.initial()'
              Node: const_builtin = 'const'
              Node: type_identifier = 'AuthState'
              Node: . = '.'
              Node: identifier = 'initial'
              Node: arguments = '()'
                Node: ( = '('
                Node: ) = ')'
            Node: ; = ';'
          Node: } = '}'
      Node: documentation_comment = '/// LINEログイン'
        Node: /// = '///'
      Node: method_signature = 'Future<void> signInWithLine()'
        Node: function_signature = 'Future<void> signInWithLine()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'signInWithLine'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: expression_statement = 'state = const AuthState.loading();'
            Node: assignment_expression = 'state = const AuthState.loading()'
              Node: assignable_expression = 'state'
                Node: identifier = 'state'
              Node: = = '='
              Node: const_object_expression = 'const AuthState.loading()'
                Node: const_builtin = 'const'
                Node: type_identifier = 'AuthState'
                Node: . = '.'
                Node: identifier = 'loading'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: ; = ';'
          Node: try_statement = 'try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    }'
              Node: { = '{'
              Node: local_variable_declaration = 'final result = await LineAuthService.login();'
                Node: initialized_variable_definition = 'final result = await LineAuthService.login()'
                  Node: final_builtin = 'final'
                    Node: final = 'final'
                  Node: identifier = 'result'
                  Node: = = '='
                  Node: unary_expression = 'await LineAuthService.login()'
                    Node: await_expression = 'await LineAuthService.login()'
                      Node: await = 'await'
                      Node: identifier = 'LineAuthService'
                      Node: selector = '.login'
                        Node: unconditional_assignable_selector = '.login'
                          Node: . = '.'
                          Node: identifier = 'login'
                      Node: selector = '()'
                        Node: argument_part = '()'
                          Node: arguments = '()'
                            Node: ( = '('
                            Node: ) = ')'
                Node: ; = ';'
              Node: if_statement = 'if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }'
                Node: if = 'if'
                Node: ( = '('
                Node: equality_expression = 'result != null'
                  Node: identifier = 'result'
                  Node: equality_operator = '!='
                  Node: null_literal = 'null'
                    Node: null = 'null'
                Node: ) = ')'
                Node: block = '{
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      }'
                  Node: { = '{'
                  Node: comment = '// Firebaseカスタムトークンでサインイン'
                    Node: // = '//'
                  Node: local_variable_declaration = 'final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );'
                    Node: initialized_variable_definition = 'final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                      Node: final_builtin = 'final'
                        Node: final = 'final'
                      Node: identifier = 'userCredential'
                      Node: = = '='
                      Node: unary_expression = 'await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                        Node: await_expression = 'await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                          Node: await = 'await'
                          Node: identifier = 'firebase_auth'
                          Node: selector = '.FirebaseAuth'
                            Node: unconditional_assignable_selector = '.FirebaseAuth'
                              Node: . = '.'
                              Node: identifier = 'FirebaseAuth'
                          Node: selector = '.instance'
                            Node: unconditional_assignable_selector = '.instance'
                              Node: . = '.'
                              Node: identifier = 'instance'
                          Node: selector = '.signInWithCustomToken'
                            Node: unconditional_assignable_selector = '.signInWithCustomToken'
                              Node: . = '.'
                              Node: identifier = 'signInWithCustomToken'
                          Node: selector = '(
          result.accessToken,
        )'
                            Node: argument_part = '(
          result.accessToken,
        )'
                              Node: arguments = '(
          result.accessToken,
        )'
                                Node: ( = '('
                                Node: argument = 'result.accessToken'
                                  Node: identifier = 'result'
                                  Node: selector = '.accessToken'
                                    Node: unconditional_assignable_selector = '.accessToken'
                                      Node: . = '.'
                                      Node: identifier = 'accessToken'
                                Node: , = ','
                                Node: ) = ')'
                    Node: ; = ';'
                  Node: if_statement = 'if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }'
                    Node: if = 'if'
                    Node: ( = '('
                    Node: equality_expression = 'userCredential.user != null'
                      Node: identifier = 'userCredential'
                      Node: selector = '.user'
                        Node: unconditional_assignable_selector = '.user'
                          Node: . = '.'
                          Node: identifier = 'user'
                      Node: equality_operator = '!='
                      Node: null_literal = 'null'
                        Node: null = 'null'
                    Node: ) = ')'
                    Node: block = '{
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        }'
                      Node: { = '{'
                      Node: local_variable_declaration = 'final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );'
                        Node: initialized_variable_definition = 'final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                          Node: final_builtin = 'final'
                            Node: final = 'final'
                          Node: identifier = 'user'
                          Node: = = '='
                          Node: identifier = 'AppUser'
                          Node: selector = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                            Node: argument_part = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                              Node: arguments = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                                Node: ( = '('
                                Node: named_argument = 'id: userCredential.user!.uid'
                                  Node: label = 'id:'
                                    Node: identifier = 'id'
                                    Node: : = ':'
                                  Node: identifier = 'userCredential'
                                  Node: selector = '.user'
                                    Node: unconditional_assignable_selector = '.user'
                                      Node: . = '.'
                                      Node: identifier = 'user'
                                  Node: selector = '!'
                                    Node: ! = '!'
                                  Node: selector = '.uid'
                                    Node: unconditional_assignable_selector = '.uid'
                                      Node: . = '.'
                                      Node: identifier = 'uid'
                                Node: , = ','
                                Node: named_argument = 'displayName: result.profile.displayName'
                                  Node: label = 'displayName:'
                                    Node: identifier = 'displayName'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.displayName'
                                    Node: unconditional_assignable_selector = '.displayName'
                                      Node: . = '.'
                                      Node: identifier = 'displayName'
                                Node: , = ','
                                Node: named_argument = 'photoURL: result.profile.pictureUrl'
                                  Node: label = 'photoURL:'
                                    Node: identifier = 'photoURL'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.pictureUrl'
                                    Node: unconditional_assignable_selector = '.pictureUrl'
                                      Node: . = '.'
                                      Node: identifier = 'pictureUrl'
                                Node: , = ','
                                Node: named_argument = 'statusMessage: result.profile.statusMessage'
                                  Node: label = 'statusMessage:'
                                    Node: identifier = 'statusMessage'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.statusMessage'
                                    Node: unconditional_assignable_selector = '.statusMessage'
                                      Node: . = '.'
                                      Node: identifier = 'statusMessage'
                                Node: , = ','
                                Node: named_argument = 'provider: 'line''
                                  Node: label = 'provider:'
                                    Node: identifier = 'provider'
                                    Node: : = ':'
                                  Node: string_literal = ''line''
                                    Node: ' = '''
                                    Node: ' = '''
                                Node: , = ','
                                Node: named_argument = 'createdAt: DateTime.now()'
                                  Node: label = 'createdAt:'
                                    Node: identifier = 'createdAt'
                                    Node: : = ':'
                                  Node: identifier = 'DateTime'
                                  Node: selector = '.now'
                                    Node: unconditional_assignable_selector = '.now'
                                      Node: . = '.'
                                      Node: identifier = 'now'
                                  Node: selector = '()'
                                    Node: argument_part = '()'
                                      Node: arguments = '()'
                                        Node: ( = '('
                                        Node: ) = ')'
                                Node: , = ','
                                Node: ) = ')'
                        Node: ; = ';'
                      Node: expression_statement = 'state = AuthState.authenticated(user);'
                        Node: assignment_expression = 'state = AuthState.authenticated(user)'
                          Node: assignable_expression = 'state'
                            Node: identifier = 'state'
                          Node: = = '='
                          Node: identifier = 'AuthState'
                          Node: selector = '.authenticated'
                            Node: unconditional_assignable_selector = '.authenticated'
                              Node: . = '.'
                              Node: identifier = 'authenticated'
                          Node: selector = '(user)'
                            Node: argument_part = '(user)'
                              Node: arguments = '(user)'
                                Node: ( = '('
                                Node: argument = 'user'
                                  Node: identifier = 'user'
                                Node: ) = ')'
                        Node: ; = ';'
                      Node: } = '}'
                    Node: else = 'else'
                    Node: block = '{
          state = const AuthState.error('Failed to sign in with custom token');
        }'
                      Node: { = '{'
                      Node: expression_statement = 'state = const AuthState.error('Failed to sign in with custom token');'
                        Node: assignment_expression = 'state = const AuthState.error('Failed to sign in with custom token')'
                          Node: assignable_expression = 'state'
                            Node: identifier = 'state'
                          Node: = = '='
                          Node: const_object_expression = 'const AuthState.error('Failed to sign in with custom token')'
                            Node: const_builtin = 'const'
                            Node: type_identifier = 'AuthState'
                            Node: . = '.'
                            Node: identifier = 'error'
                            Node: arguments = '('Failed to sign in with custom token')'
                              Node: ( = '('
                              Node: argument = ''Failed to sign in with custom token''
                                Node: string_literal = ''Failed to sign in with custom token''
                                  Node: ' = '''
                                  Node: ' = '''
                              Node: ) = ')'
                        Node: ; = ';'
                      Node: } = '}'
                  Node: } = '}'
                Node: else = 'else'
                Node: block = '{
        state = const AuthState.error('LINE login failed');
      }'
                  Node: { = '{'
                  Node: expression_statement = 'state = const AuthState.error('LINE login failed');'
                    Node: assignment_expression = 'state = const AuthState.error('LINE login failed')'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: const_object_expression = 'const AuthState.error('LINE login failed')'
                        Node: const_builtin = 'const'
                        Node: type_identifier = 'AuthState'
                        Node: . = '.'
                        Node: identifier = 'error'
                        Node: arguments = '('LINE login failed')'
                          Node: ( = '('
                          Node: argument = ''LINE login failed''
                            Node: string_literal = ''LINE login failed''
                              Node: ' = '''
                              Node: ' = '''
                          Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// ログアウト'
        Node: /// = '///'
      Node: method_signature = 'Future<void> signOut()'
        Node: function_signature = 'Future<void> signOut()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'signOut'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: try_statement = 'try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    }'
              Node: { = '{'
              Node: expression_statement = 'await firebase_auth.FirebaseAuth.instance.signOut();'
                Node: unary_expression = 'await firebase_auth.FirebaseAuth.instance.signOut()'
                  Node: await_expression = 'await firebase_auth.FirebaseAuth.instance.signOut()'
                    Node: await = 'await'
                    Node: identifier = 'firebase_auth'
                    Node: selector = '.FirebaseAuth'
                      Node: unconditional_assignable_selector = '.FirebaseAuth'
                        Node: . = '.'
                        Node: identifier = 'FirebaseAuth'
                    Node: selector = '.instance'
                      Node: unconditional_assignable_selector = '.instance'
                        Node: . = '.'
                        Node: identifier = 'instance'
                    Node: selector = '.signOut'
                      Node: unconditional_assignable_selector = '.signOut'
                        Node: . = '.'
                        Node: identifier = 'signOut'
                    Node: selector = '()'
                      Node: argument_part = '()'
                        Node: arguments = '()'
                          Node: ( = '('
                          Node: ) = ')'
                Node: ; = ';'
              Node: expression_statement = 'state = const AuthState.unauthenticated();'
                Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: const_object_expression = 'const AuthState.unauthenticated()'
                    Node: const_builtin = 'const'
                    Node: type_identifier = 'AuthState'
                    Node: . = '.'
                    Node: identifier = 'unauthenticated'
                    Node: arguments = '()'
                      Node: ( = '('
                      Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// 現在のユーザーを取得'
        Node: /// = '///'
      Node: method_signature = 'Future<void> getCurrentUser()'
        Node: function_signature = 'Future<void> getCurrentUser()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'getCurrentUser'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: expression_statement = 'state = const AuthState.loading();'
            Node: assignment_expression = 'state = const AuthState.loading()'
              Node: assignable_expression = 'state'
                Node: identifier = 'state'
              Node: = = '='
              Node: const_object_expression = 'const AuthState.loading()'
                Node: const_builtin = 'const'
                Node: type_identifier = 'AuthState'
                Node: . = '.'
                Node: identifier = 'loading'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: ; = ';'
          Node: try_statement = 'try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    }'
              Node: { = '{'
              Node: local_variable_declaration = 'final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;'
                Node: initialized_variable_definition = 'final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser'
                  Node: final_builtin = 'final'
                    Node: final = 'final'
                  Node: identifier = 'firebaseUser'
                  Node: = = '='
                  Node: identifier = 'firebase_auth'
                  Node: selector = '.FirebaseAuth'
                    Node: unconditional_assignable_selector = '.FirebaseAuth'
                      Node: . = '.'
                      Node: identifier = 'FirebaseAuth'
                  Node: selector = '.instance'
                    Node: unconditional_assignable_selector = '.instance'
                      Node: . = '.'
                      Node: identifier = 'instance'
                  Node: selector = '.currentUser'
                    Node: unconditional_assignable_selector = '.currentUser'
                      Node: . = '.'
                      Node: identifier = 'currentUser'
                Node: ; = ';'
              Node: if_statement = 'if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }'
                Node: if = 'if'
                Node: ( = '('
                Node: equality_expression = 'firebaseUser != null'
                  Node: identifier = 'firebaseUser'
                  Node: equality_operator = '!='
                  Node: null_literal = 'null'
                    Node: null = 'null'
                Node: ) = ')'
                Node: block = '{
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      }'
                  Node: { = '{'
                  Node: comment = '// Firestoreからユーザー情報を取得'
                    Node: // = '//'
                  Node: comment = '// TODO: FirestoreServiceを使用してユーザー情報を取得'
                    Node: // = '//'
                  Node: local_variable_declaration = 'final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );'
                    Node: initialized_variable_definition = 'final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                      Node: final_builtin = 'final'
                        Node: final = 'final'
                      Node: identifier = 'user'
                      Node: = = '='
                      Node: identifier = 'AppUser'
                      Node: selector = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                        Node: argument_part = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                          Node: arguments = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                            Node: ( = '('
                            Node: named_argument = 'id: firebaseUser.uid'
                              Node: label = 'id:'
                                Node: identifier = 'id'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.uid'
                                Node: unconditional_assignable_selector = '.uid'
                                  Node: . = '.'
                                  Node: identifier = 'uid'
                            Node: , = ','
                            Node: named_argument = 'displayName: firebaseUser.displayName ?? 'Unknown User''
                              Node: label = 'displayName:'
                                Node: identifier = 'displayName'
                                Node: : = ':'
                              Node: if_null_expression = 'firebaseUser.displayName ?? 'Unknown User''
                                Node: identifier = 'firebaseUser'
                                Node: selector = '.displayName'
                                  Node: unconditional_assignable_selector = '.displayName'
                                    Node: . = '.'
                                    Node: identifier = 'displayName'
                                Node: ?? = '??'
                                Node: string_literal = ''Unknown User''
                                  Node: ' = '''
                                  Node: ' = '''
                            Node: , = ','
                            Node: named_argument = 'email: firebaseUser.email'
                              Node: label = 'email:'
                                Node: identifier = 'email'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.email'
                                Node: unconditional_assignable_selector = '.email'
                                  Node: . = '.'
                                  Node: identifier = 'email'
                            Node: , = ','
                            Node: named_argument = 'photoURL: firebaseUser.photoURL'
                              Node: label = 'photoURL:'
                                Node: identifier = 'photoURL'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.photoURL'
                                Node: unconditional_assignable_selector = '.photoURL'
                                  Node: . = '.'
                                  Node: identifier = 'photoURL'
                            Node: , = ','
                            Node: named_argument = 'provider: 'line''
                              Node: label = 'provider:'
                                Node: identifier = 'provider'
                                Node: : = ':'
                              Node: string_literal = ''line''
                                Node: ' = '''
                                Node: ' = '''
                            Node: , = ','
                            Node: ) = ')'
                    Node: ; = ';'
                  Node: expression_statement = 'state = AuthState.authenticated(user);'
                    Node: assignment_expression = 'state = AuthState.authenticated(user)'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: identifier = 'AuthState'
                      Node: selector = '.authenticated'
                        Node: unconditional_assignable_selector = '.authenticated'
                          Node: . = '.'
                          Node: identifier = 'authenticated'
                      Node: selector = '(user)'
                        Node: argument_part = '(user)'
                          Node: arguments = '(user)'
                            Node: ( = '('
                            Node: argument = 'user'
                              Node: identifier = 'user'
                            Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
                Node: else = 'else'
                Node: block = '{
        state = const AuthState.unauthenticated();
      }'
                  Node: { = '{'
                  Node: expression_statement = 'state = const AuthState.unauthenticated();'
                    Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: const_object_expression = 'const AuthState.unauthenticated()'
                        Node: const_builtin = 'const'
                        Node: type_identifier = 'AuthState'
                        Node: . = '.'
                        Node: identifier = 'unauthenticated'
                        Node: arguments = '()'
                          Node: ( = '('
                          Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// 認証状態の監視'
        Node: /// = '///'
      Node: method_signature = 'void listenToAuthChanges()'
        Node: function_signature = 'void listenToAuthChanges()'
          Node: void_type = 'void'
          Node: identifier = 'listenToAuthChanges'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = '{
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }'
        Node: block = '{
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }'
          Node: { = '{'
          Node: expression_statement = 'firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });'
            Node: identifier = 'firebase_auth'
            Node: selector = '.FirebaseAuth'
              Node: unconditional_assignable_selector = '.FirebaseAuth'
                Node: . = '.'
                Node: identifier = 'FirebaseAuth'
            Node: selector = '.instance'
              Node: unconditional_assignable_selector = '.instance'
                Node: . = '.'
                Node: identifier = 'instance'
            Node: selector = '.authStateChanges'
              Node: unconditional_assignable_selector = '.authStateChanges'
                Node: . = '.'
                Node: identifier = 'authStateChanges'
            Node: selector = '()'
              Node: argument_part = '()'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: selector = '.listen'
              Node: unconditional_assignable_selector = '.listen'
                Node: . = '.'
                Node: identifier = 'listen'
            Node: selector = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
              Node: argument_part = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
                Node: arguments = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
                  Node: ( = '('
                  Node: argument = '(firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                    Node: function_expression = '(firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                      Node: formal_parameter_list = '(firebaseUser)'
                        Node: ( = '('
                        Node: formal_parameter = 'firebaseUser'
                          Node: identifier = 'firebaseUser'
                        Node: ) = ')'
                      Node: function_expression_body = '{
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                        Node: block = '{
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                          Node: { = '{'
                          Node: if_statement = 'if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }'
                            Node: if = 'if'
                            Node: ( = '('
                            Node: equality_expression = 'firebaseUser != null'
                              Node: identifier = 'firebaseUser'
                              Node: equality_operator = '!='
                              Node: null_literal = 'null'
                                Node: null = 'null'
                            Node: ) = ')'
                            Node: block = '{
        // ユーザーがログインしている場合
        getCurrentUser();
      }'
                              Node: { = '{'
                              Node: comment = '// ユーザーがログインしている場合'
                                Node: // = '//'
                              Node: expression_statement = 'getCurrentUser();'
                                Node: identifier = 'getCurrentUser'
                                Node: selector = '()'
                                  Node: argument_part = '()'
                                    Node: arguments = '()'
                                      Node: ( = '('
                                      Node: ) = ')'
                                Node: ; = ';'
                              Node: } = '}'
                            Node: else = 'else'
                            Node: block = '{
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }'
                              Node: { = '{'
                              Node: comment = '// ユーザーがログアウトしている場合'
                                Node: // = '//'
                              Node: expression_statement = 'state = const AuthState.unauthenticated();'
                                Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                                  Node: assignable_expression = 'state'
                                    Node: identifier = 'state'
                                  Node: = = '='
                                  Node: const_object_expression = 'const AuthState.unauthenticated()'
                                    Node: const_builtin = 'const'
                                    Node: type_identifier = 'AuthState'
                                    Node: . = '.'
                                    Node: identifier = 'unauthenticated'
                                    Node: arguments = '()'
                                      Node: ( = '('
                                      Node: ) = ')'
                                Node: ; = ';'
                              Node: } = '}'
                          Node: } = '}'
                  Node: ) = ')'
            Node: ; = ';'
          Node: } = '}'
      Node: } = '}'
  Node: documentation_comment = '/// 認証状態プロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'AuthState authState(Ref ref)'
    Node: type_identifier = 'AuthState'
    Node: identifier = 'authState'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}'
    Node: block = '{
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}'
      Node: { = '{'
      Node: comment = '// 初回起動時に認証状態を監視開始'
        Node: // = '//'
      Node: expression_statement = 'ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });'
        Node: identifier = 'ref'
        Node: selector = '.listen'
          Node: unconditional_assignable_selector = '.listen'
            Node: . = '.'
            Node: identifier = 'listen'
        Node: selector = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
          Node: argument_part = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
            Node: arguments = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
              Node: ( = '('
              Node: argument = 'authNotifierProvider'
                Node: identifier = 'authNotifierProvider'
              Node: , = ','
              Node: argument = '(previous, next) {
    // 認証状態が変更された時の処理
  }'
                Node: function_expression = '(previous, next) {
    // 認証状態が変更された時の処理
  }'
                  Node: formal_parameter_list = '(previous, next)'
                    Node: ( = '('
                    Node: formal_parameter = 'previous'
                      Node: identifier = 'previous'
                    Node: , = ','
                    Node: formal_parameter = 'next'
                      Node: identifier = 'next'
                    Node: ) = ')'
                  Node: function_expression_body = '{
    // 認証状態が変更された時の処理
  }'
                    Node: block = '{
    // 認証状態が変更された時の処理
  }'
                      Node: { = '{'
                      Node: comment = '// 認証状態が変更された時の処理'
                        Node: // = '//'
                      Node: } = '}'
              Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return ref.watch(authNotifierProvider);'
        Node: return = 'return'
        Node: identifier = 'ref'
        Node: selector = '.watch'
          Node: unconditional_assignable_selector = '.watch'
            Node: . = '.'
            Node: identifier = 'watch'
        Node: selector = '(authNotifierProvider)'
          Node: argument_part = '(authNotifierProvider)'
            Node: arguments = '(authNotifierProvider)'
              Node: ( = '('
              Node: argument = 'authNotifierProvider'
                Node: identifier = 'authNotifierProvider'
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
  Node: documentation_comment = '/// 現在のユーザープロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'AppUser? currentUser(Ref ref)'
    Node: type_identifier = 'AppUser'
    Node: nullable_type = '?'
      Node: ? = '?'
    Node: identifier = 'currentUser'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}'
    Node: block = '{
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}'
      Node: { = '{'
      Node: local_variable_declaration = 'final authState = ref.watch(authStateProvider);'
        Node: initialized_variable_definition = 'final authState = ref.watch(authStateProvider)'
          Node: final_builtin = 'final'
            Node: final = 'final'
          Node: identifier = 'authState'
          Node: = = '='
          Node: identifier = 'ref'
          Node: selector = '.watch'
            Node: unconditional_assignable_selector = '.watch'
              Node: . = '.'
              Node: identifier = 'watch'
          Node: selector = '(authStateProvider)'
            Node: argument_part = '(authStateProvider)'
              Node: arguments = '(authStateProvider)'
                Node: ( = '('
                Node: argument = 'authStateProvider'
                  Node: identifier = 'authStateProvider'
                Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );'
        Node: return = 'return'
        Node: identifier = 'authState'
        Node: selector = '.when'
          Node: unconditional_assignable_selector = '.when'
            Node: . = '.'
            Node: identifier = 'when'
        Node: selector = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
          Node: argument_part = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
            Node: arguments = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
              Node: ( = '('
              Node: named_argument = 'authenticated: (user) => user'
                Node: label = 'authenticated:'
                  Node: identifier = 'authenticated'
                  Node: : = ':'
                Node: function_expression = '(user) => user'
                  Node: formal_parameter_list = '(user)'
                    Node: ( = '('
                    Node: formal_parameter = 'user'
                      Node: identifier = 'user'
                    Node: ) = ')'
                  Node: function_expression_body = '=> user'
                    Node: => = '=>'
                    Node: identifier = 'user'
              Node: , = ','
              Node: named_argument = 'initial: () => null'
                Node: label = 'initial:'
                  Node: identifier = 'initial'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'loading: () => null'
                Node: label = 'loading:'
                  Node: identifier = 'loading'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'unauthenticated: () => null'
                Node: label = 'unauthenticated:'
                  Node: identifier = 'unauthenticated'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'error: (_) => null'
                Node: label = 'error:'
                  Node: identifier = 'error'
                  Node: : = ':'
                Node: function_expression = '(_) => null'
                  Node: formal_parameter_list = '(_)'
                    Node: ( = '('
                    Node: formal_parameter = '_'
                      Node: identifier = '_'
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
  Node: documentation_comment = '/// 認証済みかどうかのプロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'bool isAuthenticated(Ref ref)'
    Node: type_identifier = 'bool'
    Node: identifier = 'isAuthenticated'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}'
    Node: block = '{
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}'
      Node: { = '{'
      Node: local_variable_declaration = 'final authState = ref.watch(authStateProvider);'
        Node: initialized_variable_definition = 'final authState = ref.watch(authStateProvider)'
          Node: final_builtin = 'final'
            Node: final = 'final'
          Node: identifier = 'authState'
          Node: = = '='
          Node: identifier = 'ref'
          Node: selector = '.watch'
            Node: unconditional_assignable_selector = '.watch'
              Node: . = '.'
              Node: identifier = 'watch'
          Node: selector = '(authStateProvider)'
            Node: argument_part = '(authStateProvider)'
              Node: arguments = '(authStateProvider)'
                Node: ( = '('
                Node: argument = 'authStateProvider'
                  Node: identifier = 'authStateProvider'
                Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );'
        Node: return = 'return'
        Node: identifier = 'authState'
        Node: selector = '.maybeWhen'
          Node: unconditional_assignable_selector = '.maybeWhen'
            Node: . = '.'
            Node: identifier = 'maybeWhen'
        Node: selector = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
          Node: argument_part = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
            Node: arguments = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
              Node: ( = '('
              Node: named_argument = 'authenticated: (_) => true'
                Node: label = 'authenticated:'
                  Node: identifier = 'authenticated'
                  Node: : = ':'
                Node: function_expression = '(_) => true'
                  Node: formal_parameter_list = '(_)'
                    Node: ( = '('
                    Node: formal_parameter = '_'
                      Node: identifier = '_'
                    Node: ) = ')'
                  Node: function_expression_body = '=> true'
                    Node: => = '=>'
                    Node: true = 'true'
                      Node: true = 'true'
              Node: , = ','
              Node: named_argument = 'orElse: () => false'
                Node: label = 'orElse:'
                  Node: identifier = 'orElse'
                  Node: : = ':'
                Node: function_expression = '() => false'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> false'
                    Node: => = '=>'
                    Node: false = 'false'
                      Node: false = 'false'
              Node: , = ','
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
=== End AST ===

=== Complete AST for test_flutter_app/aminomi/lib/providers/auth_provider.dart ===
Node: program = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;
import 'package:riverpod/riverpod.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import '../models/user.dart';
import '../services/line_auth_service.dart';

part 'auth_provider.g.dart';

@riverpod
class AuthNotifier extends _$AuthNotifier {
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}

/// 認証状態プロバイダー
@riverpod
AuthState authState(Ref ref) {
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}

/// 現在のユーザープロバイダー
@riverpod
AppUser? currentUser(Ref ref) {
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}

/// 認証済みかどうかのプロバイダー
@riverpod
bool isAuthenticated(Ref ref) {
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}
'
  Node: import_or_export = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
    Node: library_import = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
      Node: import_specification = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
        Node: import = 'import'
        Node: configurable_uri = ''package:firebase_auth/firebase_auth.dart''
          Node: uri = ''package:firebase_auth/firebase_auth.dart''
            Node: string_literal = ''package:firebase_auth/firebase_auth.dart''
              Node: ' = '''
              Node: ' = '''
        Node: as = 'as'
        Node: identifier = 'firebase_auth'
        Node: ; = ';'
  Node: import_or_export = 'import 'package:riverpod/riverpod.dart';'
    Node: library_import = 'import 'package:riverpod/riverpod.dart';'
      Node: import_specification = 'import 'package:riverpod/riverpod.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:riverpod/riverpod.dart''
          Node: uri = ''package:riverpod/riverpod.dart''
            Node: string_literal = ''package:riverpod/riverpod.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
    Node: library_import = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
      Node: import_specification = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:riverpod_annotation/riverpod_annotation.dart''
          Node: uri = ''package:riverpod_annotation/riverpod_annotation.dart''
            Node: string_literal = ''package:riverpod_annotation/riverpod_annotation.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import '../models/user.dart';'
    Node: library_import = 'import '../models/user.dart';'
      Node: import_specification = 'import '../models/user.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''../models/user.dart''
          Node: uri = ''../models/user.dart''
            Node: string_literal = ''../models/user.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import '../services/line_auth_service.dart';'
    Node: library_import = 'import '../services/line_auth_service.dart';'
      Node: import_specification = 'import '../services/line_auth_service.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''../services/line_auth_service.dart''
          Node: uri = ''../services/line_auth_service.dart''
            Node: string_literal = ''../services/line_auth_service.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: part_directive = 'part 'auth_provider.g.dart';'
    Node: part = 'part'
    Node: uri = ''auth_provider.g.dart''
      Node: string_literal = ''auth_provider.g.dart''
        Node: ' = '''
        Node: ' = '''
    Node: ; = ';'
  Node: class_definition = '@riverpod
class AuthNotifier extends _$AuthNotifier {
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}'
    Node: annotation = '@riverpod'
      Node: @ = '@'
      Node: identifier = 'riverpod'
    Node: class = 'class'
    Node: identifier = 'AuthNotifier'
    Node: superclass = 'extends _$AuthNotifier'
      Node: extends = 'extends'
      Node: type_identifier = '_$AuthNotifier'
    Node: class_body = '{
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}'
      Node: { = '{'
      Node: annotation = '@override'
        Node: @ = '@'
        Node: identifier = 'override'
      Node: method_signature = 'AuthState build()'
        Node: function_signature = 'AuthState build()'
          Node: type_identifier = 'AuthState'
          Node: identifier = 'build'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = '{
    return const AuthState.initial();
  }'
        Node: block = '{
    return const AuthState.initial();
  }'
          Node: { = '{'
          Node: return_statement = 'return const AuthState.initial();'
            Node: return = 'return'
            Node: const_object_expression = 'const AuthState.initial()'
              Node: const_builtin = 'const'
              Node: type_identifier = 'AuthState'
              Node: . = '.'
              Node: identifier = 'initial'
              Node: arguments = '()'
                Node: ( = '('
                Node: ) = ')'
            Node: ; = ';'
          Node: } = '}'
      Node: documentation_comment = '/// LINEログイン'
        Node: /// = '///'
      Node: method_signature = 'Future<void> signInWithLine()'
        Node: function_signature = 'Future<void> signInWithLine()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'signInWithLine'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: expression_statement = 'state = const AuthState.loading();'
            Node: assignment_expression = 'state = const AuthState.loading()'
              Node: assignable_expression = 'state'
                Node: identifier = 'state'
              Node: = = '='
              Node: const_object_expression = 'const AuthState.loading()'
                Node: const_builtin = 'const'
                Node: type_identifier = 'AuthState'
                Node: . = '.'
                Node: identifier = 'loading'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: ; = ';'
          Node: try_statement = 'try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    }'
              Node: { = '{'
              Node: local_variable_declaration = 'final result = await LineAuthService.login();'
                Node: initialized_variable_definition = 'final result = await LineAuthService.login()'
                  Node: final_builtin = 'final'
                    Node: final = 'final'
                  Node: identifier = 'result'
                  Node: = = '='
                  Node: unary_expression = 'await LineAuthService.login()'
                    Node: await_expression = 'await LineAuthService.login()'
                      Node: await = 'await'
                      Node: identifier = 'LineAuthService'
                      Node: selector = '.login'
                        Node: unconditional_assignable_selector = '.login'
                          Node: . = '.'
                          Node: identifier = 'login'
                      Node: selector = '()'
                        Node: argument_part = '()'
                          Node: arguments = '()'
                            Node: ( = '('
                            Node: ) = ')'
                Node: ; = ';'
              Node: if_statement = 'if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }'
                Node: if = 'if'
                Node: ( = '('
                Node: equality_expression = 'result != null'
                  Node: identifier = 'result'
                  Node: equality_operator = '!='
                  Node: null_literal = 'null'
                    Node: null = 'null'
                Node: ) = ')'
                Node: block = '{
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      }'
                  Node: { = '{'
                  Node: comment = '// Firebaseカスタムトークンでサインイン'
                    Node: // = '//'
                  Node: local_variable_declaration = 'final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );'
                    Node: initialized_variable_definition = 'final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                      Node: final_builtin = 'final'
                        Node: final = 'final'
                      Node: identifier = 'userCredential'
                      Node: = = '='
                      Node: unary_expression = 'await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                        Node: await_expression = 'await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                          Node: await = 'await'
                          Node: identifier = 'firebase_auth'
                          Node: selector = '.FirebaseAuth'
                            Node: unconditional_assignable_selector = '.FirebaseAuth'
                              Node: . = '.'
                              Node: identifier = 'FirebaseAuth'
                          Node: selector = '.instance'
                            Node: unconditional_assignable_selector = '.instance'
                              Node: . = '.'
                              Node: identifier = 'instance'
                          Node: selector = '.signInWithCustomToken'
                            Node: unconditional_assignable_selector = '.signInWithCustomToken'
                              Node: . = '.'
                              Node: identifier = 'signInWithCustomToken'
                          Node: selector = '(
          result.accessToken,
        )'
                            Node: argument_part = '(
          result.accessToken,
        )'
                              Node: arguments = '(
          result.accessToken,
        )'
                                Node: ( = '('
                                Node: argument = 'result.accessToken'
                                  Node: identifier = 'result'
                                  Node: selector = '.accessToken'
                                    Node: unconditional_assignable_selector = '.accessToken'
                                      Node: . = '.'
                                      Node: identifier = 'accessToken'
                                Node: , = ','
                                Node: ) = ')'
                    Node: ; = ';'
                  Node: if_statement = 'if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }'
                    Node: if = 'if'
                    Node: ( = '('
                    Node: equality_expression = 'userCredential.user != null'
                      Node: identifier = 'userCredential'
                      Node: selector = '.user'
                        Node: unconditional_assignable_selector = '.user'
                          Node: . = '.'
                          Node: identifier = 'user'
                      Node: equality_operator = '!='
                      Node: null_literal = 'null'
                        Node: null = 'null'
                    Node: ) = ')'
                    Node: block = '{
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        }'
                      Node: { = '{'
                      Node: local_variable_declaration = 'final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );'
                        Node: initialized_variable_definition = 'final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                          Node: final_builtin = 'final'
                            Node: final = 'final'
                          Node: identifier = 'user'
                          Node: = = '='
                          Node: identifier = 'AppUser'
                          Node: selector = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                            Node: argument_part = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                              Node: arguments = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                                Node: ( = '('
                                Node: named_argument = 'id: userCredential.user!.uid'
                                  Node: label = 'id:'
                                    Node: identifier = 'id'
                                    Node: : = ':'
                                  Node: identifier = 'userCredential'
                                  Node: selector = '.user'
                                    Node: unconditional_assignable_selector = '.user'
                                      Node: . = '.'
                                      Node: identifier = 'user'
                                  Node: selector = '!'
                                    Node: ! = '!'
                                  Node: selector = '.uid'
                                    Node: unconditional_assignable_selector = '.uid'
                                      Node: . = '.'
                                      Node: identifier = 'uid'
                                Node: , = ','
                                Node: named_argument = 'displayName: result.profile.displayName'
                                  Node: label = 'displayName:'
                                    Node: identifier = 'displayName'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.displayName'
                                    Node: unconditional_assignable_selector = '.displayName'
                                      Node: . = '.'
                                      Node: identifier = 'displayName'
                                Node: , = ','
                                Node: named_argument = 'photoURL: result.profile.pictureUrl'
                                  Node: label = 'photoURL:'
                                    Node: identifier = 'photoURL'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.pictureUrl'
                                    Node: unconditional_assignable_selector = '.pictureUrl'
                                      Node: . = '.'
                                      Node: identifier = 'pictureUrl'
                                Node: , = ','
                                Node: named_argument = 'statusMessage: result.profile.statusMessage'
                                  Node: label = 'statusMessage:'
                                    Node: identifier = 'statusMessage'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.statusMessage'
                                    Node: unconditional_assignable_selector = '.statusMessage'
                                      Node: . = '.'
                                      Node: identifier = 'statusMessage'
                                Node: , = ','
                                Node: named_argument = 'provider: 'line''
                                  Node: label = 'provider:'
                                    Node: identifier = 'provider'
                                    Node: : = ':'
                                  Node: string_literal = ''line''
                                    Node: ' = '''
                                    Node: ' = '''
                                Node: , = ','
                                Node: named_argument = 'createdAt: DateTime.now()'
                                  Node: label = 'createdAt:'
                                    Node: identifier = 'createdAt'
                                    Node: : = ':'
                                  Node: identifier = 'DateTime'
                                  Node: selector = '.now'
                                    Node: unconditional_assignable_selector = '.now'
                                      Node: . = '.'
                                      Node: identifier = 'now'
                                  Node: selector = '()'
                                    Node: argument_part = '()'
                                      Node: arguments = '()'
                                        Node: ( = '('
                                        Node: ) = ')'
                                Node: , = ','
                                Node: ) = ')'
                        Node: ; = ';'
                      Node: expression_statement = 'state = AuthState.authenticated(user);'
                        Node: assignment_expression = 'state = AuthState.authenticated(user)'
                          Node: assignable_expression = 'state'
                            Node: identifier = 'state'
                          Node: = = '='
                          Node: identifier = 'AuthState'
                          Node: selector = '.authenticated'
                            Node: unconditional_assignable_selector = '.authenticated'
                              Node: . = '.'
                              Node: identifier = 'authenticated'
                          Node: selector = '(user)'
                            Node: argument_part = '(user)'
                              Node: arguments = '(user)'
                                Node: ( = '('
                                Node: argument = 'user'
                                  Node: identifier = 'user'
                                Node: ) = ')'
                        Node: ; = ';'
                      Node: } = '}'
                    Node: else = 'else'
                    Node: block = '{
          state = const AuthState.error('Failed to sign in with custom token');
        }'
                      Node: { = '{'
                      Node: expression_statement = 'state = const AuthState.error('Failed to sign in with custom token');'
                        Node: assignment_expression = 'state = const AuthState.error('Failed to sign in with custom token')'
                          Node: assignable_expression = 'state'
                            Node: identifier = 'state'
                          Node: = = '='
                          Node: const_object_expression = 'const AuthState.error('Failed to sign in with custom token')'
                            Node: const_builtin = 'const'
                            Node: type_identifier = 'AuthState'
                            Node: . = '.'
                            Node: identifier = 'error'
                            Node: arguments = '('Failed to sign in with custom token')'
                              Node: ( = '('
                              Node: argument = ''Failed to sign in with custom token''
                                Node: string_literal = ''Failed to sign in with custom token''
                                  Node: ' = '''
                                  Node: ' = '''
                              Node: ) = ')'
                        Node: ; = ';'
                      Node: } = '}'
                  Node: } = '}'
                Node: else = 'else'
                Node: block = '{
        state = const AuthState.error('LINE login failed');
      }'
                  Node: { = '{'
                  Node: expression_statement = 'state = const AuthState.error('LINE login failed');'
                    Node: assignment_expression = 'state = const AuthState.error('LINE login failed')'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: const_object_expression = 'const AuthState.error('LINE login failed')'
                        Node: const_builtin = 'const'
                        Node: type_identifier = 'AuthState'
                        Node: . = '.'
                        Node: identifier = 'error'
                        Node: arguments = '('LINE login failed')'
                          Node: ( = '('
                          Node: argument = ''LINE login failed''
                            Node: string_literal = ''LINE login failed''
                              Node: ' = '''
                              Node: ' = '''
                          Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// ログアウト'
        Node: /// = '///'
      Node: method_signature = 'Future<void> signOut()'
        Node: function_signature = 'Future<void> signOut()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'signOut'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: try_statement = 'try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    }'
              Node: { = '{'
              Node: expression_statement = 'await firebase_auth.FirebaseAuth.instance.signOut();'
                Node: unary_expression = 'await firebase_auth.FirebaseAuth.instance.signOut()'
                  Node: await_expression = 'await firebase_auth.FirebaseAuth.instance.signOut()'
                    Node: await = 'await'
                    Node: identifier = 'firebase_auth'
                    Node: selector = '.FirebaseAuth'
                      Node: unconditional_assignable_selector = '.FirebaseAuth'
                        Node: . = '.'
                        Node: identifier = 'FirebaseAuth'
                    Node: selector = '.instance'
                      Node: unconditional_assignable_selector = '.instance'
                        Node: . = '.'
                        Node: identifier = 'instance'
                    Node: selector = '.signOut'
                      Node: unconditional_assignable_selector = '.signOut'
                        Node: . = '.'
                        Node: identifier = 'signOut'
                    Node: selector = '()'
                      Node: argument_part = '()'
                        Node: arguments = '()'
                          Node: ( = '('
                          Node: ) = ')'
                Node: ; = ';'
              Node: expression_statement = 'state = const AuthState.unauthenticated();'
                Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: const_object_expression = 'const AuthState.unauthenticated()'
                    Node: const_builtin = 'const'
                    Node: type_identifier = 'AuthState'
                    Node: . = '.'
                    Node: identifier = 'unauthenticated'
                    Node: arguments = '()'
                      Node: ( = '('
                      Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// 現在のユーザーを取得'
        Node: /// = '///'
      Node: method_signature = 'Future<void> getCurrentUser()'
        Node: function_signature = 'Future<void> getCurrentUser()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'getCurrentUser'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: expression_statement = 'state = const AuthState.loading();'
            Node: assignment_expression = 'state = const AuthState.loading()'
              Node: assignable_expression = 'state'
                Node: identifier = 'state'
              Node: = = '='
              Node: const_object_expression = 'const AuthState.loading()'
                Node: const_builtin = 'const'
                Node: type_identifier = 'AuthState'
                Node: . = '.'
                Node: identifier = 'loading'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: ; = ';'
          Node: try_statement = 'try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    }'
              Node: { = '{'
              Node: local_variable_declaration = 'final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;'
                Node: initialized_variable_definition = 'final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser'
                  Node: final_builtin = 'final'
                    Node: final = 'final'
                  Node: identifier = 'firebaseUser'
                  Node: = = '='
                  Node: identifier = 'firebase_auth'
                  Node: selector = '.FirebaseAuth'
                    Node: unconditional_assignable_selector = '.FirebaseAuth'
                      Node: . = '.'
                      Node: identifier = 'FirebaseAuth'
                  Node: selector = '.instance'
                    Node: unconditional_assignable_selector = '.instance'
                      Node: . = '.'
                      Node: identifier = 'instance'
                  Node: selector = '.currentUser'
                    Node: unconditional_assignable_selector = '.currentUser'
                      Node: . = '.'
                      Node: identifier = 'currentUser'
                Node: ; = ';'
              Node: if_statement = 'if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }'
                Node: if = 'if'
                Node: ( = '('
                Node: equality_expression = 'firebaseUser != null'
                  Node: identifier = 'firebaseUser'
                  Node: equality_operator = '!='
                  Node: null_literal = 'null'
                    Node: null = 'null'
                Node: ) = ')'
                Node: block = '{
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      }'
                  Node: { = '{'
                  Node: comment = '// Firestoreからユーザー情報を取得'
                    Node: // = '//'
                  Node: comment = '// TODO: FirestoreServiceを使用してユーザー情報を取得'
                    Node: // = '//'
                  Node: local_variable_declaration = 'final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );'
                    Node: initialized_variable_definition = 'final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                      Node: final_builtin = 'final'
                        Node: final = 'final'
                      Node: identifier = 'user'
                      Node: = = '='
                      Node: identifier = 'AppUser'
                      Node: selector = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                        Node: argument_part = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                          Node: arguments = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                            Node: ( = '('
                            Node: named_argument = 'id: firebaseUser.uid'
                              Node: label = 'id:'
                                Node: identifier = 'id'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.uid'
                                Node: unconditional_assignable_selector = '.uid'
                                  Node: . = '.'
                                  Node: identifier = 'uid'
                            Node: , = ','
                            Node: named_argument = 'displayName: firebaseUser.displayName ?? 'Unknown User''
                              Node: label = 'displayName:'
                                Node: identifier = 'displayName'
                                Node: : = ':'
                              Node: if_null_expression = 'firebaseUser.displayName ?? 'Unknown User''
                                Node: identifier = 'firebaseUser'
                                Node: selector = '.displayName'
                                  Node: unconditional_assignable_selector = '.displayName'
                                    Node: . = '.'
                                    Node: identifier = 'displayName'
                                Node: ?? = '??'
                                Node: string_literal = ''Unknown User''
                                  Node: ' = '''
                                  Node: ' = '''
                            Node: , = ','
                            Node: named_argument = 'email: firebaseUser.email'
                              Node: label = 'email:'
                                Node: identifier = 'email'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.email'
                                Node: unconditional_assignable_selector = '.email'
                                  Node: . = '.'
                                  Node: identifier = 'email'
                            Node: , = ','
                            Node: named_argument = 'photoURL: firebaseUser.photoURL'
                              Node: label = 'photoURL:'
                                Node: identifier = 'photoURL'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.photoURL'
                                Node: unconditional_assignable_selector = '.photoURL'
                                  Node: . = '.'
                                  Node: identifier = 'photoURL'
                            Node: , = ','
                            Node: named_argument = 'provider: 'line''
                              Node: label = 'provider:'
                                Node: identifier = 'provider'
                                Node: : = ':'
                              Node: string_literal = ''line''
                                Node: ' = '''
                                Node: ' = '''
                            Node: , = ','
                            Node: ) = ')'
                    Node: ; = ';'
                  Node: expression_statement = 'state = AuthState.authenticated(user);'
                    Node: assignment_expression = 'state = AuthState.authenticated(user)'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: identifier = 'AuthState'
                      Node: selector = '.authenticated'
                        Node: unconditional_assignable_selector = '.authenticated'
                          Node: . = '.'
                          Node: identifier = 'authenticated'
                      Node: selector = '(user)'
                        Node: argument_part = '(user)'
                          Node: arguments = '(user)'
                            Node: ( = '('
                            Node: argument = 'user'
                              Node: identifier = 'user'
                            Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
                Node: else = 'else'
                Node: block = '{
        state = const AuthState.unauthenticated();
      }'
                  Node: { = '{'
                  Node: expression_statement = 'state = const AuthState.unauthenticated();'
                    Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: const_object_expression = 'const AuthState.unauthenticated()'
                        Node: const_builtin = 'const'
                        Node: type_identifier = 'AuthState'
                        Node: . = '.'
                        Node: identifier = 'unauthenticated'
                        Node: arguments = '()'
                          Node: ( = '('
                          Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// 認証状態の監視'
        Node: /// = '///'
      Node: method_signature = 'void listenToAuthChanges()'
        Node: function_signature = 'void listenToAuthChanges()'
          Node: void_type = 'void'
          Node: identifier = 'listenToAuthChanges'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = '{
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }'
        Node: block = '{
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }'
          Node: { = '{'
          Node: expression_statement = 'firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });'
            Node: identifier = 'firebase_auth'
            Node: selector = '.FirebaseAuth'
              Node: unconditional_assignable_selector = '.FirebaseAuth'
                Node: . = '.'
                Node: identifier = 'FirebaseAuth'
            Node: selector = '.instance'
              Node: unconditional_assignable_selector = '.instance'
                Node: . = '.'
                Node: identifier = 'instance'
            Node: selector = '.authStateChanges'
              Node: unconditional_assignable_selector = '.authStateChanges'
                Node: . = '.'
                Node: identifier = 'authStateChanges'
            Node: selector = '()'
              Node: argument_part = '()'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: selector = '.listen'
              Node: unconditional_assignable_selector = '.listen'
                Node: . = '.'
                Node: identifier = 'listen'
            Node: selector = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
              Node: argument_part = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
                Node: arguments = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
                  Node: ( = '('
                  Node: argument = '(firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                    Node: function_expression = '(firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                      Node: formal_parameter_list = '(firebaseUser)'
                        Node: ( = '('
                        Node: formal_parameter = 'firebaseUser'
                          Node: identifier = 'firebaseUser'
                        Node: ) = ')'
                      Node: function_expression_body = '{
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                        Node: block = '{
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                          Node: { = '{'
                          Node: if_statement = 'if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }'
                            Node: if = 'if'
                            Node: ( = '('
                            Node: equality_expression = 'firebaseUser != null'
                              Node: identifier = 'firebaseUser'
                              Node: equality_operator = '!='
                              Node: null_literal = 'null'
                                Node: null = 'null'
                            Node: ) = ')'
                            Node: block = '{
        // ユーザーがログインしている場合
        getCurrentUser();
      }'
                              Node: { = '{'
                              Node: comment = '// ユーザーがログインしている場合'
                                Node: // = '//'
                              Node: expression_statement = 'getCurrentUser();'
                                Node: identifier = 'getCurrentUser'
                                Node: selector = '()'
                                  Node: argument_part = '()'
                                    Node: arguments = '()'
                                      Node: ( = '('
                                      Node: ) = ')'
                                Node: ; = ';'
                              Node: } = '}'
                            Node: else = 'else'
                            Node: block = '{
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }'
                              Node: { = '{'
                              Node: comment = '// ユーザーがログアウトしている場合'
                                Node: // = '//'
                              Node: expression_statement = 'state = const AuthState.unauthenticated();'
                                Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                                  Node: assignable_expression = 'state'
                                    Node: identifier = 'state'
                                  Node: = = '='
                                  Node: const_object_expression = 'const AuthState.unauthenticated()'
                                    Node: const_builtin = 'const'
                                    Node: type_identifier = 'AuthState'
                                    Node: . = '.'
                                    Node: identifier = 'unauthenticated'
                                    Node: arguments = '()'
                                      Node: ( = '('
                                      Node: ) = ')'
                                Node: ; = ';'
                              Node: } = '}'
                          Node: } = '}'
                  Node: ) = ')'
            Node: ; = ';'
          Node: } = '}'
      Node: } = '}'
  Node: documentation_comment = '/// 認証状態プロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'AuthState authState(Ref ref)'
    Node: type_identifier = 'AuthState'
    Node: identifier = 'authState'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}'
    Node: block = '{
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}'
      Node: { = '{'
      Node: comment = '// 初回起動時に認証状態を監視開始'
        Node: // = '//'
      Node: expression_statement = 'ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });'
        Node: identifier = 'ref'
        Node: selector = '.listen'
          Node: unconditional_assignable_selector = '.listen'
            Node: . = '.'
            Node: identifier = 'listen'
        Node: selector = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
          Node: argument_part = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
            Node: arguments = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
              Node: ( = '('
              Node: argument = 'authNotifierProvider'
                Node: identifier = 'authNotifierProvider'
              Node: , = ','
              Node: argument = '(previous, next) {
    // 認証状態が変更された時の処理
  }'
                Node: function_expression = '(previous, next) {
    // 認証状態が変更された時の処理
  }'
                  Node: formal_parameter_list = '(previous, next)'
                    Node: ( = '('
                    Node: formal_parameter = 'previous'
                      Node: identifier = 'previous'
                    Node: , = ','
                    Node: formal_parameter = 'next'
                      Node: identifier = 'next'
                    Node: ) = ')'
                  Node: function_expression_body = '{
    // 認証状態が変更された時の処理
  }'
                    Node: block = '{
    // 認証状態が変更された時の処理
  }'
                      Node: { = '{'
                      Node: comment = '// 認証状態が変更された時の処理'
                        Node: // = '//'
                      Node: } = '}'
              Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return ref.watch(authNotifierProvider);'
        Node: return = 'return'
        Node: identifier = 'ref'
        Node: selector = '.watch'
          Node: unconditional_assignable_selector = '.watch'
            Node: . = '.'
            Node: identifier = 'watch'
        Node: selector = '(authNotifierProvider)'
          Node: argument_part = '(authNotifierProvider)'
            Node: arguments = '(authNotifierProvider)'
              Node: ( = '('
              Node: argument = 'authNotifierProvider'
                Node: identifier = 'authNotifierProvider'
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
  Node: documentation_comment = '/// 現在のユーザープロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'AppUser? currentUser(Ref ref)'
    Node: type_identifier = 'AppUser'
    Node: nullable_type = '?'
      Node: ? = '?'
    Node: identifier = 'currentUser'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}'
    Node: block = '{
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}'
      Node: { = '{'
      Node: local_variable_declaration = 'final authState = ref.watch(authStateProvider);'
        Node: initialized_variable_definition = 'final authState = ref.watch(authStateProvider)'
          Node: final_builtin = 'final'
            Node: final = 'final'
          Node: identifier = 'authState'
          Node: = = '='
          Node: identifier = 'ref'
          Node: selector = '.watch'
            Node: unconditional_assignable_selector = '.watch'
              Node: . = '.'
              Node: identifier = 'watch'
          Node: selector = '(authStateProvider)'
            Node: argument_part = '(authStateProvider)'
              Node: arguments = '(authStateProvider)'
                Node: ( = '('
                Node: argument = 'authStateProvider'
                  Node: identifier = 'authStateProvider'
                Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );'
        Node: return = 'return'
        Node: identifier = 'authState'
        Node: selector = '.when'
          Node: unconditional_assignable_selector = '.when'
            Node: . = '.'
            Node: identifier = 'when'
        Node: selector = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
          Node: argument_part = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
            Node: arguments = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
              Node: ( = '('
              Node: named_argument = 'authenticated: (user) => user'
                Node: label = 'authenticated:'
                  Node: identifier = 'authenticated'
                  Node: : = ':'
                Node: function_expression = '(user) => user'
                  Node: formal_parameter_list = '(user)'
                    Node: ( = '('
                    Node: formal_parameter = 'user'
                      Node: identifier = 'user'
                    Node: ) = ')'
                  Node: function_expression_body = '=> user'
                    Node: => = '=>'
                    Node: identifier = 'user'
              Node: , = ','
              Node: named_argument = 'initial: () => null'
                Node: label = 'initial:'
                  Node: identifier = 'initial'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'loading: () => null'
                Node: label = 'loading:'
                  Node: identifier = 'loading'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'unauthenticated: () => null'
                Node: label = 'unauthenticated:'
                  Node: identifier = 'unauthenticated'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'error: (_) => null'
                Node: label = 'error:'
                  Node: identifier = 'error'
                  Node: : = ':'
                Node: function_expression = '(_) => null'
                  Node: formal_parameter_list = '(_)'
                    Node: ( = '('
                    Node: formal_parameter = '_'
                      Node: identifier = '_'
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
  Node: documentation_comment = '/// 認証済みかどうかのプロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'bool isAuthenticated(Ref ref)'
    Node: type_identifier = 'bool'
    Node: identifier = 'isAuthenticated'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}'
    Node: block = '{
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}'
      Node: { = '{'
      Node: local_variable_declaration = 'final authState = ref.watch(authStateProvider);'
        Node: initialized_variable_definition = 'final authState = ref.watch(authStateProvider)'
          Node: final_builtin = 'final'
            Node: final = 'final'
          Node: identifier = 'authState'
          Node: = = '='
          Node: identifier = 'ref'
          Node: selector = '.watch'
            Node: unconditional_assignable_selector = '.watch'
              Node: . = '.'
              Node: identifier = 'watch'
          Node: selector = '(authStateProvider)'
            Node: argument_part = '(authStateProvider)'
              Node: arguments = '(authStateProvider)'
                Node: ( = '('
                Node: argument = 'authStateProvider'
                  Node: identifier = 'authStateProvider'
                Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );'
        Node: return = 'return'
        Node: identifier = 'authState'
        Node: selector = '.maybeWhen'
          Node: unconditional_assignable_selector = '.maybeWhen'
            Node: . = '.'
            Node: identifier = 'maybeWhen'
        Node: selector = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
          Node: argument_part = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
            Node: arguments = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
              Node: ( = '('
              Node: named_argument = 'authenticated: (_) => true'
                Node: label = 'authenticated:'
                  Node: identifier = 'authenticated'
                  Node: : = ':'
                Node: function_expression = '(_) => true'
                  Node: formal_parameter_list = '(_)'
                    Node: ( = '('
                    Node: formal_parameter = '_'
                      Node: identifier = '_'
                    Node: ) = ')'
                  Node: function_expression_body = '=> true'
                    Node: => = '=>'
                    Node: true = 'true'
                      Node: true = 'true'
              Node: , = ','
              Node: named_argument = 'orElse: () => false'
                Node: label = 'orElse:'
                  Node: identifier = 'orElse'
                  Node: : = ':'
                Node: function_expression = '() => false'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> false'
                    Node: => = '=>'
                    Node: false = 'false'
                      Node: false = 'false'
              Node: , = ','
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
=== End AST ===

=== Complete AST for test_flutter_app/aminomi/lib/providers/auth_provider.dart ===
Node: program = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;
import 'package:riverpod/riverpod.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import '../models/user.dart';
import '../services/line_auth_service.dart';

part 'auth_provider.g.dart';

@riverpod
class AuthNotifier extends _$AuthNotifier {
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}

/// 認証状態プロバイダー
@riverpod
AuthState authState(Ref ref) {
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}

/// 現在のユーザープロバイダー
@riverpod
AppUser? currentUser(Ref ref) {
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}

/// 認証済みかどうかのプロバイダー
@riverpod
bool isAuthenticated(Ref ref) {
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}
'
  Node: import_or_export = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
    Node: library_import = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
      Node: import_specification = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
        Node: import = 'import'
        Node: configurable_uri = ''package:firebase_auth/firebase_auth.dart''
          Node: uri = ''package:firebase_auth/firebase_auth.dart''
            Node: string_literal = ''package:firebase_auth/firebase_auth.dart''
              Node: ' = '''
              Node: ' = '''
        Node: as = 'as'
        Node: identifier = 'firebase_auth'
        Node: ; = ';'
  Node: import_or_export = 'import 'package:riverpod/riverpod.dart';'
    Node: library_import = 'import 'package:riverpod/riverpod.dart';'
      Node: import_specification = 'import 'package:riverpod/riverpod.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:riverpod/riverpod.dart''
          Node: uri = ''package:riverpod/riverpod.dart''
            Node: string_literal = ''package:riverpod/riverpod.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
    Node: library_import = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
      Node: import_specification = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:riverpod_annotation/riverpod_annotation.dart''
          Node: uri = ''package:riverpod_annotation/riverpod_annotation.dart''
            Node: string_literal = ''package:riverpod_annotation/riverpod_annotation.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import '../models/user.dart';'
    Node: library_import = 'import '../models/user.dart';'
      Node: import_specification = 'import '../models/user.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''../models/user.dart''
          Node: uri = ''../models/user.dart''
            Node: string_literal = ''../models/user.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import '../services/line_auth_service.dart';'
    Node: library_import = 'import '../services/line_auth_service.dart';'
      Node: import_specification = 'import '../services/line_auth_service.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''../services/line_auth_service.dart''
          Node: uri = ''../services/line_auth_service.dart''
            Node: string_literal = ''../services/line_auth_service.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: part_directive = 'part 'auth_provider.g.dart';'
    Node: part = 'part'
    Node: uri = ''auth_provider.g.dart''
      Node: string_literal = ''auth_provider.g.dart''
        Node: ' = '''
        Node: ' = '''
    Node: ; = ';'
  Node: class_definition = '@riverpod
class AuthNotifier extends _$AuthNotifier {
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}'
    Node: annotation = '@riverpod'
      Node: @ = '@'
      Node: identifier = 'riverpod'
    Node: class = 'class'
    Node: identifier = 'AuthNotifier'
    Node: superclass = 'extends _$AuthNotifier'
      Node: extends = 'extends'
      Node: type_identifier = '_$AuthNotifier'
    Node: class_body = '{
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}'
      Node: { = '{'
      Node: annotation = '@override'
        Node: @ = '@'
        Node: identifier = 'override'
      Node: method_signature = 'AuthState build()'
        Node: function_signature = 'AuthState build()'
          Node: type_identifier = 'AuthState'
          Node: identifier = 'build'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = '{
    return const AuthState.initial();
  }'
        Node: block = '{
    return const AuthState.initial();
  }'
          Node: { = '{'
          Node: return_statement = 'return const AuthState.initial();'
            Node: return = 'return'
            Node: const_object_expression = 'const AuthState.initial()'
              Node: const_builtin = 'const'
              Node: type_identifier = 'AuthState'
              Node: . = '.'
              Node: identifier = 'initial'
              Node: arguments = '()'
                Node: ( = '('
                Node: ) = ')'
            Node: ; = ';'
          Node: } = '}'
      Node: documentation_comment = '/// LINEログイン'
        Node: /// = '///'
      Node: method_signature = 'Future<void> signInWithLine()'
        Node: function_signature = 'Future<void> signInWithLine()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'signInWithLine'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: expression_statement = 'state = const AuthState.loading();'
            Node: assignment_expression = 'state = const AuthState.loading()'
              Node: assignable_expression = 'state'
                Node: identifier = 'state'
              Node: = = '='
              Node: const_object_expression = 'const AuthState.loading()'
                Node: const_builtin = 'const'
                Node: type_identifier = 'AuthState'
                Node: . = '.'
                Node: identifier = 'loading'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: ; = ';'
          Node: try_statement = 'try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    }'
              Node: { = '{'
              Node: local_variable_declaration = 'final result = await LineAuthService.login();'
                Node: initialized_variable_definition = 'final result = await LineAuthService.login()'
                  Node: final_builtin = 'final'
                    Node: final = 'final'
                  Node: identifier = 'result'
                  Node: = = '='
                  Node: unary_expression = 'await LineAuthService.login()'
                    Node: await_expression = 'await LineAuthService.login()'
                      Node: await = 'await'
                      Node: identifier = 'LineAuthService'
                      Node: selector = '.login'
                        Node: unconditional_assignable_selector = '.login'
                          Node: . = '.'
                          Node: identifier = 'login'
                      Node: selector = '()'
                        Node: argument_part = '()'
                          Node: arguments = '()'
                            Node: ( = '('
                            Node: ) = ')'
                Node: ; = ';'
              Node: if_statement = 'if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }'
                Node: if = 'if'
                Node: ( = '('
                Node: equality_expression = 'result != null'
                  Node: identifier = 'result'
                  Node: equality_operator = '!='
                  Node: null_literal = 'null'
                    Node: null = 'null'
                Node: ) = ')'
                Node: block = '{
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      }'
                  Node: { = '{'
                  Node: comment = '// Firebaseカスタムトークンでサインイン'
                    Node: // = '//'
                  Node: local_variable_declaration = 'final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );'
                    Node: initialized_variable_definition = 'final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                      Node: final_builtin = 'final'
                        Node: final = 'final'
                      Node: identifier = 'userCredential'
                      Node: = = '='
                      Node: unary_expression = 'await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                        Node: await_expression = 'await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                          Node: await = 'await'
                          Node: identifier = 'firebase_auth'
                          Node: selector = '.FirebaseAuth'
                            Node: unconditional_assignable_selector = '.FirebaseAuth'
                              Node: . = '.'
                              Node: identifier = 'FirebaseAuth'
                          Node: selector = '.instance'
                            Node: unconditional_assignable_selector = '.instance'
                              Node: . = '.'
                              Node: identifier = 'instance'
                          Node: selector = '.signInWithCustomToken'
                            Node: unconditional_assignable_selector = '.signInWithCustomToken'
                              Node: . = '.'
                              Node: identifier = 'signInWithCustomToken'
                          Node: selector = '(
          result.accessToken,
        )'
                            Node: argument_part = '(
          result.accessToken,
        )'
                              Node: arguments = '(
          result.accessToken,
        )'
                                Node: ( = '('
                                Node: argument = 'result.accessToken'
                                  Node: identifier = 'result'
                                  Node: selector = '.accessToken'
                                    Node: unconditional_assignable_selector = '.accessToken'
                                      Node: . = '.'
                                      Node: identifier = 'accessToken'
                                Node: , = ','
                                Node: ) = ')'
                    Node: ; = ';'
                  Node: if_statement = 'if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }'
                    Node: if = 'if'
                    Node: ( = '('
                    Node: equality_expression = 'userCredential.user != null'
                      Node: identifier = 'userCredential'
                      Node: selector = '.user'
                        Node: unconditional_assignable_selector = '.user'
                          Node: . = '.'
                          Node: identifier = 'user'
                      Node: equality_operator = '!='
                      Node: null_literal = 'null'
                        Node: null = 'null'
                    Node: ) = ')'
                    Node: block = '{
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        }'
                      Node: { = '{'
                      Node: local_variable_declaration = 'final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );'
                        Node: initialized_variable_definition = 'final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                          Node: final_builtin = 'final'
                            Node: final = 'final'
                          Node: identifier = 'user'
                          Node: = = '='
                          Node: identifier = 'AppUser'
                          Node: selector = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                            Node: argument_part = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                              Node: arguments = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                                Node: ( = '('
                                Node: named_argument = 'id: userCredential.user!.uid'
                                  Node: label = 'id:'
                                    Node: identifier = 'id'
                                    Node: : = ':'
                                  Node: identifier = 'userCredential'
                                  Node: selector = '.user'
                                    Node: unconditional_assignable_selector = '.user'
                                      Node: . = '.'
                                      Node: identifier = 'user'
                                  Node: selector = '!'
                                    Node: ! = '!'
                                  Node: selector = '.uid'
                                    Node: unconditional_assignable_selector = '.uid'
                                      Node: . = '.'
                                      Node: identifier = 'uid'
                                Node: , = ','
                                Node: named_argument = 'displayName: result.profile.displayName'
                                  Node: label = 'displayName:'
                                    Node: identifier = 'displayName'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.displayName'
                                    Node: unconditional_assignable_selector = '.displayName'
                                      Node: . = '.'
                                      Node: identifier = 'displayName'
                                Node: , = ','
                                Node: named_argument = 'photoURL: result.profile.pictureUrl'
                                  Node: label = 'photoURL:'
                                    Node: identifier = 'photoURL'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.pictureUrl'
                                    Node: unconditional_assignable_selector = '.pictureUrl'
                                      Node: . = '.'
                                      Node: identifier = 'pictureUrl'
                                Node: , = ','
                                Node: named_argument = 'statusMessage: result.profile.statusMessage'
                                  Node: label = 'statusMessage:'
                                    Node: identifier = 'statusMessage'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.statusMessage'
                                    Node: unconditional_assignable_selector = '.statusMessage'
                                      Node: . = '.'
                                      Node: identifier = 'statusMessage'
                                Node: , = ','
                                Node: named_argument = 'provider: 'line''
                                  Node: label = 'provider:'
                                    Node: identifier = 'provider'
                                    Node: : = ':'
                                  Node: string_literal = ''line''
                                    Node: ' = '''
                                    Node: ' = '''
                                Node: , = ','
                                Node: named_argument = 'createdAt: DateTime.now()'
                                  Node: label = 'createdAt:'
                                    Node: identifier = 'createdAt'
                                    Node: : = ':'
                                  Node: identifier = 'DateTime'
                                  Node: selector = '.now'
                                    Node: unconditional_assignable_selector = '.now'
                                      Node: . = '.'
                                      Node: identifier = 'now'
                                  Node: selector = '()'
                                    Node: argument_part = '()'
                                      Node: arguments = '()'
                                        Node: ( = '('
                                        Node: ) = ')'
                                Node: , = ','
                                Node: ) = ')'
                        Node: ; = ';'
                      Node: expression_statement = 'state = AuthState.authenticated(user);'
                        Node: assignment_expression = 'state = AuthState.authenticated(user)'
                          Node: assignable_expression = 'state'
                            Node: identifier = 'state'
                          Node: = = '='
                          Node: identifier = 'AuthState'
                          Node: selector = '.authenticated'
                            Node: unconditional_assignable_selector = '.authenticated'
                              Node: . = '.'
                              Node: identifier = 'authenticated'
                          Node: selector = '(user)'
                            Node: argument_part = '(user)'
                              Node: arguments = '(user)'
                                Node: ( = '('
                                Node: argument = 'user'
                                  Node: identifier = 'user'
                                Node: ) = ')'
                        Node: ; = ';'
                      Node: } = '}'
                    Node: else = 'else'
                    Node: block = '{
          state = const AuthState.error('Failed to sign in with custom token');
        }'
                      Node: { = '{'
                      Node: expression_statement = 'state = const AuthState.error('Failed to sign in with custom token');'
                        Node: assignment_expression = 'state = const AuthState.error('Failed to sign in with custom token')'
                          Node: assignable_expression = 'state'
                            Node: identifier = 'state'
                          Node: = = '='
                          Node: const_object_expression = 'const AuthState.error('Failed to sign in with custom token')'
                            Node: const_builtin = 'const'
                            Node: type_identifier = 'AuthState'
                            Node: . = '.'
                            Node: identifier = 'error'
                            Node: arguments = '('Failed to sign in with custom token')'
                              Node: ( = '('
                              Node: argument = ''Failed to sign in with custom token''
                                Node: string_literal = ''Failed to sign in with custom token''
                                  Node: ' = '''
                                  Node: ' = '''
                              Node: ) = ')'
                        Node: ; = ';'
                      Node: } = '}'
                  Node: } = '}'
                Node: else = 'else'
                Node: block = '{
        state = const AuthState.error('LINE login failed');
      }'
                  Node: { = '{'
                  Node: expression_statement = 'state = const AuthState.error('LINE login failed');'
                    Node: assignment_expression = 'state = const AuthState.error('LINE login failed')'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: const_object_expression = 'const AuthState.error('LINE login failed')'
                        Node: const_builtin = 'const'
                        Node: type_identifier = 'AuthState'
                        Node: . = '.'
                        Node: identifier = 'error'
                        Node: arguments = '('LINE login failed')'
                          Node: ( = '('
                          Node: argument = ''LINE login failed''
                            Node: string_literal = ''LINE login failed''
                              Node: ' = '''
                              Node: ' = '''
                          Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// ログアウト'
        Node: /// = '///'
      Node: method_signature = 'Future<void> signOut()'
        Node: function_signature = 'Future<void> signOut()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'signOut'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: try_statement = 'try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    }'
              Node: { = '{'
              Node: expression_statement = 'await firebase_auth.FirebaseAuth.instance.signOut();'
                Node: unary_expression = 'await firebase_auth.FirebaseAuth.instance.signOut()'
                  Node: await_expression = 'await firebase_auth.FirebaseAuth.instance.signOut()'
                    Node: await = 'await'
                    Node: identifier = 'firebase_auth'
                    Node: selector = '.FirebaseAuth'
                      Node: unconditional_assignable_selector = '.FirebaseAuth'
                        Node: . = '.'
                        Node: identifier = 'FirebaseAuth'
                    Node: selector = '.instance'
                      Node: unconditional_assignable_selector = '.instance'
                        Node: . = '.'
                        Node: identifier = 'instance'
                    Node: selector = '.signOut'
                      Node: unconditional_assignable_selector = '.signOut'
                        Node: . = '.'
                        Node: identifier = 'signOut'
                    Node: selector = '()'
                      Node: argument_part = '()'
                        Node: arguments = '()'
                          Node: ( = '('
                          Node: ) = ')'
                Node: ; = ';'
              Node: expression_statement = 'state = const AuthState.unauthenticated();'
                Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: const_object_expression = 'const AuthState.unauthenticated()'
                    Node: const_builtin = 'const'
                    Node: type_identifier = 'AuthState'
                    Node: . = '.'
                    Node: identifier = 'unauthenticated'
                    Node: arguments = '()'
                      Node: ( = '('
                      Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// 現在のユーザーを取得'
        Node: /// = '///'
      Node: method_signature = 'Future<void> getCurrentUser()'
        Node: function_signature = 'Future<void> getCurrentUser()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'getCurrentUser'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: expression_statement = 'state = const AuthState.loading();'
            Node: assignment_expression = 'state = const AuthState.loading()'
              Node: assignable_expression = 'state'
                Node: identifier = 'state'
              Node: = = '='
              Node: const_object_expression = 'const AuthState.loading()'
                Node: const_builtin = 'const'
                Node: type_identifier = 'AuthState'
                Node: . = '.'
                Node: identifier = 'loading'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: ; = ';'
          Node: try_statement = 'try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    }'
              Node: { = '{'
              Node: local_variable_declaration = 'final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;'
                Node: initialized_variable_definition = 'final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser'
                  Node: final_builtin = 'final'
                    Node: final = 'final'
                  Node: identifier = 'firebaseUser'
                  Node: = = '='
                  Node: identifier = 'firebase_auth'
                  Node: selector = '.FirebaseAuth'
                    Node: unconditional_assignable_selector = '.FirebaseAuth'
                      Node: . = '.'
                      Node: identifier = 'FirebaseAuth'
                  Node: selector = '.instance'
                    Node: unconditional_assignable_selector = '.instance'
                      Node: . = '.'
                      Node: identifier = 'instance'
                  Node: selector = '.currentUser'
                    Node: unconditional_assignable_selector = '.currentUser'
                      Node: . = '.'
                      Node: identifier = 'currentUser'
                Node: ; = ';'
              Node: if_statement = 'if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }'
                Node: if = 'if'
                Node: ( = '('
                Node: equality_expression = 'firebaseUser != null'
                  Node: identifier = 'firebaseUser'
                  Node: equality_operator = '!='
                  Node: null_literal = 'null'
                    Node: null = 'null'
                Node: ) = ')'
                Node: block = '{
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      }'
                  Node: { = '{'
                  Node: comment = '// Firestoreからユーザー情報を取得'
                    Node: // = '//'
                  Node: comment = '// TODO: FirestoreServiceを使用してユーザー情報を取得'
                    Node: // = '//'
                  Node: local_variable_declaration = 'final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );'
                    Node: initialized_variable_definition = 'final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                      Node: final_builtin = 'final'
                        Node: final = 'final'
                      Node: identifier = 'user'
                      Node: = = '='
                      Node: identifier = 'AppUser'
                      Node: selector = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                        Node: argument_part = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                          Node: arguments = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                            Node: ( = '('
                            Node: named_argument = 'id: firebaseUser.uid'
                              Node: label = 'id:'
                                Node: identifier = 'id'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.uid'
                                Node: unconditional_assignable_selector = '.uid'
                                  Node: . = '.'
                                  Node: identifier = 'uid'
                            Node: , = ','
                            Node: named_argument = 'displayName: firebaseUser.displayName ?? 'Unknown User''
                              Node: label = 'displayName:'
                                Node: identifier = 'displayName'
                                Node: : = ':'
                              Node: if_null_expression = 'firebaseUser.displayName ?? 'Unknown User''
                                Node: identifier = 'firebaseUser'
                                Node: selector = '.displayName'
                                  Node: unconditional_assignable_selector = '.displayName'
                                    Node: . = '.'
                                    Node: identifier = 'displayName'
                                Node: ?? = '??'
                                Node: string_literal = ''Unknown User''
                                  Node: ' = '''
                                  Node: ' = '''
                            Node: , = ','
                            Node: named_argument = 'email: firebaseUser.email'
                              Node: label = 'email:'
                                Node: identifier = 'email'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.email'
                                Node: unconditional_assignable_selector = '.email'
                                  Node: . = '.'
                                  Node: identifier = 'email'
                            Node: , = ','
                            Node: named_argument = 'photoURL: firebaseUser.photoURL'
                              Node: label = 'photoURL:'
                                Node: identifier = 'photoURL'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.photoURL'
                                Node: unconditional_assignable_selector = '.photoURL'
                                  Node: . = '.'
                                  Node: identifier = 'photoURL'
                            Node: , = ','
                            Node: named_argument = 'provider: 'line''
                              Node: label = 'provider:'
                                Node: identifier = 'provider'
                                Node: : = ':'
                              Node: string_literal = ''line''
                                Node: ' = '''
                                Node: ' = '''
                            Node: , = ','
                            Node: ) = ')'
                    Node: ; = ';'
                  Node: expression_statement = 'state = AuthState.authenticated(user);'
                    Node: assignment_expression = 'state = AuthState.authenticated(user)'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: identifier = 'AuthState'
                      Node: selector = '.authenticated'
                        Node: unconditional_assignable_selector = '.authenticated'
                          Node: . = '.'
                          Node: identifier = 'authenticated'
                      Node: selector = '(user)'
                        Node: argument_part = '(user)'
                          Node: arguments = '(user)'
                            Node: ( = '('
                            Node: argument = 'user'
                              Node: identifier = 'user'
                            Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
                Node: else = 'else'
                Node: block = '{
        state = const AuthState.unauthenticated();
      }'
                  Node: { = '{'
                  Node: expression_statement = 'state = const AuthState.unauthenticated();'
                    Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: const_object_expression = 'const AuthState.unauthenticated()'
                        Node: const_builtin = 'const'
                        Node: type_identifier = 'AuthState'
                        Node: . = '.'
                        Node: identifier = 'unauthenticated'
                        Node: arguments = '()'
                          Node: ( = '('
                          Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// 認証状態の監視'
        Node: /// = '///'
      Node: method_signature = 'void listenToAuthChanges()'
        Node: function_signature = 'void listenToAuthChanges()'
          Node: void_type = 'void'
          Node: identifier = 'listenToAuthChanges'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = '{
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }'
        Node: block = '{
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }'
          Node: { = '{'
          Node: expression_statement = 'firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });'
            Node: identifier = 'firebase_auth'
            Node: selector = '.FirebaseAuth'
              Node: unconditional_assignable_selector = '.FirebaseAuth'
                Node: . = '.'
                Node: identifier = 'FirebaseAuth'
            Node: selector = '.instance'
              Node: unconditional_assignable_selector = '.instance'
                Node: . = '.'
                Node: identifier = 'instance'
            Node: selector = '.authStateChanges'
              Node: unconditional_assignable_selector = '.authStateChanges'
                Node: . = '.'
                Node: identifier = 'authStateChanges'
            Node: selector = '()'
              Node: argument_part = '()'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: selector = '.listen'
              Node: unconditional_assignable_selector = '.listen'
                Node: . = '.'
                Node: identifier = 'listen'
            Node: selector = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
              Node: argument_part = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
                Node: arguments = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
                  Node: ( = '('
                  Node: argument = '(firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                    Node: function_expression = '(firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                      Node: formal_parameter_list = '(firebaseUser)'
                        Node: ( = '('
                        Node: formal_parameter = 'firebaseUser'
                          Node: identifier = 'firebaseUser'
                        Node: ) = ')'
                      Node: function_expression_body = '{
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                        Node: block = '{
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                          Node: { = '{'
                          Node: if_statement = 'if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }'
                            Node: if = 'if'
                            Node: ( = '('
                            Node: equality_expression = 'firebaseUser != null'
                              Node: identifier = 'firebaseUser'
                              Node: equality_operator = '!='
                              Node: null_literal = 'null'
                                Node: null = 'null'
                            Node: ) = ')'
                            Node: block = '{
        // ユーザーがログインしている場合
        getCurrentUser();
      }'
                              Node: { = '{'
                              Node: comment = '// ユーザーがログインしている場合'
                                Node: // = '//'
                              Node: expression_statement = 'getCurrentUser();'
                                Node: identifier = 'getCurrentUser'
                                Node: selector = '()'
                                  Node: argument_part = '()'
                                    Node: arguments = '()'
                                      Node: ( = '('
                                      Node: ) = ')'
                                Node: ; = ';'
                              Node: } = '}'
                            Node: else = 'else'
                            Node: block = '{
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }'
                              Node: { = '{'
                              Node: comment = '// ユーザーがログアウトしている場合'
                                Node: // = '//'
                              Node: expression_statement = 'state = const AuthState.unauthenticated();'
                                Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                                  Node: assignable_expression = 'state'
                                    Node: identifier = 'state'
                                  Node: = = '='
                                  Node: const_object_expression = 'const AuthState.unauthenticated()'
                                    Node: const_builtin = 'const'
                                    Node: type_identifier = 'AuthState'
                                    Node: . = '.'
                                    Node: identifier = 'unauthenticated'
                                    Node: arguments = '()'
                                      Node: ( = '('
                                      Node: ) = ')'
                                Node: ; = ';'
                              Node: } = '}'
                          Node: } = '}'
                  Node: ) = ')'
            Node: ; = ';'
          Node: } = '}'
      Node: } = '}'
  Node: documentation_comment = '/// 認証状態プロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'AuthState authState(Ref ref)'
    Node: type_identifier = 'AuthState'
    Node: identifier = 'authState'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}'
    Node: block = '{
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}'
      Node: { = '{'
      Node: comment = '// 初回起動時に認証状態を監視開始'
        Node: // = '//'
      Node: expression_statement = 'ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });'
        Node: identifier = 'ref'
        Node: selector = '.listen'
          Node: unconditional_assignable_selector = '.listen'
            Node: . = '.'
            Node: identifier = 'listen'
        Node: selector = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
          Node: argument_part = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
            Node: arguments = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
              Node: ( = '('
              Node: argument = 'authNotifierProvider'
                Node: identifier = 'authNotifierProvider'
              Node: , = ','
              Node: argument = '(previous, next) {
    // 認証状態が変更された時の処理
  }'
                Node: function_expression = '(previous, next) {
    // 認証状態が変更された時の処理
  }'
                  Node: formal_parameter_list = '(previous, next)'
                    Node: ( = '('
                    Node: formal_parameter = 'previous'
                      Node: identifier = 'previous'
                    Node: , = ','
                    Node: formal_parameter = 'next'
                      Node: identifier = 'next'
                    Node: ) = ')'
                  Node: function_expression_body = '{
    // 認証状態が変更された時の処理
  }'
                    Node: block = '{
    // 認証状態が変更された時の処理
  }'
                      Node: { = '{'
                      Node: comment = '// 認証状態が変更された時の処理'
                        Node: // = '//'
                      Node: } = '}'
              Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return ref.watch(authNotifierProvider);'
        Node: return = 'return'
        Node: identifier = 'ref'
        Node: selector = '.watch'
          Node: unconditional_assignable_selector = '.watch'
            Node: . = '.'
            Node: identifier = 'watch'
        Node: selector = '(authNotifierProvider)'
          Node: argument_part = '(authNotifierProvider)'
            Node: arguments = '(authNotifierProvider)'
              Node: ( = '('
              Node: argument = 'authNotifierProvider'
                Node: identifier = 'authNotifierProvider'
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
  Node: documentation_comment = '/// 現在のユーザープロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'AppUser? currentUser(Ref ref)'
    Node: type_identifier = 'AppUser'
    Node: nullable_type = '?'
      Node: ? = '?'
    Node: identifier = 'currentUser'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}'
    Node: block = '{
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}'
      Node: { = '{'
      Node: local_variable_declaration = 'final authState = ref.watch(authStateProvider);'
        Node: initialized_variable_definition = 'final authState = ref.watch(authStateProvider)'
          Node: final_builtin = 'final'
            Node: final = 'final'
          Node: identifier = 'authState'
          Node: = = '='
          Node: identifier = 'ref'
          Node: selector = '.watch'
            Node: unconditional_assignable_selector = '.watch'
              Node: . = '.'
              Node: identifier = 'watch'
          Node: selector = '(authStateProvider)'
            Node: argument_part = '(authStateProvider)'
              Node: arguments = '(authStateProvider)'
                Node: ( = '('
                Node: argument = 'authStateProvider'
                  Node: identifier = 'authStateProvider'
                Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );'
        Node: return = 'return'
        Node: identifier = 'authState'
        Node: selector = '.when'
          Node: unconditional_assignable_selector = '.when'
            Node: . = '.'
            Node: identifier = 'when'
        Node: selector = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
          Node: argument_part = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
            Node: arguments = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
              Node: ( = '('
              Node: named_argument = 'authenticated: (user) => user'
                Node: label = 'authenticated:'
                  Node: identifier = 'authenticated'
                  Node: : = ':'
                Node: function_expression = '(user) => user'
                  Node: formal_parameter_list = '(user)'
                    Node: ( = '('
                    Node: formal_parameter = 'user'
                      Node: identifier = 'user'
                    Node: ) = ')'
                  Node: function_expression_body = '=> user'
                    Node: => = '=>'
                    Node: identifier = 'user'
              Node: , = ','
              Node: named_argument = 'initial: () => null'
                Node: label = 'initial:'
                  Node: identifier = 'initial'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'loading: () => null'
                Node: label = 'loading:'
                  Node: identifier = 'loading'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'unauthenticated: () => null'
                Node: label = 'unauthenticated:'
                  Node: identifier = 'unauthenticated'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'error: (_) => null'
                Node: label = 'error:'
                  Node: identifier = 'error'
                  Node: : = ':'
                Node: function_expression = '(_) => null'
                  Node: formal_parameter_list = '(_)'
                    Node: ( = '('
                    Node: formal_parameter = '_'
                      Node: identifier = '_'
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
  Node: documentation_comment = '/// 認証済みかどうかのプロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'bool isAuthenticated(Ref ref)'
    Node: type_identifier = 'bool'
    Node: identifier = 'isAuthenticated'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}'
    Node: block = '{
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}'
      Node: { = '{'
      Node: local_variable_declaration = 'final authState = ref.watch(authStateProvider);'
        Node: initialized_variable_definition = 'final authState = ref.watch(authStateProvider)'
          Node: final_builtin = 'final'
            Node: final = 'final'
          Node: identifier = 'authState'
          Node: = = '='
          Node: identifier = 'ref'
          Node: selector = '.watch'
            Node: unconditional_assignable_selector = '.watch'
              Node: . = '.'
              Node: identifier = 'watch'
          Node: selector = '(authStateProvider)'
            Node: argument_part = '(authStateProvider)'
              Node: arguments = '(authStateProvider)'
                Node: ( = '('
                Node: argument = 'authStateProvider'
                  Node: identifier = 'authStateProvider'
                Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );'
        Node: return = 'return'
        Node: identifier = 'authState'
        Node: selector = '.maybeWhen'
          Node: unconditional_assignable_selector = '.maybeWhen'
            Node: . = '.'
            Node: identifier = 'maybeWhen'
        Node: selector = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
          Node: argument_part = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
            Node: arguments = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
              Node: ( = '('
              Node: named_argument = 'authenticated: (_) => true'
                Node: label = 'authenticated:'
                  Node: identifier = 'authenticated'
                  Node: : = ':'
                Node: function_expression = '(_) => true'
                  Node: formal_parameter_list = '(_)'
                    Node: ( = '('
                    Node: formal_parameter = '_'
                      Node: identifier = '_'
                    Node: ) = ')'
                  Node: function_expression_body = '=> true'
                    Node: => = '=>'
                    Node: true = 'true'
                      Node: true = 'true'
              Node: , = ','
              Node: named_argument = 'orElse: () => false'
                Node: label = 'orElse:'
                  Node: identifier = 'orElse'
                  Node: : = ':'
                Node: function_expression = '() => false'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> false'
                    Node: => = '=>'
                    Node: false = 'false'
                      Node: false = 'false'
              Node: , = ','
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
=== End AST ===

=== Complete AST for test_flutter_app/aminomi/lib/providers/auth_provider.dart ===
Node: program = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;
import 'package:riverpod/riverpod.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import '../models/user.dart';
import '../services/line_auth_service.dart';

part 'auth_provider.g.dart';

@riverpod
class AuthNotifier extends _$AuthNotifier {
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}

/// 認証状態プロバイダー
@riverpod
AuthState authState(Ref ref) {
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}

/// 現在のユーザープロバイダー
@riverpod
AppUser? currentUser(Ref ref) {
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}

/// 認証済みかどうかのプロバイダー
@riverpod
bool isAuthenticated(Ref ref) {
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}
'
  Node: import_or_export = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
    Node: library_import = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
      Node: import_specification = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
        Node: import = 'import'
        Node: configurable_uri = ''package:firebase_auth/firebase_auth.dart''
          Node: uri = ''package:firebase_auth/firebase_auth.dart''
            Node: string_literal = ''package:firebase_auth/firebase_auth.dart''
              Node: ' = '''
              Node: ' = '''
        Node: as = 'as'
        Node: identifier = 'firebase_auth'
        Node: ; = ';'
  Node: import_or_export = 'import 'package:riverpod/riverpod.dart';'
    Node: library_import = 'import 'package:riverpod/riverpod.dart';'
      Node: import_specification = 'import 'package:riverpod/riverpod.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:riverpod/riverpod.dart''
          Node: uri = ''package:riverpod/riverpod.dart''
            Node: string_literal = ''package:riverpod/riverpod.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
    Node: library_import = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
      Node: import_specification = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:riverpod_annotation/riverpod_annotation.dart''
          Node: uri = ''package:riverpod_annotation/riverpod_annotation.dart''
            Node: string_literal = ''package:riverpod_annotation/riverpod_annotation.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import '../models/user.dart';'
    Node: library_import = 'import '../models/user.dart';'
      Node: import_specification = 'import '../models/user.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''../models/user.dart''
          Node: uri = ''../models/user.dart''
            Node: string_literal = ''../models/user.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import '../services/line_auth_service.dart';'
    Node: library_import = 'import '../services/line_auth_service.dart';'
      Node: import_specification = 'import '../services/line_auth_service.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''../services/line_auth_service.dart''
          Node: uri = ''../services/line_auth_service.dart''
            Node: string_literal = ''../services/line_auth_service.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: part_directive = 'part 'auth_provider.g.dart';'
    Node: part = 'part'
    Node: uri = ''auth_provider.g.dart''
      Node: string_literal = ''auth_provider.g.dart''
        Node: ' = '''
        Node: ' = '''
    Node: ; = ';'
  Node: class_definition = '@riverpod
class AuthNotifier extends _$AuthNotifier {
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}'
    Node: annotation = '@riverpod'
      Node: @ = '@'
      Node: identifier = 'riverpod'
    Node: class = 'class'
    Node: identifier = 'AuthNotifier'
    Node: superclass = 'extends _$AuthNotifier'
      Node: extends = 'extends'
      Node: type_identifier = '_$AuthNotifier'
    Node: class_body = '{
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}'
      Node: { = '{'
      Node: annotation = '@override'
        Node: @ = '@'
        Node: identifier = 'override'
      Node: method_signature = 'AuthState build()'
        Node: function_signature = 'AuthState build()'
          Node: type_identifier = 'AuthState'
          Node: identifier = 'build'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = '{
    return const AuthState.initial();
  }'
        Node: block = '{
    return const AuthState.initial();
  }'
          Node: { = '{'
          Node: return_statement = 'return const AuthState.initial();'
            Node: return = 'return'
            Node: const_object_expression = 'const AuthState.initial()'
              Node: const_builtin = 'const'
              Node: type_identifier = 'AuthState'
              Node: . = '.'
              Node: identifier = 'initial'
              Node: arguments = '()'
                Node: ( = '('
                Node: ) = ')'
            Node: ; = ';'
          Node: } = '}'
      Node: documentation_comment = '/// LINEログイン'
        Node: /// = '///'
      Node: method_signature = 'Future<void> signInWithLine()'
        Node: function_signature = 'Future<void> signInWithLine()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'signInWithLine'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: expression_statement = 'state = const AuthState.loading();'
            Node: assignment_expression = 'state = const AuthState.loading()'
              Node: assignable_expression = 'state'
                Node: identifier = 'state'
              Node: = = '='
              Node: const_object_expression = 'const AuthState.loading()'
                Node: const_builtin = 'const'
                Node: type_identifier = 'AuthState'
                Node: . = '.'
                Node: identifier = 'loading'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: ; = ';'
          Node: try_statement = 'try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    }'
              Node: { = '{'
              Node: local_variable_declaration = 'final result = await LineAuthService.login();'
                Node: initialized_variable_definition = 'final result = await LineAuthService.login()'
                  Node: final_builtin = 'final'
                    Node: final = 'final'
                  Node: identifier = 'result'
                  Node: = = '='
                  Node: unary_expression = 'await LineAuthService.login()'
                    Node: await_expression = 'await LineAuthService.login()'
                      Node: await = 'await'
                      Node: identifier = 'LineAuthService'
                      Node: selector = '.login'
                        Node: unconditional_assignable_selector = '.login'
                          Node: . = '.'
                          Node: identifier = 'login'
                      Node: selector = '()'
                        Node: argument_part = '()'
                          Node: arguments = '()'
                            Node: ( = '('
                            Node: ) = ')'
                Node: ; = ';'
              Node: if_statement = 'if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }'
                Node: if = 'if'
                Node: ( = '('
                Node: equality_expression = 'result != null'
                  Node: identifier = 'result'
                  Node: equality_operator = '!='
                  Node: null_literal = 'null'
                    Node: null = 'null'
                Node: ) = ')'
                Node: block = '{
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      }'
                  Node: { = '{'
                  Node: comment = '// Firebaseカスタムトークンでサインイン'
                    Node: // = '//'
                  Node: local_variable_declaration = 'final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );'
                    Node: initialized_variable_definition = 'final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                      Node: final_builtin = 'final'
                        Node: final = 'final'
                      Node: identifier = 'userCredential'
                      Node: = = '='
                      Node: unary_expression = 'await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                        Node: await_expression = 'await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                          Node: await = 'await'
                          Node: identifier = 'firebase_auth'
                          Node: selector = '.FirebaseAuth'
                            Node: unconditional_assignable_selector = '.FirebaseAuth'
                              Node: . = '.'
                              Node: identifier = 'FirebaseAuth'
                          Node: selector = '.instance'
                            Node: unconditional_assignable_selector = '.instance'
                              Node: . = '.'
                              Node: identifier = 'instance'
                          Node: selector = '.signInWithCustomToken'
                            Node: unconditional_assignable_selector = '.signInWithCustomToken'
                              Node: . = '.'
                              Node: identifier = 'signInWithCustomToken'
                          Node: selector = '(
          result.accessToken,
        )'
                            Node: argument_part = '(
          result.accessToken,
        )'
                              Node: arguments = '(
          result.accessToken,
        )'
                                Node: ( = '('
                                Node: argument = 'result.accessToken'
                                  Node: identifier = 'result'
                                  Node: selector = '.accessToken'
                                    Node: unconditional_assignable_selector = '.accessToken'
                                      Node: . = '.'
                                      Node: identifier = 'accessToken'
                                Node: , = ','
                                Node: ) = ')'
                    Node: ; = ';'
                  Node: if_statement = 'if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }'
                    Node: if = 'if'
                    Node: ( = '('
                    Node: equality_expression = 'userCredential.user != null'
                      Node: identifier = 'userCredential'
                      Node: selector = '.user'
                        Node: unconditional_assignable_selector = '.user'
                          Node: . = '.'
                          Node: identifier = 'user'
                      Node: equality_operator = '!='
                      Node: null_literal = 'null'
                        Node: null = 'null'
                    Node: ) = ')'
                    Node: block = '{
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        }'
                      Node: { = '{'
                      Node: local_variable_declaration = 'final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );'
                        Node: initialized_variable_definition = 'final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                          Node: final_builtin = 'final'
                            Node: final = 'final'
                          Node: identifier = 'user'
                          Node: = = '='
                          Node: identifier = 'AppUser'
                          Node: selector = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                            Node: argument_part = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                              Node: arguments = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                                Node: ( = '('
                                Node: named_argument = 'id: userCredential.user!.uid'
                                  Node: label = 'id:'
                                    Node: identifier = 'id'
                                    Node: : = ':'
                                  Node: identifier = 'userCredential'
                                  Node: selector = '.user'
                                    Node: unconditional_assignable_selector = '.user'
                                      Node: . = '.'
                                      Node: identifier = 'user'
                                  Node: selector = '!'
                                    Node: ! = '!'
                                  Node: selector = '.uid'
                                    Node: unconditional_assignable_selector = '.uid'
                                      Node: . = '.'
                                      Node: identifier = 'uid'
                                Node: , = ','
                                Node: named_argument = 'displayName: result.profile.displayName'
                                  Node: label = 'displayName:'
                                    Node: identifier = 'displayName'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.displayName'
                                    Node: unconditional_assignable_selector = '.displayName'
                                      Node: . = '.'
                                      Node: identifier = 'displayName'
                                Node: , = ','
                                Node: named_argument = 'photoURL: result.profile.pictureUrl'
                                  Node: label = 'photoURL:'
                                    Node: identifier = 'photoURL'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.pictureUrl'
                                    Node: unconditional_assignable_selector = '.pictureUrl'
                                      Node: . = '.'
                                      Node: identifier = 'pictureUrl'
                                Node: , = ','
                                Node: named_argument = 'statusMessage: result.profile.statusMessage'
                                  Node: label = 'statusMessage:'
                                    Node: identifier = 'statusMessage'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.statusMessage'
                                    Node: unconditional_assignable_selector = '.statusMessage'
                                      Node: . = '.'
                                      Node: identifier = 'statusMessage'
                                Node: , = ','
                                Node: named_argument = 'provider: 'line''
                                  Node: label = 'provider:'
                                    Node: identifier = 'provider'
                                    Node: : = ':'
                                  Node: string_literal = ''line''
                                    Node: ' = '''
                                    Node: ' = '''
                                Node: , = ','
                                Node: named_argument = 'createdAt: DateTime.now()'
                                  Node: label = 'createdAt:'
                                    Node: identifier = 'createdAt'
                                    Node: : = ':'
                                  Node: identifier = 'DateTime'
                                  Node: selector = '.now'
                                    Node: unconditional_assignable_selector = '.now'
                                      Node: . = '.'
                                      Node: identifier = 'now'
                                  Node: selector = '()'
                                    Node: argument_part = '()'
                                      Node: arguments = '()'
                                        Node: ( = '('
                                        Node: ) = ')'
                                Node: , = ','
                                Node: ) = ')'
                        Node: ; = ';'
                      Node: expression_statement = 'state = AuthState.authenticated(user);'
                        Node: assignment_expression = 'state = AuthState.authenticated(user)'
                          Node: assignable_expression = 'state'
                            Node: identifier = 'state'
                          Node: = = '='
                          Node: identifier = 'AuthState'
                          Node: selector = '.authenticated'
                            Node: unconditional_assignable_selector = '.authenticated'
                              Node: . = '.'
                              Node: identifier = 'authenticated'
                          Node: selector = '(user)'
                            Node: argument_part = '(user)'
                              Node: arguments = '(user)'
                                Node: ( = '('
                                Node: argument = 'user'
                                  Node: identifier = 'user'
                                Node: ) = ')'
                        Node: ; = ';'
                      Node: } = '}'
                    Node: else = 'else'
                    Node: block = '{
          state = const AuthState.error('Failed to sign in with custom token');
        }'
                      Node: { = '{'
                      Node: expression_statement = 'state = const AuthState.error('Failed to sign in with custom token');'
                        Node: assignment_expression = 'state = const AuthState.error('Failed to sign in with custom token')'
                          Node: assignable_expression = 'state'
                            Node: identifier = 'state'
                          Node: = = '='
                          Node: const_object_expression = 'const AuthState.error('Failed to sign in with custom token')'
                            Node: const_builtin = 'const'
                            Node: type_identifier = 'AuthState'
                            Node: . = '.'
                            Node: identifier = 'error'
                            Node: arguments = '('Failed to sign in with custom token')'
                              Node: ( = '('
                              Node: argument = ''Failed to sign in with custom token''
                                Node: string_literal = ''Failed to sign in with custom token''
                                  Node: ' = '''
                                  Node: ' = '''
                              Node: ) = ')'
                        Node: ; = ';'
                      Node: } = '}'
                  Node: } = '}'
                Node: else = 'else'
                Node: block = '{
        state = const AuthState.error('LINE login failed');
      }'
                  Node: { = '{'
                  Node: expression_statement = 'state = const AuthState.error('LINE login failed');'
                    Node: assignment_expression = 'state = const AuthState.error('LINE login failed')'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: const_object_expression = 'const AuthState.error('LINE login failed')'
                        Node: const_builtin = 'const'
                        Node: type_identifier = 'AuthState'
                        Node: . = '.'
                        Node: identifier = 'error'
                        Node: arguments = '('LINE login failed')'
                          Node: ( = '('
                          Node: argument = ''LINE login failed''
                            Node: string_literal = ''LINE login failed''
                              Node: ' = '''
                              Node: ' = '''
                          Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// ログアウト'
        Node: /// = '///'
      Node: method_signature = 'Future<void> signOut()'
        Node: function_signature = 'Future<void> signOut()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'signOut'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: try_statement = 'try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    }'
              Node: { = '{'
              Node: expression_statement = 'await firebase_auth.FirebaseAuth.instance.signOut();'
                Node: unary_expression = 'await firebase_auth.FirebaseAuth.instance.signOut()'
                  Node: await_expression = 'await firebase_auth.FirebaseAuth.instance.signOut()'
                    Node: await = 'await'
                    Node: identifier = 'firebase_auth'
                    Node: selector = '.FirebaseAuth'
                      Node: unconditional_assignable_selector = '.FirebaseAuth'
                        Node: . = '.'
                        Node: identifier = 'FirebaseAuth'
                    Node: selector = '.instance'
                      Node: unconditional_assignable_selector = '.instance'
                        Node: . = '.'
                        Node: identifier = 'instance'
                    Node: selector = '.signOut'
                      Node: unconditional_assignable_selector = '.signOut'
                        Node: . = '.'
                        Node: identifier = 'signOut'
                    Node: selector = '()'
                      Node: argument_part = '()'
                        Node: arguments = '()'
                          Node: ( = '('
                          Node: ) = ')'
                Node: ; = ';'
              Node: expression_statement = 'state = const AuthState.unauthenticated();'
                Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: const_object_expression = 'const AuthState.unauthenticated()'
                    Node: const_builtin = 'const'
                    Node: type_identifier = 'AuthState'
                    Node: . = '.'
                    Node: identifier = 'unauthenticated'
                    Node: arguments = '()'
                      Node: ( = '('
                      Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// 現在のユーザーを取得'
        Node: /// = '///'
      Node: method_signature = 'Future<void> getCurrentUser()'
        Node: function_signature = 'Future<void> getCurrentUser()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'getCurrentUser'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: expression_statement = 'state = const AuthState.loading();'
            Node: assignment_expression = 'state = const AuthState.loading()'
              Node: assignable_expression = 'state'
                Node: identifier = 'state'
              Node: = = '='
              Node: const_object_expression = 'const AuthState.loading()'
                Node: const_builtin = 'const'
                Node: type_identifier = 'AuthState'
                Node: . = '.'
                Node: identifier = 'loading'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: ; = ';'
          Node: try_statement = 'try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    }'
              Node: { = '{'
              Node: local_variable_declaration = 'final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;'
                Node: initialized_variable_definition = 'final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser'
                  Node: final_builtin = 'final'
                    Node: final = 'final'
                  Node: identifier = 'firebaseUser'
                  Node: = = '='
                  Node: identifier = 'firebase_auth'
                  Node: selector = '.FirebaseAuth'
                    Node: unconditional_assignable_selector = '.FirebaseAuth'
                      Node: . = '.'
                      Node: identifier = 'FirebaseAuth'
                  Node: selector = '.instance'
                    Node: unconditional_assignable_selector = '.instance'
                      Node: . = '.'
                      Node: identifier = 'instance'
                  Node: selector = '.currentUser'
                    Node: unconditional_assignable_selector = '.currentUser'
                      Node: . = '.'
                      Node: identifier = 'currentUser'
                Node: ; = ';'
              Node: if_statement = 'if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }'
                Node: if = 'if'
                Node: ( = '('
                Node: equality_expression = 'firebaseUser != null'
                  Node: identifier = 'firebaseUser'
                  Node: equality_operator = '!='
                  Node: null_literal = 'null'
                    Node: null = 'null'
                Node: ) = ')'
                Node: block = '{
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      }'
                  Node: { = '{'
                  Node: comment = '// Firestoreからユーザー情報を取得'
                    Node: // = '//'
                  Node: comment = '// TODO: FirestoreServiceを使用してユーザー情報を取得'
                    Node: // = '//'
                  Node: local_variable_declaration = 'final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );'
                    Node: initialized_variable_definition = 'final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                      Node: final_builtin = 'final'
                        Node: final = 'final'
                      Node: identifier = 'user'
                      Node: = = '='
                      Node: identifier = 'AppUser'
                      Node: selector = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                        Node: argument_part = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                          Node: arguments = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                            Node: ( = '('
                            Node: named_argument = 'id: firebaseUser.uid'
                              Node: label = 'id:'
                                Node: identifier = 'id'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.uid'
                                Node: unconditional_assignable_selector = '.uid'
                                  Node: . = '.'
                                  Node: identifier = 'uid'
                            Node: , = ','
                            Node: named_argument = 'displayName: firebaseUser.displayName ?? 'Unknown User''
                              Node: label = 'displayName:'
                                Node: identifier = 'displayName'
                                Node: : = ':'
                              Node: if_null_expression = 'firebaseUser.displayName ?? 'Unknown User''
                                Node: identifier = 'firebaseUser'
                                Node: selector = '.displayName'
                                  Node: unconditional_assignable_selector = '.displayName'
                                    Node: . = '.'
                                    Node: identifier = 'displayName'
                                Node: ?? = '??'
                                Node: string_literal = ''Unknown User''
                                  Node: ' = '''
                                  Node: ' = '''
                            Node: , = ','
                            Node: named_argument = 'email: firebaseUser.email'
                              Node: label = 'email:'
                                Node: identifier = 'email'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.email'
                                Node: unconditional_assignable_selector = '.email'
                                  Node: . = '.'
                                  Node: identifier = 'email'
                            Node: , = ','
                            Node: named_argument = 'photoURL: firebaseUser.photoURL'
                              Node: label = 'photoURL:'
                                Node: identifier = 'photoURL'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.photoURL'
                                Node: unconditional_assignable_selector = '.photoURL'
                                  Node: . = '.'
                                  Node: identifier = 'photoURL'
                            Node: , = ','
                            Node: named_argument = 'provider: 'line''
                              Node: label = 'provider:'
                                Node: identifier = 'provider'
                                Node: : = ':'
                              Node: string_literal = ''line''
                                Node: ' = '''
                                Node: ' = '''
                            Node: , = ','
                            Node: ) = ')'
                    Node: ; = ';'
                  Node: expression_statement = 'state = AuthState.authenticated(user);'
                    Node: assignment_expression = 'state = AuthState.authenticated(user)'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: identifier = 'AuthState'
                      Node: selector = '.authenticated'
                        Node: unconditional_assignable_selector = '.authenticated'
                          Node: . = '.'
                          Node: identifier = 'authenticated'
                      Node: selector = '(user)'
                        Node: argument_part = '(user)'
                          Node: arguments = '(user)'
                            Node: ( = '('
                            Node: argument = 'user'
                              Node: identifier = 'user'
                            Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
                Node: else = 'else'
                Node: block = '{
        state = const AuthState.unauthenticated();
      }'
                  Node: { = '{'
                  Node: expression_statement = 'state = const AuthState.unauthenticated();'
                    Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: const_object_expression = 'const AuthState.unauthenticated()'
                        Node: const_builtin = 'const'
                        Node: type_identifier = 'AuthState'
                        Node: . = '.'
                        Node: identifier = 'unauthenticated'
                        Node: arguments = '()'
                          Node: ( = '('
                          Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// 認証状態の監視'
        Node: /// = '///'
      Node: method_signature = 'void listenToAuthChanges()'
        Node: function_signature = 'void listenToAuthChanges()'
          Node: void_type = 'void'
          Node: identifier = 'listenToAuthChanges'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = '{
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }'
        Node: block = '{
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }'
          Node: { = '{'
          Node: expression_statement = 'firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });'
            Node: identifier = 'firebase_auth'
            Node: selector = '.FirebaseAuth'
              Node: unconditional_assignable_selector = '.FirebaseAuth'
                Node: . = '.'
                Node: identifier = 'FirebaseAuth'
            Node: selector = '.instance'
              Node: unconditional_assignable_selector = '.instance'
                Node: . = '.'
                Node: identifier = 'instance'
            Node: selector = '.authStateChanges'
              Node: unconditional_assignable_selector = '.authStateChanges'
                Node: . = '.'
                Node: identifier = 'authStateChanges'
            Node: selector = '()'
              Node: argument_part = '()'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: selector = '.listen'
              Node: unconditional_assignable_selector = '.listen'
                Node: . = '.'
                Node: identifier = 'listen'
            Node: selector = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
              Node: argument_part = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
                Node: arguments = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
                  Node: ( = '('
                  Node: argument = '(firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                    Node: function_expression = '(firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                      Node: formal_parameter_list = '(firebaseUser)'
                        Node: ( = '('
                        Node: formal_parameter = 'firebaseUser'
                          Node: identifier = 'firebaseUser'
                        Node: ) = ')'
                      Node: function_expression_body = '{
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                        Node: block = '{
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                          Node: { = '{'
                          Node: if_statement = 'if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }'
                            Node: if = 'if'
                            Node: ( = '('
                            Node: equality_expression = 'firebaseUser != null'
                              Node: identifier = 'firebaseUser'
                              Node: equality_operator = '!='
                              Node: null_literal = 'null'
                                Node: null = 'null'
                            Node: ) = ')'
                            Node: block = '{
        // ユーザーがログインしている場合
        getCurrentUser();
      }'
                              Node: { = '{'
                              Node: comment = '// ユーザーがログインしている場合'
                                Node: // = '//'
                              Node: expression_statement = 'getCurrentUser();'
                                Node: identifier = 'getCurrentUser'
                                Node: selector = '()'
                                  Node: argument_part = '()'
                                    Node: arguments = '()'
                                      Node: ( = '('
                                      Node: ) = ')'
                                Node: ; = ';'
                              Node: } = '}'
                            Node: else = 'else'
                            Node: block = '{
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }'
                              Node: { = '{'
                              Node: comment = '// ユーザーがログアウトしている場合'
                                Node: // = '//'
                              Node: expression_statement = 'state = const AuthState.unauthenticated();'
                                Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                                  Node: assignable_expression = 'state'
                                    Node: identifier = 'state'
                                  Node: = = '='
                                  Node: const_object_expression = 'const AuthState.unauthenticated()'
                                    Node: const_builtin = 'const'
                                    Node: type_identifier = 'AuthState'
                                    Node: . = '.'
                                    Node: identifier = 'unauthenticated'
                                    Node: arguments = '()'
                                      Node: ( = '('
                                      Node: ) = ')'
                                Node: ; = ';'
                              Node: } = '}'
                          Node: } = '}'
                  Node: ) = ')'
            Node: ; = ';'
          Node: } = '}'
      Node: } = '}'
  Node: documentation_comment = '/// 認証状態プロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'AuthState authState(Ref ref)'
    Node: type_identifier = 'AuthState'
    Node: identifier = 'authState'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}'
    Node: block = '{
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}'
      Node: { = '{'
      Node: comment = '// 初回起動時に認証状態を監視開始'
        Node: // = '//'
      Node: expression_statement = 'ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });'
        Node: identifier = 'ref'
        Node: selector = '.listen'
          Node: unconditional_assignable_selector = '.listen'
            Node: . = '.'
            Node: identifier = 'listen'
        Node: selector = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
          Node: argument_part = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
            Node: arguments = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
              Node: ( = '('
              Node: argument = 'authNotifierProvider'
                Node: identifier = 'authNotifierProvider'
              Node: , = ','
              Node: argument = '(previous, next) {
    // 認証状態が変更された時の処理
  }'
                Node: function_expression = '(previous, next) {
    // 認証状態が変更された時の処理
  }'
                  Node: formal_parameter_list = '(previous, next)'
                    Node: ( = '('
                    Node: formal_parameter = 'previous'
                      Node: identifier = 'previous'
                    Node: , = ','
                    Node: formal_parameter = 'next'
                      Node: identifier = 'next'
                    Node: ) = ')'
                  Node: function_expression_body = '{
    // 認証状態が変更された時の処理
  }'
                    Node: block = '{
    // 認証状態が変更された時の処理
  }'
                      Node: { = '{'
                      Node: comment = '// 認証状態が変更された時の処理'
                        Node: // = '//'
                      Node: } = '}'
              Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return ref.watch(authNotifierProvider);'
        Node: return = 'return'
        Node: identifier = 'ref'
        Node: selector = '.watch'
          Node: unconditional_assignable_selector = '.watch'
            Node: . = '.'
            Node: identifier = 'watch'
        Node: selector = '(authNotifierProvider)'
          Node: argument_part = '(authNotifierProvider)'
            Node: arguments = '(authNotifierProvider)'
              Node: ( = '('
              Node: argument = 'authNotifierProvider'
                Node: identifier = 'authNotifierProvider'
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
  Node: documentation_comment = '/// 現在のユーザープロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'AppUser? currentUser(Ref ref)'
    Node: type_identifier = 'AppUser'
    Node: nullable_type = '?'
      Node: ? = '?'
    Node: identifier = 'currentUser'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}'
    Node: block = '{
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}'
      Node: { = '{'
      Node: local_variable_declaration = 'final authState = ref.watch(authStateProvider);'
        Node: initialized_variable_definition = 'final authState = ref.watch(authStateProvider)'
          Node: final_builtin = 'final'
            Node: final = 'final'
          Node: identifier = 'authState'
          Node: = = '='
          Node: identifier = 'ref'
          Node: selector = '.watch'
            Node: unconditional_assignable_selector = '.watch'
              Node: . = '.'
              Node: identifier = 'watch'
          Node: selector = '(authStateProvider)'
            Node: argument_part = '(authStateProvider)'
              Node: arguments = '(authStateProvider)'
                Node: ( = '('
                Node: argument = 'authStateProvider'
                  Node: identifier = 'authStateProvider'
                Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );'
        Node: return = 'return'
        Node: identifier = 'authState'
        Node: selector = '.when'
          Node: unconditional_assignable_selector = '.when'
            Node: . = '.'
            Node: identifier = 'when'
        Node: selector = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
          Node: argument_part = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
            Node: arguments = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
              Node: ( = '('
              Node: named_argument = 'authenticated: (user) => user'
                Node: label = 'authenticated:'
                  Node: identifier = 'authenticated'
                  Node: : = ':'
                Node: function_expression = '(user) => user'
                  Node: formal_parameter_list = '(user)'
                    Node: ( = '('
                    Node: formal_parameter = 'user'
                      Node: identifier = 'user'
                    Node: ) = ')'
                  Node: function_expression_body = '=> user'
                    Node: => = '=>'
                    Node: identifier = 'user'
              Node: , = ','
              Node: named_argument = 'initial: () => null'
                Node: label = 'initial:'
                  Node: identifier = 'initial'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'loading: () => null'
                Node: label = 'loading:'
                  Node: identifier = 'loading'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'unauthenticated: () => null'
                Node: label = 'unauthenticated:'
                  Node: identifier = 'unauthenticated'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'error: (_) => null'
                Node: label = 'error:'
                  Node: identifier = 'error'
                  Node: : = ':'
                Node: function_expression = '(_) => null'
                  Node: formal_parameter_list = '(_)'
                    Node: ( = '('
                    Node: formal_parameter = '_'
                      Node: identifier = '_'
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
  Node: documentation_comment = '/// 認証済みかどうかのプロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'bool isAuthenticated(Ref ref)'
    Node: type_identifier = 'bool'
    Node: identifier = 'isAuthenticated'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}'
    Node: block = '{
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}'
      Node: { = '{'
      Node: local_variable_declaration = 'final authState = ref.watch(authStateProvider);'
        Node: initialized_variable_definition = 'final authState = ref.watch(authStateProvider)'
          Node: final_builtin = 'final'
            Node: final = 'final'
          Node: identifier = 'authState'
          Node: = = '='
          Node: identifier = 'ref'
          Node: selector = '.watch'
            Node: unconditional_assignable_selector = '.watch'
              Node: . = '.'
              Node: identifier = 'watch'
          Node: selector = '(authStateProvider)'
            Node: argument_part = '(authStateProvider)'
              Node: arguments = '(authStateProvider)'
                Node: ( = '('
                Node: argument = 'authStateProvider'
                  Node: identifier = 'authStateProvider'
                Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );'
        Node: return = 'return'
        Node: identifier = 'authState'
        Node: selector = '.maybeWhen'
          Node: unconditional_assignable_selector = '.maybeWhen'
            Node: . = '.'
            Node: identifier = 'maybeWhen'
        Node: selector = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
          Node: argument_part = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
            Node: arguments = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
              Node: ( = '('
              Node: named_argument = 'authenticated: (_) => true'
                Node: label = 'authenticated:'
                  Node: identifier = 'authenticated'
                  Node: : = ':'
                Node: function_expression = '(_) => true'
                  Node: formal_parameter_list = '(_)'
                    Node: ( = '('
                    Node: formal_parameter = '_'
                      Node: identifier = '_'
                    Node: ) = ')'
                  Node: function_expression_body = '=> true'
                    Node: => = '=>'
                    Node: true = 'true'
                      Node: true = 'true'
              Node: , = ','
              Node: named_argument = 'orElse: () => false'
                Node: label = 'orElse:'
                  Node: identifier = 'orElse'
                  Node: : = ':'
                Node: function_expression = '() => false'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> false'
                    Node: => = '=>'
                    Node: false = 'false'
                      Node: false = 'false'
              Node: , = ','
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
=== End AST ===

=== Complete AST for test_flutter_app/aminomi/lib/providers/auth_provider.dart ===
Node: program = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;
import 'package:riverpod/riverpod.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../models/user.dart';
import '../services/line_auth_service.dart';

part 'auth_provider.g.dart';

@riverpod
class AuthNotifier extends _$AuthNotifier {
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}

/// 認証状態プロバイダー
@riverpod
AuthState authState(Ref ref) {
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}

/// 現在のユーザープロバイダー
@riverpod
AppUser? currentUser(Ref ref) {
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}

/// 認証済みかどうかのプロバイダー
@riverpod
bool isAuthenticated(Ref ref) {
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}
'
  Node: import_or_export = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
    Node: library_import = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
      Node: import_specification = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
        Node: import = 'import'
        Node: configurable_uri = ''package:firebase_auth/firebase_auth.dart''
          Node: uri = ''package:firebase_auth/firebase_auth.dart''
            Node: string_literal = ''package:firebase_auth/firebase_auth.dart''
              Node: ' = '''
              Node: ' = '''
        Node: as = 'as'
        Node: identifier = 'firebase_auth'
        Node: ; = ';'
  Node: import_or_export = 'import 'package:riverpod/riverpod.dart';'
    Node: library_import = 'import 'package:riverpod/riverpod.dart';'
      Node: import_specification = 'import 'package:riverpod/riverpod.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:riverpod/riverpod.dart''
          Node: uri = ''package:riverpod/riverpod.dart''
            Node: string_literal = ''package:riverpod/riverpod.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
    Node: library_import = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
      Node: import_specification = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:riverpod_annotation/riverpod_annotation.dart''
          Node: uri = ''package:riverpod_annotation/riverpod_annotation.dart''
            Node: string_literal = ''package:riverpod_annotation/riverpod_annotation.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import 'package:flutter_riverpod/flutter_riverpod.dart';'
    Node: library_import = 'import 'package:flutter_riverpod/flutter_riverpod.dart';'
      Node: import_specification = 'import 'package:flutter_riverpod/flutter_riverpod.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:flutter_riverpod/flutter_riverpod.dart''
          Node: uri = ''package:flutter_riverpod/flutter_riverpod.dart''
            Node: string_literal = ''package:flutter_riverpod/flutter_riverpod.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import '../models/user.dart';'
    Node: library_import = 'import '../models/user.dart';'
      Node: import_specification = 'import '../models/user.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''../models/user.dart''
          Node: uri = ''../models/user.dart''
            Node: string_literal = ''../models/user.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import '../services/line_auth_service.dart';'
    Node: library_import = 'import '../services/line_auth_service.dart';'
      Node: import_specification = 'import '../services/line_auth_service.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''../services/line_auth_service.dart''
          Node: uri = ''../services/line_auth_service.dart''
            Node: string_literal = ''../services/line_auth_service.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: part_directive = 'part 'auth_provider.g.dart';'
    Node: part = 'part'
    Node: uri = ''auth_provider.g.dart''
      Node: string_literal = ''auth_provider.g.dart''
        Node: ' = '''
        Node: ' = '''
    Node: ; = ';'
  Node: class_definition = '@riverpod
class AuthNotifier extends _$AuthNotifier {
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}'
    Node: annotation = '@riverpod'
      Node: @ = '@'
      Node: identifier = 'riverpod'
    Node: class = 'class'
    Node: identifier = 'AuthNotifier'
    Node: superclass = 'extends _$AuthNotifier'
      Node: extends = 'extends'
      Node: type_identifier = '_$AuthNotifier'
    Node: class_body = '{
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}'
      Node: { = '{'
      Node: annotation = '@override'
        Node: @ = '@'
        Node: identifier = 'override'
      Node: method_signature = 'AuthState build()'
        Node: function_signature = 'AuthState build()'
          Node: type_identifier = 'AuthState'
          Node: identifier = 'build'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = '{
    return const AuthState.initial();
  }'
        Node: block = '{
    return const AuthState.initial();
  }'
          Node: { = '{'
          Node: return_statement = 'return const AuthState.initial();'
            Node: return = 'return'
            Node: const_object_expression = 'const AuthState.initial()'
              Node: const_builtin = 'const'
              Node: type_identifier = 'AuthState'
              Node: . = '.'
              Node: identifier = 'initial'
              Node: arguments = '()'
                Node: ( = '('
                Node: ) = ')'
            Node: ; = ';'
          Node: } = '}'
      Node: documentation_comment = '/// LINEログイン'
        Node: /// = '///'
      Node: method_signature = 'Future<void> signInWithLine()'
        Node: function_signature = 'Future<void> signInWithLine()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'signInWithLine'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: expression_statement = 'state = const AuthState.loading();'
            Node: assignment_expression = 'state = const AuthState.loading()'
              Node: assignable_expression = 'state'
                Node: identifier = 'state'
              Node: = = '='
              Node: const_object_expression = 'const AuthState.loading()'
                Node: const_builtin = 'const'
                Node: type_identifier = 'AuthState'
                Node: . = '.'
                Node: identifier = 'loading'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: ; = ';'
          Node: try_statement = 'try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    }'
              Node: { = '{'
              Node: local_variable_declaration = 'final result = await LineAuthService.login();'
                Node: initialized_variable_definition = 'final result = await LineAuthService.login()'
                  Node: final_builtin = 'final'
                    Node: final = 'final'
                  Node: identifier = 'result'
                  Node: = = '='
                  Node: unary_expression = 'await LineAuthService.login()'
                    Node: await_expression = 'await LineAuthService.login()'
                      Node: await = 'await'
                      Node: identifier = 'LineAuthService'
                      Node: selector = '.login'
                        Node: unconditional_assignable_selector = '.login'
                          Node: . = '.'
                          Node: identifier = 'login'
                      Node: selector = '()'
                        Node: argument_part = '()'
                          Node: arguments = '()'
                            Node: ( = '('
                            Node: ) = ')'
                Node: ; = ';'
              Node: if_statement = 'if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }'
                Node: if = 'if'
                Node: ( = '('
                Node: equality_expression = 'result != null'
                  Node: identifier = 'result'
                  Node: equality_operator = '!='
                  Node: null_literal = 'null'
                    Node: null = 'null'
                Node: ) = ')'
                Node: block = '{
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      }'
                  Node: { = '{'
                  Node: comment = '// Firebaseカスタムトークンでサインイン'
                    Node: // = '//'
                  Node: local_variable_declaration = 'final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );'
                    Node: initialized_variable_definition = 'final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                      Node: final_builtin = 'final'
                        Node: final = 'final'
                      Node: identifier = 'userCredential'
                      Node: = = '='
                      Node: unary_expression = 'await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                        Node: await_expression = 'await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                          Node: await = 'await'
                          Node: identifier = 'firebase_auth'
                          Node: selector = '.FirebaseAuth'
                            Node: unconditional_assignable_selector = '.FirebaseAuth'
                              Node: . = '.'
                              Node: identifier = 'FirebaseAuth'
                          Node: selector = '.instance'
                            Node: unconditional_assignable_selector = '.instance'
                              Node: . = '.'
                              Node: identifier = 'instance'
                          Node: selector = '.signInWithCustomToken'
                            Node: unconditional_assignable_selector = '.signInWithCustomToken'
                              Node: . = '.'
                              Node: identifier = 'signInWithCustomToken'
                          Node: selector = '(
          result.accessToken,
        )'
                            Node: argument_part = '(
          result.accessToken,
        )'
                              Node: arguments = '(
          result.accessToken,
        )'
                                Node: ( = '('
                                Node: argument = 'result.accessToken'
                                  Node: identifier = 'result'
                                  Node: selector = '.accessToken'
                                    Node: unconditional_assignable_selector = '.accessToken'
                                      Node: . = '.'
                                      Node: identifier = 'accessToken'
                                Node: , = ','
                                Node: ) = ')'
                    Node: ; = ';'
                  Node: if_statement = 'if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }'
                    Node: if = 'if'
                    Node: ( = '('
                    Node: equality_expression = 'userCredential.user != null'
                      Node: identifier = 'userCredential'
                      Node: selector = '.user'
                        Node: unconditional_assignable_selector = '.user'
                          Node: . = '.'
                          Node: identifier = 'user'
                      Node: equality_operator = '!='
                      Node: null_literal = 'null'
                        Node: null = 'null'
                    Node: ) = ')'
                    Node: block = '{
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        }'
                      Node: { = '{'
                      Node: local_variable_declaration = 'final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );'
                        Node: initialized_variable_definition = 'final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                          Node: final_builtin = 'final'
                            Node: final = 'final'
                          Node: identifier = 'user'
                          Node: = = '='
                          Node: identifier = 'AppUser'
                          Node: selector = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                            Node: argument_part = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                              Node: arguments = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                                Node: ( = '('
                                Node: named_argument = 'id: userCredential.user!.uid'
                                  Node: label = 'id:'
                                    Node: identifier = 'id'
                                    Node: : = ':'
                                  Node: identifier = 'userCredential'
                                  Node: selector = '.user'
                                    Node: unconditional_assignable_selector = '.user'
                                      Node: . = '.'
                                      Node: identifier = 'user'
                                  Node: selector = '!'
                                    Node: ! = '!'
                                  Node: selector = '.uid'
                                    Node: unconditional_assignable_selector = '.uid'
                                      Node: . = '.'
                                      Node: identifier = 'uid'
                                Node: , = ','
                                Node: named_argument = 'displayName: result.profile.displayName'
                                  Node: label = 'displayName:'
                                    Node: identifier = 'displayName'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.displayName'
                                    Node: unconditional_assignable_selector = '.displayName'
                                      Node: . = '.'
                                      Node: identifier = 'displayName'
                                Node: , = ','
                                Node: named_argument = 'photoURL: result.profile.pictureUrl'
                                  Node: label = 'photoURL:'
                                    Node: identifier = 'photoURL'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.pictureUrl'
                                    Node: unconditional_assignable_selector = '.pictureUrl'
                                      Node: . = '.'
                                      Node: identifier = 'pictureUrl'
                                Node: , = ','
                                Node: named_argument = 'statusMessage: result.profile.statusMessage'
                                  Node: label = 'statusMessage:'
                                    Node: identifier = 'statusMessage'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.statusMessage'
                                    Node: unconditional_assignable_selector = '.statusMessage'
                                      Node: . = '.'
                                      Node: identifier = 'statusMessage'
                                Node: , = ','
                                Node: named_argument = 'provider: 'line''
                                  Node: label = 'provider:'
                                    Node: identifier = 'provider'
                                    Node: : = ':'
                                  Node: string_literal = ''line''
                                    Node: ' = '''
                                    Node: ' = '''
                                Node: , = ','
                                Node: named_argument = 'createdAt: DateTime.now()'
                                  Node: label = 'createdAt:'
                                    Node: identifier = 'createdAt'
                                    Node: : = ':'
                                  Node: identifier = 'DateTime'
                                  Node: selector = '.now'
                                    Node: unconditional_assignable_selector = '.now'
                                      Node: . = '.'
                                      Node: identifier = 'now'
                                  Node: selector = '()'
                                    Node: argument_part = '()'
                                      Node: arguments = '()'
                                        Node: ( = '('
                                        Node: ) = ')'
                                Node: , = ','
                                Node: ) = ')'
                        Node: ; = ';'
                      Node: expression_statement = 'state = AuthState.authenticated(user);'
                        Node: assignment_expression = 'state = AuthState.authenticated(user)'
                          Node: assignable_expression = 'state'
                            Node: identifier = 'state'
                          Node: = = '='
                          Node: identifier = 'AuthState'
                          Node: selector = '.authenticated'
                            Node: unconditional_assignable_selector = '.authenticated'
                              Node: . = '.'
                              Node: identifier = 'authenticated'
                          Node: selector = '(user)'
                            Node: argument_part = '(user)'
                              Node: arguments = '(user)'
                                Node: ( = '('
                                Node: argument = 'user'
                                  Node: identifier = 'user'
                                Node: ) = ')'
                        Node: ; = ';'
                      Node: } = '}'
                    Node: else = 'else'
                    Node: block = '{
          state = const AuthState.error('Failed to sign in with custom token');
        }'
                      Node: { = '{'
                      Node: expression_statement = 'state = const AuthState.error('Failed to sign in with custom token');'
                        Node: assignment_expression = 'state = const AuthState.error('Failed to sign in with custom token')'
                          Node: assignable_expression = 'state'
                            Node: identifier = 'state'
                          Node: = = '='
                          Node: const_object_expression = 'const AuthState.error('Failed to sign in with custom token')'
                            Node: const_builtin = 'const'
                            Node: type_identifier = 'AuthState'
                            Node: . = '.'
                            Node: identifier = 'error'
                            Node: arguments = '('Failed to sign in with custom token')'
                              Node: ( = '('
                              Node: argument = ''Failed to sign in with custom token''
                                Node: string_literal = ''Failed to sign in with custom token''
                                  Node: ' = '''
                                  Node: ' = '''
                              Node: ) = ')'
                        Node: ; = ';'
                      Node: } = '}'
                  Node: } = '}'
                Node: else = 'else'
                Node: block = '{
        state = const AuthState.error('LINE login failed');
      }'
                  Node: { = '{'
                  Node: expression_statement = 'state = const AuthState.error('LINE login failed');'
                    Node: assignment_expression = 'state = const AuthState.error('LINE login failed')'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: const_object_expression = 'const AuthState.error('LINE login failed')'
                        Node: const_builtin = 'const'
                        Node: type_identifier = 'AuthState'
                        Node: . = '.'
                        Node: identifier = 'error'
                        Node: arguments = '('LINE login failed')'
                          Node: ( = '('
                          Node: argument = ''LINE login failed''
                            Node: string_literal = ''LINE login failed''
                              Node: ' = '''
                              Node: ' = '''
                          Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// ログアウト'
        Node: /// = '///'
      Node: method_signature = 'Future<void> signOut()'
        Node: function_signature = 'Future<void> signOut()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'signOut'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: try_statement = 'try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    }'
              Node: { = '{'
              Node: expression_statement = 'await firebase_auth.FirebaseAuth.instance.signOut();'
                Node: unary_expression = 'await firebase_auth.FirebaseAuth.instance.signOut()'
                  Node: await_expression = 'await firebase_auth.FirebaseAuth.instance.signOut()'
                    Node: await = 'await'
                    Node: identifier = 'firebase_auth'
                    Node: selector = '.FirebaseAuth'
                      Node: unconditional_assignable_selector = '.FirebaseAuth'
                        Node: . = '.'
                        Node: identifier = 'FirebaseAuth'
                    Node: selector = '.instance'
                      Node: unconditional_assignable_selector = '.instance'
                        Node: . = '.'
                        Node: identifier = 'instance'
                    Node: selector = '.signOut'
                      Node: unconditional_assignable_selector = '.signOut'
                        Node: . = '.'
                        Node: identifier = 'signOut'
                    Node: selector = '()'
                      Node: argument_part = '()'
                        Node: arguments = '()'
                          Node: ( = '('
                          Node: ) = ')'
                Node: ; = ';'
              Node: expression_statement = 'state = const AuthState.unauthenticated();'
                Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: const_object_expression = 'const AuthState.unauthenticated()'
                    Node: const_builtin = 'const'
                    Node: type_identifier = 'AuthState'
                    Node: . = '.'
                    Node: identifier = 'unauthenticated'
                    Node: arguments = '()'
                      Node: ( = '('
                      Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// 現在のユーザーを取得'
        Node: /// = '///'
      Node: method_signature = 'Future<void> getCurrentUser()'
        Node: function_signature = 'Future<void> getCurrentUser()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'getCurrentUser'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: expression_statement = 'state = const AuthState.loading();'
            Node: assignment_expression = 'state = const AuthState.loading()'
              Node: assignable_expression = 'state'
                Node: identifier = 'state'
              Node: = = '='
              Node: const_object_expression = 'const AuthState.loading()'
                Node: const_builtin = 'const'
                Node: type_identifier = 'AuthState'
                Node: . = '.'
                Node: identifier = 'loading'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: ; = ';'
          Node: try_statement = 'try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    }'
              Node: { = '{'
              Node: local_variable_declaration = 'final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;'
                Node: initialized_variable_definition = 'final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser'
                  Node: final_builtin = 'final'
                    Node: final = 'final'
                  Node: identifier = 'firebaseUser'
                  Node: = = '='
                  Node: identifier = 'firebase_auth'
                  Node: selector = '.FirebaseAuth'
                    Node: unconditional_assignable_selector = '.FirebaseAuth'
                      Node: . = '.'
                      Node: identifier = 'FirebaseAuth'
                  Node: selector = '.instance'
                    Node: unconditional_assignable_selector = '.instance'
                      Node: . = '.'
                      Node: identifier = 'instance'
                  Node: selector = '.currentUser'
                    Node: unconditional_assignable_selector = '.currentUser'
                      Node: . = '.'
                      Node: identifier = 'currentUser'
                Node: ; = ';'
              Node: if_statement = 'if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }'
                Node: if = 'if'
                Node: ( = '('
                Node: equality_expression = 'firebaseUser != null'
                  Node: identifier = 'firebaseUser'
                  Node: equality_operator = '!='
                  Node: null_literal = 'null'
                    Node: null = 'null'
                Node: ) = ')'
                Node: block = '{
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      }'
                  Node: { = '{'
                  Node: comment = '// Firestoreからユーザー情報を取得'
                    Node: // = '//'
                  Node: comment = '// TODO: FirestoreServiceを使用してユーザー情報を取得'
                    Node: // = '//'
                  Node: local_variable_declaration = 'final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );'
                    Node: initialized_variable_definition = 'final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                      Node: final_builtin = 'final'
                        Node: final = 'final'
                      Node: identifier = 'user'
                      Node: = = '='
                      Node: identifier = 'AppUser'
                      Node: selector = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                        Node: argument_part = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                          Node: arguments = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                            Node: ( = '('
                            Node: named_argument = 'id: firebaseUser.uid'
                              Node: label = 'id:'
                                Node: identifier = 'id'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.uid'
                                Node: unconditional_assignable_selector = '.uid'
                                  Node: . = '.'
                                  Node: identifier = 'uid'
                            Node: , = ','
                            Node: named_argument = 'displayName: firebaseUser.displayName ?? 'Unknown User''
                              Node: label = 'displayName:'
                                Node: identifier = 'displayName'
                                Node: : = ':'
                              Node: if_null_expression = 'firebaseUser.displayName ?? 'Unknown User''
                                Node: identifier = 'firebaseUser'
                                Node: selector = '.displayName'
                                  Node: unconditional_assignable_selector = '.displayName'
                                    Node: . = '.'
                                    Node: identifier = 'displayName'
                                Node: ?? = '??'
                                Node: string_literal = ''Unknown User''
                                  Node: ' = '''
                                  Node: ' = '''
                            Node: , = ','
                            Node: named_argument = 'email: firebaseUser.email'
                              Node: label = 'email:'
                                Node: identifier = 'email'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.email'
                                Node: unconditional_assignable_selector = '.email'
                                  Node: . = '.'
                                  Node: identifier = 'email'
                            Node: , = ','
                            Node: named_argument = 'photoURL: firebaseUser.photoURL'
                              Node: label = 'photoURL:'
                                Node: identifier = 'photoURL'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.photoURL'
                                Node: unconditional_assignable_selector = '.photoURL'
                                  Node: . = '.'
                                  Node: identifier = 'photoURL'
                            Node: , = ','
                            Node: named_argument = 'provider: 'line''
                              Node: label = 'provider:'
                                Node: identifier = 'provider'
                                Node: : = ':'
                              Node: string_literal = ''line''
                                Node: ' = '''
                                Node: ' = '''
                            Node: , = ','
                            Node: ) = ')'
                    Node: ; = ';'
                  Node: expression_statement = 'state = AuthState.authenticated(user);'
                    Node: assignment_expression = 'state = AuthState.authenticated(user)'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: identifier = 'AuthState'
                      Node: selector = '.authenticated'
                        Node: unconditional_assignable_selector = '.authenticated'
                          Node: . = '.'
                          Node: identifier = 'authenticated'
                      Node: selector = '(user)'
                        Node: argument_part = '(user)'
                          Node: arguments = '(user)'
                            Node: ( = '('
                            Node: argument = 'user'
                              Node: identifier = 'user'
                            Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
                Node: else = 'else'
                Node: block = '{
        state = const AuthState.unauthenticated();
      }'
                  Node: { = '{'
                  Node: expression_statement = 'state = const AuthState.unauthenticated();'
                    Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: const_object_expression = 'const AuthState.unauthenticated()'
                        Node: const_builtin = 'const'
                        Node: type_identifier = 'AuthState'
                        Node: . = '.'
                        Node: identifier = 'unauthenticated'
                        Node: arguments = '()'
                          Node: ( = '('
                          Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// 認証状態の監視'
        Node: /// = '///'
      Node: method_signature = 'void listenToAuthChanges()'
        Node: function_signature = 'void listenToAuthChanges()'
          Node: void_type = 'void'
          Node: identifier = 'listenToAuthChanges'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = '{
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }'
        Node: block = '{
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }'
          Node: { = '{'
          Node: expression_statement = 'firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });'
            Node: identifier = 'firebase_auth'
            Node: selector = '.FirebaseAuth'
              Node: unconditional_assignable_selector = '.FirebaseAuth'
                Node: . = '.'
                Node: identifier = 'FirebaseAuth'
            Node: selector = '.instance'
              Node: unconditional_assignable_selector = '.instance'
                Node: . = '.'
                Node: identifier = 'instance'
            Node: selector = '.authStateChanges'
              Node: unconditional_assignable_selector = '.authStateChanges'
                Node: . = '.'
                Node: identifier = 'authStateChanges'
            Node: selector = '()'
              Node: argument_part = '()'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: selector = '.listen'
              Node: unconditional_assignable_selector = '.listen'
                Node: . = '.'
                Node: identifier = 'listen'
            Node: selector = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
              Node: argument_part = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
                Node: arguments = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
                  Node: ( = '('
                  Node: argument = '(firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                    Node: function_expression = '(firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                      Node: formal_parameter_list = '(firebaseUser)'
                        Node: ( = '('
                        Node: formal_parameter = 'firebaseUser'
                          Node: identifier = 'firebaseUser'
                        Node: ) = ')'
                      Node: function_expression_body = '{
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                        Node: block = '{
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                          Node: { = '{'
                          Node: if_statement = 'if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }'
                            Node: if = 'if'
                            Node: ( = '('
                            Node: equality_expression = 'firebaseUser != null'
                              Node: identifier = 'firebaseUser'
                              Node: equality_operator = '!='
                              Node: null_literal = 'null'
                                Node: null = 'null'
                            Node: ) = ')'
                            Node: block = '{
        // ユーザーがログインしている場合
        getCurrentUser();
      }'
                              Node: { = '{'
                              Node: comment = '// ユーザーがログインしている場合'
                                Node: // = '//'
                              Node: expression_statement = 'getCurrentUser();'
                                Node: identifier = 'getCurrentUser'
                                Node: selector = '()'
                                  Node: argument_part = '()'
                                    Node: arguments = '()'
                                      Node: ( = '('
                                      Node: ) = ')'
                                Node: ; = ';'
                              Node: } = '}'
                            Node: else = 'else'
                            Node: block = '{
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }'
                              Node: { = '{'
                              Node: comment = '// ユーザーがログアウトしている場合'
                                Node: // = '//'
                              Node: expression_statement = 'state = const AuthState.unauthenticated();'
                                Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                                  Node: assignable_expression = 'state'
                                    Node: identifier = 'state'
                                  Node: = = '='
                                  Node: const_object_expression = 'const AuthState.unauthenticated()'
                                    Node: const_builtin = 'const'
                                    Node: type_identifier = 'AuthState'
                                    Node: . = '.'
                                    Node: identifier = 'unauthenticated'
                                    Node: arguments = '()'
                                      Node: ( = '('
                                      Node: ) = ')'
                                Node: ; = ';'
                              Node: } = '}'
                          Node: } = '}'
                  Node: ) = ')'
            Node: ; = ';'
          Node: } = '}'
      Node: } = '}'
  Node: documentation_comment = '/// 認証状態プロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'AuthState authState(Ref ref)'
    Node: type_identifier = 'AuthState'
    Node: identifier = 'authState'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}'
    Node: block = '{
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}'
      Node: { = '{'
      Node: comment = '// 初回起動時に認証状態を監視開始'
        Node: // = '//'
      Node: expression_statement = 'ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });'
        Node: identifier = 'ref'
        Node: selector = '.listen'
          Node: unconditional_assignable_selector = '.listen'
            Node: . = '.'
            Node: identifier = 'listen'
        Node: selector = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
          Node: argument_part = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
            Node: arguments = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
              Node: ( = '('
              Node: argument = 'authNotifierProvider'
                Node: identifier = 'authNotifierProvider'
              Node: , = ','
              Node: argument = '(previous, next) {
    // 認証状態が変更された時の処理
  }'
                Node: function_expression = '(previous, next) {
    // 認証状態が変更された時の処理
  }'
                  Node: formal_parameter_list = '(previous, next)'
                    Node: ( = '('
                    Node: formal_parameter = 'previous'
                      Node: identifier = 'previous'
                    Node: , = ','
                    Node: formal_parameter = 'next'
                      Node: identifier = 'next'
                    Node: ) = ')'
                  Node: function_expression_body = '{
    // 認証状態が変更された時の処理
  }'
                    Node: block = '{
    // 認証状態が変更された時の処理
  }'
                      Node: { = '{'
                      Node: comment = '// 認証状態が変更された時の処理'
                        Node: // = '//'
                      Node: } = '}'
              Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return ref.watch(authNotifierProvider);'
        Node: return = 'return'
        Node: identifier = 'ref'
        Node: selector = '.watch'
          Node: unconditional_assignable_selector = '.watch'
            Node: . = '.'
            Node: identifier = 'watch'
        Node: selector = '(authNotifierProvider)'
          Node: argument_part = '(authNotifierProvider)'
            Node: arguments = '(authNotifierProvider)'
              Node: ( = '('
              Node: argument = 'authNotifierProvider'
                Node: identifier = 'authNotifierProvider'
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
  Node: documentation_comment = '/// 現在のユーザープロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'AppUser? currentUser(Ref ref)'
    Node: type_identifier = 'AppUser'
    Node: nullable_type = '?'
      Node: ? = '?'
    Node: identifier = 'currentUser'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}'
    Node: block = '{
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}'
      Node: { = '{'
      Node: local_variable_declaration = 'final authState = ref.watch(authStateProvider);'
        Node: initialized_variable_definition = 'final authState = ref.watch(authStateProvider)'
          Node: final_builtin = 'final'
            Node: final = 'final'
          Node: identifier = 'authState'
          Node: = = '='
          Node: identifier = 'ref'
          Node: selector = '.watch'
            Node: unconditional_assignable_selector = '.watch'
              Node: . = '.'
              Node: identifier = 'watch'
          Node: selector = '(authStateProvider)'
            Node: argument_part = '(authStateProvider)'
              Node: arguments = '(authStateProvider)'
                Node: ( = '('
                Node: argument = 'authStateProvider'
                  Node: identifier = 'authStateProvider'
                Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );'
        Node: return = 'return'
        Node: identifier = 'authState'
        Node: selector = '.when'
          Node: unconditional_assignable_selector = '.when'
            Node: . = '.'
            Node: identifier = 'when'
        Node: selector = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
          Node: argument_part = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
            Node: arguments = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
              Node: ( = '('
              Node: named_argument = 'authenticated: (user) => user'
                Node: label = 'authenticated:'
                  Node: identifier = 'authenticated'
                  Node: : = ':'
                Node: function_expression = '(user) => user'
                  Node: formal_parameter_list = '(user)'
                    Node: ( = '('
                    Node: formal_parameter = 'user'
                      Node: identifier = 'user'
                    Node: ) = ')'
                  Node: function_expression_body = '=> user'
                    Node: => = '=>'
                    Node: identifier = 'user'
              Node: , = ','
              Node: named_argument = 'initial: () => null'
                Node: label = 'initial:'
                  Node: identifier = 'initial'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'loading: () => null'
                Node: label = 'loading:'
                  Node: identifier = 'loading'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'unauthenticated: () => null'
                Node: label = 'unauthenticated:'
                  Node: identifier = 'unauthenticated'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'error: (_) => null'
                Node: label = 'error:'
                  Node: identifier = 'error'
                  Node: : = ':'
                Node: function_expression = '(_) => null'
                  Node: formal_parameter_list = '(_)'
                    Node: ( = '('
                    Node: formal_parameter = '_'
                      Node: identifier = '_'
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
  Node: documentation_comment = '/// 認証済みかどうかのプロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'bool isAuthenticated(Ref ref)'
    Node: type_identifier = 'bool'
    Node: identifier = 'isAuthenticated'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}'
    Node: block = '{
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}'
      Node: { = '{'
      Node: local_variable_declaration = 'final authState = ref.watch(authStateProvider);'
        Node: initialized_variable_definition = 'final authState = ref.watch(authStateProvider)'
          Node: final_builtin = 'final'
            Node: final = 'final'
          Node: identifier = 'authState'
          Node: = = '='
          Node: identifier = 'ref'
          Node: selector = '.watch'
            Node: unconditional_assignable_selector = '.watch'
              Node: . = '.'
              Node: identifier = 'watch'
          Node: selector = '(authStateProvider)'
            Node: argument_part = '(authStateProvider)'
              Node: arguments = '(authStateProvider)'
                Node: ( = '('
                Node: argument = 'authStateProvider'
                  Node: identifier = 'authStateProvider'
                Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );'
        Node: return = 'return'
        Node: identifier = 'authState'
        Node: selector = '.maybeWhen'
          Node: unconditional_assignable_selector = '.maybeWhen'
            Node: . = '.'
            Node: identifier = 'maybeWhen'
        Node: selector = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
          Node: argument_part = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
            Node: arguments = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
              Node: ( = '('
              Node: named_argument = 'authenticated: (_) => true'
                Node: label = 'authenticated:'
                  Node: identifier = 'authenticated'
                  Node: : = ':'
                Node: function_expression = '(_) => true'
                  Node: formal_parameter_list = '(_)'
                    Node: ( = '('
                    Node: formal_parameter = '_'
                      Node: identifier = '_'
                    Node: ) = ')'
                  Node: function_expression_body = '=> true'
                    Node: => = '=>'
                    Node: true = 'true'
                      Node: true = 'true'
              Node: , = ','
              Node: named_argument = 'orElse: () => false'
                Node: label = 'orElse:'
                  Node: identifier = 'orElse'
                  Node: : = ':'
                Node: function_expression = '() => false'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> false'
                    Node: => = '=>'
                    Node: false = 'false'
                      Node: false = 'false'
              Node: , = ','
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
=== End AST ===

=== Complete AST for test_flutter_app/aminomi/lib/providers/auth_provider.dart ===
Node: program = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;
import 'package:riverpod/riverpod.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../models/user.dart';
import '../services/line_auth_service.dart';

part 'auth_provider.g.dart';

@riverpod
class AuthNotifier extends _$AuthNotifier {
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}

/// 認証状態プロバイダー
@riverpod
AuthState authState(Ref ref) {
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}

/// 現在のユーザープロバイダー
@riverpod
AppUser? currentUser(Ref ref) {
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}

/// 認証済みかどうかのプロバイダー
@riverpod
bool isAuthenticated(Ref ref) {
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}
'
  Node: import_or_export = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
    Node: library_import = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
      Node: import_specification = 'import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;'
        Node: import = 'import'
        Node: configurable_uri = ''package:firebase_auth/firebase_auth.dart''
          Node: uri = ''package:firebase_auth/firebase_auth.dart''
            Node: string_literal = ''package:firebase_auth/firebase_auth.dart''
              Node: ' = '''
              Node: ' = '''
        Node: as = 'as'
        Node: identifier = 'firebase_auth'
        Node: ; = ';'
  Node: import_or_export = 'import 'package:riverpod/riverpod.dart';'
    Node: library_import = 'import 'package:riverpod/riverpod.dart';'
      Node: import_specification = 'import 'package:riverpod/riverpod.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:riverpod/riverpod.dart''
          Node: uri = ''package:riverpod/riverpod.dart''
            Node: string_literal = ''package:riverpod/riverpod.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
    Node: library_import = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
      Node: import_specification = 'import 'package:riverpod_annotation/riverpod_annotation.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:riverpod_annotation/riverpod_annotation.dart''
          Node: uri = ''package:riverpod_annotation/riverpod_annotation.dart''
            Node: string_literal = ''package:riverpod_annotation/riverpod_annotation.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import 'package:flutter_riverpod/flutter_riverpod.dart';'
    Node: library_import = 'import 'package:flutter_riverpod/flutter_riverpod.dart';'
      Node: import_specification = 'import 'package:flutter_riverpod/flutter_riverpod.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''package:flutter_riverpod/flutter_riverpod.dart''
          Node: uri = ''package:flutter_riverpod/flutter_riverpod.dart''
            Node: string_literal = ''package:flutter_riverpod/flutter_riverpod.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import '../models/user.dart';'
    Node: library_import = 'import '../models/user.dart';'
      Node: import_specification = 'import '../models/user.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''../models/user.dart''
          Node: uri = ''../models/user.dart''
            Node: string_literal = ''../models/user.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: import_or_export = 'import '../services/line_auth_service.dart';'
    Node: library_import = 'import '../services/line_auth_service.dart';'
      Node: import_specification = 'import '../services/line_auth_service.dart';'
        Node: import = 'import'
        Node: configurable_uri = ''../services/line_auth_service.dart''
          Node: uri = ''../services/line_auth_service.dart''
            Node: string_literal = ''../services/line_auth_service.dart''
              Node: ' = '''
              Node: ' = '''
        Node: ; = ';'
  Node: part_directive = 'part 'auth_provider.g.dart';'
    Node: part = 'part'
    Node: uri = ''auth_provider.g.dart''
      Node: string_literal = ''auth_provider.g.dart''
        Node: ' = '''
        Node: ' = '''
    Node: ; = ';'
  Node: class_definition = '@riverpod
class AuthNotifier extends _$AuthNotifier {
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}'
    Node: annotation = '@riverpod'
      Node: @ = '@'
      Node: identifier = 'riverpod'
    Node: class = 'class'
    Node: identifier = 'AuthNotifier'
    Node: superclass = 'extends _$AuthNotifier'
      Node: extends = 'extends'
      Node: type_identifier = '_$AuthNotifier'
    Node: class_body = '{
  @override
  AuthState build() {
    return const AuthState.initial();
  }

  /// LINEログイン
  Future<void> signInWithLine() async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// ログアウト
  Future<void> signOut() async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 現在のユーザーを取得
  Future<void> getCurrentUser() async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }

  /// 認証状態の監視
  void listenToAuthChanges() {
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }
}'
      Node: { = '{'
      Node: annotation = '@override'
        Node: @ = '@'
        Node: identifier = 'override'
      Node: method_signature = 'AuthState build()'
        Node: function_signature = 'AuthState build()'
          Node: type_identifier = 'AuthState'
          Node: identifier = 'build'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = '{
    return const AuthState.initial();
  }'
        Node: block = '{
    return const AuthState.initial();
  }'
          Node: { = '{'
          Node: return_statement = 'return const AuthState.initial();'
            Node: return = 'return'
            Node: const_object_expression = 'const AuthState.initial()'
              Node: const_builtin = 'const'
              Node: type_identifier = 'AuthState'
              Node: . = '.'
              Node: identifier = 'initial'
              Node: arguments = '()'
                Node: ( = '('
                Node: ) = ')'
            Node: ; = ';'
          Node: } = '}'
      Node: documentation_comment = '/// LINEログイン'
        Node: /// = '///'
      Node: method_signature = 'Future<void> signInWithLine()'
        Node: function_signature = 'Future<void> signInWithLine()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'signInWithLine'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    state = const AuthState.loading();

    try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: expression_statement = 'state = const AuthState.loading();'
            Node: assignment_expression = 'state = const AuthState.loading()'
              Node: assignable_expression = 'state'
                Node: identifier = 'state'
              Node: = = '='
              Node: const_object_expression = 'const AuthState.loading()'
                Node: const_builtin = 'const'
                Node: type_identifier = 'AuthState'
                Node: . = '.'
                Node: identifier = 'loading'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: ; = ';'
          Node: try_statement = 'try {
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      final result = await LineAuthService.login();

      if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }
    }'
              Node: { = '{'
              Node: local_variable_declaration = 'final result = await LineAuthService.login();'
                Node: initialized_variable_definition = 'final result = await LineAuthService.login()'
                  Node: final_builtin = 'final'
                    Node: final = 'final'
                  Node: identifier = 'result'
                  Node: = = '='
                  Node: unary_expression = 'await LineAuthService.login()'
                    Node: await_expression = 'await LineAuthService.login()'
                      Node: await = 'await'
                      Node: identifier = 'LineAuthService'
                      Node: selector = '.login'
                        Node: unconditional_assignable_selector = '.login'
                          Node: . = '.'
                          Node: identifier = 'login'
                      Node: selector = '()'
                        Node: argument_part = '()'
                          Node: arguments = '()'
                            Node: ( = '('
                            Node: ) = ')'
                Node: ; = ';'
              Node: if_statement = 'if (result != null) {
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      } else {
        state = const AuthState.error('LINE login failed');
      }'
                Node: if = 'if'
                Node: ( = '('
                Node: equality_expression = 'result != null'
                  Node: identifier = 'result'
                  Node: equality_operator = '!='
                  Node: null_literal = 'null'
                    Node: null = 'null'
                Node: ) = ')'
                Node: block = '{
        // Firebaseカスタムトークンでサインイン
        final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );

        if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }
      }'
                  Node: { = '{'
                  Node: comment = '// Firebaseカスタムトークンでサインイン'
                    Node: // = '//'
                  Node: local_variable_declaration = 'final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        );'
                    Node: initialized_variable_definition = 'final userCredential =
            await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                      Node: final_builtin = 'final'
                        Node: final = 'final'
                      Node: identifier = 'userCredential'
                      Node: = = '='
                      Node: unary_expression = 'await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                        Node: await_expression = 'await firebase_auth.FirebaseAuth.instance.signInWithCustomToken(
          result.accessToken,
        )'
                          Node: await = 'await'
                          Node: identifier = 'firebase_auth'
                          Node: selector = '.FirebaseAuth'
                            Node: unconditional_assignable_selector = '.FirebaseAuth'
                              Node: . = '.'
                              Node: identifier = 'FirebaseAuth'
                          Node: selector = '.instance'
                            Node: unconditional_assignable_selector = '.instance'
                              Node: . = '.'
                              Node: identifier = 'instance'
                          Node: selector = '.signInWithCustomToken'
                            Node: unconditional_assignable_selector = '.signInWithCustomToken'
                              Node: . = '.'
                              Node: identifier = 'signInWithCustomToken'
                          Node: selector = '(
          result.accessToken,
        )'
                            Node: argument_part = '(
          result.accessToken,
        )'
                              Node: arguments = '(
          result.accessToken,
        )'
                                Node: ( = '('
                                Node: argument = 'result.accessToken'
                                  Node: identifier = 'result'
                                  Node: selector = '.accessToken'
                                    Node: unconditional_assignable_selector = '.accessToken'
                                      Node: . = '.'
                                      Node: identifier = 'accessToken'
                                Node: , = ','
                                Node: ) = ')'
                    Node: ; = ';'
                  Node: if_statement = 'if (userCredential.user != null) {
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        } else {
          state = const AuthState.error('Failed to sign in with custom token');
        }'
                    Node: if = 'if'
                    Node: ( = '('
                    Node: equality_expression = 'userCredential.user != null'
                      Node: identifier = 'userCredential'
                      Node: selector = '.user'
                        Node: unconditional_assignable_selector = '.user'
                          Node: . = '.'
                          Node: identifier = 'user'
                      Node: equality_operator = '!='
                      Node: null_literal = 'null'
                        Node: null = 'null'
                    Node: ) = ')'
                    Node: block = '{
          final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );

          state = AuthState.authenticated(user);
        }'
                      Node: { = '{'
                      Node: local_variable_declaration = 'final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          );'
                        Node: initialized_variable_definition = 'final user = AppUser(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                          Node: final_builtin = 'final'
                            Node: final = 'final'
                          Node: identifier = 'user'
                          Node: = = '='
                          Node: identifier = 'AppUser'
                          Node: selector = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                            Node: argument_part = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                              Node: arguments = '(
            id: userCredential.user!.uid,
            displayName: result.profile.displayName,
            photoURL: result.profile.pictureUrl,
            statusMessage: result.profile.statusMessage,
            provider: 'line',
            createdAt: DateTime.now(),
          )'
                                Node: ( = '('
                                Node: named_argument = 'id: userCredential.user!.uid'
                                  Node: label = 'id:'
                                    Node: identifier = 'id'
                                    Node: : = ':'
                                  Node: identifier = 'userCredential'
                                  Node: selector = '.user'
                                    Node: unconditional_assignable_selector = '.user'
                                      Node: . = '.'
                                      Node: identifier = 'user'
                                  Node: selector = '!'
                                    Node: ! = '!'
                                  Node: selector = '.uid'
                                    Node: unconditional_assignable_selector = '.uid'
                                      Node: . = '.'
                                      Node: identifier = 'uid'
                                Node: , = ','
                                Node: named_argument = 'displayName: result.profile.displayName'
                                  Node: label = 'displayName:'
                                    Node: identifier = 'displayName'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.displayName'
                                    Node: unconditional_assignable_selector = '.displayName'
                                      Node: . = '.'
                                      Node: identifier = 'displayName'
                                Node: , = ','
                                Node: named_argument = 'photoURL: result.profile.pictureUrl'
                                  Node: label = 'photoURL:'
                                    Node: identifier = 'photoURL'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.pictureUrl'
                                    Node: unconditional_assignable_selector = '.pictureUrl'
                                      Node: . = '.'
                                      Node: identifier = 'pictureUrl'
                                Node: , = ','
                                Node: named_argument = 'statusMessage: result.profile.statusMessage'
                                  Node: label = 'statusMessage:'
                                    Node: identifier = 'statusMessage'
                                    Node: : = ':'
                                  Node: identifier = 'result'
                                  Node: selector = '.profile'
                                    Node: unconditional_assignable_selector = '.profile'
                                      Node: . = '.'
                                      Node: identifier = 'profile'
                                  Node: selector = '.statusMessage'
                                    Node: unconditional_assignable_selector = '.statusMessage'
                                      Node: . = '.'
                                      Node: identifier = 'statusMessage'
                                Node: , = ','
                                Node: named_argument = 'provider: 'line''
                                  Node: label = 'provider:'
                                    Node: identifier = 'provider'
                                    Node: : = ':'
                                  Node: string_literal = ''line''
                                    Node: ' = '''
                                    Node: ' = '''
                                Node: , = ','
                                Node: named_argument = 'createdAt: DateTime.now()'
                                  Node: label = 'createdAt:'
                                    Node: identifier = 'createdAt'
                                    Node: : = ':'
                                  Node: identifier = 'DateTime'
                                  Node: selector = '.now'
                                    Node: unconditional_assignable_selector = '.now'
                                      Node: . = '.'
                                      Node: identifier = 'now'
                                  Node: selector = '()'
                                    Node: argument_part = '()'
                                      Node: arguments = '()'
                                        Node: ( = '('
                                        Node: ) = ')'
                                Node: , = ','
                                Node: ) = ')'
                        Node: ; = ';'
                      Node: expression_statement = 'state = AuthState.authenticated(user);'
                        Node: assignment_expression = 'state = AuthState.authenticated(user)'
                          Node: assignable_expression = 'state'
                            Node: identifier = 'state'
                          Node: = = '='
                          Node: identifier = 'AuthState'
                          Node: selector = '.authenticated'
                            Node: unconditional_assignable_selector = '.authenticated'
                              Node: . = '.'
                              Node: identifier = 'authenticated'
                          Node: selector = '(user)'
                            Node: argument_part = '(user)'
                              Node: arguments = '(user)'
                                Node: ( = '('
                                Node: argument = 'user'
                                  Node: identifier = 'user'
                                Node: ) = ')'
                        Node: ; = ';'
                      Node: } = '}'
                    Node: else = 'else'
                    Node: block = '{
          state = const AuthState.error('Failed to sign in with custom token');
        }'
                      Node: { = '{'
                      Node: expression_statement = 'state = const AuthState.error('Failed to sign in with custom token');'
                        Node: assignment_expression = 'state = const AuthState.error('Failed to sign in with custom token')'
                          Node: assignable_expression = 'state'
                            Node: identifier = 'state'
                          Node: = = '='
                          Node: const_object_expression = 'const AuthState.error('Failed to sign in with custom token')'
                            Node: const_builtin = 'const'
                            Node: type_identifier = 'AuthState'
                            Node: . = '.'
                            Node: identifier = 'error'
                            Node: arguments = '('Failed to sign in with custom token')'
                              Node: ( = '('
                              Node: argument = ''Failed to sign in with custom token''
                                Node: string_literal = ''Failed to sign in with custom token''
                                  Node: ' = '''
                                  Node: ' = '''
                              Node: ) = ')'
                        Node: ; = ';'
                      Node: } = '}'
                  Node: } = '}'
                Node: else = 'else'
                Node: block = '{
        state = const AuthState.error('LINE login failed');
      }'
                  Node: { = '{'
                  Node: expression_statement = 'state = const AuthState.error('LINE login failed');'
                    Node: assignment_expression = 'state = const AuthState.error('LINE login failed')'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: const_object_expression = 'const AuthState.error('LINE login failed')'
                        Node: const_builtin = 'const'
                        Node: type_identifier = 'AuthState'
                        Node: . = '.'
                        Node: identifier = 'error'
                        Node: arguments = '('LINE login failed')'
                          Node: ( = '('
                          Node: argument = ''LINE login failed''
                            Node: string_literal = ''LINE login failed''
                              Node: ' = '''
                              Node: ' = '''
                          Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// ログアウト'
        Node: /// = '///'
      Node: method_signature = 'Future<void> signOut()'
        Node: function_signature = 'Future<void> signOut()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'signOut'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: try_statement = 'try {
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      await firebase_auth.FirebaseAuth.instance.signOut();
      state = const AuthState.unauthenticated();
    }'
              Node: { = '{'
              Node: expression_statement = 'await firebase_auth.FirebaseAuth.instance.signOut();'
                Node: unary_expression = 'await firebase_auth.FirebaseAuth.instance.signOut()'
                  Node: await_expression = 'await firebase_auth.FirebaseAuth.instance.signOut()'
                    Node: await = 'await'
                    Node: identifier = 'firebase_auth'
                    Node: selector = '.FirebaseAuth'
                      Node: unconditional_assignable_selector = '.FirebaseAuth'
                        Node: . = '.'
                        Node: identifier = 'FirebaseAuth'
                    Node: selector = '.instance'
                      Node: unconditional_assignable_selector = '.instance'
                        Node: . = '.'
                        Node: identifier = 'instance'
                    Node: selector = '.signOut'
                      Node: unconditional_assignable_selector = '.signOut'
                        Node: . = '.'
                        Node: identifier = 'signOut'
                    Node: selector = '()'
                      Node: argument_part = '()'
                        Node: arguments = '()'
                          Node: ( = '('
                          Node: ) = ')'
                Node: ; = ';'
              Node: expression_statement = 'state = const AuthState.unauthenticated();'
                Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: const_object_expression = 'const AuthState.unauthenticated()'
                    Node: const_builtin = 'const'
                    Node: type_identifier = 'AuthState'
                    Node: . = '.'
                    Node: identifier = 'unauthenticated'
                    Node: arguments = '()'
                      Node: ( = '('
                      Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// 現在のユーザーを取得'
        Node: /// = '///'
      Node: method_signature = 'Future<void> getCurrentUser()'
        Node: function_signature = 'Future<void> getCurrentUser()'
          Node: type_identifier = 'Future'
          Node: type_arguments = '<void>'
            Node: < = '<'
            Node: void_type = 'void'
            Node: > = '>'
          Node: identifier = 'getCurrentUser'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = 'async {
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
        Node: async = 'async'
        Node: block = '{
    state = const AuthState.loading();

    try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }
  }'
          Node: { = '{'
          Node: expression_statement = 'state = const AuthState.loading();'
            Node: assignment_expression = 'state = const AuthState.loading()'
              Node: assignable_expression = 'state'
                Node: identifier = 'state'
              Node: = = '='
              Node: const_object_expression = 'const AuthState.loading()'
                Node: const_builtin = 'const'
                Node: type_identifier = 'AuthState'
                Node: . = '.'
                Node: identifier = 'loading'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: ; = ';'
          Node: try_statement = 'try {
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      state = AuthState.error(e.toString());
    }'
            Node: try = 'try'
            Node: block = '{
      final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }
    }'
              Node: { = '{'
              Node: local_variable_declaration = 'final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser;'
                Node: initialized_variable_definition = 'final firebaseUser = firebase_auth.FirebaseAuth.instance.currentUser'
                  Node: final_builtin = 'final'
                    Node: final = 'final'
                  Node: identifier = 'firebaseUser'
                  Node: = = '='
                  Node: identifier = 'firebase_auth'
                  Node: selector = '.FirebaseAuth'
                    Node: unconditional_assignable_selector = '.FirebaseAuth'
                      Node: . = '.'
                      Node: identifier = 'FirebaseAuth'
                  Node: selector = '.instance'
                    Node: unconditional_assignable_selector = '.instance'
                      Node: . = '.'
                      Node: identifier = 'instance'
                  Node: selector = '.currentUser'
                    Node: unconditional_assignable_selector = '.currentUser'
                      Node: . = '.'
                      Node: identifier = 'currentUser'
                Node: ; = ';'
              Node: if_statement = 'if (firebaseUser != null) {
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      } else {
        state = const AuthState.unauthenticated();
      }'
                Node: if = 'if'
                Node: ( = '('
                Node: equality_expression = 'firebaseUser != null'
                  Node: identifier = 'firebaseUser'
                  Node: equality_operator = '!='
                  Node: null_literal = 'null'
                    Node: null = 'null'
                Node: ) = ')'
                Node: block = '{
        // Firestoreからユーザー情報を取得
        // TODO: FirestoreServiceを使用してユーザー情報を取得
        final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );

        state = AuthState.authenticated(user);
      }'
                  Node: { = '{'
                  Node: comment = '// Firestoreからユーザー情報を取得'
                    Node: // = '//'
                  Node: comment = '// TODO: FirestoreServiceを使用してユーザー情報を取得'
                    Node: // = '//'
                  Node: local_variable_declaration = 'final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        );'
                    Node: initialized_variable_definition = 'final user = AppUser(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                      Node: final_builtin = 'final'
                        Node: final = 'final'
                      Node: identifier = 'user'
                      Node: = = '='
                      Node: identifier = 'AppUser'
                      Node: selector = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                        Node: argument_part = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                          Node: arguments = '(
          id: firebaseUser.uid,
          displayName: firebaseUser.displayName ?? 'Unknown User',
          email: firebaseUser.email,
          photoURL: firebaseUser.photoURL,
          provider: 'line',
        )'
                            Node: ( = '('
                            Node: named_argument = 'id: firebaseUser.uid'
                              Node: label = 'id:'
                                Node: identifier = 'id'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.uid'
                                Node: unconditional_assignable_selector = '.uid'
                                  Node: . = '.'
                                  Node: identifier = 'uid'
                            Node: , = ','
                            Node: named_argument = 'displayName: firebaseUser.displayName ?? 'Unknown User''
                              Node: label = 'displayName:'
                                Node: identifier = 'displayName'
                                Node: : = ':'
                              Node: if_null_expression = 'firebaseUser.displayName ?? 'Unknown User''
                                Node: identifier = 'firebaseUser'
                                Node: selector = '.displayName'
                                  Node: unconditional_assignable_selector = '.displayName'
                                    Node: . = '.'
                                    Node: identifier = 'displayName'
                                Node: ?? = '??'
                                Node: string_literal = ''Unknown User''
                                  Node: ' = '''
                                  Node: ' = '''
                            Node: , = ','
                            Node: named_argument = 'email: firebaseUser.email'
                              Node: label = 'email:'
                                Node: identifier = 'email'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.email'
                                Node: unconditional_assignable_selector = '.email'
                                  Node: . = '.'
                                  Node: identifier = 'email'
                            Node: , = ','
                            Node: named_argument = 'photoURL: firebaseUser.photoURL'
                              Node: label = 'photoURL:'
                                Node: identifier = 'photoURL'
                                Node: : = ':'
                              Node: identifier = 'firebaseUser'
                              Node: selector = '.photoURL'
                                Node: unconditional_assignable_selector = '.photoURL'
                                  Node: . = '.'
                                  Node: identifier = 'photoURL'
                            Node: , = ','
                            Node: named_argument = 'provider: 'line''
                              Node: label = 'provider:'
                                Node: identifier = 'provider'
                                Node: : = ':'
                              Node: string_literal = ''line''
                                Node: ' = '''
                                Node: ' = '''
                            Node: , = ','
                            Node: ) = ')'
                    Node: ; = ';'
                  Node: expression_statement = 'state = AuthState.authenticated(user);'
                    Node: assignment_expression = 'state = AuthState.authenticated(user)'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: identifier = 'AuthState'
                      Node: selector = '.authenticated'
                        Node: unconditional_assignable_selector = '.authenticated'
                          Node: . = '.'
                          Node: identifier = 'authenticated'
                      Node: selector = '(user)'
                        Node: argument_part = '(user)'
                          Node: arguments = '(user)'
                            Node: ( = '('
                            Node: argument = 'user'
                              Node: identifier = 'user'
                            Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
                Node: else = 'else'
                Node: block = '{
        state = const AuthState.unauthenticated();
      }'
                  Node: { = '{'
                  Node: expression_statement = 'state = const AuthState.unauthenticated();'
                    Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                      Node: assignable_expression = 'state'
                        Node: identifier = 'state'
                      Node: = = '='
                      Node: const_object_expression = 'const AuthState.unauthenticated()'
                        Node: const_builtin = 'const'
                        Node: type_identifier = 'AuthState'
                        Node: . = '.'
                        Node: identifier = 'unauthenticated'
                        Node: arguments = '()'
                          Node: ( = '('
                          Node: ) = ')'
                    Node: ; = ';'
                  Node: } = '}'
              Node: } = '}'
            Node: catch_clause = 'catch (e)'
              Node: catch = 'catch'
              Node: catch_parameters = '(e)'
                Node: ( = '('
                Node: identifier = 'e'
                Node: ) = ')'
            Node: block = '{
      state = AuthState.error(e.toString());
    }'
              Node: { = '{'
              Node: expression_statement = 'state = AuthState.error(e.toString());'
                Node: assignment_expression = 'state = AuthState.error(e.toString())'
                  Node: assignable_expression = 'state'
                    Node: identifier = 'state'
                  Node: = = '='
                  Node: identifier = 'AuthState'
                  Node: selector = '.error'
                    Node: unconditional_assignable_selector = '.error'
                      Node: . = '.'
                      Node: identifier = 'error'
                  Node: selector = '(e.toString())'
                    Node: argument_part = '(e.toString())'
                      Node: arguments = '(e.toString())'
                        Node: ( = '('
                        Node: argument = 'e.toString()'
                          Node: identifier = 'e'
                          Node: selector = '.toString'
                            Node: unconditional_assignable_selector = '.toString'
                              Node: . = '.'
                              Node: identifier = 'toString'
                          Node: selector = '()'
                            Node: argument_part = '()'
                              Node: arguments = '()'
                                Node: ( = '('
                                Node: ) = ')'
                        Node: ) = ')'
                Node: ; = ';'
              Node: } = '}'
          Node: } = '}'
      Node: documentation_comment = '/// 認証状態の監視'
        Node: /// = '///'
      Node: method_signature = 'void listenToAuthChanges()'
        Node: function_signature = 'void listenToAuthChanges()'
          Node: void_type = 'void'
          Node: identifier = 'listenToAuthChanges'
          Node: formal_parameter_list = '()'
            Node: ( = '('
            Node: ) = ')'
      Node: function_body = '{
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }'
        Node: block = '{
    firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });
  }'
          Node: { = '{'
          Node: expression_statement = 'firebase_auth.FirebaseAuth.instance
        .authStateChanges()
        .listen((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    });'
            Node: identifier = 'firebase_auth'
            Node: selector = '.FirebaseAuth'
              Node: unconditional_assignable_selector = '.FirebaseAuth'
                Node: . = '.'
                Node: identifier = 'FirebaseAuth'
            Node: selector = '.instance'
              Node: unconditional_assignable_selector = '.instance'
                Node: . = '.'
                Node: identifier = 'instance'
            Node: selector = '.authStateChanges'
              Node: unconditional_assignable_selector = '.authStateChanges'
                Node: . = '.'
                Node: identifier = 'authStateChanges'
            Node: selector = '()'
              Node: argument_part = '()'
                Node: arguments = '()'
                  Node: ( = '('
                  Node: ) = ')'
            Node: selector = '.listen'
              Node: unconditional_assignable_selector = '.listen'
                Node: . = '.'
                Node: identifier = 'listen'
            Node: selector = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
              Node: argument_part = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
                Node: arguments = '((firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    })'
                  Node: ( = '('
                  Node: argument = '(firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                    Node: function_expression = '(firebaseUser) {
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                      Node: formal_parameter_list = '(firebaseUser)'
                        Node: ( = '('
                        Node: formal_parameter = 'firebaseUser'
                          Node: identifier = 'firebaseUser'
                        Node: ) = ')'
                      Node: function_expression_body = '{
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                        Node: block = '{
      if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }
    }'
                          Node: { = '{'
                          Node: if_statement = 'if (firebaseUser != null) {
        // ユーザーがログインしている場合
        getCurrentUser();
      } else {
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }'
                            Node: if = 'if'
                            Node: ( = '('
                            Node: equality_expression = 'firebaseUser != null'
                              Node: identifier = 'firebaseUser'
                              Node: equality_operator = '!='
                              Node: null_literal = 'null'
                                Node: null = 'null'
                            Node: ) = ')'
                            Node: block = '{
        // ユーザーがログインしている場合
        getCurrentUser();
      }'
                              Node: { = '{'
                              Node: comment = '// ユーザーがログインしている場合'
                                Node: // = '//'
                              Node: expression_statement = 'getCurrentUser();'
                                Node: identifier = 'getCurrentUser'
                                Node: selector = '()'
                                  Node: argument_part = '()'
                                    Node: arguments = '()'
                                      Node: ( = '('
                                      Node: ) = ')'
                                Node: ; = ';'
                              Node: } = '}'
                            Node: else = 'else'
                            Node: block = '{
        // ユーザーがログアウトしている場合
        state = const AuthState.unauthenticated();
      }'
                              Node: { = '{'
                              Node: comment = '// ユーザーがログアウトしている場合'
                                Node: // = '//'
                              Node: expression_statement = 'state = const AuthState.unauthenticated();'
                                Node: assignment_expression = 'state = const AuthState.unauthenticated()'
                                  Node: assignable_expression = 'state'
                                    Node: identifier = 'state'
                                  Node: = = '='
                                  Node: const_object_expression = 'const AuthState.unauthenticated()'
                                    Node: const_builtin = 'const'
                                    Node: type_identifier = 'AuthState'
                                    Node: . = '.'
                                    Node: identifier = 'unauthenticated'
                                    Node: arguments = '()'
                                      Node: ( = '('
                                      Node: ) = ')'
                                Node: ; = ';'
                              Node: } = '}'
                          Node: } = '}'
                  Node: ) = ')'
            Node: ; = ';'
          Node: } = '}'
      Node: } = '}'
  Node: documentation_comment = '/// 認証状態プロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'AuthState authState(Ref ref)'
    Node: type_identifier = 'AuthState'
    Node: identifier = 'authState'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}'
    Node: block = '{
  // 初回起動時に認証状態を監視開始
  ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });

  return ref.watch(authNotifierProvider);
}'
      Node: { = '{'
      Node: comment = '// 初回起動時に認証状態を監視開始'
        Node: // = '//'
      Node: expression_statement = 'ref.listen(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  });'
        Node: identifier = 'ref'
        Node: selector = '.listen'
          Node: unconditional_assignable_selector = '.listen'
            Node: . = '.'
            Node: identifier = 'listen'
        Node: selector = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
          Node: argument_part = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
            Node: arguments = '(authNotifierProvider, (previous, next) {
    // 認証状態が変更された時の処理
  })'
              Node: ( = '('
              Node: argument = 'authNotifierProvider'
                Node: identifier = 'authNotifierProvider'
              Node: , = ','
              Node: argument = '(previous, next) {
    // 認証状態が変更された時の処理
  }'
                Node: function_expression = '(previous, next) {
    // 認証状態が変更された時の処理
  }'
                  Node: formal_parameter_list = '(previous, next)'
                    Node: ( = '('
                    Node: formal_parameter = 'previous'
                      Node: identifier = 'previous'
                    Node: , = ','
                    Node: formal_parameter = 'next'
                      Node: identifier = 'next'
                    Node: ) = ')'
                  Node: function_expression_body = '{
    // 認証状態が変更された時の処理
  }'
                    Node: block = '{
    // 認証状態が変更された時の処理
  }'
                      Node: { = '{'
                      Node: comment = '// 認証状態が変更された時の処理'
                        Node: // = '//'
                      Node: } = '}'
              Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return ref.watch(authNotifierProvider);'
        Node: return = 'return'
        Node: identifier = 'ref'
        Node: selector = '.watch'
          Node: unconditional_assignable_selector = '.watch'
            Node: . = '.'
            Node: identifier = 'watch'
        Node: selector = '(authNotifierProvider)'
          Node: argument_part = '(authNotifierProvider)'
            Node: arguments = '(authNotifierProvider)'
              Node: ( = '('
              Node: argument = 'authNotifierProvider'
                Node: identifier = 'authNotifierProvider'
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
  Node: documentation_comment = '/// 現在のユーザープロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'AppUser? currentUser(Ref ref)'
    Node: type_identifier = 'AppUser'
    Node: nullable_type = '?'
      Node: ? = '?'
    Node: identifier = 'currentUser'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}'
    Node: block = '{
  final authState = ref.watch(authStateProvider);

  return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );
}'
      Node: { = '{'
      Node: local_variable_declaration = 'final authState = ref.watch(authStateProvider);'
        Node: initialized_variable_definition = 'final authState = ref.watch(authStateProvider)'
          Node: final_builtin = 'final'
            Node: final = 'final'
          Node: identifier = 'authState'
          Node: = = '='
          Node: identifier = 'ref'
          Node: selector = '.watch'
            Node: unconditional_assignable_selector = '.watch'
              Node: . = '.'
              Node: identifier = 'watch'
          Node: selector = '(authStateProvider)'
            Node: argument_part = '(authStateProvider)'
              Node: arguments = '(authStateProvider)'
                Node: ( = '('
                Node: argument = 'authStateProvider'
                  Node: identifier = 'authStateProvider'
                Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return authState.when(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  );'
        Node: return = 'return'
        Node: identifier = 'authState'
        Node: selector = '.when'
          Node: unconditional_assignable_selector = '.when'
            Node: . = '.'
            Node: identifier = 'when'
        Node: selector = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
          Node: argument_part = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
            Node: arguments = '(
    authenticated: (user) => user,
    initial: () => null,
    loading: () => null,
    unauthenticated: () => null,
    error: (_) => null,
  )'
              Node: ( = '('
              Node: named_argument = 'authenticated: (user) => user'
                Node: label = 'authenticated:'
                  Node: identifier = 'authenticated'
                  Node: : = ':'
                Node: function_expression = '(user) => user'
                  Node: formal_parameter_list = '(user)'
                    Node: ( = '('
                    Node: formal_parameter = 'user'
                      Node: identifier = 'user'
                    Node: ) = ')'
                  Node: function_expression_body = '=> user'
                    Node: => = '=>'
                    Node: identifier = 'user'
              Node: , = ','
              Node: named_argument = 'initial: () => null'
                Node: label = 'initial:'
                  Node: identifier = 'initial'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'loading: () => null'
                Node: label = 'loading:'
                  Node: identifier = 'loading'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'unauthenticated: () => null'
                Node: label = 'unauthenticated:'
                  Node: identifier = 'unauthenticated'
                  Node: : = ':'
                Node: function_expression = '() => null'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: named_argument = 'error: (_) => null'
                Node: label = 'error:'
                  Node: identifier = 'error'
                  Node: : = ':'
                Node: function_expression = '(_) => null'
                  Node: formal_parameter_list = '(_)'
                    Node: ( = '('
                    Node: formal_parameter = '_'
                      Node: identifier = '_'
                    Node: ) = ')'
                  Node: function_expression_body = '=> null'
                    Node: => = '=>'
                    Node: null_literal = 'null'
                      Node: null = 'null'
              Node: , = ','
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
  Node: documentation_comment = '/// 認証済みかどうかのプロバイダー'
    Node: /// = '///'
  Node: annotation = '@riverpod'
    Node: @ = '@'
    Node: identifier = 'riverpod'
  Node: function_signature = 'bool isAuthenticated(Ref ref)'
    Node: type_identifier = 'bool'
    Node: identifier = 'isAuthenticated'
    Node: formal_parameter_list = '(Ref ref)'
      Node: ( = '('
      Node: formal_parameter = 'Ref ref'
        Node: type_identifier = 'Ref'
        Node: identifier = 'ref'
      Node: ) = ')'
  Node: function_body = '{
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}'
    Node: block = '{
  final authState = ref.watch(authStateProvider);

  return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );
}'
      Node: { = '{'
      Node: local_variable_declaration = 'final authState = ref.watch(authStateProvider);'
        Node: initialized_variable_definition = 'final authState = ref.watch(authStateProvider)'
          Node: final_builtin = 'final'
            Node: final = 'final'
          Node: identifier = 'authState'
          Node: = = '='
          Node: identifier = 'ref'
          Node: selector = '.watch'
            Node: unconditional_assignable_selector = '.watch'
              Node: . = '.'
              Node: identifier = 'watch'
          Node: selector = '(authStateProvider)'
            Node: argument_part = '(authStateProvider)'
              Node: arguments = '(authStateProvider)'
                Node: ( = '('
                Node: argument = 'authStateProvider'
                  Node: identifier = 'authStateProvider'
                Node: ) = ')'
        Node: ; = ';'
      Node: return_statement = 'return authState.maybeWhen(
    authenticated: (_) => true,
    orElse: () => false,
  );'
        Node: return = 'return'
        Node: identifier = 'authState'
        Node: selector = '.maybeWhen'
          Node: unconditional_assignable_selector = '.maybeWhen'
            Node: . = '.'
            Node: identifier = 'maybeWhen'
        Node: selector = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
          Node: argument_part = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
            Node: arguments = '(
    authenticated: (_) => true,
    orElse: () => false,
  )'
              Node: ( = '('
              Node: named_argument = 'authenticated: (_) => true'
                Node: label = 'authenticated:'
                  Node: identifier = 'authenticated'
                  Node: : = ':'
                Node: function_expression = '(_) => true'
                  Node: formal_parameter_list = '(_)'
                    Node: ( = '('
                    Node: formal_parameter = '_'
                      Node: identifier = '_'
                    Node: ) = ')'
                  Node: function_expression_body = '=> true'
                    Node: => = '=>'
                    Node: true = 'true'
                      Node: true = 'true'
              Node: , = ','
              Node: named_argument = 'orElse: () => false'
                Node: label = 'orElse:'
                  Node: identifier = 'orElse'
                  Node: : = ':'
                Node: function_expression = '() => false'
                  Node: formal_parameter_list = '()'
                    Node: ( = '('
                    Node: ) = ')'
                  Node: function_expression_body = '=> false'
                    Node: => = '=>'
                    Node: false = 'false'
                      Node: false = 'false'
              Node: , = ','
              Node: ) = ')'
        Node: ; = ';'
      Node: } = '}'
=== End AST ===
